<%- include('partials/header') -%>
<body>
    <div class="container mt-2">
        <div class="row mt-3">
            <div class="col-md-10 offset-md-1">
                <div class="card">
                    <div class="card-header">
                        <h4
                            style="margin: 0; text-align: center"
                            class="font-weight-bold"
                        >
                            Permission Operation
                        </h4>
                    </div>
                    <div class="card-body">
                        <table
                            class="table table-bordered"
                            style="
                                font-size: 18px;
                                text-align: center;
                                vertical-align: middle;
                            "
                        >
                            <thead>
                                <tr>
                                    <th>Data Requester</th>
                                    <th>Data Custodian</th>
                                    <th>Authorized Datatype / Data</th>
                                    <th>authorized time</th>
                                    <th>operation</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% permissionData.forEach(({requestName,
                                authorizedData}) => { %> <%
                                authorizedData.forEach(({dataType,custodian,
                                startTime, endTime, operation}) => { %>
                                <tr>
                                    <td>
                                        <%= ALLdataRequesters.find(rq =>
                                        rq.address === requestName)?.name ||
                                        requestName %>
                                    </td>
                                    <td><%= custodian %></td>
                                    <td><%= dataType %></td>
                                    <td
                                        class="<%= startTime === '0' && endTime === '-1' ? 'empty-cell' : '' %>"
                                    >
                                        <% if (startTime !== '0' || endTime !==
                                        '-1') { %> <%= startTime %> - <%=
                                        endTime %> <% } %>
                                    </td>

                                    <td>
                                        <button
                                            class="revoke btn btn-danger"
                                            data-requestname="<%= requestName %>"
                                            data-custodian="<%= custodian %>"
                                            data-authorizeddata="<%= dataType %>"
                                        >
                                            revoke
                                        </button>
                                    </td>
                                </tr>
                                <% }); %> <% }); %>
                            </tbody>
                        </table>

                        <button
                            type="button"
                            data-toggle="modal"
                            data-target="#authorizeModal"
                            class="btn btn-primary btn-lg btn-block authorize"
                        >
                            Authorize
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal -->

    <div
        class="modal fade"
        id="authorizeModal"
        data-backdrop="static"
        data-keyboard="false"
        tabindex="-1"
        aria-hidden="true"
    >
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Authorize</h5>
                    <button
                        type="button"
                        class="close"
                        data-dismiss="modal"
                        aria-label="Close"
                    >
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body">
                    <div>
                        <label
                            for="authorizeRange"
                            class="form-label p-2 font-weight-bold"
                            >Authorization fine-grained:</label
                        >
                        <span id="authorizeLabel"></span>
                    </div>
                    <input
                        type="range"
                        class="form-range"
                        min="0"
                        max="2"
                        step="1"
                        id="authorizeRange"
                    />
                    <div id="formA" class="d-none">
                        <div class="input-group mt-3">
                            <div class="input-group-prepend">
                                <span id="" class="input-group-text"
                                    >Requester Name</span
                                >
                            </div>
                            <select
                                class="form-select form-control"
                                id="rqname_A"
                            >
                                <option value="" disabled selected>
                                    Select the requester name you want to
                                    Authorize
                                </option>
                                <% for (var i = 0; i < ALLdataRequesters.length;
                                i++) { %>
                                <option
                                    value="<%= ALLdataRequesters[i].name %>"
                                >
                                    <%= ALLdataRequesters[i].name %>
                                </option>
                                <% } %>
                            </select>
                        </div>
                        <div class="input-group mt-3">
                            <div class="input-group-prepend">
                                <span id="" class="input-group-text"
                                    >Data Custodian</span
                                >
                            </div>
                            <input
                                id="custodian_A"
                                type="text"
                                placeholder=""
                                required="required"
                                class="form-control"
                            />
                        </div>
                        <div class="input-group mt-3">
                            <div class="input-group-prepend">
                                <span id="" class="input-group-text"
                                    >data type</span
                                >
                            </div>
                            <select
                                class="form-select form-control"
                                id="data_A"
                            >
                                <option value="" disabled selected>
                                    Select data type
                                </option>
                                <option value="Heartrates">Heart rates</option>
                                <option value="Stepstaken">Steps taken</option>
                                <option value="Bodytemperature">
                                    Body temperature
                                </option>
                                <option value="Systolicbloodpressure">
                                    Systolic Blood pressure
                                </option>
                                <option value="Diastolicbloodpressure">
                                    Diastolic Blood pressure
                                </option>
                            </select>
                        </div>
                        <div class="input-group mt-3">
                            <div class="input-group-prepend">
                                <span id="" class="input-group-text"
                                    >start time</span
                                >
                            </div>
                            <input
                                type="text"
                                placeholder=""
                                readonly="readonly"
                                class="form-control"
                            />
                        </div>
                        <div class="input-group mt-3">
                            <div class="input-group-prepend">
                                <span id="" class="input-group-text"
                                    >end time</span
                                >
                            </div>
                            <input
                                type="text"
                                placeholder=""
                                readonly="readonly"
                                class="form-control"
                            />
                        </div>
                    </div>
                    <div id="formB" class="">
                        <div class="input-group mt-3">
                            <div class="input-group-prepend">
                                <span id="" class="input-group-text"
                                    >Requester Name</span
                                >
                            </div>
                            <select
                                class="form-select form-control"
                                id="rqname_B"
                            >
                                <option value="" disabled selected>
                                    Select the requester name you want to
                                    Authorize
                                </option>
                                <% for (var i = 0; i < ALLdataRequesters.length;
                                i++) { %>
                                <option
                                    value="<%= ALLdataRequesters[i].name %>"
                                >
                                    <%= ALLdataRequesters[i].name %>
                                </option>
                                <% } %>
                            </select>
                        </div>
                        <div class="input-group mt-3">
                            <div class="input-group-prepend">
                                <span id="" class="input-group-text"
                                    >Data Custodian</span
                                >
                            </div>
                            <input
                                id="custodian_B"
                                type="text"
                                placeholder=""
                                required="required"
                                class="form-control"
                            />
                        </div>
                        <div class="input-group mt-3">
                            <div class="input-group-prepend">
                                <span id="" class="input-group-text"
                                    >data type</span
                                >
                            </div>
                            <select
                                class="form-select form-control"
                                id="data_B"
                            >
                                <option value="" disabled selected>
                                    Select data type
                                </option>
                                <option value="Heartrates">Heart rates</option>
                                <option value="Stepstaken">Steps taken</option>
                                <option value="Bodytemperature">
                                    Body temperature
                                </option>
                                <option value="Systolicbloodpressure">
                                    Systolic Blood pressure
                                </option>
                                <option value="Diastolicbloodpressure">
                                    Diastolic Blood pressure
                                </option>
                            </select>
                        </div>
                        <div class="input-group mt-3">
                            <div class="input-group-prepend">
                                <span id="" class="input-group-text"
                                    >start time</span
                                >
                            </div>
                            <input
                                id="starttime"
                                type="text"
                                name="starttime"
                                placeholder=""
                                required="required"
                                class="form-control"
                            />
                        </div>
                        <div class="input-group mt-3">
                            <div class="input-group-prepend">
                                <span id="" class="input-group-text"
                                    >end time</span
                                >
                            </div>
                            <input
                                id="endtime"
                                type="text"
                                name="endtime"
                                placeholder=""
                                required="required"
                                class="form-control"
                            />
                        </div>
                    </div>
                    <div id="formC" class="d-none">
                        <div class="input-group mt-3">
                            <div class="input-group-prepend">
                                <span id="" class="input-group-text"
                                    >Requester Name</span
                                >
                            </div>
                            <select
                                class="form-select form-control"
                                id="rqname_C"
                            >
                                <option value="" disabled selected>
                                    Select the requester name you want to
                                    Authorize
                                </option>
                                <% for (var i = 0; i < ALLdataRequesters.length;
                                i++) { %>
                                <option
                                    value="<%= ALLdataRequesters[i].name %>"
                                >
                                    <%= ALLdataRequesters[i].name %>
                                </option>
                                <% } %>
                            </select>
                        </div>
                        <div class="input-group mt-3">
                            <div class="input-group-prepend">
                                <span id="" class="input-group-text"
                                    >Data Custodian</span
                                >
                            </div>
                            <input
                                id="custodian_C"
                                type="text"
                                placeholder=""
                                required="required"
                                class="form-control"
                            />
                        </div>
                        <div class="input-group mt-3">
                            <div class="input-group-prepend">
                                <span id="" class="input-group-text"
                                    >Data ID</span
                                >
                            </div>
                            <input
                                id="data_C"
                                type="text"
                                placeholder=""
                                required="required"
                                class="form-control"
                            />
                        </div>
                    </div>
                    <div>
                        <input
                            id="authorizeSubmit"
                            type="submit"
                            value="submit"
                            class="btn btn-success btn-lg btn-block mt-4 authorizeSubmit"
                        />
                    </div>
                    <div class="row mt-1"></div>
                </div>
            </div>
        </div>
    </div>
</body>

<script>
    var identityManagerABI, personalIdentityABI;
    var account;
    var contract_address = '<%= contract_address %>';
    const ALLdataRequesters = JSON.parse(
        '<%- JSON.stringify(ALLdataRequesters) %>'
    );
    const preventMalleability = (sig, ecdsa) => {
        const halfOrder = ecdsa.n.shrn(1);
        if (sig.s.cmp(halfOrder) === 1) {
            const bigNum = ecdsa.n;
            sig.s = bigNum.sub(sig.s);
        }
        return sig;
    };

    function sign(privateKey, digest) {
        const signKey = ecdsa.keyFromPrivate(privateKey, 'hex');
        const sig = ecdsa.sign(Buffer.from(digest, 'hex'), signKey);
        var halfOrderSig = preventMalleability(sig, ecdsa);
        const signature = Buffer.from(halfOrderSig.toDER());
        var signature_string = '';
        for (var i = 0; i < signature.length; i++) {
            signature_string += signature[i].toString();
            signature_string += '/';
        }
        signature_string = signature_string.slice(0, -1);
        return signature_string;
    }

    function ajaxAwait(url, data) {
        return new Promise((resolve, reject) => {
            $.ajax({
                type: 'POST',
                url: url,
                dataType: 'json',
                data: data,
                success: function (res) {
                    console.log('success');
                    resolve(res);
                },
                fail: function (xhr, ajaxOptions, thrownError) {
                    console.log('fail');
                    reject(false);
                },
            });
        });
    }

    window.onload = function () {
        const authorizeRange = document.getElementById('authorizeRange');
        const authorizeLabel = document.getElementById('authorizeLabel');

        const formA = document.getElementById('formA');
        const formB = document.getElementById('formB');
        const formC = document.getElementById('formC');

        authorizeRange.addEventListener('input', (e) => {
            switch (parseInt(e.target.value)) {
                case 0:
                    authorizeLabel.innerHTML = 'dataTYPE';
                    formA.classList.remove('d-none');
                    formB.classList.add('d-none');
                    formC.classList.add('d-none');
                    break;
                case 1:
                    authorizeLabel.innerHTML = 'Time-Limited Authorization';
                    formA.classList.add('d-none');
                    formB.classList.remove('d-none');
                    formC.classList.add('d-none');
                    break;
                case 2:
                    authorizeLabel.innerHTML = 'dataID';
                    formA.classList.add('d-none');
                    formB.classList.add('d-none');
                    formC.classList.remove('d-none');
                    break;
            }
        });
    };

    async function buildListener() {
        var identityManagerInstance = new web3.eth.Contract(
            identityManagerABI,
            contract_address
        );
        var personalIdentityAddress = await identityManagerInstance.methods
            .getAccessManagerAddress(account)
            .call({ from: account });
        var personalIdentityInstance = new web3.eth.Contract(
            personalIdentityABI,
            personalIdentityAddress
        );
        $('.authorizeSubmit').on('click', async function (e) {
            e.preventDefault();

            // 取得使用者拉霸的值
            var authorizeValue = $('#authorizeRange').val();

            // 根據使用者拉霸的值來決定要讀取哪個表單的資料
            var rqname, data, custodian, starttime, endtime;

            switch (authorizeValue) {
                case '0':
                    rqname = $('#rqname_A').val();
                    custodian = $('#custodian_A').val();
                    data = $('#data_A').val();
                    starttime = 0;
                    endtime = -1;
                    break;
                case '1':
                    rqname = $('#rqname_B').val();
                    custodian = $('#custodian_B').val();
                    data = $('#data_B').val();
                    starttime = $('#starttime').val();
                    endtime = $('#endtime').val();
                    break;
                case '2':
                    rqname = $('#rqname_C').val();
                    custodian = $('#custodian_C').val();
                    data = $('#data_C').val();
                    starttime = 0;
                    endtime = -1;
                    break;
            }
            // 在 ALLdataRequesters 中找到對應的物件
            const selectedRequester = ALLdataRequesters.find(
                (rq) => rq.name === rqname
            );
            // 獲取該物件的 address 欄位
            const selectedAddress = selectedRequester.address;
            let response, result;
            response = await ajaxAwait(
                '/appChain/DataBroker/updatePermission',
                {
                    rqname: selectedAddress,
                    custodian: custodian,
                    data: data,
                    starttime: starttime,
                    endtime: endtime,
                }
            );
            console.log('response = ' + response);
            if (response.error) {
                return alert(`error :${response.result}`);
            }
            let encryptKey = await personalIdentityInstance.methods
                .getEncryptMaterial('HLFPrivateKey')
                .call({ from: account });
            let privateKey = await ethereum.request({
                method: 'eth_decrypt',
                params: [encryptKey, account],
            });
            let signature_string;
            signature_string = sign(privateKey, response.digest);
            response = await ajaxAwait(
                '/appChain/DataBroker/proposalAndCreateCommit',
                { signature: signature_string, func: 'UpdatePermission' }
            );
            if (response.error) {
                return alert(`error :${response.result}`);
            }

            result = response.result;
            signature_string = sign(privateKey, response.commitDigest);
            response = await ajaxAwait('/appChain/DataBroker/commitSend', {
                signature: signature_string,
                func: 'UpdatePermission',
            });
            if (response.error) {
                return alert(`error: ${response.result}`);
            }

            if (alert(`${result}`)) {
                window.location.reload();
            }
            window.location.reload();
        });

        $('.revoke').on('click', async function (e) {
            const rqname = $(this).data('requestname');
            const custodian = $(this).data('custodian');
            const data = $(this).data('authorizeddata');

            let encryptKey = await personalIdentityInstance.methods
                .getEncryptMaterial('HLFPrivateKey')
                .call({ from: account });
            let privateKey = await ethereum.request({
                method: 'eth_decrypt',
                params: [encryptKey, account],
            });
            let signature_string, response, result;

            response = await ajaxAwait(
                '/appChain/DataBroker/revokePermission',
                { rqname: rqname, custodian: custodian, data: data }
            );
            if (response.error) {
                return alert(`error :${response.result}`);
            }

            signature_string = sign(privateKey, response.digest);
            response = await ajaxAwait(
                '/appChain/DataBroker/proposalAndCreateCommit',
                { signature: signature_string, func: 'RevokePermission' }
            );
            if (response.error) {
                return alert(`error :${response.result}`);
            }
            result = response.result;

            signature_string = sign(privateKey, response.commitDigest);
            response = await ajaxAwait('/appChain/DataBroker/commitSend', {
                signature: signature_string,
                func: 'RevokePermission',
            });
            if (response.error) {
                return alert(`error: ${response.result}`);
            }

            if (alert(`${result}`)) {
                window.location.reload();
            }
            $.ajax({
                type: 'POST',
                url: '/appChain/DataBroker/revokeAuthorizeList',
                data: {
                    rqname: rqname,
                    custodian: custodian,
                    data: data,
                },
                success: function (response) {
                    console.log(response);
                },
                error: function (xhr, status, error) {
                    console.log(xhr);
                },
            });
        });
    }

    async function main() {
        let accounts = await web3.eth.getAccounts();
        account = accounts[0];
        identityManagerABI = await fetch(
            '../../contracts/IdentityManager.json'
        );
        personalIdentityABI = await fetch(
            '../../contracts/PersonalIdentity.json'
        );
        identityManagerABI = await identityManagerABI.json();
        identityManagerABI = identityManagerABI.abi;
        personalIdentityABI = await personalIdentityABI.json();
        personalIdentityABI = personalIdentityABI.abi;

        // console.log('identityManagerABI = '+JSON.stringify(identityManagerABI));
        // console.log('personalIdentityABI = '+JSON.stringify(personalIdentityABI));

        buildListener();
    }

    main();
</script>

<%- include('partials/footer') -%>
