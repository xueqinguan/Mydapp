(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "abi/5.5.0";
    
    },{}],2:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultAbiCoder = exports.AbiCoder = void 0;
    // See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI
    var bytes_1 = require("@ethersproject/bytes");
    var properties_1 = require("@ethersproject/properties");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var abstract_coder_1 = require("./coders/abstract-coder");
    var address_1 = require("./coders/address");
    var array_1 = require("./coders/array");
    var boolean_1 = require("./coders/boolean");
    var bytes_2 = require("./coders/bytes");
    var fixed_bytes_1 = require("./coders/fixed-bytes");
    var null_1 = require("./coders/null");
    var number_1 = require("./coders/number");
    var string_1 = require("./coders/string");
    var tuple_1 = require("./coders/tuple");
    var fragments_1 = require("./fragments");
    var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
    var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
    var AbiCoder = /** @class */ (function () {
        function AbiCoder(coerceFunc) {
            var _newTarget = this.constructor;
            logger.checkNew(_newTarget, AbiCoder);
            (0, properties_1.defineReadOnly)(this, "coerceFunc", coerceFunc || null);
        }
        AbiCoder.prototype._getCoder = function (param) {
            var _this = this;
            switch (param.baseType) {
                case "address":
                    return new address_1.AddressCoder(param.name);
                case "bool":
                    return new boolean_1.BooleanCoder(param.name);
                case "string":
                    return new string_1.StringCoder(param.name);
                case "bytes":
                    return new bytes_2.BytesCoder(param.name);
                case "array":
                    return new array_1.ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
                case "tuple":
                    return new tuple_1.TupleCoder((param.components || []).map(function (component) {
                        return _this._getCoder(component);
                    }), param.name);
                case "":
                    return new null_1.NullCoder(param.name);
            }
            // u?int[0-9]*
            var match = param.type.match(paramTypeNumber);
            if (match) {
                var size = parseInt(match[2] || "256");
                if (size === 0 || size > 256 || (size % 8) !== 0) {
                    logger.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
                }
                return new number_1.NumberCoder(size / 8, (match[1] === "int"), param.name);
            }
            // bytes[0-9]+
            match = param.type.match(paramTypeBytes);
            if (match) {
                var size = parseInt(match[1]);
                if (size === 0 || size > 32) {
                    logger.throwArgumentError("invalid bytes length", "param", param);
                }
                return new fixed_bytes_1.FixedBytesCoder(size, param.name);
            }
            return logger.throwArgumentError("invalid type", "type", param.type);
        };
        AbiCoder.prototype._getWordSize = function () { return 32; };
        AbiCoder.prototype._getReader = function (data, allowLoose) {
            return new abstract_coder_1.Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
        };
        AbiCoder.prototype._getWriter = function () {
            return new abstract_coder_1.Writer(this._getWordSize());
        };
        AbiCoder.prototype.getDefaultValue = function (types) {
            var _this = this;
            var coders = types.map(function (type) { return _this._getCoder(fragments_1.ParamType.from(type)); });
            var coder = new tuple_1.TupleCoder(coders, "_");
            return coder.defaultValue();
        };
        AbiCoder.prototype.encode = function (types, values) {
            var _this = this;
            if (types.length !== values.length) {
                logger.throwError("types/values length mismatch", logger_1.Logger.errors.INVALID_ARGUMENT, {
                    count: { types: types.length, values: values.length },
                    value: { types: types, values: values }
                });
            }
            var coders = types.map(function (type) { return _this._getCoder(fragments_1.ParamType.from(type)); });
            var coder = (new tuple_1.TupleCoder(coders, "_"));
            var writer = this._getWriter();
            coder.encode(writer, values);
            return writer.data;
        };
        AbiCoder.prototype.decode = function (types, data, loose) {
            var _this = this;
            var coders = types.map(function (type) { return _this._getCoder(fragments_1.ParamType.from(type)); });
            var coder = new tuple_1.TupleCoder(coders, "_");
            return coder.decode(this._getReader((0, bytes_1.arrayify)(data), loose));
        };
        return AbiCoder;
    }());
    exports.AbiCoder = AbiCoder;
    exports.defaultAbiCoder = new AbiCoder();
    
    },{"./_version":1,"./coders/abstract-coder":3,"./coders/address":4,"./coders/array":6,"./coders/boolean":7,"./coders/bytes":8,"./coders/fixed-bytes":9,"./coders/null":10,"./coders/number":11,"./coders/string":12,"./coders/tuple":13,"./fragments":14,"@ethersproject/bytes":31,"@ethersproject/logger":56,"@ethersproject/properties":62}],3:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Reader = exports.Writer = exports.Coder = exports.checkResultErrors = void 0;
    var bytes_1 = require("@ethersproject/bytes");
    var bignumber_1 = require("@ethersproject/bignumber");
    var properties_1 = require("@ethersproject/properties");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("../_version");
    var logger = new logger_1.Logger(_version_1.version);
    function checkResultErrors(result) {
        // Find the first error (if any)
        var errors = [];
        var checkErrors = function (path, object) {
            if (!Array.isArray(object)) {
                return;
            }
            for (var key in object) {
                var childPath = path.slice();
                childPath.push(key);
                try {
                    checkErrors(childPath, object[key]);
                }
                catch (error) {
                    errors.push({ path: childPath, error: error });
                }
            }
        };
        checkErrors([], result);
        return errors;
    }
    exports.checkResultErrors = checkResultErrors;
    var Coder = /** @class */ (function () {
        function Coder(name, type, localName, dynamic) {
            // @TODO: defineReadOnly these
            this.name = name;
            this.type = type;
            this.localName = localName;
            this.dynamic = dynamic;
        }
        Coder.prototype._throwError = function (message, value) {
            logger.throwArgumentError(message, this.localName, value);
        };
        return Coder;
    }());
    exports.Coder = Coder;
    var Writer = /** @class */ (function () {
        function Writer(wordSize) {
            (0, properties_1.defineReadOnly)(this, "wordSize", wordSize || 32);
            this._data = [];
            this._dataLength = 0;
            this._padding = new Uint8Array(wordSize);
        }
        Object.defineProperty(Writer.prototype, "data", {
            get: function () {
                return (0, bytes_1.hexConcat)(this._data);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Writer.prototype, "length", {
            get: function () { return this._dataLength; },
            enumerable: false,
            configurable: true
        });
        Writer.prototype._writeData = function (data) {
            this._data.push(data);
            this._dataLength += data.length;
            return data.length;
        };
        Writer.prototype.appendWriter = function (writer) {
            return this._writeData((0, bytes_1.concat)(writer._data));
        };
        // Arrayish items; padded on the right to wordSize
        Writer.prototype.writeBytes = function (value) {
            var bytes = (0, bytes_1.arrayify)(value);
            var paddingOffset = bytes.length % this.wordSize;
            if (paddingOffset) {
                bytes = (0, bytes_1.concat)([bytes, this._padding.slice(paddingOffset)]);
            }
            return this._writeData(bytes);
        };
        Writer.prototype._getValue = function (value) {
            var bytes = (0, bytes_1.arrayify)(bignumber_1.BigNumber.from(value));
            if (bytes.length > this.wordSize) {
                logger.throwError("value out-of-bounds", logger_1.Logger.errors.BUFFER_OVERRUN, {
                    length: this.wordSize,
                    offset: bytes.length
                });
            }
            if (bytes.length % this.wordSize) {
                bytes = (0, bytes_1.concat)([this._padding.slice(bytes.length % this.wordSize), bytes]);
            }
            return bytes;
        };
        // BigNumberish items; padded on the left to wordSize
        Writer.prototype.writeValue = function (value) {
            return this._writeData(this._getValue(value));
        };
        Writer.prototype.writeUpdatableValue = function () {
            var _this = this;
            var offset = this._data.length;
            this._data.push(this._padding);
            this._dataLength += this.wordSize;
            return function (value) {
                _this._data[offset] = _this._getValue(value);
            };
        };
        return Writer;
    }());
    exports.Writer = Writer;
    var Reader = /** @class */ (function () {
        function Reader(data, wordSize, coerceFunc, allowLoose) {
            (0, properties_1.defineReadOnly)(this, "_data", (0, bytes_1.arrayify)(data));
            (0, properties_1.defineReadOnly)(this, "wordSize", wordSize || 32);
            (0, properties_1.defineReadOnly)(this, "_coerceFunc", coerceFunc);
            (0, properties_1.defineReadOnly)(this, "allowLoose", allowLoose);
            this._offset = 0;
        }
        Object.defineProperty(Reader.prototype, "data", {
            get: function () { return (0, bytes_1.hexlify)(this._data); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reader.prototype, "consumed", {
            get: function () { return this._offset; },
            enumerable: false,
            configurable: true
        });
        // The default Coerce function
        Reader.coerce = function (name, value) {
            var match = name.match("^u?int([0-9]+)$");
            if (match && parseInt(match[1]) <= 48) {
                value = value.toNumber();
            }
            return value;
        };
        Reader.prototype.coerce = function (name, value) {
            if (this._coerceFunc) {
                return this._coerceFunc(name, value);
            }
            return Reader.coerce(name, value);
        };
        Reader.prototype._peekBytes = function (offset, length, loose) {
            var alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
            if (this._offset + alignedLength > this._data.length) {
                if (this.allowLoose && loose && this._offset + length <= this._data.length) {
                    alignedLength = length;
                }
                else {
                    logger.throwError("data out-of-bounds", logger_1.Logger.errors.BUFFER_OVERRUN, {
                        length: this._data.length,
                        offset: this._offset + alignedLength
                    });
                }
            }
            return this._data.slice(this._offset, this._offset + alignedLength);
        };
        Reader.prototype.subReader = function (offset) {
            return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
        };
        Reader.prototype.readBytes = function (length, loose) {
            var bytes = this._peekBytes(0, length, !!loose);
            this._offset += bytes.length;
            // @TODO: Make sure the length..end bytes are all 0?
            return bytes.slice(0, length);
        };
        Reader.prototype.readValue = function () {
            return bignumber_1.BigNumber.from(this.readBytes(this.wordSize));
        };
        return Reader;
    }());
    exports.Reader = Reader;
    
    },{"../_version":1,"@ethersproject/bignumber":29,"@ethersproject/bytes":31,"@ethersproject/logger":56,"@ethersproject/properties":62}],4:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddressCoder = void 0;
    var address_1 = require("@ethersproject/address");
    var bytes_1 = require("@ethersproject/bytes");
    var abstract_coder_1 = require("./abstract-coder");
    var AddressCoder = /** @class */ (function (_super) {
        __extends(AddressCoder, _super);
        function AddressCoder(localName) {
            return _super.call(this, "address", "address", localName, false) || this;
        }
        AddressCoder.prototype.defaultValue = function () {
            return "0x0000000000000000000000000000000000000000";
        };
        AddressCoder.prototype.encode = function (writer, value) {
            try {
                value = (0, address_1.getAddress)(value);
            }
            catch (error) {
                this._throwError(error.message, value);
            }
            return writer.writeValue(value);
        };
        AddressCoder.prototype.decode = function (reader) {
            return (0, address_1.getAddress)((0, bytes_1.hexZeroPad)(reader.readValue().toHexString(), 20));
        };
        return AddressCoder;
    }(abstract_coder_1.Coder));
    exports.AddressCoder = AddressCoder;
    
    },{"./abstract-coder":3,"@ethersproject/address":22,"@ethersproject/bytes":31}],5:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AnonymousCoder = void 0;
    var abstract_coder_1 = require("./abstract-coder");
    // Clones the functionality of an existing Coder, but without a localName
    var AnonymousCoder = /** @class */ (function (_super) {
        __extends(AnonymousCoder, _super);
        function AnonymousCoder(coder) {
            var _this = _super.call(this, coder.name, coder.type, undefined, coder.dynamic) || this;
            _this.coder = coder;
            return _this;
        }
        AnonymousCoder.prototype.defaultValue = function () {
            return this.coder.defaultValue();
        };
        AnonymousCoder.prototype.encode = function (writer, value) {
            return this.coder.encode(writer, value);
        };
        AnonymousCoder.prototype.decode = function (reader) {
            return this.coder.decode(reader);
        };
        return AnonymousCoder;
    }(abstract_coder_1.Coder));
    exports.AnonymousCoder = AnonymousCoder;
    
    },{"./abstract-coder":3}],6:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArrayCoder = exports.unpack = exports.pack = void 0;
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("../_version");
    var logger = new logger_1.Logger(_version_1.version);
    var abstract_coder_1 = require("./abstract-coder");
    var anonymous_1 = require("./anonymous");
    function pack(writer, coders, values) {
        var arrayValues = null;
        if (Array.isArray(values)) {
            arrayValues = values;
        }
        else if (values && typeof (values) === "object") {
            var unique_1 = {};
            arrayValues = coders.map(function (coder) {
                var name = coder.localName;
                if (!name) {
                    logger.throwError("cannot encode object for signature with missing names", logger_1.Logger.errors.INVALID_ARGUMENT, {
                        argument: "values",
                        coder: coder,
                        value: values
                    });
                }
                if (unique_1[name]) {
                    logger.throwError("cannot encode object for signature with duplicate names", logger_1.Logger.errors.INVALID_ARGUMENT, {
                        argument: "values",
                        coder: coder,
                        value: values
                    });
                }
                unique_1[name] = true;
                return values[name];
            });
        }
        else {
            logger.throwArgumentError("invalid tuple value", "tuple", values);
        }
        if (coders.length !== arrayValues.length) {
            logger.throwArgumentError("types/value length mismatch", "tuple", values);
        }
        var staticWriter = new abstract_coder_1.Writer(writer.wordSize);
        var dynamicWriter = new abstract_coder_1.Writer(writer.wordSize);
        var updateFuncs = [];
        coders.forEach(function (coder, index) {
            var value = arrayValues[index];
            if (coder.dynamic) {
                // Get current dynamic offset (for the future pointer)
                var dynamicOffset_1 = dynamicWriter.length;
                // Encode the dynamic value into the dynamicWriter
                coder.encode(dynamicWriter, value);
                // Prepare to populate the correct offset once we are done
                var updateFunc_1 = staticWriter.writeUpdatableValue();
                updateFuncs.push(function (baseOffset) {
                    updateFunc_1(baseOffset + dynamicOffset_1);
                });
            }
            else {
                coder.encode(staticWriter, value);
            }
        });
        // Backfill all the dynamic offsets, now that we know the static length
        updateFuncs.forEach(function (func) { func(staticWriter.length); });
        var length = writer.appendWriter(staticWriter);
        length += writer.appendWriter(dynamicWriter);
        return length;
    }
    exports.pack = pack;
    function unpack(reader, coders) {
        var values = [];
        // A reader anchored to this base
        var baseReader = reader.subReader(0);
        coders.forEach(function (coder) {
            var value = null;
            if (coder.dynamic) {
                var offset = reader.readValue();
                var offsetReader = baseReader.subReader(offset.toNumber());
                try {
                    value = coder.decode(offsetReader);
                }
                catch (error) {
                    // Cannot recover from this
                    if (error.code === logger_1.Logger.errors.BUFFER_OVERRUN) {
                        throw error;
                    }
                    value = error;
                    value.baseType = coder.name;
                    value.name = coder.localName;
                    value.type = coder.type;
                }
            }
            else {
                try {
                    value = coder.decode(reader);
                }
                catch (error) {
                    // Cannot recover from this
                    if (error.code === logger_1.Logger.errors.BUFFER_OVERRUN) {
                        throw error;
                    }
                    value = error;
                    value.baseType = coder.name;
                    value.name = coder.localName;
                    value.type = coder.type;
                }
            }
            if (value != undefined) {
                values.push(value);
            }
        });
        // We only output named properties for uniquely named coders
        var uniqueNames = coders.reduce(function (accum, coder) {
            var name = coder.localName;
            if (name) {
                if (!accum[name]) {
                    accum[name] = 0;
                }
                accum[name]++;
            }
            return accum;
        }, {});
        // Add any named parameters (i.e. tuples)
        coders.forEach(function (coder, index) {
            var name = coder.localName;
            if (!name || uniqueNames[name] !== 1) {
                return;
            }
            if (name === "length") {
                name = "_length";
            }
            if (values[name] != null) {
                return;
            }
            var value = values[index];
            if (value instanceof Error) {
                Object.defineProperty(values, name, {
                    enumerable: true,
                    get: function () { throw value; }
                });
            }
            else {
                values[name] = value;
            }
        });
        var _loop_1 = function (i) {
            var value = values[i];
            if (value instanceof Error) {
                Object.defineProperty(values, i, {
                    enumerable: true,
                    get: function () { throw value; }
                });
            }
        };
        for (var i = 0; i < values.length; i++) {
            _loop_1(i);
        }
        return Object.freeze(values);
    }
    exports.unpack = unpack;
    var ArrayCoder = /** @class */ (function (_super) {
        __extends(ArrayCoder, _super);
        function ArrayCoder(coder, length, localName) {
            var _this = this;
            var type = (coder.type + "[" + (length >= 0 ? length : "") + "]");
            var dynamic = (length === -1 || coder.dynamic);
            _this = _super.call(this, "array", type, localName, dynamic) || this;
            _this.coder = coder;
            _this.length = length;
            return _this;
        }
        ArrayCoder.prototype.defaultValue = function () {
            // Verifies the child coder is valid (even if the array is dynamic or 0-length)
            var defaultChild = this.coder.defaultValue();
            var result = [];
            for (var i = 0; i < this.length; i++) {
                result.push(defaultChild);
            }
            return result;
        };
        ArrayCoder.prototype.encode = function (writer, value) {
            if (!Array.isArray(value)) {
                this._throwError("expected array value", value);
            }
            var count = this.length;
            if (count === -1) {
                count = value.length;
                writer.writeValue(value.length);
            }
            logger.checkArgumentCount(value.length, count, "coder array" + (this.localName ? (" " + this.localName) : ""));
            var coders = [];
            for (var i = 0; i < value.length; i++) {
                coders.push(this.coder);
            }
            return pack(writer, coders, value);
        };
        ArrayCoder.prototype.decode = function (reader) {
            var count = this.length;
            if (count === -1) {
                count = reader.readValue().toNumber();
                // Check that there is *roughly* enough data to ensure
                // stray random data is not being read as a length. Each
                // slot requires at least 32 bytes for their value (or 32
                // bytes as a link to the data). This could use a much
                // tighter bound, but we are erroring on the side of safety.
                if (count * 32 > reader._data.length) {
                    logger.throwError("insufficient data length", logger_1.Logger.errors.BUFFER_OVERRUN, {
                        length: reader._data.length,
                        count: count
                    });
                }
            }
            var coders = [];
            for (var i = 0; i < count; i++) {
                coders.push(new anonymous_1.AnonymousCoder(this.coder));
            }
            return reader.coerce(this.name, unpack(reader, coders));
        };
        return ArrayCoder;
    }(abstract_coder_1.Coder));
    exports.ArrayCoder = ArrayCoder;
    
    },{"../_version":1,"./abstract-coder":3,"./anonymous":5,"@ethersproject/logger":56}],7:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BooleanCoder = void 0;
    var abstract_coder_1 = require("./abstract-coder");
    var BooleanCoder = /** @class */ (function (_super) {
        __extends(BooleanCoder, _super);
        function BooleanCoder(localName) {
            return _super.call(this, "bool", "bool", localName, false) || this;
        }
        BooleanCoder.prototype.defaultValue = function () {
            return false;
        };
        BooleanCoder.prototype.encode = function (writer, value) {
            return writer.writeValue(value ? 1 : 0);
        };
        BooleanCoder.prototype.decode = function (reader) {
            return reader.coerce(this.type, !reader.readValue().isZero());
        };
        return BooleanCoder;
    }(abstract_coder_1.Coder));
    exports.BooleanCoder = BooleanCoder;
    
    },{"./abstract-coder":3}],8:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BytesCoder = exports.DynamicBytesCoder = void 0;
    var bytes_1 = require("@ethersproject/bytes");
    var abstract_coder_1 = require("./abstract-coder");
    var DynamicBytesCoder = /** @class */ (function (_super) {
        __extends(DynamicBytesCoder, _super);
        function DynamicBytesCoder(type, localName) {
            return _super.call(this, type, type, localName, true) || this;
        }
        DynamicBytesCoder.prototype.defaultValue = function () {
            return "0x";
        };
        DynamicBytesCoder.prototype.encode = function (writer, value) {
            value = (0, bytes_1.arrayify)(value);
            var length = writer.writeValue(value.length);
            length += writer.writeBytes(value);
            return length;
        };
        DynamicBytesCoder.prototype.decode = function (reader) {
            return reader.readBytes(reader.readValue().toNumber(), true);
        };
        return DynamicBytesCoder;
    }(abstract_coder_1.Coder));
    exports.DynamicBytesCoder = DynamicBytesCoder;
    var BytesCoder = /** @class */ (function (_super) {
        __extends(BytesCoder, _super);
        function BytesCoder(localName) {
            return _super.call(this, "bytes", localName) || this;
        }
        BytesCoder.prototype.decode = function (reader) {
            return reader.coerce(this.name, (0, bytes_1.hexlify)(_super.prototype.decode.call(this, reader)));
        };
        return BytesCoder;
    }(DynamicBytesCoder));
    exports.BytesCoder = BytesCoder;
    
    },{"./abstract-coder":3,"@ethersproject/bytes":31}],9:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FixedBytesCoder = void 0;
    var bytes_1 = require("@ethersproject/bytes");
    var abstract_coder_1 = require("./abstract-coder");
    // @TODO: Merge this with bytes
    var FixedBytesCoder = /** @class */ (function (_super) {
        __extends(FixedBytesCoder, _super);
        function FixedBytesCoder(size, localName) {
            var _this = this;
            var name = "bytes" + String(size);
            _this = _super.call(this, name, name, localName, false) || this;
            _this.size = size;
            return _this;
        }
        FixedBytesCoder.prototype.defaultValue = function () {
            return ("0x0000000000000000000000000000000000000000000000000000000000000000").substring(0, 2 + this.size * 2);
        };
        FixedBytesCoder.prototype.encode = function (writer, value) {
            var data = (0, bytes_1.arrayify)(value);
            if (data.length !== this.size) {
                this._throwError("incorrect data length", value);
            }
            return writer.writeBytes(data);
        };
        FixedBytesCoder.prototype.decode = function (reader) {
            return reader.coerce(this.name, (0, bytes_1.hexlify)(reader.readBytes(this.size)));
        };
        return FixedBytesCoder;
    }(abstract_coder_1.Coder));
    exports.FixedBytesCoder = FixedBytesCoder;
    
    },{"./abstract-coder":3,"@ethersproject/bytes":31}],10:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NullCoder = void 0;
    var abstract_coder_1 = require("./abstract-coder");
    var NullCoder = /** @class */ (function (_super) {
        __extends(NullCoder, _super);
        function NullCoder(localName) {
            return _super.call(this, "null", "", localName, false) || this;
        }
        NullCoder.prototype.defaultValue = function () {
            return null;
        };
        NullCoder.prototype.encode = function (writer, value) {
            if (value != null) {
                this._throwError("not null", value);
            }
            return writer.writeBytes([]);
        };
        NullCoder.prototype.decode = function (reader) {
            reader.readBytes(0);
            return reader.coerce(this.name, null);
        };
        return NullCoder;
    }(abstract_coder_1.Coder));
    exports.NullCoder = NullCoder;
    
    },{"./abstract-coder":3}],11:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NumberCoder = void 0;
    var bignumber_1 = require("@ethersproject/bignumber");
    var constants_1 = require("@ethersproject/constants");
    var abstract_coder_1 = require("./abstract-coder");
    var NumberCoder = /** @class */ (function (_super) {
        __extends(NumberCoder, _super);
        function NumberCoder(size, signed, localName) {
            var _this = this;
            var name = ((signed ? "int" : "uint") + (size * 8));
            _this = _super.call(this, name, name, localName, false) || this;
            _this.size = size;
            _this.signed = signed;
            return _this;
        }
        NumberCoder.prototype.defaultValue = function () {
            return 0;
        };
        NumberCoder.prototype.encode = function (writer, value) {
            var v = bignumber_1.BigNumber.from(value);
            // Check bounds are safe for encoding
            var maxUintValue = constants_1.MaxUint256.mask(writer.wordSize * 8);
            if (this.signed) {
                var bounds = maxUintValue.mask(this.size * 8 - 1);
                if (v.gt(bounds) || v.lt(bounds.add(constants_1.One).mul(constants_1.NegativeOne))) {
                    this._throwError("value out-of-bounds", value);
                }
            }
            else if (v.lt(constants_1.Zero) || v.gt(maxUintValue.mask(this.size * 8))) {
                this._throwError("value out-of-bounds", value);
            }
            v = v.toTwos(this.size * 8).mask(this.size * 8);
            if (this.signed) {
                v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
            }
            return writer.writeValue(v);
        };
        NumberCoder.prototype.decode = function (reader) {
            var value = reader.readValue().mask(this.size * 8);
            if (this.signed) {
                value = value.fromTwos(this.size * 8);
            }
            return reader.coerce(this.name, value);
        };
        return NumberCoder;
    }(abstract_coder_1.Coder));
    exports.NumberCoder = NumberCoder;
    
    },{"./abstract-coder":3,"@ethersproject/bignumber":29,"@ethersproject/constants":35}],12:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StringCoder = void 0;
    var strings_1 = require("@ethersproject/strings");
    var bytes_1 = require("./bytes");
    var StringCoder = /** @class */ (function (_super) {
        __extends(StringCoder, _super);
        function StringCoder(localName) {
            return _super.call(this, "string", localName) || this;
        }
        StringCoder.prototype.defaultValue = function () {
            return "";
        };
        StringCoder.prototype.encode = function (writer, value) {
            return _super.prototype.encode.call(this, writer, (0, strings_1.toUtf8Bytes)(value));
        };
        StringCoder.prototype.decode = function (reader) {
            return (0, strings_1.toUtf8String)(_super.prototype.decode.call(this, reader));
        };
        return StringCoder;
    }(bytes_1.DynamicBytesCoder));
    exports.StringCoder = StringCoder;
    
    },{"./bytes":8,"@ethersproject/strings":99}],13:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TupleCoder = void 0;
    var abstract_coder_1 = require("./abstract-coder");
    var array_1 = require("./array");
    var TupleCoder = /** @class */ (function (_super) {
        __extends(TupleCoder, _super);
        function TupleCoder(coders, localName) {
            var _this = this;
            var dynamic = false;
            var types = [];
            coders.forEach(function (coder) {
                if (coder.dynamic) {
                    dynamic = true;
                }
                types.push(coder.type);
            });
            var type = ("tuple(" + types.join(",") + ")");
            _this = _super.call(this, "tuple", type, localName, dynamic) || this;
            _this.coders = coders;
            return _this;
        }
        TupleCoder.prototype.defaultValue = function () {
            var values = [];
            this.coders.forEach(function (coder) {
                values.push(coder.defaultValue());
            });
            // We only output named properties for uniquely named coders
            var uniqueNames = this.coders.reduce(function (accum, coder) {
                var name = coder.localName;
                if (name) {
                    if (!accum[name]) {
                        accum[name] = 0;
                    }
                    accum[name]++;
                }
                return accum;
            }, {});
            // Add named values
            this.coders.forEach(function (coder, index) {
                var name = coder.localName;
                if (!name || uniqueNames[name] !== 1) {
                    return;
                }
                if (name === "length") {
                    name = "_length";
                }
                if (values[name] != null) {
                    return;
                }
                values[name] = values[index];
            });
            return Object.freeze(values);
        };
        TupleCoder.prototype.encode = function (writer, value) {
            return (0, array_1.pack)(writer, this.coders, value);
        };
        TupleCoder.prototype.decode = function (reader) {
            return reader.coerce(this.name, (0, array_1.unpack)(reader, this.coders));
        };
        return TupleCoder;
    }(abstract_coder_1.Coder));
    exports.TupleCoder = TupleCoder;
    
    },{"./abstract-coder":3,"./array":6}],14:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ErrorFragment = exports.FunctionFragment = exports.ConstructorFragment = exports.EventFragment = exports.Fragment = exports.ParamType = exports.FormatTypes = void 0;
    var bignumber_1 = require("@ethersproject/bignumber");
    var properties_1 = require("@ethersproject/properties");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    ;
    var _constructorGuard = {};
    var ModifiersBytes = { calldata: true, memory: true, storage: true };
    var ModifiersNest = { calldata: true, memory: true };
    function checkModifier(type, name) {
        if (type === "bytes" || type === "string") {
            if (ModifiersBytes[name]) {
                return true;
            }
        }
        else if (type === "address") {
            if (name === "payable") {
                return true;
            }
        }
        else if (type.indexOf("[") >= 0 || type === "tuple") {
            if (ModifiersNest[name]) {
                return true;
            }
        }
        if (ModifiersBytes[name] || name === "payable") {
            logger.throwArgumentError("invalid modifier", "name", name);
        }
        return false;
    }
    // @TODO: Make sure that children of an indexed tuple are marked with a null indexed
    function parseParamType(param, allowIndexed) {
        var originalParam = param;
        function throwError(i) {
            logger.throwArgumentError("unexpected character at position " + i, "param", param);
        }
        param = param.replace(/\s/g, " ");
        function newNode(parent) {
            var node = { type: "", name: "", parent: parent, state: { allowType: true } };
            if (allowIndexed) {
                node.indexed = false;
            }
            return node;
        }
        var parent = { type: "", name: "", state: { allowType: true } };
        var node = parent;
        for (var i = 0; i < param.length; i++) {
            var c = param[i];
            switch (c) {
                case "(":
                    if (node.state.allowType && node.type === "") {
                        node.type = "tuple";
                    }
                    else if (!node.state.allowParams) {
                        throwError(i);
                    }
                    node.state.allowType = false;
                    node.type = verifyType(node.type);
                    node.components = [newNode(node)];
                    node = node.components[0];
                    break;
                case ")":
                    delete node.state;
                    if (node.name === "indexed") {
                        if (!allowIndexed) {
                            throwError(i);
                        }
                        node.indexed = true;
                        node.name = "";
                    }
                    if (checkModifier(node.type, node.name)) {
                        node.name = "";
                    }
                    node.type = verifyType(node.type);
                    var child = node;
                    node = node.parent;
                    if (!node) {
                        throwError(i);
                    }
                    delete child.parent;
                    node.state.allowParams = false;
                    node.state.allowName = true;
                    node.state.allowArray = true;
                    break;
                case ",":
                    delete node.state;
                    if (node.name === "indexed") {
                        if (!allowIndexed) {
                            throwError(i);
                        }
                        node.indexed = true;
                        node.name = "";
                    }
                    if (checkModifier(node.type, node.name)) {
                        node.name = "";
                    }
                    node.type = verifyType(node.type);
                    var sibling = newNode(node.parent);
                    //{ type: "", name: "", parent: node.parent, state: { allowType: true } };
                    node.parent.components.push(sibling);
                    delete node.parent;
                    node = sibling;
                    break;
                // Hit a space...
                case " ":
                    // If reading type, the type is done and may read a param or name
                    if (node.state.allowType) {
                        if (node.type !== "") {
                            node.type = verifyType(node.type);
                            delete node.state.allowType;
                            node.state.allowName = true;
                            node.state.allowParams = true;
                        }
                    }
                    // If reading name, the name is done
                    if (node.state.allowName) {
                        if (node.name !== "") {
                            if (node.name === "indexed") {
                                if (!allowIndexed) {
                                    throwError(i);
                                }
                                if (node.indexed) {
                                    throwError(i);
                                }
                                node.indexed = true;
                                node.name = "";
                            }
                            else if (checkModifier(node.type, node.name)) {
                                node.name = "";
                            }
                            else {
                                node.state.allowName = false;
                            }
                        }
                    }
                    break;
                case "[":
                    if (!node.state.allowArray) {
                        throwError(i);
                    }
                    node.type += c;
                    node.state.allowArray = false;
                    node.state.allowName = false;
                    node.state.readArray = true;
                    break;
                case "]":
                    if (!node.state.readArray) {
                        throwError(i);
                    }
                    node.type += c;
                    node.state.readArray = false;
                    node.state.allowArray = true;
                    node.state.allowName = true;
                    break;
                default:
                    if (node.state.allowType) {
                        node.type += c;
                        node.state.allowParams = true;
                        node.state.allowArray = true;
                    }
                    else if (node.state.allowName) {
                        node.name += c;
                        delete node.state.allowArray;
                    }
                    else if (node.state.readArray) {
                        node.type += c;
                    }
                    else {
                        throwError(i);
                    }
            }
        }
        if (node.parent) {
            logger.throwArgumentError("unexpected eof", "param", param);
        }
        delete parent.state;
        if (node.name === "indexed") {
            if (!allowIndexed) {
                throwError(originalParam.length - 7);
            }
            if (node.indexed) {
                throwError(originalParam.length - 7);
            }
            node.indexed = true;
            node.name = "";
        }
        else if (checkModifier(node.type, node.name)) {
            node.name = "";
        }
        parent.type = verifyType(parent.type);
        return parent;
    }
    function populate(object, params) {
        for (var key in params) {
            (0, properties_1.defineReadOnly)(object, key, params[key]);
        }
    }
    exports.FormatTypes = Object.freeze({
        // Bare formatting, as is needed for computing a sighash of an event or function
        sighash: "sighash",
        // Human-Readable with Minimal spacing and without names (compact human-readable)
        minimal: "minimal",
        // Human-Readable with nice spacing, including all names
        full: "full",
        // JSON-format a la Solidity
        json: "json"
    });
    var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
    var ParamType = /** @class */ (function () {
        function ParamType(constructorGuard, params) {
            if (constructorGuard !== _constructorGuard) {
                logger.throwError("use fromString", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new ParamType()"
                });
            }
            populate(this, params);
            var match = this.type.match(paramTypeArray);
            if (match) {
                populate(this, {
                    arrayLength: parseInt(match[2] || "-1"),
                    arrayChildren: ParamType.fromObject({
                        type: match[1],
                        components: this.components
                    }),
                    baseType: "array"
                });
            }
            else {
                populate(this, {
                    arrayLength: null,
                    arrayChildren: null,
                    baseType: ((this.components != null) ? "tuple" : this.type)
                });
            }
            this._isParamType = true;
            Object.freeze(this);
        }
        // Format the parameter fragment
        //   - sighash: "(uint256,address)"
        //   - minimal: "tuple(uint256,address) indexed"
        //   - full:    "tuple(uint256 foo, address bar) indexed baz"
        ParamType.prototype.format = function (format) {
            if (!format) {
                format = exports.FormatTypes.sighash;
            }
            if (!exports.FormatTypes[format]) {
                logger.throwArgumentError("invalid format type", "format", format);
            }
            if (format === exports.FormatTypes.json) {
                var result_1 = {
                    type: ((this.baseType === "tuple") ? "tuple" : this.type),
                    name: (this.name || undefined)
                };
                if (typeof (this.indexed) === "boolean") {
                    result_1.indexed = this.indexed;
                }
                if (this.components) {
                    result_1.components = this.components.map(function (comp) { return JSON.parse(comp.format(format)); });
                }
                return JSON.stringify(result_1);
            }
            var result = "";
            // Array
            if (this.baseType === "array") {
                result += this.arrayChildren.format(format);
                result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
            }
            else {
                if (this.baseType === "tuple") {
                    if (format !== exports.FormatTypes.sighash) {
                        result += this.type;
                    }
                    result += "(" + this.components.map(function (comp) { return comp.format(format); }).join((format === exports.FormatTypes.full) ? ", " : ",") + ")";
                }
                else {
                    result += this.type;
                }
            }
            if (format !== exports.FormatTypes.sighash) {
                if (this.indexed === true) {
                    result += " indexed";
                }
                if (format === exports.FormatTypes.full && this.name) {
                    result += " " + this.name;
                }
            }
            return result;
        };
        ParamType.from = function (value, allowIndexed) {
            if (typeof (value) === "string") {
                return ParamType.fromString(value, allowIndexed);
            }
            return ParamType.fromObject(value);
        };
        ParamType.fromObject = function (value) {
            if (ParamType.isParamType(value)) {
                return value;
            }
            return new ParamType(_constructorGuard, {
                name: (value.name || null),
                type: verifyType(value.type),
                indexed: ((value.indexed == null) ? null : !!value.indexed),
                components: (value.components ? value.components.map(ParamType.fromObject) : null)
            });
        };
        ParamType.fromString = function (value, allowIndexed) {
            function ParamTypify(node) {
                return ParamType.fromObject({
                    name: node.name,
                    type: node.type,
                    indexed: node.indexed,
                    components: node.components
                });
            }
            return ParamTypify(parseParamType(value, !!allowIndexed));
        };
        ParamType.isParamType = function (value) {
            return !!(value != null && value._isParamType);
        };
        return ParamType;
    }());
    exports.ParamType = ParamType;
    ;
    function parseParams(value, allowIndex) {
        return splitNesting(value).map(function (param) { return ParamType.fromString(param, allowIndex); });
    }
    var Fragment = /** @class */ (function () {
        function Fragment(constructorGuard, params) {
            if (constructorGuard !== _constructorGuard) {
                logger.throwError("use a static from method", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new Fragment()"
                });
            }
            populate(this, params);
            this._isFragment = true;
            Object.freeze(this);
        }
        Fragment.from = function (value) {
            if (Fragment.isFragment(value)) {
                return value;
            }
            if (typeof (value) === "string") {
                return Fragment.fromString(value);
            }
            return Fragment.fromObject(value);
        };
        Fragment.fromObject = function (value) {
            if (Fragment.isFragment(value)) {
                return value;
            }
            switch (value.type) {
                case "function":
                    return FunctionFragment.fromObject(value);
                case "event":
                    return EventFragment.fromObject(value);
                case "constructor":
                    return ConstructorFragment.fromObject(value);
                case "error":
                    return ErrorFragment.fromObject(value);
                case "fallback":
                case "receive":
                    // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?
                    return null;
            }
            return logger.throwArgumentError("invalid fragment object", "value", value);
        };
        Fragment.fromString = function (value) {
            // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
            value = value.replace(/\s/g, " ");
            value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
            value = value.trim();
            if (value.split(" ")[0] === "event") {
                return EventFragment.fromString(value.substring(5).trim());
            }
            else if (value.split(" ")[0] === "function") {
                return FunctionFragment.fromString(value.substring(8).trim());
            }
            else if (value.split("(")[0].trim() === "constructor") {
                return ConstructorFragment.fromString(value.trim());
            }
            else if (value.split(" ")[0] === "error") {
                return ErrorFragment.fromString(value.substring(5).trim());
            }
            return logger.throwArgumentError("unsupported fragment", "value", value);
        };
        Fragment.isFragment = function (value) {
            return !!(value && value._isFragment);
        };
        return Fragment;
    }());
    exports.Fragment = Fragment;
    var EventFragment = /** @class */ (function (_super) {
        __extends(EventFragment, _super);
        function EventFragment() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        EventFragment.prototype.format = function (format) {
            if (!format) {
                format = exports.FormatTypes.sighash;
            }
            if (!exports.FormatTypes[format]) {
                logger.throwArgumentError("invalid format type", "format", format);
            }
            if (format === exports.FormatTypes.json) {
                return JSON.stringify({
                    type: "event",
                    anonymous: this.anonymous,
                    name: this.name,
                    inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); })
                });
            }
            var result = "";
            if (format !== exports.FormatTypes.sighash) {
                result += "event ";
            }
            result += this.name + "(" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? ", " : ",") + ") ";
            if (format !== exports.FormatTypes.sighash) {
                if (this.anonymous) {
                    result += "anonymous ";
                }
            }
            return result.trim();
        };
        EventFragment.from = function (value) {
            if (typeof (value) === "string") {
                return EventFragment.fromString(value);
            }
            return EventFragment.fromObject(value);
        };
        EventFragment.fromObject = function (value) {
            if (EventFragment.isEventFragment(value)) {
                return value;
            }
            if (value.type !== "event") {
                logger.throwArgumentError("invalid event object", "value", value);
            }
            var params = {
                name: verifyIdentifier(value.name),
                anonymous: value.anonymous,
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                type: "event"
            };
            return new EventFragment(_constructorGuard, params);
        };
        EventFragment.fromString = function (value) {
            var match = value.match(regexParen);
            if (!match) {
                logger.throwArgumentError("invalid event string", "value", value);
            }
            var anonymous = false;
            match[3].split(" ").forEach(function (modifier) {
                switch (modifier.trim()) {
                    case "anonymous":
                        anonymous = true;
                        break;
                    case "":
                        break;
                    default:
                        logger.warn("unknown modifier: " + modifier);
                }
            });
            return EventFragment.fromObject({
                name: match[1].trim(),
                anonymous: anonymous,
                inputs: parseParams(match[2], true),
                type: "event"
            });
        };
        EventFragment.isEventFragment = function (value) {
            return (value && value._isFragment && value.type === "event");
        };
        return EventFragment;
    }(Fragment));
    exports.EventFragment = EventFragment;
    function parseGas(value, params) {
        params.gas = null;
        var comps = value.split("@");
        if (comps.length !== 1) {
            if (comps.length > 2) {
                logger.throwArgumentError("invalid human-readable ABI signature", "value", value);
            }
            if (!comps[1].match(/^[0-9]+$/)) {
                logger.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
            }
            params.gas = bignumber_1.BigNumber.from(comps[1]);
            return comps[0];
        }
        return value;
    }
    function parseModifiers(value, params) {
        params.constant = false;
        params.payable = false;
        params.stateMutability = "nonpayable";
        value.split(" ").forEach(function (modifier) {
            switch (modifier.trim()) {
                case "constant":
                    params.constant = true;
                    break;
                case "payable":
                    params.payable = true;
                    params.stateMutability = "payable";
                    break;
                case "nonpayable":
                    params.payable = false;
                    params.stateMutability = "nonpayable";
                    break;
                case "pure":
                    params.constant = true;
                    params.stateMutability = "pure";
                    break;
                case "view":
                    params.constant = true;
                    params.stateMutability = "view";
                    break;
                case "external":
                case "public":
                case "":
                    break;
                default:
                    console.log("unknown modifier: " + modifier);
            }
        });
    }
    function verifyState(value) {
        var result = {
            constant: false,
            payable: true,
            stateMutability: "payable"
        };
        if (value.stateMutability != null) {
            result.stateMutability = value.stateMutability;
            // Set (and check things are consistent) the constant property
            result.constant = (result.stateMutability === "view" || result.stateMutability === "pure");
            if (value.constant != null) {
                if ((!!value.constant) !== result.constant) {
                    logger.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
                }
            }
            // Set (and check things are consistent) the payable property
            result.payable = (result.stateMutability === "payable");
            if (value.payable != null) {
                if ((!!value.payable) !== result.payable) {
                    logger.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
                }
            }
        }
        else if (value.payable != null) {
            result.payable = !!value.payable;
            // If payable we can assume non-constant; otherwise we can't assume
            if (value.constant == null && !result.payable && value.type !== "constructor") {
                logger.throwArgumentError("unable to determine stateMutability", "value", value);
            }
            result.constant = !!value.constant;
            if (result.constant) {
                result.stateMutability = "view";
            }
            else {
                result.stateMutability = (result.payable ? "payable" : "nonpayable");
            }
            if (result.payable && result.constant) {
                logger.throwArgumentError("cannot have constant payable function", "value", value);
            }
        }
        else if (value.constant != null) {
            result.constant = !!value.constant;
            result.payable = !result.constant;
            result.stateMutability = (result.constant ? "view" : "payable");
        }
        else if (value.type !== "constructor") {
            logger.throwArgumentError("unable to determine stateMutability", "value", value);
        }
        return result;
    }
    var ConstructorFragment = /** @class */ (function (_super) {
        __extends(ConstructorFragment, _super);
        function ConstructorFragment() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ConstructorFragment.prototype.format = function (format) {
            if (!format) {
                format = exports.FormatTypes.sighash;
            }
            if (!exports.FormatTypes[format]) {
                logger.throwArgumentError("invalid format type", "format", format);
            }
            if (format === exports.FormatTypes.json) {
                return JSON.stringify({
                    type: "constructor",
                    stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
                    payable: this.payable,
                    gas: (this.gas ? this.gas.toNumber() : undefined),
                    inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); })
                });
            }
            if (format === exports.FormatTypes.sighash) {
                logger.throwError("cannot format a constructor for sighash", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "format(sighash)"
                });
            }
            var result = "constructor(" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? ", " : ",") + ") ";
            if (this.stateMutability && this.stateMutability !== "nonpayable") {
                result += this.stateMutability + " ";
            }
            return result.trim();
        };
        ConstructorFragment.from = function (value) {
            if (typeof (value) === "string") {
                return ConstructorFragment.fromString(value);
            }
            return ConstructorFragment.fromObject(value);
        };
        ConstructorFragment.fromObject = function (value) {
            if (ConstructorFragment.isConstructorFragment(value)) {
                return value;
            }
            if (value.type !== "constructor") {
                logger.throwArgumentError("invalid constructor object", "value", value);
            }
            var state = verifyState(value);
            if (state.constant) {
                logger.throwArgumentError("constructor cannot be constant", "value", value);
            }
            var params = {
                name: null,
                type: value.type,
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                payable: state.payable,
                stateMutability: state.stateMutability,
                gas: (value.gas ? bignumber_1.BigNumber.from(value.gas) : null)
            };
            return new ConstructorFragment(_constructorGuard, params);
        };
        ConstructorFragment.fromString = function (value) {
            var params = { type: "constructor" };
            value = parseGas(value, params);
            var parens = value.match(regexParen);
            if (!parens || parens[1].trim() !== "constructor") {
                logger.throwArgumentError("invalid constructor string", "value", value);
            }
            params.inputs = parseParams(parens[2].trim(), false);
            parseModifiers(parens[3].trim(), params);
            return ConstructorFragment.fromObject(params);
        };
        ConstructorFragment.isConstructorFragment = function (value) {
            return (value && value._isFragment && value.type === "constructor");
        };
        return ConstructorFragment;
    }(Fragment));
    exports.ConstructorFragment = ConstructorFragment;
    var FunctionFragment = /** @class */ (function (_super) {
        __extends(FunctionFragment, _super);
        function FunctionFragment() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FunctionFragment.prototype.format = function (format) {
            if (!format) {
                format = exports.FormatTypes.sighash;
            }
            if (!exports.FormatTypes[format]) {
                logger.throwArgumentError("invalid format type", "format", format);
            }
            if (format === exports.FormatTypes.json) {
                return JSON.stringify({
                    type: "function",
                    name: this.name,
                    constant: this.constant,
                    stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
                    payable: this.payable,
                    gas: (this.gas ? this.gas.toNumber() : undefined),
                    inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); }),
                    outputs: this.outputs.map(function (output) { return JSON.parse(output.format(format)); }),
                });
            }
            var result = "";
            if (format !== exports.FormatTypes.sighash) {
                result += "function ";
            }
            result += this.name + "(" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? ", " : ",") + ") ";
            if (format !== exports.FormatTypes.sighash) {
                if (this.stateMutability) {
                    if (this.stateMutability !== "nonpayable") {
                        result += (this.stateMutability + " ");
                    }
                }
                else if (this.constant) {
                    result += "view ";
                }
                if (this.outputs && this.outputs.length) {
                    result += "returns (" + this.outputs.map(function (output) { return output.format(format); }).join(", ") + ") ";
                }
                if (this.gas != null) {
                    result += "@" + this.gas.toString() + " ";
                }
            }
            return result.trim();
        };
        FunctionFragment.from = function (value) {
            if (typeof (value) === "string") {
                return FunctionFragment.fromString(value);
            }
            return FunctionFragment.fromObject(value);
        };
        FunctionFragment.fromObject = function (value) {
            if (FunctionFragment.isFunctionFragment(value)) {
                return value;
            }
            if (value.type !== "function") {
                logger.throwArgumentError("invalid function object", "value", value);
            }
            var state = verifyState(value);
            var params = {
                type: value.type,
                name: verifyIdentifier(value.name),
                constant: state.constant,
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),
                payable: state.payable,
                stateMutability: state.stateMutability,
                gas: (value.gas ? bignumber_1.BigNumber.from(value.gas) : null)
            };
            return new FunctionFragment(_constructorGuard, params);
        };
        FunctionFragment.fromString = function (value) {
            var params = { type: "function" };
            value = parseGas(value, params);
            var comps = value.split(" returns ");
            if (comps.length > 2) {
                logger.throwArgumentError("invalid function string", "value", value);
            }
            var parens = comps[0].match(regexParen);
            if (!parens) {
                logger.throwArgumentError("invalid function signature", "value", value);
            }
            params.name = parens[1].trim();
            if (params.name) {
                verifyIdentifier(params.name);
            }
            params.inputs = parseParams(parens[2], false);
            parseModifiers(parens[3].trim(), params);
            // We have outputs
            if (comps.length > 1) {
                var returns = comps[1].match(regexParen);
                if (returns[1].trim() != "" || returns[3].trim() != "") {
                    logger.throwArgumentError("unexpected tokens", "value", value);
                }
                params.outputs = parseParams(returns[2], false);
            }
            else {
                params.outputs = [];
            }
            return FunctionFragment.fromObject(params);
        };
        FunctionFragment.isFunctionFragment = function (value) {
            return (value && value._isFragment && value.type === "function");
        };
        return FunctionFragment;
    }(ConstructorFragment));
    exports.FunctionFragment = FunctionFragment;
    //export class StructFragment extends Fragment {
    //}
    function checkForbidden(fragment) {
        var sig = fragment.format();
        if (sig === "Error(string)" || sig === "Panic(uint256)") {
            logger.throwArgumentError("cannot specify user defined " + sig + " error", "fragment", fragment);
        }
        return fragment;
    }
    var ErrorFragment = /** @class */ (function (_super) {
        __extends(ErrorFragment, _super);
        function ErrorFragment() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorFragment.prototype.format = function (format) {
            if (!format) {
                format = exports.FormatTypes.sighash;
            }
            if (!exports.FormatTypes[format]) {
                logger.throwArgumentError("invalid format type", "format", format);
            }
            if (format === exports.FormatTypes.json) {
                return JSON.stringify({
                    type: "error",
                    name: this.name,
                    inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); }),
                });
            }
            var result = "";
            if (format !== exports.FormatTypes.sighash) {
                result += "error ";
            }
            result += this.name + "(" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? ", " : ",") + ") ";
            return result.trim();
        };
        ErrorFragment.from = function (value) {
            if (typeof (value) === "string") {
                return ErrorFragment.fromString(value);
            }
            return ErrorFragment.fromObject(value);
        };
        ErrorFragment.fromObject = function (value) {
            if (ErrorFragment.isErrorFragment(value)) {
                return value;
            }
            if (value.type !== "error") {
                logger.throwArgumentError("invalid error object", "value", value);
            }
            var params = {
                type: value.type,
                name: verifyIdentifier(value.name),
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])
            };
            return checkForbidden(new ErrorFragment(_constructorGuard, params));
        };
        ErrorFragment.fromString = function (value) {
            var params = { type: "error" };
            var parens = value.match(regexParen);
            if (!parens) {
                logger.throwArgumentError("invalid error signature", "value", value);
            }
            params.name = parens[1].trim();
            if (params.name) {
                verifyIdentifier(params.name);
            }
            params.inputs = parseParams(parens[2], false);
            return checkForbidden(ErrorFragment.fromObject(params));
        };
        ErrorFragment.isErrorFragment = function (value) {
            return (value && value._isFragment && value.type === "error");
        };
        return ErrorFragment;
    }(Fragment));
    exports.ErrorFragment = ErrorFragment;
    function verifyType(type) {
        // These need to be transformed to their full description
        if (type.match(/^uint($|[^1-9])/)) {
            type = "uint256" + type.substring(4);
        }
        else if (type.match(/^int($|[^1-9])/)) {
            type = "int256" + type.substring(3);
        }
        // @TODO: more verification
        return type;
    }
    // See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234
    var regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
    function verifyIdentifier(value) {
        if (!value || !value.match(regexIdentifier)) {
            logger.throwArgumentError("invalid identifier \"" + value + "\"", "value", value);
        }
        return value;
    }
    var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
    function splitNesting(value) {
        value = value.trim();
        var result = [];
        var accum = "";
        var depth = 0;
        for (var offset = 0; offset < value.length; offset++) {
            var c = value[offset];
            if (c === "," && depth === 0) {
                result.push(accum);
                accum = "";
            }
            else {
                accum += c;
                if (c === "(") {
                    depth++;
                }
                else if (c === ")") {
                    depth--;
                    if (depth === -1) {
                        logger.throwArgumentError("unbalanced parenthesis", "value", value);
                    }
                }
            }
        }
        if (accum) {
            result.push(accum);
        }
        return result;
    }
    
    },{"./_version":1,"@ethersproject/bignumber":29,"@ethersproject/logger":56,"@ethersproject/properties":62}],15:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransactionDescription = exports.LogDescription = exports.checkResultErrors = exports.Indexed = exports.Interface = exports.defaultAbiCoder = exports.AbiCoder = exports.FormatTypes = exports.ParamType = exports.FunctionFragment = exports.Fragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = void 0;
    var fragments_1 = require("./fragments");
    Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function () { return fragments_1.ConstructorFragment; } });
    Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function () { return fragments_1.ErrorFragment; } });
    Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function () { return fragments_1.EventFragment; } });
    Object.defineProperty(exports, "FormatTypes", { enumerable: true, get: function () { return fragments_1.FormatTypes; } });
    Object.defineProperty(exports, "Fragment", { enumerable: true, get: function () { return fragments_1.Fragment; } });
    Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function () { return fragments_1.FunctionFragment; } });
    Object.defineProperty(exports, "ParamType", { enumerable: true, get: function () { return fragments_1.ParamType; } });
    var abi_coder_1 = require("./abi-coder");
    Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function () { return abi_coder_1.AbiCoder; } });
    Object.defineProperty(exports, "defaultAbiCoder", { enumerable: true, get: function () { return abi_coder_1.defaultAbiCoder; } });
    var interface_1 = require("./interface");
    Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function () { return interface_1.checkResultErrors; } });
    Object.defineProperty(exports, "Indexed", { enumerable: true, get: function () { return interface_1.Indexed; } });
    Object.defineProperty(exports, "Interface", { enumerable: true, get: function () { return interface_1.Interface; } });
    Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function () { return interface_1.LogDescription; } });
    Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function () { return interface_1.TransactionDescription; } });
    
    },{"./abi-coder":2,"./fragments":14,"./interface":16}],16:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Interface = exports.Indexed = exports.ErrorDescription = exports.TransactionDescription = exports.LogDescription = exports.checkResultErrors = void 0;
    var address_1 = require("@ethersproject/address");
    var bignumber_1 = require("@ethersproject/bignumber");
    var bytes_1 = require("@ethersproject/bytes");
    var hash_1 = require("@ethersproject/hash");
    var keccak256_1 = require("@ethersproject/keccak256");
    var properties_1 = require("@ethersproject/properties");
    var abi_coder_1 = require("./abi-coder");
    var abstract_coder_1 = require("./coders/abstract-coder");
    Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function () { return abstract_coder_1.checkResultErrors; } });
    var fragments_1 = require("./fragments");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var LogDescription = /** @class */ (function (_super) {
        __extends(LogDescription, _super);
        function LogDescription() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return LogDescription;
    }(properties_1.Description));
    exports.LogDescription = LogDescription;
    var TransactionDescription = /** @class */ (function (_super) {
        __extends(TransactionDescription, _super);
        function TransactionDescription() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TransactionDescription;
    }(properties_1.Description));
    exports.TransactionDescription = TransactionDescription;
    var ErrorDescription = /** @class */ (function (_super) {
        __extends(ErrorDescription, _super);
        function ErrorDescription() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ErrorDescription;
    }(properties_1.Description));
    exports.ErrorDescription = ErrorDescription;
    var Indexed = /** @class */ (function (_super) {
        __extends(Indexed, _super);
        function Indexed() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Indexed.isIndexed = function (value) {
            return !!(value && value._isIndexed);
        };
        return Indexed;
    }(properties_1.Description));
    exports.Indexed = Indexed;
    var BuiltinErrors = {
        "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
        "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
    };
    function wrapAccessError(property, error) {
        var wrap = new Error("deferred error during ABI decoding triggered accessing " + property);
        wrap.error = error;
        return wrap;
    }
    /*
    function checkNames(fragment: Fragment, type: "input" | "output", params: Array<ParamType>): void {
        params.reduce((accum, param) => {
            if (param.name) {
                if (accum[param.name]) {
                    logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format("full") }`, "fragment", fragment);
                }
                accum[param.name] = true;
            }
            return accum;
        }, <{ [ name: string ]: boolean }>{ });
    }
    */
    var Interface = /** @class */ (function () {
        function Interface(fragments) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkNew(_newTarget, Interface);
            var abi = [];
            if (typeof (fragments) === "string") {
                abi = JSON.parse(fragments);
            }
            else {
                abi = fragments;
            }
            (0, properties_1.defineReadOnly)(this, "fragments", abi.map(function (fragment) {
                return fragments_1.Fragment.from(fragment);
            }).filter(function (fragment) { return (fragment != null); }));
            (0, properties_1.defineReadOnly)(this, "_abiCoder", (0, properties_1.getStatic)(_newTarget, "getAbiCoder")());
            (0, properties_1.defineReadOnly)(this, "functions", {});
            (0, properties_1.defineReadOnly)(this, "errors", {});
            (0, properties_1.defineReadOnly)(this, "events", {});
            (0, properties_1.defineReadOnly)(this, "structs", {});
            // Add all fragments by their signature
            this.fragments.forEach(function (fragment) {
                var bucket = null;
                switch (fragment.type) {
                    case "constructor":
                        if (_this.deploy) {
                            logger.warn("duplicate definition - constructor");
                            return;
                        }
                        //checkNames(fragment, "input", fragment.inputs);
                        (0, properties_1.defineReadOnly)(_this, "deploy", fragment);
                        return;
                    case "function":
                        //checkNames(fragment, "input", fragment.inputs);
                        //checkNames(fragment, "output", (<FunctionFragment>fragment).outputs);
                        bucket = _this.functions;
                        break;
                    case "event":
                        //checkNames(fragment, "input", fragment.inputs);
                        bucket = _this.events;
                        break;
                    case "error":
                        bucket = _this.errors;
                        break;
                    default:
                        return;
                }
                var signature = fragment.format();
                if (bucket[signature]) {
                    logger.warn("duplicate definition - " + signature);
                    return;
                }
                bucket[signature] = fragment;
            });
            // If we do not have a constructor add a default
            if (!this.deploy) {
                (0, properties_1.defineReadOnly)(this, "deploy", fragments_1.ConstructorFragment.from({
                    payable: false,
                    type: "constructor"
                }));
            }
            (0, properties_1.defineReadOnly)(this, "_isInterface", true);
        }
        Interface.prototype.format = function (format) {
            if (!format) {
                format = fragments_1.FormatTypes.full;
            }
            if (format === fragments_1.FormatTypes.sighash) {
                logger.throwArgumentError("interface does not support formatting sighash", "format", format);
            }
            var abi = this.fragments.map(function (fragment) { return fragment.format(format); });
            // We need to re-bundle the JSON fragments a bit
            if (format === fragments_1.FormatTypes.json) {
                return JSON.stringify(abi.map(function (j) { return JSON.parse(j); }));
            }
            return abi;
        };
        // Sub-classes can override these to handle other blockchains
        Interface.getAbiCoder = function () {
            return abi_coder_1.defaultAbiCoder;
        };
        Interface.getAddress = function (address) {
            return (0, address_1.getAddress)(address);
        };
        Interface.getSighash = function (fragment) {
            return (0, bytes_1.hexDataSlice)((0, hash_1.id)(fragment.format()), 0, 4);
        };
        Interface.getEventTopic = function (eventFragment) {
            return (0, hash_1.id)(eventFragment.format());
        };
        // Find a function definition by any means necessary (unless it is ambiguous)
        Interface.prototype.getFunction = function (nameOrSignatureOrSighash) {
            if ((0, bytes_1.isHexString)(nameOrSignatureOrSighash)) {
                for (var name_1 in this.functions) {
                    if (nameOrSignatureOrSighash === this.getSighash(name_1)) {
                        return this.functions[name_1];
                    }
                }
                logger.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (nameOrSignatureOrSighash.indexOf("(") === -1) {
                var name_2 = nameOrSignatureOrSighash.trim();
                var matching = Object.keys(this.functions).filter(function (f) { return (f.split("(" /* fix:) */)[0] === name_2); });
                if (matching.length === 0) {
                    logger.throwArgumentError("no matching function", "name", name_2);
                }
                else if (matching.length > 1) {
                    logger.throwArgumentError("multiple matching functions", "name", name_2);
                }
                return this.functions[matching[0]];
            }
            // Normalize the signature and lookup the function
            var result = this.functions[fragments_1.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
            if (!result) {
                logger.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
            }
            return result;
        };
        // Find an event definition by any means necessary (unless it is ambiguous)
        Interface.prototype.getEvent = function (nameOrSignatureOrTopic) {
            if ((0, bytes_1.isHexString)(nameOrSignatureOrTopic)) {
                var topichash = nameOrSignatureOrTopic.toLowerCase();
                for (var name_3 in this.events) {
                    if (topichash === this.getEventTopic(name_3)) {
                        return this.events[name_3];
                    }
                }
                logger.throwArgumentError("no matching event", "topichash", topichash);
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (nameOrSignatureOrTopic.indexOf("(") === -1) {
                var name_4 = nameOrSignatureOrTopic.trim();
                var matching = Object.keys(this.events).filter(function (f) { return (f.split("(" /* fix:) */)[0] === name_4); });
                if (matching.length === 0) {
                    logger.throwArgumentError("no matching event", "name", name_4);
                }
                else if (matching.length > 1) {
                    logger.throwArgumentError("multiple matching events", "name", name_4);
                }
                return this.events[matching[0]];
            }
            // Normalize the signature and lookup the function
            var result = this.events[fragments_1.EventFragment.fromString(nameOrSignatureOrTopic).format()];
            if (!result) {
                logger.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
            }
            return result;
        };
        // Find a function definition by any means necessary (unless it is ambiguous)
        Interface.prototype.getError = function (nameOrSignatureOrSighash) {
            if ((0, bytes_1.isHexString)(nameOrSignatureOrSighash)) {
                var getSighash = (0, properties_1.getStatic)(this.constructor, "getSighash");
                for (var name_5 in this.errors) {
                    var error = this.errors[name_5];
                    if (nameOrSignatureOrSighash === getSighash(error)) {
                        return this.errors[name_5];
                    }
                }
                logger.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (nameOrSignatureOrSighash.indexOf("(") === -1) {
                var name_6 = nameOrSignatureOrSighash.trim();
                var matching = Object.keys(this.errors).filter(function (f) { return (f.split("(" /* fix:) */)[0] === name_6); });
                if (matching.length === 0) {
                    logger.throwArgumentError("no matching error", "name", name_6);
                }
                else if (matching.length > 1) {
                    logger.throwArgumentError("multiple matching errors", "name", name_6);
                }
                return this.errors[matching[0]];
            }
            // Normalize the signature and lookup the function
            var result = this.errors[fragments_1.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
            if (!result) {
                logger.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
            }
            return result;
        };
        // Get the sighash (the bytes4 selector) used by Solidity to identify a function
        Interface.prototype.getSighash = function (fragment) {
            if (typeof (fragment) === "string") {
                try {
                    fragment = this.getFunction(fragment);
                }
                catch (error) {
                    try {
                        fragment = this.getError(fragment);
                    }
                    catch (_) {
                        throw error;
                    }
                }
            }
            return (0, properties_1.getStatic)(this.constructor, "getSighash")(fragment);
        };
        // Get the topic (the bytes32 hash) used by Solidity to identify an event
        Interface.prototype.getEventTopic = function (eventFragment) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            return (0, properties_1.getStatic)(this.constructor, "getEventTopic")(eventFragment);
        };
        Interface.prototype._decodeParams = function (params, data) {
            return this._abiCoder.decode(params, data);
        };
        Interface.prototype._encodeParams = function (params, values) {
            return this._abiCoder.encode(params, values);
        };
        Interface.prototype.encodeDeploy = function (values) {
            return this._encodeParams(this.deploy.inputs, values || []);
        };
        Interface.prototype.decodeErrorResult = function (fragment, data) {
            if (typeof (fragment) === "string") {
                fragment = this.getError(fragment);
            }
            var bytes = (0, bytes_1.arrayify)(data);
            if ((0, bytes_1.hexlify)(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
                logger.throwArgumentError("data signature does not match error " + fragment.name + ".", "data", (0, bytes_1.hexlify)(bytes));
            }
            return this._decodeParams(fragment.inputs, bytes.slice(4));
        };
        Interface.prototype.encodeErrorResult = function (fragment, values) {
            if (typeof (fragment) === "string") {
                fragment = this.getError(fragment);
            }
            return (0, bytes_1.hexlify)((0, bytes_1.concat)([
                this.getSighash(fragment),
                this._encodeParams(fragment.inputs, values || [])
            ]));
        };
        // Decode the data for a function call (e.g. tx.data)
        Interface.prototype.decodeFunctionData = function (functionFragment, data) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            var bytes = (0, bytes_1.arrayify)(data);
            if ((0, bytes_1.hexlify)(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
                logger.throwArgumentError("data signature does not match function " + functionFragment.name + ".", "data", (0, bytes_1.hexlify)(bytes));
            }
            return this._decodeParams(functionFragment.inputs, bytes.slice(4));
        };
        // Encode the data for a function call (e.g. tx.data)
        Interface.prototype.encodeFunctionData = function (functionFragment, values) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            return (0, bytes_1.hexlify)((0, bytes_1.concat)([
                this.getSighash(functionFragment),
                this._encodeParams(functionFragment.inputs, values || [])
            ]));
        };
        // Decode the result from a function call (e.g. from eth_call)
        Interface.prototype.decodeFunctionResult = function (functionFragment, data) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            var bytes = (0, bytes_1.arrayify)(data);
            var reason = null;
            var errorArgs = null;
            var errorName = null;
            var errorSignature = null;
            switch (bytes.length % this._abiCoder._getWordSize()) {
                case 0:
                    try {
                        return this._abiCoder.decode(functionFragment.outputs, bytes);
                    }
                    catch (error) { }
                    break;
                case 4: {
                    var selector = (0, bytes_1.hexlify)(bytes.slice(0, 4));
                    var builtin = BuiltinErrors[selector];
                    if (builtin) {
                        errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
                        errorName = builtin.name;
                        errorSignature = builtin.signature;
                        if (builtin.reason) {
                            reason = errorArgs[0];
                        }
                    }
                    else {
                        try {
                            var error = this.getError(selector);
                            errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
                            errorName = error.name;
                            errorSignature = error.format();
                        }
                        catch (error) {
                            console.log(error);
                        }
                    }
                    break;
                }
            }
            return logger.throwError("call revert exception", logger_1.Logger.errors.CALL_EXCEPTION, {
                method: functionFragment.format(),
                errorArgs: errorArgs,
                errorName: errorName,
                errorSignature: errorSignature,
                reason: reason
            });
        };
        // Encode the result for a function call (e.g. for eth_call)
        Interface.prototype.encodeFunctionResult = function (functionFragment, values) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            return (0, bytes_1.hexlify)(this._abiCoder.encode(functionFragment.outputs, values || []));
        };
        // Create the filter for the event with search criteria (e.g. for eth_filterLog)
        Interface.prototype.encodeFilterTopics = function (eventFragment, values) {
            var _this = this;
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            if (values.length > eventFragment.inputs.length) {
                logger.throwError("too many arguments for " + eventFragment.format(), logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {
                    argument: "values",
                    value: values
                });
            }
            var topics = [];
            if (!eventFragment.anonymous) {
                topics.push(this.getEventTopic(eventFragment));
            }
            var encodeTopic = function (param, value) {
                if (param.type === "string") {
                    return (0, hash_1.id)(value);
                }
                else if (param.type === "bytes") {
                    return (0, keccak256_1.keccak256)((0, bytes_1.hexlify)(value));
                }
                // Check addresses are valid
                if (param.type === "address") {
                    _this._abiCoder.encode(["address"], [value]);
                }
                return (0, bytes_1.hexZeroPad)((0, bytes_1.hexlify)(value), 32);
            };
            values.forEach(function (value, index) {
                var param = eventFragment.inputs[index];
                if (!param.indexed) {
                    if (value != null) {
                        logger.throwArgumentError("cannot filter non-indexed parameters; must be null", ("contract." + param.name), value);
                    }
                    return;
                }
                if (value == null) {
                    topics.push(null);
                }
                else if (param.baseType === "array" || param.baseType === "tuple") {
                    logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
                }
                else if (Array.isArray(value)) {
                    topics.push(value.map(function (value) { return encodeTopic(param, value); }));
                }
                else {
                    topics.push(encodeTopic(param, value));
                }
            });
            // Trim off trailing nulls
            while (topics.length && topics[topics.length - 1] === null) {
                topics.pop();
            }
            return topics;
        };
        Interface.prototype.encodeEventLog = function (eventFragment, values) {
            var _this = this;
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            var topics = [];
            var dataTypes = [];
            var dataValues = [];
            if (!eventFragment.anonymous) {
                topics.push(this.getEventTopic(eventFragment));
            }
            if (values.length !== eventFragment.inputs.length) {
                logger.throwArgumentError("event arguments/values mismatch", "values", values);
            }
            eventFragment.inputs.forEach(function (param, index) {
                var value = values[index];
                if (param.indexed) {
                    if (param.type === "string") {
                        topics.push((0, hash_1.id)(value));
                    }
                    else if (param.type === "bytes") {
                        topics.push((0, keccak256_1.keccak256)(value));
                    }
                    else if (param.baseType === "tuple" || param.baseType === "array") {
                        // @TODO
                        throw new Error("not implemented");
                    }
                    else {
                        topics.push(_this._abiCoder.encode([param.type], [value]));
                    }
                }
                else {
                    dataTypes.push(param);
                    dataValues.push(value);
                }
            });
            return {
                data: this._abiCoder.encode(dataTypes, dataValues),
                topics: topics
            };
        };
        // Decode a filter for the event and the search criteria
        Interface.prototype.decodeEventLog = function (eventFragment, data, topics) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            if (topics != null && !eventFragment.anonymous) {
                var topicHash = this.getEventTopic(eventFragment);
                if (!(0, bytes_1.isHexString)(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
                    logger.throwError("fragment/topic mismatch", logger_1.Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
                }
                topics = topics.slice(1);
            }
            var indexed = [];
            var nonIndexed = [];
            var dynamic = [];
            eventFragment.inputs.forEach(function (param, index) {
                if (param.indexed) {
                    if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
                        indexed.push(fragments_1.ParamType.fromObject({ type: "bytes32", name: param.name }));
                        dynamic.push(true);
                    }
                    else {
                        indexed.push(param);
                        dynamic.push(false);
                    }
                }
                else {
                    nonIndexed.push(param);
                    dynamic.push(false);
                }
            });
            var resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, (0, bytes_1.concat)(topics)) : null;
            var resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
            var result = [];
            var nonIndexedIndex = 0, indexedIndex = 0;
            eventFragment.inputs.forEach(function (param, index) {
                if (param.indexed) {
                    if (resultIndexed == null) {
                        result[index] = new Indexed({ _isIndexed: true, hash: null });
                    }
                    else if (dynamic[index]) {
                        result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
                    }
                    else {
                        try {
                            result[index] = resultIndexed[indexedIndex++];
                        }
                        catch (error) {
                            result[index] = error;
                        }
                    }
                }
                else {
                    try {
                        result[index] = resultNonIndexed[nonIndexedIndex++];
                    }
                    catch (error) {
                        result[index] = error;
                    }
                }
                // Add the keyword argument if named and safe
                if (param.name && result[param.name] == null) {
                    var value_1 = result[index];
                    // Make error named values throw on access
                    if (value_1 instanceof Error) {
                        Object.defineProperty(result, param.name, {
                            enumerable: true,
                            get: function () { throw wrapAccessError("property " + JSON.stringify(param.name), value_1); }
                        });
                    }
                    else {
                        result[param.name] = value_1;
                    }
                }
            });
            var _loop_1 = function (i) {
                var value = result[i];
                if (value instanceof Error) {
                    Object.defineProperty(result, i, {
                        enumerable: true,
                        get: function () { throw wrapAccessError("index " + i, value); }
                    });
                }
            };
            // Make all error indexed values throw on access
            for (var i = 0; i < result.length; i++) {
                _loop_1(i);
            }
            return Object.freeze(result);
        };
        // Given a transaction, find the matching function fragment (if any) and
        // determine all its properties and call parameters
        Interface.prototype.parseTransaction = function (tx) {
            var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
            if (!fragment) {
                return null;
            }
            return new TransactionDescription({
                args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
                functionFragment: fragment,
                name: fragment.name,
                signature: fragment.format(),
                sighash: this.getSighash(fragment),
                value: bignumber_1.BigNumber.from(tx.value || "0"),
            });
        };
        // @TODO
        //parseCallResult(data: BytesLike): ??
        // Given an event log, find the matching event fragment (if any) and
        // determine all its properties and values
        Interface.prototype.parseLog = function (log) {
            var fragment = this.getEvent(log.topics[0]);
            if (!fragment || fragment.anonymous) {
                return null;
            }
            // @TODO: If anonymous, and the only method, and the input count matches, should we parse?
            //        Probably not, because just because it is the only event in the ABI does
            //        not mean we have the full ABI; maybe just a fragment?
            return new LogDescription({
                eventFragment: fragment,
                name: fragment.name,
                signature: fragment.format(),
                topic: this.getEventTopic(fragment),
                args: this.decodeEventLog(fragment, log.data, log.topics)
            });
        };
        Interface.prototype.parseError = function (data) {
            var hexData = (0, bytes_1.hexlify)(data);
            var fragment = this.getError(hexData.substring(0, 10).toLowerCase());
            if (!fragment) {
                return null;
            }
            return new ErrorDescription({
                args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
                errorFragment: fragment,
                name: fragment.name,
                signature: fragment.format(),
                sighash: this.getSighash(fragment),
            });
        };
        /*
        static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
            if (Interface.isInterface(value)) {
                return value;
            }
            if (typeof(value) === "string") {
                return new Interface(JSON.parse(value));
            }
            return new Interface(value);
        }
        */
        Interface.isInterface = function (value) {
            return !!(value && value._isInterface);
        };
        return Interface;
    }());
    exports.Interface = Interface;
    
    },{"./_version":1,"./abi-coder":2,"./coders/abstract-coder":3,"./fragments":14,"@ethersproject/address":22,"@ethersproject/bignumber":29,"@ethersproject/bytes":31,"@ethersproject/hash":41,"@ethersproject/keccak256":54,"@ethersproject/logger":56,"@ethersproject/properties":62}],17:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "abstract-provider/5.5.1";
    
    },{}],18:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Provider = exports.TransactionOrderForkEvent = exports.TransactionForkEvent = exports.BlockForkEvent = exports.ForkEvent = void 0;
    var bignumber_1 = require("@ethersproject/bignumber");
    var bytes_1 = require("@ethersproject/bytes");
    var properties_1 = require("@ethersproject/properties");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    ;
    ;
    //export type CallTransactionable = {
    //    call(transaction: TransactionRequest): Promise<TransactionResponse>;
    //};
    var ForkEvent = /** @class */ (function (_super) {
        __extends(ForkEvent, _super);
        function ForkEvent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ForkEvent.isForkEvent = function (value) {
            return !!(value && value._isForkEvent);
        };
        return ForkEvent;
    }(properties_1.Description));
    exports.ForkEvent = ForkEvent;
    var BlockForkEvent = /** @class */ (function (_super) {
        __extends(BlockForkEvent, _super);
        function BlockForkEvent(blockHash, expiry) {
            var _this = this;
            if (!(0, bytes_1.isHexString)(blockHash, 32)) {
                logger.throwArgumentError("invalid blockHash", "blockHash", blockHash);
            }
            _this = _super.call(this, {
                _isForkEvent: true,
                _isBlockForkEvent: true,
                expiry: (expiry || 0),
                blockHash: blockHash
            }) || this;
            return _this;
        }
        return BlockForkEvent;
    }(ForkEvent));
    exports.BlockForkEvent = BlockForkEvent;
    var TransactionForkEvent = /** @class */ (function (_super) {
        __extends(TransactionForkEvent, _super);
        function TransactionForkEvent(hash, expiry) {
            var _this = this;
            if (!(0, bytes_1.isHexString)(hash, 32)) {
                logger.throwArgumentError("invalid transaction hash", "hash", hash);
            }
            _this = _super.call(this, {
                _isForkEvent: true,
                _isTransactionForkEvent: true,
                expiry: (expiry || 0),
                hash: hash
            }) || this;
            return _this;
        }
        return TransactionForkEvent;
    }(ForkEvent));
    exports.TransactionForkEvent = TransactionForkEvent;
    var TransactionOrderForkEvent = /** @class */ (function (_super) {
        __extends(TransactionOrderForkEvent, _super);
        function TransactionOrderForkEvent(beforeHash, afterHash, expiry) {
            var _this = this;
            if (!(0, bytes_1.isHexString)(beforeHash, 32)) {
                logger.throwArgumentError("invalid transaction hash", "beforeHash", beforeHash);
            }
            if (!(0, bytes_1.isHexString)(afterHash, 32)) {
                logger.throwArgumentError("invalid transaction hash", "afterHash", afterHash);
            }
            _this = _super.call(this, {
                _isForkEvent: true,
                _isTransactionOrderForkEvent: true,
                expiry: (expiry || 0),
                beforeHash: beforeHash,
                afterHash: afterHash
            }) || this;
            return _this;
        }
        return TransactionOrderForkEvent;
    }(ForkEvent));
    exports.TransactionOrderForkEvent = TransactionOrderForkEvent;
    ///////////////////////////////
    // Exported Abstracts
    var Provider = /** @class */ (function () {
        function Provider() {
            var _newTarget = this.constructor;
            logger.checkAbstract(_newTarget, Provider);
            (0, properties_1.defineReadOnly)(this, "_isProvider", true);
        }
        Provider.prototype.getFeeData = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, block, gasPrice, maxFeePerGas, maxPriorityFeePerGas;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, (0, properties_1.resolveProperties)({
                                block: this.getBlock("latest"),
                                gasPrice: this.getGasPrice().catch(function (error) {
                                    // @TODO: Why is this now failing on Calaveras?
                                    //console.log(error);
                                    return null;
                                })
                            })];
                        case 1:
                            _a = _b.sent(), block = _a.block, gasPrice = _a.gasPrice;
                            maxFeePerGas = null, maxPriorityFeePerGas = null;
                            if (block && block.baseFeePerGas) {
                                // We may want to compute this more accurately in the future,
                                // using the formula "check if the base fee is correct".
                                // See: https://eips.ethereum.org/EIPS/eip-1559
                                maxPriorityFeePerGas = bignumber_1.BigNumber.from("2500000000");
                                maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
                            }
                            return [2 /*return*/, { maxFeePerGas: maxFeePerGas, maxPriorityFeePerGas: maxPriorityFeePerGas, gasPrice: gasPrice }];
                    }
                });
            });
        };
        // Alias for "on"
        Provider.prototype.addListener = function (eventName, listener) {
            return this.on(eventName, listener);
        };
        // Alias for "off"
        Provider.prototype.removeListener = function (eventName, listener) {
            return this.off(eventName, listener);
        };
        Provider.isProvider = function (value) {
            return !!(value && value._isProvider);
        };
        return Provider;
    }());
    exports.Provider = Provider;
    
    },{"./_version":17,"@ethersproject/bignumber":29,"@ethersproject/bytes":31,"@ethersproject/logger":56,"@ethersproject/properties":62}],19:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "abstract-signer/5.5.0";
    
    },{}],20:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VoidSigner = exports.Signer = void 0;
    var properties_1 = require("@ethersproject/properties");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var allowedTransactionKeys = [
        "accessList", "chainId", "customData", "data", "from", "gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "to", "type", "value"
    ];
    var forwardErrors = [
        logger_1.Logger.errors.INSUFFICIENT_FUNDS,
        logger_1.Logger.errors.NONCE_EXPIRED,
        logger_1.Logger.errors.REPLACEMENT_UNDERPRICED,
    ];
    ;
    ;
    var Signer = /** @class */ (function () {
        ///////////////////
        // Sub-classes MUST call super
        function Signer() {
            var _newTarget = this.constructor;
            logger.checkAbstract(_newTarget, Signer);
            (0, properties_1.defineReadOnly)(this, "_isSigner", true);
        }
        ///////////////////
        // Sub-classes MAY override these
        Signer.prototype.getBalance = function (blockTag) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._checkProvider("getBalance");
                            return [4 /*yield*/, this.provider.getBalance(this.getAddress(), blockTag)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        Signer.prototype.getTransactionCount = function (blockTag) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._checkProvider("getTransactionCount");
                            return [4 /*yield*/, this.provider.getTransactionCount(this.getAddress(), blockTag)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        // Populates "from" if unspecified, and estimates the gas for the transaction
        Signer.prototype.estimateGas = function (transaction) {
            return __awaiter(this, void 0, void 0, function () {
                var tx;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._checkProvider("estimateGas");
                            return [4 /*yield*/, (0, properties_1.resolveProperties)(this.checkTransaction(transaction))];
                        case 1:
                            tx = _a.sent();
                            return [4 /*yield*/, this.provider.estimateGas(tx)];
                        case 2: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        // Populates "from" if unspecified, and calls with the transaction
        Signer.prototype.call = function (transaction, blockTag) {
            return __awaiter(this, void 0, void 0, function () {
                var tx;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._checkProvider("call");
                            return [4 /*yield*/, (0, properties_1.resolveProperties)(this.checkTransaction(transaction))];
                        case 1:
                            tx = _a.sent();
                            return [4 /*yield*/, this.provider.call(tx, blockTag)];
                        case 2: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        // Populates all fields in a transaction, signs it and sends it to the network
        Signer.prototype.sendTransaction = function (transaction) {
            return __awaiter(this, void 0, void 0, function () {
                var tx, signedTx;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._checkProvider("sendTransaction");
                            return [4 /*yield*/, this.populateTransaction(transaction)];
                        case 1:
                            tx = _a.sent();
                            return [4 /*yield*/, this.signTransaction(tx)];
                        case 2:
                            signedTx = _a.sent();
                            return [4 /*yield*/, this.provider.sendTransaction(signedTx)];
                        case 3: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        Signer.prototype.getChainId = function () {
            return __awaiter(this, void 0, void 0, function () {
                var network;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._checkProvider("getChainId");
                            return [4 /*yield*/, this.provider.getNetwork()];
                        case 1:
                            network = _a.sent();
                            return [2 /*return*/, network.chainId];
                    }
                });
            });
        };
        Signer.prototype.getGasPrice = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._checkProvider("getGasPrice");
                            return [4 /*yield*/, this.provider.getGasPrice()];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        Signer.prototype.getFeeData = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._checkProvider("getFeeData");
                            return [4 /*yield*/, this.provider.getFeeData()];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        Signer.prototype.resolveName = function (name) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._checkProvider("resolveName");
                            return [4 /*yield*/, this.provider.resolveName(name)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        // Checks a transaction does not contain invalid keys and if
        // no "from" is provided, populates it.
        // - does NOT require a provider
        // - adds "from" is not present
        // - returns a COPY (safe to mutate the result)
        // By default called from: (overriding these prevents it)
        //   - call
        //   - estimateGas
        //   - populateTransaction (and therefor sendTransaction)
        Signer.prototype.checkTransaction = function (transaction) {
            for (var key in transaction) {
                if (allowedTransactionKeys.indexOf(key) === -1) {
                    logger.throwArgumentError("invalid transaction key: " + key, "transaction", transaction);
                }
            }
            var tx = (0, properties_1.shallowCopy)(transaction);
            if (tx.from == null) {
                tx.from = this.getAddress();
            }
            else {
                // Make sure any provided address matches this signer
                tx.from = Promise.all([
                    Promise.resolve(tx.from),
                    this.getAddress()
                ]).then(function (result) {
                    if (result[0].toLowerCase() !== result[1].toLowerCase()) {
                        logger.throwArgumentError("from address mismatch", "transaction", transaction);
                    }
                    return result[0];
                });
            }
            return tx;
        };
        // Populates ALL keys for a transaction and checks that "from" matches
        // this Signer. Should be used by sendTransaction but NOT by signTransaction.
        // By default called from: (overriding these prevents it)
        //   - sendTransaction
        //
        // Notes:
        //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas
        Signer.prototype.populateTransaction = function (transaction) {
            return __awaiter(this, void 0, void 0, function () {
                var tx, hasEip1559, feeData, gasPrice;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, properties_1.resolveProperties)(this.checkTransaction(transaction))];
                        case 1:
                            tx = _a.sent();
                            if (tx.to != null) {
                                tx.to = Promise.resolve(tx.to).then(function (to) { return __awaiter(_this, void 0, void 0, function () {
                                    var address;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                if (to == null) {
                                                    return [2 /*return*/, null];
                                                }
                                                return [4 /*yield*/, this.resolveName(to)];
                                            case 1:
                                                address = _a.sent();
                                                if (address == null) {
                                                    logger.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                                                }
                                                return [2 /*return*/, address];
                                        }
                                    });
                                }); });
                                // Prevent this error from causing an UnhandledPromiseException
                                tx.to.catch(function (error) { });
                            }
                            hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);
                            if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
                                logger.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
                            }
                            else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
                                logger.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
                            }
                            if (!((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null))) return [3 /*break*/, 2];
                            // Fully-formed EIP-1559 transaction (skip getFeeData)
                            tx.type = 2;
                            return [3 /*break*/, 5];
                        case 2:
                            if (!(tx.type === 0 || tx.type === 1)) return [3 /*break*/, 3];
                            // Explicit Legacy or EIP-2930 transaction
                            // Populate missing gasPrice
                            if (tx.gasPrice == null) {
                                tx.gasPrice = this.getGasPrice();
                            }
                            return [3 /*break*/, 5];
                        case 3: return [4 /*yield*/, this.getFeeData()];
                        case 4:
                            feeData = _a.sent();
                            if (tx.type == null) {
                                // We need to auto-detect the intended type of this transaction...
                                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                                    // The network supports EIP-1559!
                                    // Upgrade transaction from null to eip-1559
                                    tx.type = 2;
                                    if (tx.gasPrice != null) {
                                        gasPrice = tx.gasPrice;
                                        delete tx.gasPrice;
                                        tx.maxFeePerGas = gasPrice;
                                        tx.maxPriorityFeePerGas = gasPrice;
                                    }
                                    else {
                                        // Populate missing fee data
                                        if (tx.maxFeePerGas == null) {
                                            tx.maxFeePerGas = feeData.maxFeePerGas;
                                        }
                                        if (tx.maxPriorityFeePerGas == null) {
                                            tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                                        }
                                    }
                                }
                                else if (feeData.gasPrice != null) {
                                    // Network doesn't support EIP-1559...
                                    // ...but they are trying to use EIP-1559 properties
                                    if (hasEip1559) {
                                        logger.throwError("network does not support EIP-1559", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                                            operation: "populateTransaction"
                                        });
                                    }
                                    // Populate missing fee data
                                    if (tx.gasPrice == null) {
                                        tx.gasPrice = feeData.gasPrice;
                                    }
                                    // Explicitly set untyped transaction to legacy
                                    tx.type = 0;
                                }
                                else {
                                    // getFeeData has failed us.
                                    logger.throwError("failed to get consistent fee data", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                                        operation: "signer.getFeeData"
                                    });
                                }
                            }
                            else if (tx.type === 2) {
                                // Explicitly using EIP-1559
                                // Populate missing fee data
                                if (tx.maxFeePerGas == null) {
                                    tx.maxFeePerGas = feeData.maxFeePerGas;
                                }
                                if (tx.maxPriorityFeePerGas == null) {
                                    tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                                }
                            }
                            _a.label = 5;
                        case 5:
                            if (tx.nonce == null) {
                                tx.nonce = this.getTransactionCount("pending");
                            }
                            if (tx.gasLimit == null) {
                                tx.gasLimit = this.estimateGas(tx).catch(function (error) {
                                    if (forwardErrors.indexOf(error.code) >= 0) {
                                        throw error;
                                    }
                                    return logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                                        error: error,
                                        tx: tx
                                    });
                                });
                            }
                            if (tx.chainId == null) {
                                tx.chainId = this.getChainId();
                            }
                            else {
                                tx.chainId = Promise.all([
                                    Promise.resolve(tx.chainId),
                                    this.getChainId()
                                ]).then(function (results) {
                                    if (results[1] !== 0 && results[0] !== results[1]) {
                                        logger.throwArgumentError("chainId address mismatch", "transaction", transaction);
                                    }
                                    return results[0];
                                });
                            }
                            return [4 /*yield*/, (0, properties_1.resolveProperties)(tx)];
                        case 6: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        ///////////////////
        // Sub-classes SHOULD leave these alone
        Signer.prototype._checkProvider = function (operation) {
            if (!this.provider) {
                logger.throwError("missing provider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: (operation || "_checkProvider")
                });
            }
        };
        Signer.isSigner = function (value) {
            return !!(value && value._isSigner);
        };
        return Signer;
    }());
    exports.Signer = Signer;
    var VoidSigner = /** @class */ (function (_super) {
        __extends(VoidSigner, _super);
        function VoidSigner(address, provider) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkNew(_newTarget, VoidSigner);
            _this = _super.call(this) || this;
            (0, properties_1.defineReadOnly)(_this, "address", address);
            (0, properties_1.defineReadOnly)(_this, "provider", provider || null);
            return _this;
        }
        VoidSigner.prototype.getAddress = function () {
            return Promise.resolve(this.address);
        };
        VoidSigner.prototype._fail = function (message, operation) {
            return Promise.resolve().then(function () {
                logger.throwError(message, logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });
            });
        };
        VoidSigner.prototype.signMessage = function (message) {
            return this._fail("VoidSigner cannot sign messages", "signMessage");
        };
        VoidSigner.prototype.signTransaction = function (transaction) {
            return this._fail("VoidSigner cannot sign transactions", "signTransaction");
        };
        VoidSigner.prototype._signTypedData = function (domain, types, value) {
            return this._fail("VoidSigner cannot sign typed data", "signTypedData");
        };
        VoidSigner.prototype.connect = function (provider) {
            return new VoidSigner(this.address, provider);
        };
        return VoidSigner;
    }(Signer));
    exports.VoidSigner = VoidSigner;
    
    },{"./_version":19,"@ethersproject/logger":56,"@ethersproject/properties":62}],21:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "address/5.5.0";
    
    },{}],22:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCreate2Address = exports.getContractAddress = exports.getIcapAddress = exports.isAddress = exports.getAddress = void 0;
    var bytes_1 = require("@ethersproject/bytes");
    var bignumber_1 = require("@ethersproject/bignumber");
    var keccak256_1 = require("@ethersproject/keccak256");
    var rlp_1 = require("@ethersproject/rlp");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    function getChecksumAddress(address) {
        if (!(0, bytes_1.isHexString)(address, 20)) {
            logger.throwArgumentError("invalid address", "address", address);
        }
        address = address.toLowerCase();
        var chars = address.substring(2).split("");
        var expanded = new Uint8Array(40);
        for (var i = 0; i < 40; i++) {
            expanded[i] = chars[i].charCodeAt(0);
        }
        var hashed = (0, bytes_1.arrayify)((0, keccak256_1.keccak256)(expanded));
        for (var i = 0; i < 40; i += 2) {
            if ((hashed[i >> 1] >> 4) >= 8) {
                chars[i] = chars[i].toUpperCase();
            }
            if ((hashed[i >> 1] & 0x0f) >= 8) {
                chars[i + 1] = chars[i + 1].toUpperCase();
            }
        }
        return "0x" + chars.join("");
    }
    // Shims for environments that are missing some required constants and functions
    var MAX_SAFE_INTEGER = 0x1fffffffffffff;
    function log10(x) {
        if (Math.log10) {
            return Math.log10(x);
        }
        return Math.log(x) / Math.LN10;
    }
    // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
    // Create lookup table
    var ibanLookup = {};
    for (var i = 0; i < 10; i++) {
        ibanLookup[String(i)] = String(i);
    }
    for (var i = 0; i < 26; i++) {
        ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
    }
    // How many decimal digits can we process? (for 64-bit float, this is 15)
    var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
    function ibanChecksum(address) {
        address = address.toUpperCase();
        address = address.substring(4) + address.substring(0, 2) + "00";
        var expanded = address.split("").map(function (c) { return ibanLookup[c]; }).join("");
        // Javascript can handle integers safely up to 15 (decimal) digits
        while (expanded.length >= safeDigits) {
            var block = expanded.substring(0, safeDigits);
            expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
        }
        var checksum = String(98 - (parseInt(expanded, 10) % 97));
        while (checksum.length < 2) {
            checksum = "0" + checksum;
        }
        return checksum;
    }
    ;
    function getAddress(address) {
        var result = null;
        if (typeof (address) !== "string") {
            logger.throwArgumentError("invalid address", "address", address);
        }
        if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
            // Missing the 0x prefix
            if (address.substring(0, 2) !== "0x") {
                address = "0x" + address;
            }
            result = getChecksumAddress(address);
            // It is a checksummed address with a bad checksum
            if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
                logger.throwArgumentError("bad address checksum", "address", address);
            }
            // Maybe ICAP? (we only support direct mode)
        }
        else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
            // It is an ICAP address with a bad checksum
            if (address.substring(2, 4) !== ibanChecksum(address)) {
                logger.throwArgumentError("bad icap checksum", "address", address);
            }
            result = (0, bignumber_1._base36To16)(address.substring(4));
            while (result.length < 40) {
                result = "0" + result;
            }
            result = getChecksumAddress("0x" + result);
        }
        else {
            logger.throwArgumentError("invalid address", "address", address);
        }
        return result;
    }
    exports.getAddress = getAddress;
    function isAddress(address) {
        try {
            getAddress(address);
            return true;
        }
        catch (error) { }
        return false;
    }
    exports.isAddress = isAddress;
    function getIcapAddress(address) {
        var base36 = (0, bignumber_1._base16To36)(getAddress(address).substring(2)).toUpperCase();
        while (base36.length < 30) {
            base36 = "0" + base36;
        }
        return "XE" + ibanChecksum("XE00" + base36) + base36;
    }
    exports.getIcapAddress = getIcapAddress;
    // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
    function getContractAddress(transaction) {
        var from = null;
        try {
            from = getAddress(transaction.from);
        }
        catch (error) {
            logger.throwArgumentError("missing from address", "transaction", transaction);
        }
        var nonce = (0, bytes_1.stripZeros)((0, bytes_1.arrayify)(bignumber_1.BigNumber.from(transaction.nonce).toHexString()));
        return getAddress((0, bytes_1.hexDataSlice)((0, keccak256_1.keccak256)((0, rlp_1.encode)([from, nonce])), 12));
    }
    exports.getContractAddress = getContractAddress;
    function getCreate2Address(from, salt, initCodeHash) {
        if ((0, bytes_1.hexDataLength)(salt) !== 32) {
            logger.throwArgumentError("salt must be 32 bytes", "salt", salt);
        }
        if ((0, bytes_1.hexDataLength)(initCodeHash) !== 32) {
            logger.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
        }
        return getAddress((0, bytes_1.hexDataSlice)((0, keccak256_1.keccak256)((0, bytes_1.concat)(["0xff", getAddress(from), salt, initCodeHash])), 12));
    }
    exports.getCreate2Address = getCreate2Address;
    
    },{"./_version":21,"@ethersproject/bignumber":29,"@ethersproject/bytes":31,"@ethersproject/keccak256":54,"@ethersproject/logger":56,"@ethersproject/rlp":86}],23:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encode = exports.decode = void 0;
    var bytes_1 = require("@ethersproject/bytes");
    function decode(textData) {
        textData = atob(textData);
        var data = [];
        for (var i = 0; i < textData.length; i++) {
            data.push(textData.charCodeAt(i));
        }
        return (0, bytes_1.arrayify)(data);
    }
    exports.decode = decode;
    function encode(data) {
        data = (0, bytes_1.arrayify)(data);
        var textData = "";
        for (var i = 0; i < data.length; i++) {
            textData += String.fromCharCode(data[i]);
        }
        return btoa(textData);
    }
    exports.encode = encode;
    
    },{"@ethersproject/bytes":31}],24:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encode = exports.decode = void 0;
    var base64_1 = require("./base64");
    Object.defineProperty(exports, "decode", { enumerable: true, get: function () { return base64_1.decode; } });
    Object.defineProperty(exports, "encode", { enumerable: true, get: function () { return base64_1.encode; } });
    
    },{"./base64":23}],25:[function(require,module,exports){
    "use strict";
    /**
     * var basex = require("base-x");
     *
     * This implementation is heavily based on base-x. The main reason to
     * deviate was to prevent the dependency of Buffer.
     *
     * Contributors:
     *
     * base-x encoding
     * Forked from https://github.com/cryptocoinjs/bs58
     * Originally written by Mike Hearn for BitcoinJ
     * Copyright (c) 2011 Google Inc
     * Ported to JavaScript by Stefan Thomas
     * Merged Buffer refactorings from base58-native by Stephen Pair
     * Copyright (c) 2013 BitPay Inc
     *
     * The MIT License (MIT)
     *
     * Copyright base-x contributors (c) 2016
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
    
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
     * IN THE SOFTWARE.
     *
     */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Base58 = exports.Base32 = exports.BaseX = void 0;
    var bytes_1 = require("@ethersproject/bytes");
    var properties_1 = require("@ethersproject/properties");
    var BaseX = /** @class */ (function () {
        function BaseX(alphabet) {
            (0, properties_1.defineReadOnly)(this, "alphabet", alphabet);
            (0, properties_1.defineReadOnly)(this, "base", alphabet.length);
            (0, properties_1.defineReadOnly)(this, "_alphabetMap", {});
            (0, properties_1.defineReadOnly)(this, "_leader", alphabet.charAt(0));
            // pre-compute lookup table
            for (var i = 0; i < alphabet.length; i++) {
                this._alphabetMap[alphabet.charAt(i)] = i;
            }
        }
        BaseX.prototype.encode = function (value) {
            var source = (0, bytes_1.arrayify)(value);
            if (source.length === 0) {
                return "";
            }
            var digits = [0];
            for (var i = 0; i < source.length; ++i) {
                var carry = source[i];
                for (var j = 0; j < digits.length; ++j) {
                    carry += digits[j] << 8;
                    digits[j] = carry % this.base;
                    carry = (carry / this.base) | 0;
                }
                while (carry > 0) {
                    digits.push(carry % this.base);
                    carry = (carry / this.base) | 0;
                }
            }
            var string = "";
            // deal with leading zeros
            for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) {
                string += this._leader;
            }
            // convert digits to a string
            for (var q = digits.length - 1; q >= 0; --q) {
                string += this.alphabet[digits[q]];
            }
            return string;
        };
        BaseX.prototype.decode = function (value) {
            if (typeof (value) !== "string") {
                throw new TypeError("Expected String");
            }
            var bytes = [];
            if (value.length === 0) {
                return new Uint8Array(bytes);
            }
            bytes.push(0);
            for (var i = 0; i < value.length; i++) {
                var byte = this._alphabetMap[value[i]];
                if (byte === undefined) {
                    throw new Error("Non-base" + this.base + " character");
                }
                var carry = byte;
                for (var j = 0; j < bytes.length; ++j) {
                    carry += bytes[j] * this.base;
                    bytes[j] = carry & 0xff;
                    carry >>= 8;
                }
                while (carry > 0) {
                    bytes.push(carry & 0xff);
                    carry >>= 8;
                }
            }
            // deal with leading zeros
            for (var k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
                bytes.push(0);
            }
            return (0, bytes_1.arrayify)(new Uint8Array(bytes.reverse()));
        };
        return BaseX;
    }());
    exports.BaseX = BaseX;
    var Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
    exports.Base32 = Base32;
    var Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
    exports.Base58 = Base58;
    //console.log(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj"))
    //console.log(Base58.encode(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj")))
    
    },{"@ethersproject/bytes":31,"@ethersproject/properties":62}],26:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "bignumber/5.5.0";
    
    },{}],27:[function(require,module,exports){
    "use strict";
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._base16To36 = exports._base36To16 = exports.BigNumber = exports.isBigNumberish = void 0;
    /**
     *  BigNumber
     *
     *  A wrapper around the BN.js object. We use the BN.js library
     *  because it is used by elliptic, so it is required regardless.
     *
     */
    var bn_js_1 = __importDefault(require("bn.js"));
    var BN = bn_js_1.default.BN;
    var bytes_1 = require("@ethersproject/bytes");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var _constructorGuard = {};
    var MAX_SAFE = 0x1fffffffffffff;
    function isBigNumberish(value) {
        return (value != null) && (BigNumber.isBigNumber(value) ||
            (typeof (value) === "number" && (value % 1) === 0) ||
            (typeof (value) === "string" && !!value.match(/^-?[0-9]+$/)) ||
            (0, bytes_1.isHexString)(value) ||
            (typeof (value) === "bigint") ||
            (0, bytes_1.isBytes)(value));
    }
    exports.isBigNumberish = isBigNumberish;
    // Only warn about passing 10 into radix once
    var _warnedToStringRadix = false;
    var BigNumber = /** @class */ (function () {
        function BigNumber(constructorGuard, hex) {
            var _newTarget = this.constructor;
            logger.checkNew(_newTarget, BigNumber);
            if (constructorGuard !== _constructorGuard) {
                logger.throwError("cannot call constructor directly; use BigNumber.from", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new (BigNumber)"
                });
            }
            this._hex = hex;
            this._isBigNumber = true;
            Object.freeze(this);
        }
        BigNumber.prototype.fromTwos = function (value) {
            return toBigNumber(toBN(this).fromTwos(value));
        };
        BigNumber.prototype.toTwos = function (value) {
            return toBigNumber(toBN(this).toTwos(value));
        };
        BigNumber.prototype.abs = function () {
            if (this._hex[0] === "-") {
                return BigNumber.from(this._hex.substring(1));
            }
            return this;
        };
        BigNumber.prototype.add = function (other) {
            return toBigNumber(toBN(this).add(toBN(other)));
        };
        BigNumber.prototype.sub = function (other) {
            return toBigNumber(toBN(this).sub(toBN(other)));
        };
        BigNumber.prototype.div = function (other) {
            var o = BigNumber.from(other);
            if (o.isZero()) {
                throwFault("division by zero", "div");
            }
            return toBigNumber(toBN(this).div(toBN(other)));
        };
        BigNumber.prototype.mul = function (other) {
            return toBigNumber(toBN(this).mul(toBN(other)));
        };
        BigNumber.prototype.mod = function (other) {
            var value = toBN(other);
            if (value.isNeg()) {
                throwFault("cannot modulo negative values", "mod");
            }
            return toBigNumber(toBN(this).umod(value));
        };
        BigNumber.prototype.pow = function (other) {
            var value = toBN(other);
            if (value.isNeg()) {
                throwFault("cannot raise to negative values", "pow");
            }
            return toBigNumber(toBN(this).pow(value));
        };
        BigNumber.prototype.and = function (other) {
            var value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault("cannot 'and' negative values", "and");
            }
            return toBigNumber(toBN(this).and(value));
        };
        BigNumber.prototype.or = function (other) {
            var value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault("cannot 'or' negative values", "or");
            }
            return toBigNumber(toBN(this).or(value));
        };
        BigNumber.prototype.xor = function (other) {
            var value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault("cannot 'xor' negative values", "xor");
            }
            return toBigNumber(toBN(this).xor(value));
        };
        BigNumber.prototype.mask = function (value) {
            if (this.isNegative() || value < 0) {
                throwFault("cannot mask negative values", "mask");
            }
            return toBigNumber(toBN(this).maskn(value));
        };
        BigNumber.prototype.shl = function (value) {
            if (this.isNegative() || value < 0) {
                throwFault("cannot shift negative values", "shl");
            }
            return toBigNumber(toBN(this).shln(value));
        };
        BigNumber.prototype.shr = function (value) {
            if (this.isNegative() || value < 0) {
                throwFault("cannot shift negative values", "shr");
            }
            return toBigNumber(toBN(this).shrn(value));
        };
        BigNumber.prototype.eq = function (other) {
            return toBN(this).eq(toBN(other));
        };
        BigNumber.prototype.lt = function (other) {
            return toBN(this).lt(toBN(other));
        };
        BigNumber.prototype.lte = function (other) {
            return toBN(this).lte(toBN(other));
        };
        BigNumber.prototype.gt = function (other) {
            return toBN(this).gt(toBN(other));
        };
        BigNumber.prototype.gte = function (other) {
            return toBN(this).gte(toBN(other));
        };
        BigNumber.prototype.isNegative = function () {
            return (this._hex[0] === "-");
        };
        BigNumber.prototype.isZero = function () {
            return toBN(this).isZero();
        };
        BigNumber.prototype.toNumber = function () {
            try {
                return toBN(this).toNumber();
            }
            catch (error) {
                throwFault("overflow", "toNumber", this.toString());
            }
            return null;
        };
        BigNumber.prototype.toBigInt = function () {
            try {
                return BigInt(this.toString());
            }
            catch (e) { }
            return logger.throwError("this platform does not support BigInt", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                value: this.toString()
            });
        };
        BigNumber.prototype.toString = function () {
            // Lots of people expect this, which we do not support, so check (See: #889)
            if (arguments.length > 0) {
                if (arguments[0] === 10) {
                    if (!_warnedToStringRadix) {
                        _warnedToStringRadix = true;
                        logger.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
                    }
                }
                else if (arguments[0] === 16) {
                    logger.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {});
                }
                else {
                    logger.throwError("BigNumber.toString does not accept parameters", logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {});
                }
            }
            return toBN(this).toString(10);
        };
        BigNumber.prototype.toHexString = function () {
            return this._hex;
        };
        BigNumber.prototype.toJSON = function (key) {
            return { type: "BigNumber", hex: this.toHexString() };
        };
        BigNumber.from = function (value) {
            if (value instanceof BigNumber) {
                return value;
            }
            if (typeof (value) === "string") {
                if (value.match(/^-?0x[0-9a-f]+$/i)) {
                    return new BigNumber(_constructorGuard, toHex(value));
                }
                if (value.match(/^-?[0-9]+$/)) {
                    return new BigNumber(_constructorGuard, toHex(new BN(value)));
                }
                return logger.throwArgumentError("invalid BigNumber string", "value", value);
            }
            if (typeof (value) === "number") {
                if (value % 1) {
                    throwFault("underflow", "BigNumber.from", value);
                }
                if (value >= MAX_SAFE || value <= -MAX_SAFE) {
                    throwFault("overflow", "BigNumber.from", value);
                }
                return BigNumber.from(String(value));
            }
            var anyValue = value;
            if (typeof (anyValue) === "bigint") {
                return BigNumber.from(anyValue.toString());
            }
            if ((0, bytes_1.isBytes)(anyValue)) {
                return BigNumber.from((0, bytes_1.hexlify)(anyValue));
            }
            if (anyValue) {
                // Hexable interface (takes priority)
                if (anyValue.toHexString) {
                    var hex = anyValue.toHexString();
                    if (typeof (hex) === "string") {
                        return BigNumber.from(hex);
                    }
                }
                else {
                    // For now, handle legacy JSON-ified values (goes away in v6)
                    var hex = anyValue._hex;
                    // New-form JSON
                    if (hex == null && anyValue.type === "BigNumber") {
                        hex = anyValue.hex;
                    }
                    if (typeof (hex) === "string") {
                        if ((0, bytes_1.isHexString)(hex) || (hex[0] === "-" && (0, bytes_1.isHexString)(hex.substring(1)))) {
                            return BigNumber.from(hex);
                        }
                    }
                }
            }
            return logger.throwArgumentError("invalid BigNumber value", "value", value);
        };
        BigNumber.isBigNumber = function (value) {
            return !!(value && value._isBigNumber);
        };
        return BigNumber;
    }());
    exports.BigNumber = BigNumber;
    // Normalize the hex string
    function toHex(value) {
        // For BN, call on the hex string
        if (typeof (value) !== "string") {
            return toHex(value.toString(16));
        }
        // If negative, prepend the negative sign to the normalized positive value
        if (value[0] === "-") {
            // Strip off the negative sign
            value = value.substring(1);
            // Cannot have multiple negative signs (e.g. "--0x04")
            if (value[0] === "-") {
                logger.throwArgumentError("invalid hex", "value", value);
            }
            // Call toHex on the positive component
            value = toHex(value);
            // Do not allow "-0x00"
            if (value === "0x00") {
                return value;
            }
            // Negate the value
            return "-" + value;
        }
        // Add a "0x" prefix if missing
        if (value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        // Normalize zero
        if (value === "0x") {
            return "0x00";
        }
        // Make the string even length
        if (value.length % 2) {
            value = "0x0" + value.substring(2);
        }
        // Trim to smallest even-length string
        while (value.length > 4 && value.substring(0, 4) === "0x00") {
            value = "0x" + value.substring(4);
        }
        return value;
    }
    function toBigNumber(value) {
        return BigNumber.from(toHex(value));
    }
    function toBN(value) {
        var hex = BigNumber.from(value).toHexString();
        if (hex[0] === "-") {
            return (new BN("-" + hex.substring(3), 16));
        }
        return new BN(hex.substring(2), 16);
    }
    function throwFault(fault, operation, value) {
        var params = { fault: fault, operation: operation };
        if (value != null) {
            params.value = value;
        }
        return logger.throwError(fault, logger_1.Logger.errors.NUMERIC_FAULT, params);
    }
    // value should have no prefix
    function _base36To16(value) {
        return (new BN(value, 36)).toString(16);
    }
    exports._base36To16 = _base36To16;
    // value should have no prefix
    function _base16To36(value) {
        return (new BN(value, 16)).toString(36);
    }
    exports._base16To36 = _base16To36;
    
    },{"./_version":26,"@ethersproject/bytes":31,"@ethersproject/logger":56,"bn.js":123}],28:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FixedNumber = exports.FixedFormat = exports.parseFixed = exports.formatFixed = void 0;
    var bytes_1 = require("@ethersproject/bytes");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var bignumber_1 = require("./bignumber");
    var _constructorGuard = {};
    var Zero = bignumber_1.BigNumber.from(0);
    var NegativeOne = bignumber_1.BigNumber.from(-1);
    function throwFault(message, fault, operation, value) {
        var params = { fault: fault, operation: operation };
        if (value !== undefined) {
            params.value = value;
        }
        return logger.throwError(message, logger_1.Logger.errors.NUMERIC_FAULT, params);
    }
    // Constant to pull zeros from for multipliers
    var zeros = "0";
    while (zeros.length < 256) {
        zeros += zeros;
    }
    // Returns a string "1" followed by decimal "0"s
    function getMultiplier(decimals) {
        if (typeof (decimals) !== "number") {
            try {
                decimals = bignumber_1.BigNumber.from(decimals).toNumber();
            }
            catch (e) { }
        }
        if (typeof (decimals) === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
            return ("1" + zeros.substring(0, decimals));
        }
        return logger.throwArgumentError("invalid decimal size", "decimals", decimals);
    }
    function formatFixed(value, decimals) {
        if (decimals == null) {
            decimals = 0;
        }
        var multiplier = getMultiplier(decimals);
        // Make sure wei is a big number (convert as necessary)
        value = bignumber_1.BigNumber.from(value);
        var negative = value.lt(Zero);
        if (negative) {
            value = value.mul(NegativeOne);
        }
        var fraction = value.mod(multiplier).toString();
        while (fraction.length < multiplier.length - 1) {
            fraction = "0" + fraction;
        }
        // Strip training 0
        fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
        var whole = value.div(multiplier).toString();
        if (multiplier.length === 1) {
            value = whole;
        }
        else {
            value = whole + "." + fraction;
        }
        if (negative) {
            value = "-" + value;
        }
        return value;
    }
    exports.formatFixed = formatFixed;
    function parseFixed(value, decimals) {
        if (decimals == null) {
            decimals = 0;
        }
        var multiplier = getMultiplier(decimals);
        if (typeof (value) !== "string" || !value.match(/^-?[0-9.]+$/)) {
            logger.throwArgumentError("invalid decimal value", "value", value);
        }
        // Is it negative?
        var negative = (value.substring(0, 1) === "-");
        if (negative) {
            value = value.substring(1);
        }
        if (value === ".") {
            logger.throwArgumentError("missing value", "value", value);
        }
        // Split it into a whole and fractional part
        var comps = value.split(".");
        if (comps.length > 2) {
            logger.throwArgumentError("too many decimal points", "value", value);
        }
        var whole = comps[0], fraction = comps[1];
        if (!whole) {
            whole = "0";
        }
        if (!fraction) {
            fraction = "0";
        }
        // Trim trailing zeros
        while (fraction[fraction.length - 1] === "0") {
            fraction = fraction.substring(0, fraction.length - 1);
        }
        // Check the fraction doesn't exceed our decimals size
        if (fraction.length > multiplier.length - 1) {
            throwFault("fractional component exceeds decimals", "underflow", "parseFixed");
        }
        // If decimals is 0, we have an empty string for fraction
        if (fraction === "") {
            fraction = "0";
        }
        // Fully pad the string with zeros to get to wei
        while (fraction.length < multiplier.length - 1) {
            fraction += "0";
        }
        var wholeValue = bignumber_1.BigNumber.from(whole);
        var fractionValue = bignumber_1.BigNumber.from(fraction);
        var wei = (wholeValue.mul(multiplier)).add(fractionValue);
        if (negative) {
            wei = wei.mul(NegativeOne);
        }
        return wei;
    }
    exports.parseFixed = parseFixed;
    var FixedFormat = /** @class */ (function () {
        function FixedFormat(constructorGuard, signed, width, decimals) {
            if (constructorGuard !== _constructorGuard) {
                logger.throwError("cannot use FixedFormat constructor; use FixedFormat.from", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new FixedFormat"
                });
            }
            this.signed = signed;
            this.width = width;
            this.decimals = decimals;
            this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
            this._multiplier = getMultiplier(decimals);
            Object.freeze(this);
        }
        FixedFormat.from = function (value) {
            if (value instanceof FixedFormat) {
                return value;
            }
            if (typeof (value) === "number") {
                value = "fixed128x" + value;
            }
            var signed = true;
            var width = 128;
            var decimals = 18;
            if (typeof (value) === "string") {
                if (value === "fixed") {
                    // defaults...
                }
                else if (value === "ufixed") {
                    signed = false;
                }
                else {
                    var match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                    if (!match) {
                        logger.throwArgumentError("invalid fixed format", "format", value);
                    }
                    signed = (match[1] !== "u");
                    width = parseInt(match[2]);
                    decimals = parseInt(match[3]);
                }
            }
            else if (value) {
                var check = function (key, type, defaultValue) {
                    if (value[key] == null) {
                        return defaultValue;
                    }
                    if (typeof (value[key]) !== type) {
                        logger.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
                    }
                    return value[key];
                };
                signed = check("signed", "boolean", signed);
                width = check("width", "number", width);
                decimals = check("decimals", "number", decimals);
            }
            if (width % 8) {
                logger.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
            }
            if (decimals > 80) {
                logger.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
            }
            return new FixedFormat(_constructorGuard, signed, width, decimals);
        };
        return FixedFormat;
    }());
    exports.FixedFormat = FixedFormat;
    var FixedNumber = /** @class */ (function () {
        function FixedNumber(constructorGuard, hex, value, format) {
            var _newTarget = this.constructor;
            logger.checkNew(_newTarget, FixedNumber);
            if (constructorGuard !== _constructorGuard) {
                logger.throwError("cannot use FixedNumber constructor; use FixedNumber.from", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new FixedFormat"
                });
            }
            this.format = format;
            this._hex = hex;
            this._value = value;
            this._isFixedNumber = true;
            Object.freeze(this);
        }
        FixedNumber.prototype._checkFormat = function (other) {
            if (this.format.name !== other.format.name) {
                logger.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
            }
        };
        FixedNumber.prototype.addUnsafe = function (other) {
            this._checkFormat(other);
            var a = parseFixed(this._value, this.format.decimals);
            var b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
        };
        FixedNumber.prototype.subUnsafe = function (other) {
            this._checkFormat(other);
            var a = parseFixed(this._value, this.format.decimals);
            var b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
        };
        FixedNumber.prototype.mulUnsafe = function (other) {
            this._checkFormat(other);
            var a = parseFixed(this._value, this.format.decimals);
            var b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
        };
        FixedNumber.prototype.divUnsafe = function (other) {
            this._checkFormat(other);
            var a = parseFixed(this._value, this.format.decimals);
            var b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
        };
        FixedNumber.prototype.floor = function () {
            var comps = this.toString().split(".");
            if (comps.length === 1) {
                comps.push("0");
            }
            var result = FixedNumber.from(comps[0], this.format);
            var hasFraction = !comps[1].match(/^(0*)$/);
            if (this.isNegative() && hasFraction) {
                result = result.subUnsafe(ONE.toFormat(result.format));
            }
            return result;
        };
        FixedNumber.prototype.ceiling = function () {
            var comps = this.toString().split(".");
            if (comps.length === 1) {
                comps.push("0");
            }
            var result = FixedNumber.from(comps[0], this.format);
            var hasFraction = !comps[1].match(/^(0*)$/);
            if (!this.isNegative() && hasFraction) {
                result = result.addUnsafe(ONE.toFormat(result.format));
            }
            return result;
        };
        // @TODO: Support other rounding algorithms
        FixedNumber.prototype.round = function (decimals) {
            if (decimals == null) {
                decimals = 0;
            }
            // If we are already in range, we're done
            var comps = this.toString().split(".");
            if (comps.length === 1) {
                comps.push("0");
            }
            if (decimals < 0 || decimals > 80 || (decimals % 1)) {
                logger.throwArgumentError("invalid decimal count", "decimals", decimals);
            }
            if (comps[1].length <= decimals) {
                return this;
            }
            var factor = FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
            var bump = BUMP.toFormat(this.format);
            return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
        };
        FixedNumber.prototype.isZero = function () {
            return (this._value === "0.0" || this._value === "0");
        };
        FixedNumber.prototype.isNegative = function () {
            return (this._value[0] === "-");
        };
        FixedNumber.prototype.toString = function () { return this._value; };
        FixedNumber.prototype.toHexString = function (width) {
            if (width == null) {
                return this._hex;
            }
            if (width % 8) {
                logger.throwArgumentError("invalid byte width", "width", width);
            }
            var hex = bignumber_1.BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
            return (0, bytes_1.hexZeroPad)(hex, width / 8);
        };
        FixedNumber.prototype.toUnsafeFloat = function () { return parseFloat(this.toString()); };
        FixedNumber.prototype.toFormat = function (format) {
            return FixedNumber.fromString(this._value, format);
        };
        FixedNumber.fromValue = function (value, decimals, format) {
            // If decimals looks more like a format, and there is no format, shift the parameters
            if (format == null && decimals != null && !(0, bignumber_1.isBigNumberish)(decimals)) {
                format = decimals;
                decimals = null;
            }
            if (decimals == null) {
                decimals = 0;
            }
            if (format == null) {
                format = "fixed";
            }
            return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
        };
        FixedNumber.fromString = function (value, format) {
            if (format == null) {
                format = "fixed";
            }
            var fixedFormat = FixedFormat.from(format);
            var numeric = parseFixed(value, fixedFormat.decimals);
            if (!fixedFormat.signed && numeric.lt(Zero)) {
                throwFault("unsigned value cannot be negative", "overflow", "value", value);
            }
            var hex = null;
            if (fixedFormat.signed) {
                hex = numeric.toTwos(fixedFormat.width).toHexString();
            }
            else {
                hex = numeric.toHexString();
                hex = (0, bytes_1.hexZeroPad)(hex, fixedFormat.width / 8);
            }
            var decimal = formatFixed(numeric, fixedFormat.decimals);
            return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);
        };
        FixedNumber.fromBytes = function (value, format) {
            if (format == null) {
                format = "fixed";
            }
            var fixedFormat = FixedFormat.from(format);
            if ((0, bytes_1.arrayify)(value).length > fixedFormat.width / 8) {
                throw new Error("overflow");
            }
            var numeric = bignumber_1.BigNumber.from(value);
            if (fixedFormat.signed) {
                numeric = numeric.fromTwos(fixedFormat.width);
            }
            var hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
            var decimal = formatFixed(numeric, fixedFormat.decimals);
            return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);
        };
        FixedNumber.from = function (value, format) {
            if (typeof (value) === "string") {
                return FixedNumber.fromString(value, format);
            }
            if ((0, bytes_1.isBytes)(value)) {
                return FixedNumber.fromBytes(value, format);
            }
            try {
                return FixedNumber.fromValue(value, 0, format);
            }
            catch (error) {
                // Allow NUMERIC_FAULT to bubble up
                if (error.code !== logger_1.Logger.errors.INVALID_ARGUMENT) {
                    throw error;
                }
            }
            return logger.throwArgumentError("invalid FixedNumber value", "value", value);
        };
        FixedNumber.isFixedNumber = function (value) {
            return !!(value && value._isFixedNumber);
        };
        return FixedNumber;
    }());
    exports.FixedNumber = FixedNumber;
    var ONE = FixedNumber.from(1);
    var BUMP = FixedNumber.from("0.5");
    
    },{"./_version":26,"./bignumber":27,"@ethersproject/bytes":31,"@ethersproject/logger":56}],29:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._base36To16 = exports._base16To36 = exports.parseFixed = exports.FixedNumber = exports.FixedFormat = exports.formatFixed = exports.BigNumber = void 0;
    var bignumber_1 = require("./bignumber");
    Object.defineProperty(exports, "BigNumber", { enumerable: true, get: function () { return bignumber_1.BigNumber; } });
    var fixednumber_1 = require("./fixednumber");
    Object.defineProperty(exports, "formatFixed", { enumerable: true, get: function () { return fixednumber_1.formatFixed; } });
    Object.defineProperty(exports, "FixedFormat", { enumerable: true, get: function () { return fixednumber_1.FixedFormat; } });
    Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function () { return fixednumber_1.FixedNumber; } });
    Object.defineProperty(exports, "parseFixed", { enumerable: true, get: function () { return fixednumber_1.parseFixed; } });
    // Internal methods used by address
    var bignumber_2 = require("./bignumber");
    Object.defineProperty(exports, "_base16To36", { enumerable: true, get: function () { return bignumber_2._base16To36; } });
    Object.defineProperty(exports, "_base36To16", { enumerable: true, get: function () { return bignumber_2._base36To16; } });
    
    },{"./bignumber":27,"./fixednumber":28}],30:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "bytes/5.5.0";
    
    },{}],31:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.joinSignature = exports.splitSignature = exports.hexZeroPad = exports.hexStripZeros = exports.hexValue = exports.hexConcat = exports.hexDataSlice = exports.hexDataLength = exports.hexlify = exports.isHexString = exports.zeroPad = exports.stripZeros = exports.concat = exports.arrayify = exports.isBytes = exports.isBytesLike = void 0;
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    ///////////////////////////////
    function isHexable(value) {
        return !!(value.toHexString);
    }
    function addSlice(array) {
        if (array.slice) {
            return array;
        }
        array.slice = function () {
            var args = Array.prototype.slice.call(arguments);
            return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
        };
        return array;
    }
    function isBytesLike(value) {
        return ((isHexString(value) && !(value.length % 2)) || isBytes(value));
    }
    exports.isBytesLike = isBytesLike;
    function isInteger(value) {
        return (typeof (value) === "number" && value == value && (value % 1) === 0);
    }
    function isBytes(value) {
        if (value == null) {
            return false;
        }
        if (value.constructor === Uint8Array) {
            return true;
        }
        if (typeof (value) === "string") {
            return false;
        }
        if (!isInteger(value.length) || value.length < 0) {
            return false;
        }
        for (var i = 0; i < value.length; i++) {
            var v = value[i];
            if (!isInteger(v) || v < 0 || v >= 256) {
                return false;
            }
        }
        return true;
    }
    exports.isBytes = isBytes;
    function arrayify(value, options) {
        if (!options) {
            options = {};
        }
        if (typeof (value) === "number") {
            logger.checkSafeUint53(value, "invalid arrayify value");
            var result = [];
            while (value) {
                result.unshift(value & 0xff);
                value = parseInt(String(value / 256));
            }
            if (result.length === 0) {
                result.push(0);
            }
            return addSlice(new Uint8Array(result));
        }
        if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        if (isHexable(value)) {
            value = value.toHexString();
        }
        if (isHexString(value)) {
            var hex = value.substring(2);
            if (hex.length % 2) {
                if (options.hexPad === "left") {
                    hex = "0x0" + hex.substring(2);
                }
                else if (options.hexPad === "right") {
                    hex += "0";
                }
                else {
                    logger.throwArgumentError("hex data is odd-length", "value", value);
                }
            }
            var result = [];
            for (var i = 0; i < hex.length; i += 2) {
                result.push(parseInt(hex.substring(i, i + 2), 16));
            }
            return addSlice(new Uint8Array(result));
        }
        if (isBytes(value)) {
            return addSlice(new Uint8Array(value));
        }
        return logger.throwArgumentError("invalid arrayify value", "value", value);
    }
    exports.arrayify = arrayify;
    function concat(items) {
        var objects = items.map(function (item) { return arrayify(item); });
        var length = objects.reduce(function (accum, item) { return (accum + item.length); }, 0);
        var result = new Uint8Array(length);
        objects.reduce(function (offset, object) {
            result.set(object, offset);
            return offset + object.length;
        }, 0);
        return addSlice(result);
    }
    exports.concat = concat;
    function stripZeros(value) {
        var result = arrayify(value);
        if (result.length === 0) {
            return result;
        }
        // Find the first non-zero entry
        var start = 0;
        while (start < result.length && result[start] === 0) {
            start++;
        }
        // If we started with zeros, strip them
        if (start) {
            result = result.slice(start);
        }
        return result;
    }
    exports.stripZeros = stripZeros;
    function zeroPad(value, length) {
        value = arrayify(value);
        if (value.length > length) {
            logger.throwArgumentError("value out of range", "value", arguments[0]);
        }
        var result = new Uint8Array(length);
        result.set(value, length - value.length);
        return addSlice(result);
    }
    exports.zeroPad = zeroPad;
    function isHexString(value, length) {
        if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
            return false;
        }
        if (length && value.length !== 2 + 2 * length) {
            return false;
        }
        return true;
    }
    exports.isHexString = isHexString;
    var HexCharacters = "0123456789abcdef";
    function hexlify(value, options) {
        if (!options) {
            options = {};
        }
        if (typeof (value) === "number") {
            logger.checkSafeUint53(value, "invalid hexlify value");
            var hex = "";
            while (value) {
                hex = HexCharacters[value & 0xf] + hex;
                value = Math.floor(value / 16);
            }
            if (hex.length) {
                if (hex.length % 2) {
                    hex = "0" + hex;
                }
                return "0x" + hex;
            }
            return "0x00";
        }
        if (typeof (value) === "bigint") {
            value = value.toString(16);
            if (value.length % 2) {
                return ("0x0" + value);
            }
            return "0x" + value;
        }
        if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        if (isHexable(value)) {
            return value.toHexString();
        }
        if (isHexString(value)) {
            if (value.length % 2) {
                if (options.hexPad === "left") {
                    value = "0x0" + value.substring(2);
                }
                else if (options.hexPad === "right") {
                    value += "0";
                }
                else {
                    logger.throwArgumentError("hex data is odd-length", "value", value);
                }
            }
            return value.toLowerCase();
        }
        if (isBytes(value)) {
            var result = "0x";
            for (var i = 0; i < value.length; i++) {
                var v = value[i];
                result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
            }
            return result;
        }
        return logger.throwArgumentError("invalid hexlify value", "value", value);
    }
    exports.hexlify = hexlify;
    /*
    function unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {
        if (typeof(value) === "string" && value.length % 2 && value.substring(0, 2) === "0x") {
            return "0x0" + value.substring(2);
        }
        return value;
    }
    */
    function hexDataLength(data) {
        if (typeof (data) !== "string") {
            data = hexlify(data);
        }
        else if (!isHexString(data) || (data.length % 2)) {
            return null;
        }
        return (data.length - 2) / 2;
    }
    exports.hexDataLength = hexDataLength;
    function hexDataSlice(data, offset, endOffset) {
        if (typeof (data) !== "string") {
            data = hexlify(data);
        }
        else if (!isHexString(data) || (data.length % 2)) {
            logger.throwArgumentError("invalid hexData", "value", data);
        }
        offset = 2 + 2 * offset;
        if (endOffset != null) {
            return "0x" + data.substring(offset, 2 + 2 * endOffset);
        }
        return "0x" + data.substring(offset);
    }
    exports.hexDataSlice = hexDataSlice;
    function hexConcat(items) {
        var result = "0x";
        items.forEach(function (item) {
            result += hexlify(item).substring(2);
        });
        return result;
    }
    exports.hexConcat = hexConcat;
    function hexValue(value) {
        var trimmed = hexStripZeros(hexlify(value, { hexPad: "left" }));
        if (trimmed === "0x") {
            return "0x0";
        }
        return trimmed;
    }
    exports.hexValue = hexValue;
    function hexStripZeros(value) {
        if (typeof (value) !== "string") {
            value = hexlify(value);
        }
        if (!isHexString(value)) {
            logger.throwArgumentError("invalid hex string", "value", value);
        }
        value = value.substring(2);
        var offset = 0;
        while (offset < value.length && value[offset] === "0") {
            offset++;
        }
        return "0x" + value.substring(offset);
    }
    exports.hexStripZeros = hexStripZeros;
    function hexZeroPad(value, length) {
        if (typeof (value) !== "string") {
            value = hexlify(value);
        }
        else if (!isHexString(value)) {
            logger.throwArgumentError("invalid hex string", "value", value);
        }
        if (value.length > 2 * length + 2) {
            logger.throwArgumentError("value out of range", "value", arguments[1]);
        }
        while (value.length < 2 * length + 2) {
            value = "0x0" + value.substring(2);
        }
        return value;
    }
    exports.hexZeroPad = hexZeroPad;
    function splitSignature(signature) {
        var result = {
            r: "0x",
            s: "0x",
            _vs: "0x",
            recoveryParam: 0,
            v: 0
        };
        if (isBytesLike(signature)) {
            var bytes = arrayify(signature);
            if (bytes.length !== 65) {
                logger.throwArgumentError("invalid signature string; must be 65 bytes", "signature", signature);
            }
            // Get the r, s and v
            result.r = hexlify(bytes.slice(0, 32));
            result.s = hexlify(bytes.slice(32, 64));
            result.v = bytes[64];
            // Allow a recid to be used as the v
            if (result.v < 27) {
                if (result.v === 0 || result.v === 1) {
                    result.v += 27;
                }
                else {
                    logger.throwArgumentError("signature invalid v byte", "signature", signature);
                }
            }
            // Compute recoveryParam from v
            result.recoveryParam = 1 - (result.v % 2);
            // Compute _vs from recoveryParam and s
            if (result.recoveryParam) {
                bytes[32] |= 0x80;
            }
            result._vs = hexlify(bytes.slice(32, 64));
        }
        else {
            result.r = signature.r;
            result.s = signature.s;
            result.v = signature.v;
            result.recoveryParam = signature.recoveryParam;
            result._vs = signature._vs;
            // If the _vs is available, use it to populate missing s, v and recoveryParam
            // and verify non-missing s, v and recoveryParam
            if (result._vs != null) {
                var vs_1 = zeroPad(arrayify(result._vs), 32);
                result._vs = hexlify(vs_1);
                // Set or check the recid
                var recoveryParam = ((vs_1[0] >= 128) ? 1 : 0);
                if (result.recoveryParam == null) {
                    result.recoveryParam = recoveryParam;
                }
                else if (result.recoveryParam !== recoveryParam) {
                    logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
                }
                // Set or check the s
                vs_1[0] &= 0x7f;
                var s = hexlify(vs_1);
                if (result.s == null) {
                    result.s = s;
                }
                else if (result.s !== s) {
                    logger.throwArgumentError("signature v mismatch _vs", "signature", signature);
                }
            }
            // Use recid and v to populate each other
            if (result.recoveryParam == null) {
                if (result.v == null) {
                    logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
                }
                else if (result.v === 0 || result.v === 1) {
                    result.recoveryParam = result.v;
                }
                else {
                    result.recoveryParam = 1 - (result.v % 2);
                }
            }
            else {
                if (result.v == null) {
                    result.v = 27 + result.recoveryParam;
                }
                else {
                    var recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));
                    if (result.recoveryParam !== recId) {
                        logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
                    }
                }
            }
            if (result.r == null || !isHexString(result.r)) {
                logger.throwArgumentError("signature missing or invalid r", "signature", signature);
            }
            else {
                result.r = hexZeroPad(result.r, 32);
            }
            if (result.s == null || !isHexString(result.s)) {
                logger.throwArgumentError("signature missing or invalid s", "signature", signature);
            }
            else {
                result.s = hexZeroPad(result.s, 32);
            }
            var vs = arrayify(result.s);
            if (vs[0] >= 128) {
                logger.throwArgumentError("signature s out of range", "signature", signature);
            }
            if (result.recoveryParam) {
                vs[0] |= 0x80;
            }
            var _vs = hexlify(vs);
            if (result._vs) {
                if (!isHexString(result._vs)) {
                    logger.throwArgumentError("signature invalid _vs", "signature", signature);
                }
                result._vs = hexZeroPad(result._vs, 32);
            }
            // Set or check the _vs
            if (result._vs == null) {
                result._vs = _vs;
            }
            else if (result._vs !== _vs) {
                logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
            }
        }
        return result;
    }
    exports.splitSignature = splitSignature;
    function joinSignature(signature) {
        signature = splitSignature(signature);
        return hexlify(concat([
            signature.r,
            signature.s,
            (signature.recoveryParam ? "0x1c" : "0x1b")
        ]));
    }
    exports.joinSignature = joinSignature;
    
    },{"./_version":30,"@ethersproject/logger":56}],32:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddressZero = void 0;
    exports.AddressZero = "0x0000000000000000000000000000000000000000";
    
    },{}],33:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.Two = exports.One = exports.Zero = exports.NegativeOne = void 0;
    var bignumber_1 = require("@ethersproject/bignumber");
    var NegativeOne = ( /*#__PURE__*/bignumber_1.BigNumber.from(-1));
    exports.NegativeOne = NegativeOne;
    var Zero = ( /*#__PURE__*/bignumber_1.BigNumber.from(0));
    exports.Zero = Zero;
    var One = ( /*#__PURE__*/bignumber_1.BigNumber.from(1));
    exports.One = One;
    var Two = ( /*#__PURE__*/bignumber_1.BigNumber.from(2));
    exports.Two = Two;
    var WeiPerEther = ( /*#__PURE__*/bignumber_1.BigNumber.from("1000000000000000000"));
    exports.WeiPerEther = WeiPerEther;
    var MaxUint256 = ( /*#__PURE__*/bignumber_1.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
    exports.MaxUint256 = MaxUint256;
    var MinInt256 = ( /*#__PURE__*/bignumber_1.BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000"));
    exports.MinInt256 = MinInt256;
    var MaxInt256 = ( /*#__PURE__*/bignumber_1.BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
    exports.MaxInt256 = MaxInt256;
    
    },{"@ethersproject/bignumber":29}],34:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HashZero = void 0;
    exports.HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";
    
    },{}],35:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EtherSymbol = exports.HashZero = exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.Two = exports.One = exports.Zero = exports.NegativeOne = exports.AddressZero = void 0;
    var addresses_1 = require("./addresses");
    Object.defineProperty(exports, "AddressZero", { enumerable: true, get: function () { return addresses_1.AddressZero; } });
    var bignumbers_1 = require("./bignumbers");
    Object.defineProperty(exports, "NegativeOne", { enumerable: true, get: function () { return bignumbers_1.NegativeOne; } });
    Object.defineProperty(exports, "Zero", { enumerable: true, get: function () { return bignumbers_1.Zero; } });
    Object.defineProperty(exports, "One", { enumerable: true, get: function () { return bignumbers_1.One; } });
    Object.defineProperty(exports, "Two", { enumerable: true, get: function () { return bignumbers_1.Two; } });
    Object.defineProperty(exports, "WeiPerEther", { enumerable: true, get: function () { return bignumbers_1.WeiPerEther; } });
    Object.defineProperty(exports, "MaxUint256", { enumerable: true, get: function () { return bignumbers_1.MaxUint256; } });
    Object.defineProperty(exports, "MinInt256", { enumerable: true, get: function () { return bignumbers_1.MinInt256; } });
    Object.defineProperty(exports, "MaxInt256", { enumerable: true, get: function () { return bignumbers_1.MaxInt256; } });
    var hashes_1 = require("./hashes");
    Object.defineProperty(exports, "HashZero", { enumerable: true, get: function () { return hashes_1.HashZero; } });
    var strings_1 = require("./strings");
    Object.defineProperty(exports, "EtherSymbol", { enumerable: true, get: function () { return strings_1.EtherSymbol; } });
    
    },{"./addresses":32,"./bignumbers":33,"./hashes":34,"./strings":36}],36:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EtherSymbol = void 0;
    // NFKC (composed)             // (decomposed)
    exports.EtherSymbol = "\u039e"; // "\uD835\uDF63";
    
    },{}],37:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "contracts/5.5.0";
    
    },{}],38:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContractFactory = exports.Contract = exports.BaseContract = void 0;
    var abi_1 = require("@ethersproject/abi");
    var abstract_provider_1 = require("@ethersproject/abstract-provider");
    var abstract_signer_1 = require("@ethersproject/abstract-signer");
    var address_1 = require("@ethersproject/address");
    var bignumber_1 = require("@ethersproject/bignumber");
    var bytes_1 = require("@ethersproject/bytes");
    var properties_1 = require("@ethersproject/properties");
    var transactions_1 = require("@ethersproject/transactions");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    ;
    ;
    ///////////////////////////////
    var allowedTransactionKeys = {
        chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,
        type: true, accessList: true,
        maxFeePerGas: true, maxPriorityFeePerGas: true,
        customData: true
    };
    function resolveName(resolver, nameOrPromise) {
        return __awaiter(this, void 0, void 0, function () {
            var name, address;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, nameOrPromise];
                    case 1:
                        name = _a.sent();
                        if (typeof (name) !== "string") {
                            logger.throwArgumentError("invalid address or ENS name", "name", name);
                        }
                        // If it is already an address, just use it (after adding checksum)
                        try {
                            return [2 /*return*/, (0, address_1.getAddress)(name)];
                        }
                        catch (error) { }
                        if (!resolver) {
                            logger.throwError("a provider or signer is needed to resolve ENS names", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "resolveName"
                            });
                        }
                        return [4 /*yield*/, resolver.resolveName(name)];
                    case 2:
                        address = _a.sent();
                        if (address == null) {
                            logger.throwArgumentError("resolver or addr is not configured for ENS name", "name", name);
                        }
                        return [2 /*return*/, address];
                }
            });
        });
    }
    // Recursively replaces ENS names with promises to resolve the name and resolves all properties
    function resolveAddresses(resolver, value, paramType) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!Array.isArray(paramType)) return [3 /*break*/, 2];
                        return [4 /*yield*/, Promise.all(paramType.map(function (paramType, index) {
                                return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);
                            }))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        if (!(paramType.type === "address")) return [3 /*break*/, 4];
                        return [4 /*yield*/, resolveName(resolver, value)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        if (!(paramType.type === "tuple")) return [3 /*break*/, 6];
                        return [4 /*yield*/, resolveAddresses(resolver, value, paramType.components)];
                    case 5: return [2 /*return*/, _a.sent()];
                    case 6:
                        if (!(paramType.baseType === "array")) return [3 /*break*/, 8];
                        if (!Array.isArray(value)) {
                            return [2 /*return*/, Promise.reject(logger.makeError("invalid value for array", logger_1.Logger.errors.INVALID_ARGUMENT, {
                                    argument: "value",
                                    value: value
                                }))];
                        }
                        return [4 /*yield*/, Promise.all(value.map(function (v) { return resolveAddresses(resolver, v, paramType.arrayChildren); }))];
                    case 7: return [2 /*return*/, _a.sent()];
                    case 8: return [2 /*return*/, value];
                }
            });
        });
    }
    function populateTransaction(contract, fragment, args) {
        return __awaiter(this, void 0, void 0, function () {
            var overrides, resolved, data, tx, ro, intrinsic, bytes, i, roValue, leftovers;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        overrides = {};
                        if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
                            overrides = (0, properties_1.shallowCopy)(args.pop());
                        }
                        // Make sure the parameter count matches
                        logger.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
                        // Populate "from" override (allow promises)
                        if (contract.signer) {
                            if (overrides.from) {
                                // Contracts with a Signer are from the Signer's frame-of-reference;
                                // but we allow overriding "from" if it matches the signer
                                overrides.from = (0, properties_1.resolveProperties)({
                                    override: resolveName(contract.signer, overrides.from),
                                    signer: contract.signer.getAddress()
                                }).then(function (check) { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        if ((0, address_1.getAddress)(check.signer) !== check.override) {
                                            logger.throwError("Contract with a Signer cannot override from", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                                                operation: "overrides.from"
                                            });
                                        }
                                        return [2 /*return*/, check.override];
                                    });
                                }); });
                            }
                            else {
                                overrides.from = contract.signer.getAddress();
                            }
                        }
                        else if (overrides.from) {
                            overrides.from = resolveName(contract.provider, overrides.from);
                            //} else {
                            // Contracts without a signer can override "from", and if
                            // unspecified the zero address is used
                            //overrides.from = AddressZero;
                        }
                        return [4 /*yield*/, (0, properties_1.resolveProperties)({
                                args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
                                address: contract.resolvedAddress,
                                overrides: ((0, properties_1.resolveProperties)(overrides) || {})
                            })];
                    case 1:
                        resolved = _a.sent();
                        data = contract.interface.encodeFunctionData(fragment, resolved.args);
                        tx = {
                            data: data,
                            to: resolved.address
                        };
                        ro = resolved.overrides;
                        // Populate simple overrides
                        if (ro.nonce != null) {
                            tx.nonce = bignumber_1.BigNumber.from(ro.nonce).toNumber();
                        }
                        if (ro.gasLimit != null) {
                            tx.gasLimit = bignumber_1.BigNumber.from(ro.gasLimit);
                        }
                        if (ro.gasPrice != null) {
                            tx.gasPrice = bignumber_1.BigNumber.from(ro.gasPrice);
                        }
                        if (ro.maxFeePerGas != null) {
                            tx.maxFeePerGas = bignumber_1.BigNumber.from(ro.maxFeePerGas);
                        }
                        if (ro.maxPriorityFeePerGas != null) {
                            tx.maxPriorityFeePerGas = bignumber_1.BigNumber.from(ro.maxPriorityFeePerGas);
                        }
                        if (ro.from != null) {
                            tx.from = ro.from;
                        }
                        if (ro.type != null) {
                            tx.type = ro.type;
                        }
                        if (ro.accessList != null) {
                            tx.accessList = (0, transactions_1.accessListify)(ro.accessList);
                        }
                        // If there was no "gasLimit" override, but the ABI specifies a default, use it
                        if (tx.gasLimit == null && fragment.gas != null) {
                            intrinsic = 21000;
                            bytes = (0, bytes_1.arrayify)(data);
                            for (i = 0; i < bytes.length; i++) {
                                intrinsic += 4;
                                if (bytes[i]) {
                                    intrinsic += 64;
                                }
                            }
                            tx.gasLimit = bignumber_1.BigNumber.from(fragment.gas).add(intrinsic);
                        }
                        // Populate "value" override
                        if (ro.value) {
                            roValue = bignumber_1.BigNumber.from(ro.value);
                            if (!roValue.isZero() && !fragment.payable) {
                                logger.throwError("non-payable method cannot override value", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                                    operation: "overrides.value",
                                    value: overrides.value
                                });
                            }
                            tx.value = roValue;
                        }
                        if (ro.customData) {
                            tx.customData = (0, properties_1.shallowCopy)(ro.customData);
                        }
                        // Remove the overrides
                        delete overrides.nonce;
                        delete overrides.gasLimit;
                        delete overrides.gasPrice;
                        delete overrides.from;
                        delete overrides.value;
                        delete overrides.type;
                        delete overrides.accessList;
                        delete overrides.maxFeePerGas;
                        delete overrides.maxPriorityFeePerGas;
                        delete overrides.customData;
                        leftovers = Object.keys(overrides).filter(function (key) { return (overrides[key] != null); });
                        if (leftovers.length) {
                            logger.throwError("cannot override " + leftovers.map(function (l) { return JSON.stringify(l); }).join(","), logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "overrides",
                                overrides: leftovers
                            });
                        }
                        return [2 /*return*/, tx];
                }
            });
        });
    }
    function buildPopulate(contract, fragment) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return populateTransaction(contract, fragment, args);
        };
    }
    function buildEstimate(contract, fragment) {
        var signerOrProvider = (contract.signer || contract.provider);
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var tx;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!signerOrProvider) {
                                logger.throwError("estimate require a provider or signer", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                                    operation: "estimateGas"
                                });
                            }
                            return [4 /*yield*/, populateTransaction(contract, fragment, args)];
                        case 1:
                            tx = _a.sent();
                            return [4 /*yield*/, signerOrProvider.estimateGas(tx)];
                        case 2: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
    }
    function addContractWait(contract, tx) {
        var wait = tx.wait.bind(tx);
        tx.wait = function (confirmations) {
            return wait(confirmations).then(function (receipt) {
                receipt.events = receipt.logs.map(function (log) {
                    var event = (0, properties_1.deepCopy)(log);
                    var parsed = null;
                    try {
                        parsed = contract.interface.parseLog(log);
                    }
                    catch (e) { }
                    // Successfully parsed the event log; include it
                    if (parsed) {
                        event.args = parsed.args;
                        event.decode = function (data, topics) {
                            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
                        };
                        event.event = parsed.name;
                        event.eventSignature = parsed.signature;
                    }
                    // Useful operations
                    event.removeListener = function () { return contract.provider; };
                    event.getBlock = function () {
                        return contract.provider.getBlock(receipt.blockHash);
                    };
                    event.getTransaction = function () {
                        return contract.provider.getTransaction(receipt.transactionHash);
                    };
                    event.getTransactionReceipt = function () {
                        return Promise.resolve(receipt);
                    };
                    return event;
                });
                return receipt;
            });
        };
    }
    function buildCall(contract, fragment, collapseSimple) {
        var signerOrProvider = (contract.signer || contract.provider);
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var blockTag, overrides, tx, result, value;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            blockTag = undefined;
                            if (!(args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === "object")) return [3 /*break*/, 3];
                            overrides = (0, properties_1.shallowCopy)(args.pop());
                            if (!(overrides.blockTag != null)) return [3 /*break*/, 2];
                            return [4 /*yield*/, overrides.blockTag];
                        case 1:
                            blockTag = _a.sent();
                            _a.label = 2;
                        case 2:
                            delete overrides.blockTag;
                            args.push(overrides);
                            _a.label = 3;
                        case 3:
                            if (!(contract.deployTransaction != null)) return [3 /*break*/, 5];
                            return [4 /*yield*/, contract._deployed(blockTag)];
                        case 4:
                            _a.sent();
                            _a.label = 5;
                        case 5: return [4 /*yield*/, populateTransaction(contract, fragment, args)];
                        case 6:
                            tx = _a.sent();
                            return [4 /*yield*/, signerOrProvider.call(tx, blockTag)];
                        case 7:
                            result = _a.sent();
                            try {
                                value = contract.interface.decodeFunctionResult(fragment, result);
                                if (collapseSimple && fragment.outputs.length === 1) {
                                    value = value[0];
                                }
                                return [2 /*return*/, value];
                            }
                            catch (error) {
                                if (error.code === logger_1.Logger.errors.CALL_EXCEPTION) {
                                    error.address = contract.address;
                                    error.args = args;
                                    error.transaction = tx;
                                }
                                throw error;
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
    }
    function buildSend(contract, fragment) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var txRequest, tx;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!contract.signer) {
                                logger.throwError("sending a transaction requires a signer", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                                    operation: "sendTransaction"
                                });
                            }
                            if (!(contract.deployTransaction != null)) return [3 /*break*/, 2];
                            return [4 /*yield*/, contract._deployed()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [4 /*yield*/, populateTransaction(contract, fragment, args)];
                        case 3:
                            txRequest = _a.sent();
                            return [4 /*yield*/, contract.signer.sendTransaction(txRequest)];
                        case 4:
                            tx = _a.sent();
                            // Tweak the tx.wait so the receipt has extra properties
                            addContractWait(contract, tx);
                            return [2 /*return*/, tx];
                    }
                });
            });
        };
    }
    function buildDefault(contract, fragment, collapseSimple) {
        if (fragment.constant) {
            return buildCall(contract, fragment, collapseSimple);
        }
        return buildSend(contract, fragment);
    }
    function getEventTag(filter) {
        if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
            return "*";
        }
        return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map(function (topic) {
            if (Array.isArray(topic)) {
                return topic.join("|");
            }
            return topic;
        }).join(":") : "");
    }
    var RunningEvent = /** @class */ (function () {
        function RunningEvent(tag, filter) {
            (0, properties_1.defineReadOnly)(this, "tag", tag);
            (0, properties_1.defineReadOnly)(this, "filter", filter);
            this._listeners = [];
        }
        RunningEvent.prototype.addListener = function (listener, once) {
            this._listeners.push({ listener: listener, once: once });
        };
        RunningEvent.prototype.removeListener = function (listener) {
            var done = false;
            this._listeners = this._listeners.filter(function (item) {
                if (done || item.listener !== listener) {
                    return true;
                }
                done = true;
                return false;
            });
        };
        RunningEvent.prototype.removeAllListeners = function () {
            this._listeners = [];
        };
        RunningEvent.prototype.listeners = function () {
            return this._listeners.map(function (i) { return i.listener; });
        };
        RunningEvent.prototype.listenerCount = function () {
            return this._listeners.length;
        };
        RunningEvent.prototype.run = function (args) {
            var _this = this;
            var listenerCount = this.listenerCount();
            this._listeners = this._listeners.filter(function (item) {
                var argsCopy = args.slice();
                // Call the callback in the next event loop
                setTimeout(function () {
                    item.listener.apply(_this, argsCopy);
                }, 0);
                // Reschedule it if it not "once"
                return !(item.once);
            });
            return listenerCount;
        };
        RunningEvent.prototype.prepareEvent = function (event) {
        };
        // Returns the array that will be applied to an emit
        RunningEvent.prototype.getEmit = function (event) {
            return [event];
        };
        return RunningEvent;
    }());
    var ErrorRunningEvent = /** @class */ (function (_super) {
        __extends(ErrorRunningEvent, _super);
        function ErrorRunningEvent() {
            return _super.call(this, "error", null) || this;
        }
        return ErrorRunningEvent;
    }(RunningEvent));
    // @TODO Fragment should inherit Wildcard? and just override getEmit?
    //       or have a common abstract super class, with enough constructor
    //       options to configure both.
    // A Fragment Event will populate all the properties that Wildcard
    // will, and additionally dereference the arguments when emitting
    var FragmentRunningEvent = /** @class */ (function (_super) {
        __extends(FragmentRunningEvent, _super);
        function FragmentRunningEvent(address, contractInterface, fragment, topics) {
            var _this = this;
            var filter = {
                address: address
            };
            var topic = contractInterface.getEventTopic(fragment);
            if (topics) {
                if (topic !== topics[0]) {
                    logger.throwArgumentError("topic mismatch", "topics", topics);
                }
                filter.topics = topics.slice();
            }
            else {
                filter.topics = [topic];
            }
            _this = _super.call(this, getEventTag(filter), filter) || this;
            (0, properties_1.defineReadOnly)(_this, "address", address);
            (0, properties_1.defineReadOnly)(_this, "interface", contractInterface);
            (0, properties_1.defineReadOnly)(_this, "fragment", fragment);
            return _this;
        }
        FragmentRunningEvent.prototype.prepareEvent = function (event) {
            var _this = this;
            _super.prototype.prepareEvent.call(this, event);
            event.event = this.fragment.name;
            event.eventSignature = this.fragment.format();
            event.decode = function (data, topics) {
                return _this.interface.decodeEventLog(_this.fragment, data, topics);
            };
            try {
                event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
            }
            catch (error) {
                event.args = null;
                event.decodeError = error;
            }
        };
        FragmentRunningEvent.prototype.getEmit = function (event) {
            var errors = (0, abi_1.checkResultErrors)(event.args);
            if (errors.length) {
                throw errors[0].error;
            }
            var args = (event.args || []).slice();
            args.push(event);
            return args;
        };
        return FragmentRunningEvent;
    }(RunningEvent));
    // A Wildcard Event will attempt to populate:
    //  - event            The name of the event name
    //  - eventSignature   The full signature of the event
    //  - decode           A function to decode data and topics
    //  - args             The decoded data and topics
    var WildcardRunningEvent = /** @class */ (function (_super) {
        __extends(WildcardRunningEvent, _super);
        function WildcardRunningEvent(address, contractInterface) {
            var _this = _super.call(this, "*", { address: address }) || this;
            (0, properties_1.defineReadOnly)(_this, "address", address);
            (0, properties_1.defineReadOnly)(_this, "interface", contractInterface);
            return _this;
        }
        WildcardRunningEvent.prototype.prepareEvent = function (event) {
            var _this = this;
            _super.prototype.prepareEvent.call(this, event);
            try {
                var parsed_1 = this.interface.parseLog(event);
                event.event = parsed_1.name;
                event.eventSignature = parsed_1.signature;
                event.decode = function (data, topics) {
                    return _this.interface.decodeEventLog(parsed_1.eventFragment, data, topics);
                };
                event.args = parsed_1.args;
            }
            catch (error) {
                // No matching event
            }
        };
        return WildcardRunningEvent;
    }(RunningEvent));
    var BaseContract = /** @class */ (function () {
        function BaseContract(addressOrName, contractInterface, signerOrProvider) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkNew(_newTarget, Contract);
            // @TODO: Maybe still check the addressOrName looks like a valid address or name?
            //address = getAddress(address);
            (0, properties_1.defineReadOnly)(this, "interface", (0, properties_1.getStatic)(_newTarget, "getInterface")(contractInterface));
            if (signerOrProvider == null) {
                (0, properties_1.defineReadOnly)(this, "provider", null);
                (0, properties_1.defineReadOnly)(this, "signer", null);
            }
            else if (abstract_signer_1.Signer.isSigner(signerOrProvider)) {
                (0, properties_1.defineReadOnly)(this, "provider", signerOrProvider.provider || null);
                (0, properties_1.defineReadOnly)(this, "signer", signerOrProvider);
            }
            else if (abstract_provider_1.Provider.isProvider(signerOrProvider)) {
                (0, properties_1.defineReadOnly)(this, "provider", signerOrProvider);
                (0, properties_1.defineReadOnly)(this, "signer", null);
            }
            else {
                logger.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
            }
            (0, properties_1.defineReadOnly)(this, "callStatic", {});
            (0, properties_1.defineReadOnly)(this, "estimateGas", {});
            (0, properties_1.defineReadOnly)(this, "functions", {});
            (0, properties_1.defineReadOnly)(this, "populateTransaction", {});
            (0, properties_1.defineReadOnly)(this, "filters", {});
            {
                var uniqueFilters_1 = {};
                Object.keys(this.interface.events).forEach(function (eventSignature) {
                    var event = _this.interface.events[eventSignature];
                    (0, properties_1.defineReadOnly)(_this.filters, eventSignature, function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        return {
                            address: _this.address,
                            topics: _this.interface.encodeFilterTopics(event, args)
                        };
                    });
                    if (!uniqueFilters_1[event.name]) {
                        uniqueFilters_1[event.name] = [];
                    }
                    uniqueFilters_1[event.name].push(eventSignature);
                });
                Object.keys(uniqueFilters_1).forEach(function (name) {
                    var filters = uniqueFilters_1[name];
                    if (filters.length === 1) {
                        (0, properties_1.defineReadOnly)(_this.filters, name, _this.filters[filters[0]]);
                    }
                    else {
                        logger.warn("Duplicate definition of " + name + " (" + filters.join(", ") + ")");
                    }
                });
            }
            (0, properties_1.defineReadOnly)(this, "_runningEvents", {});
            (0, properties_1.defineReadOnly)(this, "_wrappedEmits", {});
            if (addressOrName == null) {
                logger.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
            }
            (0, properties_1.defineReadOnly)(this, "address", addressOrName);
            if (this.provider) {
                (0, properties_1.defineReadOnly)(this, "resolvedAddress", resolveName(this.provider, addressOrName));
            }
            else {
                try {
                    (0, properties_1.defineReadOnly)(this, "resolvedAddress", Promise.resolve((0, address_1.getAddress)(addressOrName)));
                }
                catch (error) {
                    // Without a provider, we cannot use ENS names
                    logger.throwError("provider is required to use ENS name as contract address", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "new Contract"
                    });
                }
            }
            var uniqueNames = {};
            var uniqueSignatures = {};
            Object.keys(this.interface.functions).forEach(function (signature) {
                var fragment = _this.interface.functions[signature];
                // Check that the signature is unique; if not the ABI generation has
                // not been cleaned or may be incorrectly generated
                if (uniqueSignatures[signature]) {
                    logger.warn("Duplicate ABI entry for " + JSON.stringify(signature));
                    return;
                }
                uniqueSignatures[signature] = true;
                // Track unique names; we only expose bare named functions if they
                // are ambiguous
                {
                    var name_1 = fragment.name;
                    if (!uniqueNames["%" + name_1]) {
                        uniqueNames["%" + name_1] = [];
                    }
                    uniqueNames["%" + name_1].push(signature);
                }
                if (_this[signature] == null) {
                    (0, properties_1.defineReadOnly)(_this, signature, buildDefault(_this, fragment, true));
                }
                // We do not collapse simple calls on this bucket, which allows
                // frameworks to safely use this without introspection as well as
                // allows decoding error recovery.
                if (_this.functions[signature] == null) {
                    (0, properties_1.defineReadOnly)(_this.functions, signature, buildDefault(_this, fragment, false));
                }
                if (_this.callStatic[signature] == null) {
                    (0, properties_1.defineReadOnly)(_this.callStatic, signature, buildCall(_this, fragment, true));
                }
                if (_this.populateTransaction[signature] == null) {
                    (0, properties_1.defineReadOnly)(_this.populateTransaction, signature, buildPopulate(_this, fragment));
                }
                if (_this.estimateGas[signature] == null) {
                    (0, properties_1.defineReadOnly)(_this.estimateGas, signature, buildEstimate(_this, fragment));
                }
            });
            Object.keys(uniqueNames).forEach(function (name) {
                // Ambiguous names to not get attached as bare names
                var signatures = uniqueNames[name];
                if (signatures.length > 1) {
                    return;
                }
                // Strip off the leading "%" used for prototype protection
                name = name.substring(1);
                var signature = signatures[0];
                // If overwriting a member property that is null, swallow the error
                try {
                    if (_this[name] == null) {
                        (0, properties_1.defineReadOnly)(_this, name, _this[signature]);
                    }
                }
                catch (e) { }
                if (_this.functions[name] == null) {
                    (0, properties_1.defineReadOnly)(_this.functions, name, _this.functions[signature]);
                }
                if (_this.callStatic[name] == null) {
                    (0, properties_1.defineReadOnly)(_this.callStatic, name, _this.callStatic[signature]);
                }
                if (_this.populateTransaction[name] == null) {
                    (0, properties_1.defineReadOnly)(_this.populateTransaction, name, _this.populateTransaction[signature]);
                }
                if (_this.estimateGas[name] == null) {
                    (0, properties_1.defineReadOnly)(_this.estimateGas, name, _this.estimateGas[signature]);
                }
            });
        }
        BaseContract.getContractAddress = function (transaction) {
            return (0, address_1.getContractAddress)(transaction);
        };
        BaseContract.getInterface = function (contractInterface) {
            if (abi_1.Interface.isInterface(contractInterface)) {
                return contractInterface;
            }
            return new abi_1.Interface(contractInterface);
        };
        // @TODO: Allow timeout?
        BaseContract.prototype.deployed = function () {
            return this._deployed();
        };
        BaseContract.prototype._deployed = function (blockTag) {
            var _this = this;
            if (!this._deployedPromise) {
                // If we were just deployed, we know the transaction we should occur in
                if (this.deployTransaction) {
                    this._deployedPromise = this.deployTransaction.wait().then(function () {
                        return _this;
                    });
                }
                else {
                    // @TODO: Once we allow a timeout to be passed in, we will wait
                    // up to that many blocks for getCode
                    // Otherwise, poll for our code to be deployed
                    this._deployedPromise = this.provider.getCode(this.address, blockTag).then(function (code) {
                        if (code === "0x") {
                            logger.throwError("contract not deployed", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                                contractAddress: _this.address,
                                operation: "getDeployed"
                            });
                        }
                        return _this;
                    });
                }
            }
            return this._deployedPromise;
        };
        // @TODO:
        // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>
        // @TODO:
        // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>
        BaseContract.prototype.fallback = function (overrides) {
            var _this = this;
            if (!this.signer) {
                logger.throwError("sending a transactions require a signer", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction(fallback)" });
            }
            var tx = (0, properties_1.shallowCopy)(overrides || {});
            ["from", "to"].forEach(function (key) {
                if (tx[key] == null) {
                    return;
                }
                logger.throwError("cannot override " + key, logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation: key });
            });
            tx.to = this.resolvedAddress;
            return this.deployed().then(function () {
                return _this.signer.sendTransaction(tx);
            });
        };
        // Reconnect to a different signer or provider
        BaseContract.prototype.connect = function (signerOrProvider) {
            if (typeof (signerOrProvider) === "string") {
                signerOrProvider = new abstract_signer_1.VoidSigner(signerOrProvider, this.provider);
            }
            var contract = new (this.constructor)(this.address, this.interface, signerOrProvider);
            if (this.deployTransaction) {
                (0, properties_1.defineReadOnly)(contract, "deployTransaction", this.deployTransaction);
            }
            return contract;
        };
        // Re-attach to a different on-chain instance of this contract
        BaseContract.prototype.attach = function (addressOrName) {
            return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);
        };
        BaseContract.isIndexed = function (value) {
            return abi_1.Indexed.isIndexed(value);
        };
        BaseContract.prototype._normalizeRunningEvent = function (runningEvent) {
            // Already have an instance of this event running; we can re-use it
            if (this._runningEvents[runningEvent.tag]) {
                return this._runningEvents[runningEvent.tag];
            }
            return runningEvent;
        };
        BaseContract.prototype._getRunningEvent = function (eventName) {
            if (typeof (eventName) === "string") {
                // Listen for "error" events (if your contract has an error event, include
                // the full signature to bypass this special event keyword)
                if (eventName === "error") {
                    return this._normalizeRunningEvent(new ErrorRunningEvent());
                }
                // Listen for any event that is registered
                if (eventName === "event") {
                    return this._normalizeRunningEvent(new RunningEvent("event", null));
                }
                // Listen for any event
                if (eventName === "*") {
                    return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
                }
                // Get the event Fragment (throws if ambiguous/unknown event)
                var fragment = this.interface.getEvent(eventName);
                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
            }
            // We have topics to filter by...
            if (eventName.topics && eventName.topics.length > 0) {
                // Is it a known topichash? (throws if no matching topichash)
                try {
                    var topic = eventName.topics[0];
                    if (typeof (topic) !== "string") {
                        throw new Error("invalid topic"); // @TODO: May happen for anonymous events
                    }
                    var fragment = this.interface.getEvent(topic);
                    return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
                }
                catch (error) { }
                // Filter by the unknown topichash
                var filter = {
                    address: this.address,
                    topics: eventName.topics
                };
                return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));
            }
            return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
        };
        BaseContract.prototype._checkRunningEvents = function (runningEvent) {
            if (runningEvent.listenerCount() === 0) {
                delete this._runningEvents[runningEvent.tag];
                // If we have a poller for this, remove it
                var emit = this._wrappedEmits[runningEvent.tag];
                if (emit && runningEvent.filter) {
                    this.provider.off(runningEvent.filter, emit);
                    delete this._wrappedEmits[runningEvent.tag];
                }
            }
        };
        // Subclasses can override this to gracefully recover
        // from parse errors if they wish
        BaseContract.prototype._wrapEvent = function (runningEvent, log, listener) {
            var _this = this;
            var event = (0, properties_1.deepCopy)(log);
            event.removeListener = function () {
                if (!listener) {
                    return;
                }
                runningEvent.removeListener(listener);
                _this._checkRunningEvents(runningEvent);
            };
            event.getBlock = function () { return _this.provider.getBlock(log.blockHash); };
            event.getTransaction = function () { return _this.provider.getTransaction(log.transactionHash); };
            event.getTransactionReceipt = function () { return _this.provider.getTransactionReceipt(log.transactionHash); };
            // This may throw if the topics and data mismatch the signature
            runningEvent.prepareEvent(event);
            return event;
        };
        BaseContract.prototype._addEventListener = function (runningEvent, listener, once) {
            var _this = this;
            if (!this.provider) {
                logger.throwError("events require a provider or a signer with a provider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation: "once" });
            }
            runningEvent.addListener(listener, once);
            // Track this running event and its listeners (may already be there; but no hard in updating)
            this._runningEvents[runningEvent.tag] = runningEvent;
            // If we are not polling the provider, start polling
            if (!this._wrappedEmits[runningEvent.tag]) {
                var wrappedEmit = function (log) {
                    var event = _this._wrapEvent(runningEvent, log, listener);
                    // Try to emit the result for the parameterized event...
                    if (event.decodeError == null) {
                        try {
                            var args = runningEvent.getEmit(event);
                            _this.emit.apply(_this, __spreadArray([runningEvent.filter], args, false));
                        }
                        catch (error) {
                            event.decodeError = error.error;
                        }
                    }
                    // Always emit "event" for fragment-base events
                    if (runningEvent.filter != null) {
                        _this.emit("event", event);
                    }
                    // Emit "error" if there was an error
                    if (event.decodeError != null) {
                        _this.emit("error", event.decodeError, event);
                    }
                };
                this._wrappedEmits[runningEvent.tag] = wrappedEmit;
                // Special events, like "error" do not have a filter
                if (runningEvent.filter != null) {
                    this.provider.on(runningEvent.filter, wrappedEmit);
                }
            }
        };
        BaseContract.prototype.queryFilter = function (event, fromBlockOrBlockhash, toBlock) {
            var _this = this;
            var runningEvent = this._getRunningEvent(event);
            var filter = (0, properties_1.shallowCopy)(runningEvent.filter);
            if (typeof (fromBlockOrBlockhash) === "string" && (0, bytes_1.isHexString)(fromBlockOrBlockhash, 32)) {
                if (toBlock != null) {
                    logger.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
                }
                filter.blockHash = fromBlockOrBlockhash;
            }
            else {
                filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);
                filter.toBlock = ((toBlock != null) ? toBlock : "latest");
            }
            return this.provider.getLogs(filter).then(function (logs) {
                return logs.map(function (log) { return _this._wrapEvent(runningEvent, log, null); });
            });
        };
        BaseContract.prototype.on = function (event, listener) {
            this._addEventListener(this._getRunningEvent(event), listener, false);
            return this;
        };
        BaseContract.prototype.once = function (event, listener) {
            this._addEventListener(this._getRunningEvent(event), listener, true);
            return this;
        };
        BaseContract.prototype.emit = function (eventName) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (!this.provider) {
                return false;
            }
            var runningEvent = this._getRunningEvent(eventName);
            var result = (runningEvent.run(args) > 0);
            // May have drained all the "once" events; check for living events
            this._checkRunningEvents(runningEvent);
            return result;
        };
        BaseContract.prototype.listenerCount = function (eventName) {
            var _this = this;
            if (!this.provider) {
                return 0;
            }
            if (eventName == null) {
                return Object.keys(this._runningEvents).reduce(function (accum, key) {
                    return accum + _this._runningEvents[key].listenerCount();
                }, 0);
            }
            return this._getRunningEvent(eventName).listenerCount();
        };
        BaseContract.prototype.listeners = function (eventName) {
            if (!this.provider) {
                return [];
            }
            if (eventName == null) {
                var result_1 = [];
                for (var tag in this._runningEvents) {
                    this._runningEvents[tag].listeners().forEach(function (listener) {
                        result_1.push(listener);
                    });
                }
                return result_1;
            }
            return this._getRunningEvent(eventName).listeners();
        };
        BaseContract.prototype.removeAllListeners = function (eventName) {
            if (!this.provider) {
                return this;
            }
            if (eventName == null) {
                for (var tag in this._runningEvents) {
                    var runningEvent_1 = this._runningEvents[tag];
                    runningEvent_1.removeAllListeners();
                    this._checkRunningEvents(runningEvent_1);
                }
                return this;
            }
            // Delete any listeners
            var runningEvent = this._getRunningEvent(eventName);
            runningEvent.removeAllListeners();
            this._checkRunningEvents(runningEvent);
            return this;
        };
        BaseContract.prototype.off = function (eventName, listener) {
            if (!this.provider) {
                return this;
            }
            var runningEvent = this._getRunningEvent(eventName);
            runningEvent.removeListener(listener);
            this._checkRunningEvents(runningEvent);
            return this;
        };
        BaseContract.prototype.removeListener = function (eventName, listener) {
            return this.off(eventName, listener);
        };
        return BaseContract;
    }());
    exports.BaseContract = BaseContract;
    var Contract = /** @class */ (function (_super) {
        __extends(Contract, _super);
        function Contract() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return Contract;
    }(BaseContract));
    exports.Contract = Contract;
    var ContractFactory = /** @class */ (function () {
        function ContractFactory(contractInterface, bytecode, signer) {
            var _newTarget = this.constructor;
            var bytecodeHex = null;
            if (typeof (bytecode) === "string") {
                bytecodeHex = bytecode;
            }
            else if ((0, bytes_1.isBytes)(bytecode)) {
                bytecodeHex = (0, bytes_1.hexlify)(bytecode);
            }
            else if (bytecode && typeof (bytecode.object) === "string") {
                // Allow the bytecode object from the Solidity compiler
                bytecodeHex = bytecode.object;
            }
            else {
                // Crash in the next verification step
                bytecodeHex = "!";
            }
            // Make sure it is 0x prefixed
            if (bytecodeHex.substring(0, 2) !== "0x") {
                bytecodeHex = "0x" + bytecodeHex;
            }
            // Make sure the final result is valid bytecode
            if (!(0, bytes_1.isHexString)(bytecodeHex) || (bytecodeHex.length % 2)) {
                logger.throwArgumentError("invalid bytecode", "bytecode", bytecode);
            }
            // If we have a signer, make sure it is valid
            if (signer && !abstract_signer_1.Signer.isSigner(signer)) {
                logger.throwArgumentError("invalid signer", "signer", signer);
            }
            (0, properties_1.defineReadOnly)(this, "bytecode", bytecodeHex);
            (0, properties_1.defineReadOnly)(this, "interface", (0, properties_1.getStatic)(_newTarget, "getInterface")(contractInterface));
            (0, properties_1.defineReadOnly)(this, "signer", signer || null);
        }
        // @TODO: Future; rename to populateTransaction?
        ContractFactory.prototype.getDeployTransaction = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var tx = {};
            // If we have 1 additional argument, we allow transaction overrides
            if (args.length === this.interface.deploy.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
                tx = (0, properties_1.shallowCopy)(args.pop());
                for (var key in tx) {
                    if (!allowedTransactionKeys[key]) {
                        throw new Error("unknown transaction override " + key);
                    }
                }
            }
            // Do not allow these to be overridden in a deployment transaction
            ["data", "from", "to"].forEach(function (key) {
                if (tx[key] == null) {
                    return;
                }
                logger.throwError("cannot override " + key, logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation: key });
            });
            if (tx.value) {
                var value = bignumber_1.BigNumber.from(tx.value);
                if (!value.isZero() && !this.interface.deploy.payable) {
                    logger.throwError("non-payable constructor cannot override value", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "overrides.value",
                        value: tx.value
                    });
                }
            }
            // Make sure the call matches the constructor signature
            logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
            // Set the data to the bytecode + the encoded constructor arguments
            tx.data = (0, bytes_1.hexlify)((0, bytes_1.concat)([
                this.bytecode,
                this.interface.encodeDeploy(args)
            ]));
            return tx;
        };
        ContractFactory.prototype.deploy = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var overrides, params, unsignedTx, tx, address, contract;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            overrides = {};
                            // If 1 extra parameter was passed in, it contains overrides
                            if (args.length === this.interface.deploy.inputs.length + 1) {
                                overrides = args.pop();
                            }
                            // Make sure the call matches the constructor signature
                            logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
                            return [4 /*yield*/, resolveAddresses(this.signer, args, this.interface.deploy.inputs)];
                        case 1:
                            params = _a.sent();
                            params.push(overrides);
                            unsignedTx = this.getDeployTransaction.apply(this, params);
                            return [4 /*yield*/, this.signer.sendTransaction(unsignedTx)];
                        case 2:
                            tx = _a.sent();
                            address = (0, properties_1.getStatic)(this.constructor, "getContractAddress")(tx);
                            contract = (0, properties_1.getStatic)(this.constructor, "getContract")(address, this.interface, this.signer);
                            // Add the modified wait that wraps events
                            addContractWait(contract, tx);
                            (0, properties_1.defineReadOnly)(contract, "deployTransaction", tx);
                            return [2 /*return*/, contract];
                    }
                });
            });
        };
        ContractFactory.prototype.attach = function (address) {
            return (this.constructor).getContract(address, this.interface, this.signer);
        };
        ContractFactory.prototype.connect = function (signer) {
            return new (this.constructor)(this.interface, this.bytecode, signer);
        };
        ContractFactory.fromSolidity = function (compilerOutput, signer) {
            if (compilerOutput == null) {
                logger.throwError("missing compiler output", logger_1.Logger.errors.MISSING_ARGUMENT, { argument: "compilerOutput" });
            }
            if (typeof (compilerOutput) === "string") {
                compilerOutput = JSON.parse(compilerOutput);
            }
            var abi = compilerOutput.abi;
            var bytecode = null;
            if (compilerOutput.bytecode) {
                bytecode = compilerOutput.bytecode;
            }
            else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
                bytecode = compilerOutput.evm.bytecode;
            }
            return new this(abi, bytecode, signer);
        };
        ContractFactory.getInterface = function (contractInterface) {
            return Contract.getInterface(contractInterface);
        };
        ContractFactory.getContractAddress = function (tx) {
            return (0, address_1.getContractAddress)(tx);
        };
        ContractFactory.getContract = function (address, contractInterface, signer) {
            return new Contract(address, contractInterface, signer);
        };
        return ContractFactory;
    }());
    exports.ContractFactory = ContractFactory;
    
    },{"./_version":37,"@ethersproject/abi":15,"@ethersproject/abstract-provider":18,"@ethersproject/abstract-signer":20,"@ethersproject/address":22,"@ethersproject/bignumber":29,"@ethersproject/bytes":31,"@ethersproject/logger":56,"@ethersproject/properties":62,"@ethersproject/transactions":102}],39:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "hash/5.5.0";
    
    },{}],40:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.id = void 0;
    var keccak256_1 = require("@ethersproject/keccak256");
    var strings_1 = require("@ethersproject/strings");
    function id(text) {
        return (0, keccak256_1.keccak256)((0, strings_1.toUtf8Bytes)(text));
    }
    exports.id = id;
    
    },{"@ethersproject/keccak256":54,"@ethersproject/strings":99}],41:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._TypedDataEncoder = exports.hashMessage = exports.messagePrefix = exports.isValidName = exports.namehash = exports.id = void 0;
    var id_1 = require("./id");
    Object.defineProperty(exports, "id", { enumerable: true, get: function () { return id_1.id; } });
    var namehash_1 = require("./namehash");
    Object.defineProperty(exports, "isValidName", { enumerable: true, get: function () { return namehash_1.isValidName; } });
    Object.defineProperty(exports, "namehash", { enumerable: true, get: function () { return namehash_1.namehash; } });
    var message_1 = require("./message");
    Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function () { return message_1.hashMessage; } });
    Object.defineProperty(exports, "messagePrefix", { enumerable: true, get: function () { return message_1.messagePrefix; } });
    var typed_data_1 = require("./typed-data");
    Object.defineProperty(exports, "_TypedDataEncoder", { enumerable: true, get: function () { return typed_data_1.TypedDataEncoder; } });
    
    },{"./id":40,"./message":42,"./namehash":43,"./typed-data":44}],42:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hashMessage = exports.messagePrefix = void 0;
    var bytes_1 = require("@ethersproject/bytes");
    var keccak256_1 = require("@ethersproject/keccak256");
    var strings_1 = require("@ethersproject/strings");
    exports.messagePrefix = "\x19Ethereum Signed Message:\n";
    function hashMessage(message) {
        if (typeof (message) === "string") {
            message = (0, strings_1.toUtf8Bytes)(message);
        }
        return (0, keccak256_1.keccak256)((0, bytes_1.concat)([
            (0, strings_1.toUtf8Bytes)(exports.messagePrefix),
            (0, strings_1.toUtf8Bytes)(String(message.length)),
            message
        ]));
    }
    exports.hashMessage = hashMessage;
    
    },{"@ethersproject/bytes":31,"@ethersproject/keccak256":54,"@ethersproject/strings":99}],43:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.namehash = exports.isValidName = void 0;
    var bytes_1 = require("@ethersproject/bytes");
    var strings_1 = require("@ethersproject/strings");
    var keccak256_1 = require("@ethersproject/keccak256");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var Zeros = new Uint8Array(32);
    Zeros.fill(0);
    var Partition = new RegExp("^((.*)\\.)?([^.]+)$");
    function isValidName(name) {
        try {
            var comps = name.split(".");
            for (var i = 0; i < comps.length; i++) {
                if ((0, strings_1.nameprep)(comps[i]).length === 0) {
                    throw new Error("empty");
                }
            }
            return true;
        }
        catch (error) { }
        return false;
    }
    exports.isValidName = isValidName;
    function namehash(name) {
        /* istanbul ignore if */
        if (typeof (name) !== "string") {
            logger.throwArgumentError("invalid ENS name; not a string", "name", name);
        }
        var current = name;
        var result = Zeros;
        while (current.length) {
            var partition = current.match(Partition);
            if (partition == null || partition[2] === "") {
                logger.throwArgumentError("invalid ENS address; missing component", "name", name);
            }
            var label = (0, strings_1.toUtf8Bytes)((0, strings_1.nameprep)(partition[3]));
            result = (0, keccak256_1.keccak256)((0, bytes_1.concat)([result, (0, keccak256_1.keccak256)(label)]));
            current = partition[2] || "";
        }
        return (0, bytes_1.hexlify)(result);
    }
    exports.namehash = namehash;
    
    },{"./_version":39,"@ethersproject/bytes":31,"@ethersproject/keccak256":54,"@ethersproject/logger":56,"@ethersproject/strings":99}],44:[function(require,module,exports){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypedDataEncoder = void 0;
    var address_1 = require("@ethersproject/address");
    var bignumber_1 = require("@ethersproject/bignumber");
    var bytes_1 = require("@ethersproject/bytes");
    var keccak256_1 = require("@ethersproject/keccak256");
    var properties_1 = require("@ethersproject/properties");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var id_1 = require("./id");
    var padding = new Uint8Array(32);
    padding.fill(0);
    var NegativeOne = bignumber_1.BigNumber.from(-1);
    var Zero = bignumber_1.BigNumber.from(0);
    var One = bignumber_1.BigNumber.from(1);
    var MaxUint256 = bignumber_1.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    function hexPadRight(value) {
        var bytes = (0, bytes_1.arrayify)(value);
        var padOffset = bytes.length % 32;
        if (padOffset) {
            return (0, bytes_1.hexConcat)([bytes, padding.slice(padOffset)]);
        }
        return (0, bytes_1.hexlify)(bytes);
    }
    var hexTrue = (0, bytes_1.hexZeroPad)(One.toHexString(), 32);
    var hexFalse = (0, bytes_1.hexZeroPad)(Zero.toHexString(), 32);
    var domainFieldTypes = {
        name: "string",
        version: "string",
        chainId: "uint256",
        verifyingContract: "address",
        salt: "bytes32"
    };
    var domainFieldNames = [
        "name", "version", "chainId", "verifyingContract", "salt"
    ];
    function checkString(key) {
        return function (value) {
            if (typeof (value) !== "string") {
                logger.throwArgumentError("invalid domain value for " + JSON.stringify(key), "domain." + key, value);
            }
            return value;
        };
    }
    var domainChecks = {
        name: checkString("name"),
        version: checkString("version"),
        chainId: function (value) {
            try {
                return bignumber_1.BigNumber.from(value).toString();
            }
            catch (error) { }
            return logger.throwArgumentError("invalid domain value for \"chainId\"", "domain.chainId", value);
        },
        verifyingContract: function (value) {
            try {
                return (0, address_1.getAddress)(value).toLowerCase();
            }
            catch (error) { }
            return logger.throwArgumentError("invalid domain value \"verifyingContract\"", "domain.verifyingContract", value);
        },
        salt: function (value) {
            try {
                var bytes = (0, bytes_1.arrayify)(value);
                if (bytes.length !== 32) {
                    throw new Error("bad length");
                }
                return (0, bytes_1.hexlify)(bytes);
            }
            catch (error) { }
            return logger.throwArgumentError("invalid domain value \"salt\"", "domain.salt", value);
        }
    };
    function getBaseEncoder(type) {
        // intXX and uintXX
        {
            var match = type.match(/^(u?)int(\d*)$/);
            if (match) {
                var signed = (match[1] === "");
                var width = parseInt(match[2] || "256");
                if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {
                    logger.throwArgumentError("invalid numeric width", "type", type);
                }
                var boundsUpper_1 = MaxUint256.mask(signed ? (width - 1) : width);
                var boundsLower_1 = signed ? boundsUpper_1.add(One).mul(NegativeOne) : Zero;
                return function (value) {
                    var v = bignumber_1.BigNumber.from(value);
                    if (v.lt(boundsLower_1) || v.gt(boundsUpper_1)) {
                        logger.throwArgumentError("value out-of-bounds for " + type, "value", value);
                    }
                    return (0, bytes_1.hexZeroPad)(v.toTwos(256).toHexString(), 32);
                };
            }
        }
        // bytesXX
        {
            var match = type.match(/^bytes(\d+)$/);
            if (match) {
                var width_1 = parseInt(match[1]);
                if (width_1 === 0 || width_1 > 32 || match[1] !== String(width_1)) {
                    logger.throwArgumentError("invalid bytes width", "type", type);
                }
                return function (value) {
                    var bytes = (0, bytes_1.arrayify)(value);
                    if (bytes.length !== width_1) {
                        logger.throwArgumentError("invalid length for " + type, "value", value);
                    }
                    return hexPadRight(value);
                };
            }
        }
        switch (type) {
            case "address": return function (value) {
                return (0, bytes_1.hexZeroPad)((0, address_1.getAddress)(value), 32);
            };
            case "bool": return function (value) {
                return ((!value) ? hexFalse : hexTrue);
            };
            case "bytes": return function (value) {
                return (0, keccak256_1.keccak256)(value);
            };
            case "string": return function (value) {
                return (0, id_1.id)(value);
            };
        }
        return null;
    }
    function encodeType(name, fields) {
        return name + "(" + fields.map(function (_a) {
            var name = _a.name, type = _a.type;
            return (type + " " + name);
        }).join(",") + ")";
    }
    var TypedDataEncoder = /** @class */ (function () {
        function TypedDataEncoder(types) {
            (0, properties_1.defineReadOnly)(this, "types", Object.freeze((0, properties_1.deepCopy)(types)));
            (0, properties_1.defineReadOnly)(this, "_encoderCache", {});
            (0, properties_1.defineReadOnly)(this, "_types", {});
            // Link struct types to their direct child structs
            var links = {};
            // Link structs to structs which contain them as a child
            var parents = {};
            // Link all subtypes within a given struct
            var subtypes = {};
            Object.keys(types).forEach(function (type) {
                links[type] = {};
                parents[type] = [];
                subtypes[type] = {};
            });
            var _loop_1 = function (name_1) {
                var uniqueNames = {};
                types[name_1].forEach(function (field) {
                    // Check each field has a unique name
                    if (uniqueNames[field.name]) {
                        logger.throwArgumentError("duplicate variable name " + JSON.stringify(field.name) + " in " + JSON.stringify(name_1), "types", types);
                    }
                    uniqueNames[field.name] = true;
                    // Get the base type (drop any array specifiers)
                    var baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
                    if (baseType === name_1) {
                        logger.throwArgumentError("circular type reference to " + JSON.stringify(baseType), "types", types);
                    }
                    // Is this a base encoding type?
                    var encoder = getBaseEncoder(baseType);
                    if (encoder) {
                        return;
                    }
                    if (!parents[baseType]) {
                        logger.throwArgumentError("unknown type " + JSON.stringify(baseType), "types", types);
                    }
                    // Add linkage
                    parents[baseType].push(name_1);
                    links[name_1][baseType] = true;
                });
            };
            for (var name_1 in types) {
                _loop_1(name_1);
            }
            // Deduce the primary type
            var primaryTypes = Object.keys(parents).filter(function (n) { return (parents[n].length === 0); });
            if (primaryTypes.length === 0) {
                logger.throwArgumentError("missing primary type", "types", types);
            }
            else if (primaryTypes.length > 1) {
                logger.throwArgumentError("ambiguous primary types or unused types: " + primaryTypes.map(function (t) { return (JSON.stringify(t)); }).join(", "), "types", types);
            }
            (0, properties_1.defineReadOnly)(this, "primaryType", primaryTypes[0]);
            // Check for circular type references
            function checkCircular(type, found) {
                if (found[type]) {
                    logger.throwArgumentError("circular type reference to " + JSON.stringify(type), "types", types);
                }
                found[type] = true;
                Object.keys(links[type]).forEach(function (child) {
                    if (!parents[child]) {
                        return;
                    }
                    // Recursively check children
                    checkCircular(child, found);
                    // Mark all ancestors as having this decendant
                    Object.keys(found).forEach(function (subtype) {
                        subtypes[subtype][child] = true;
                    });
                });
                delete found[type];
            }
            checkCircular(this.primaryType, {});
            // Compute each fully describe type
            for (var name_2 in subtypes) {
                var st = Object.keys(subtypes[name_2]);
                st.sort();
                this._types[name_2] = encodeType(name_2, types[name_2]) + st.map(function (t) { return encodeType(t, types[t]); }).join("");
            }
        }
        TypedDataEncoder.prototype.getEncoder = function (type) {
            var encoder = this._encoderCache[type];
            if (!encoder) {
                encoder = this._encoderCache[type] = this._getEncoder(type);
            }
            return encoder;
        };
        TypedDataEncoder.prototype._getEncoder = function (type) {
            var _this = this;
            // Basic encoder type (address, bool, uint256, etc)
            {
                var encoder = getBaseEncoder(type);
                if (encoder) {
                    return encoder;
                }
            }
            // Array
            var match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
            if (match) {
                var subtype_1 = match[1];
                var subEncoder_1 = this.getEncoder(subtype_1);
                var length_1 = parseInt(match[3]);
                return function (value) {
                    if (length_1 >= 0 && value.length !== length_1) {
                        logger.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
                    }
                    var result = value.map(subEncoder_1);
                    if (_this._types[subtype_1]) {
                        result = result.map(keccak256_1.keccak256);
                    }
                    return (0, keccak256_1.keccak256)((0, bytes_1.hexConcat)(result));
                };
            }
            // Struct
            var fields = this.types[type];
            if (fields) {
                var encodedType_1 = (0, id_1.id)(this._types[type]);
                return function (value) {
                    var values = fields.map(function (_a) {
                        var name = _a.name, type = _a.type;
                        var result = _this.getEncoder(type)(value[name]);
                        if (_this._types[type]) {
                            return (0, keccak256_1.keccak256)(result);
                        }
                        return result;
                    });
                    values.unshift(encodedType_1);
                    return (0, bytes_1.hexConcat)(values);
                };
            }
            return logger.throwArgumentError("unknown type: " + type, "type", type);
        };
        TypedDataEncoder.prototype.encodeType = function (name) {
            var result = this._types[name];
            if (!result) {
                logger.throwArgumentError("unknown type: " + JSON.stringify(name), "name", name);
            }
            return result;
        };
        TypedDataEncoder.prototype.encodeData = function (type, value) {
            return this.getEncoder(type)(value);
        };
        TypedDataEncoder.prototype.hashStruct = function (name, value) {
            return (0, keccak256_1.keccak256)(this.encodeData(name, value));
        };
        TypedDataEncoder.prototype.encode = function (value) {
            return this.encodeData(this.primaryType, value);
        };
        TypedDataEncoder.prototype.hash = function (value) {
            return this.hashStruct(this.primaryType, value);
        };
        TypedDataEncoder.prototype._visit = function (type, value, callback) {
            var _this = this;
            // Basic encoder type (address, bool, uint256, etc)
            {
                var encoder = getBaseEncoder(type);
                if (encoder) {
                    return callback(type, value);
                }
            }
            // Array
            var match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
            if (match) {
                var subtype_2 = match[1];
                var length_2 = parseInt(match[3]);
                if (length_2 >= 0 && value.length !== length_2) {
                    logger.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
                }
                return value.map(function (v) { return _this._visit(subtype_2, v, callback); });
            }
            // Struct
            var fields = this.types[type];
            if (fields) {
                return fields.reduce(function (accum, _a) {
                    var name = _a.name, type = _a.type;
                    accum[name] = _this._visit(type, value[name], callback);
                    return accum;
                }, {});
            }
            return logger.throwArgumentError("unknown type: " + type, "type", type);
        };
        TypedDataEncoder.prototype.visit = function (value, callback) {
            return this._visit(this.primaryType, value, callback);
        };
        TypedDataEncoder.from = function (types) {
            return new TypedDataEncoder(types);
        };
        TypedDataEncoder.getPrimaryType = function (types) {
            return TypedDataEncoder.from(types).primaryType;
        };
        TypedDataEncoder.hashStruct = function (name, types, value) {
            return TypedDataEncoder.from(types).hashStruct(name, value);
        };
        TypedDataEncoder.hashDomain = function (domain) {
            var domainFields = [];
            for (var name_3 in domain) {
                var type = domainFieldTypes[name_3];
                if (!type) {
                    logger.throwArgumentError("invalid typed-data domain key: " + JSON.stringify(name_3), "domain", domain);
                }
                domainFields.push({ name: name_3, type: type });
            }
            domainFields.sort(function (a, b) {
                return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
            });
            return TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
        };
        TypedDataEncoder.encode = function (domain, types, value) {
            return (0, bytes_1.hexConcat)([
                "0x1901",
                TypedDataEncoder.hashDomain(domain),
                TypedDataEncoder.from(types).hash(value)
            ]);
        };
        TypedDataEncoder.hash = function (domain, types, value) {
            return (0, keccak256_1.keccak256)(TypedDataEncoder.encode(domain, types, value));
        };
        // Replaces all address types with ENS names with their looked up address
        TypedDataEncoder.resolveNames = function (domain, types, value, resolveName) {
            return __awaiter(this, void 0, void 0, function () {
                var ensCache, encoder, _a, _b, _i, name_4, _c, _d;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            // Make a copy to isolate it from the object passed in
                            domain = (0, properties_1.shallowCopy)(domain);
                            ensCache = {};
                            // Do we need to look up the domain's verifyingContract?
                            if (domain.verifyingContract && !(0, bytes_1.isHexString)(domain.verifyingContract, 20)) {
                                ensCache[domain.verifyingContract] = "0x";
                            }
                            encoder = TypedDataEncoder.from(types);
                            // Get a list of all the addresses
                            encoder.visit(value, function (type, value) {
                                if (type === "address" && !(0, bytes_1.isHexString)(value, 20)) {
                                    ensCache[value] = "0x";
                                }
                                return value;
                            });
                            _a = [];
                            for (_b in ensCache)
                                _a.push(_b);
                            _i = 0;
                            _e.label = 1;
                        case 1:
                            if (!(_i < _a.length)) return [3 /*break*/, 4];
                            name_4 = _a[_i];
                            _c = ensCache;
                            _d = name_4;
                            return [4 /*yield*/, resolveName(name_4)];
                        case 2:
                            _c[_d] = _e.sent();
                            _e.label = 3;
                        case 3:
                            _i++;
                            return [3 /*break*/, 1];
                        case 4:
                            // Replace the domain verifyingContract if needed
                            if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
                                domain.verifyingContract = ensCache[domain.verifyingContract];
                            }
                            // Replace all ENS names with their address
                            value = encoder.visit(value, function (type, value) {
                                if (type === "address" && ensCache[value]) {
                                    return ensCache[value];
                                }
                                return value;
                            });
                            return [2 /*return*/, { domain: domain, value: value }];
                    }
                });
            });
        };
        TypedDataEncoder.getPayload = function (domain, types, value) {
            // Validate the domain fields
            TypedDataEncoder.hashDomain(domain);
            // Derive the EIP712Domain Struct reference type
            var domainValues = {};
            var domainTypes = [];
            domainFieldNames.forEach(function (name) {
                var value = domain[name];
                if (value == null) {
                    return;
                }
                domainValues[name] = domainChecks[name](value);
                domainTypes.push({ name: name, type: domainFieldTypes[name] });
            });
            var encoder = TypedDataEncoder.from(types);
            var typesWithDomain = (0, properties_1.shallowCopy)(types);
            if (typesWithDomain.EIP712Domain) {
                logger.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
            }
            else {
                typesWithDomain.EIP712Domain = domainTypes;
            }
            // Validate the data structures and types
            encoder.encode(value);
            return {
                types: typesWithDomain,
                domain: domainValues,
                primaryType: encoder.primaryType,
                message: encoder.visit(value, function (type, value) {
                    // bytes
                    if (type.match(/^bytes(\d*)/)) {
                        return (0, bytes_1.hexlify)((0, bytes_1.arrayify)(value));
                    }
                    // uint or int
                    if (type.match(/^u?int/)) {
                        return bignumber_1.BigNumber.from(value).toString();
                    }
                    switch (type) {
                        case "address":
                            return value.toLowerCase();
                        case "bool":
                            return !!value;
                        case "string":
                            if (typeof (value) !== "string") {
                                logger.throwArgumentError("invalid string", "value", value);
                            }
                            return value;
                    }
                    return logger.throwArgumentError("unsupported type", "type", type);
                })
            };
        };
        return TypedDataEncoder;
    }());
    exports.TypedDataEncoder = TypedDataEncoder;
    
    },{"./_version":39,"./id":40,"@ethersproject/address":22,"@ethersproject/bignumber":29,"@ethersproject/bytes":31,"@ethersproject/keccak256":54,"@ethersproject/logger":56,"@ethersproject/properties":62}],45:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "hdnode/5.5.0";
    
    },{}],46:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAccountPath = exports.isValidMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.mnemonicToSeed = exports.HDNode = exports.defaultPath = void 0;
    var basex_1 = require("@ethersproject/basex");
    var bytes_1 = require("@ethersproject/bytes");
    var bignumber_1 = require("@ethersproject/bignumber");
    var strings_1 = require("@ethersproject/strings");
    var pbkdf2_1 = require("@ethersproject/pbkdf2");
    var properties_1 = require("@ethersproject/properties");
    var signing_key_1 = require("@ethersproject/signing-key");
    var sha2_1 = require("@ethersproject/sha2");
    var transactions_1 = require("@ethersproject/transactions");
    var wordlists_1 = require("@ethersproject/wordlists");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var N = bignumber_1.BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    // "Bitcoin seed"
    var MasterSecret = (0, strings_1.toUtf8Bytes)("Bitcoin seed");
    var HardenedBit = 0x80000000;
    // Returns a byte with the MSB bits set
    function getUpperMask(bits) {
        return ((1 << bits) - 1) << (8 - bits);
    }
    // Returns a byte with the LSB bits set
    function getLowerMask(bits) {
        return (1 << bits) - 1;
    }
    function bytes32(value) {
        return (0, bytes_1.hexZeroPad)((0, bytes_1.hexlify)(value), 32);
    }
    function base58check(data) {
        return basex_1.Base58.encode((0, bytes_1.concat)([data, (0, bytes_1.hexDataSlice)((0, sha2_1.sha256)((0, sha2_1.sha256)(data)), 0, 4)]));
    }
    function getWordlist(wordlist) {
        if (wordlist == null) {
            return wordlists_1.wordlists["en"];
        }
        if (typeof (wordlist) === "string") {
            var words = wordlists_1.wordlists[wordlist];
            if (words == null) {
                logger.throwArgumentError("unknown locale", "wordlist", wordlist);
            }
            return words;
        }
        return wordlist;
    }
    var _constructorGuard = {};
    exports.defaultPath = "m/44'/60'/0'/0/0";
    ;
    var HDNode = /** @class */ (function () {
        /**
         *  This constructor should not be called directly.
         *
         *  Please use:
         *   - fromMnemonic
         *   - fromSeed
         */
        function HDNode(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {
            var _newTarget = this.constructor;
            logger.checkNew(_newTarget, HDNode);
            /* istanbul ignore if */
            if (constructorGuard !== _constructorGuard) {
                throw new Error("HDNode constructor cannot be called directly");
            }
            if (privateKey) {
                var signingKey = new signing_key_1.SigningKey(privateKey);
                (0, properties_1.defineReadOnly)(this, "privateKey", signingKey.privateKey);
                (0, properties_1.defineReadOnly)(this, "publicKey", signingKey.compressedPublicKey);
            }
            else {
                (0, properties_1.defineReadOnly)(this, "privateKey", null);
                (0, properties_1.defineReadOnly)(this, "publicKey", (0, bytes_1.hexlify)(publicKey));
            }
            (0, properties_1.defineReadOnly)(this, "parentFingerprint", parentFingerprint);
            (0, properties_1.defineReadOnly)(this, "fingerprint", (0, bytes_1.hexDataSlice)((0, sha2_1.ripemd160)((0, sha2_1.sha256)(this.publicKey)), 0, 4));
            (0, properties_1.defineReadOnly)(this, "address", (0, transactions_1.computeAddress)(this.publicKey));
            (0, properties_1.defineReadOnly)(this, "chainCode", chainCode);
            (0, properties_1.defineReadOnly)(this, "index", index);
            (0, properties_1.defineReadOnly)(this, "depth", depth);
            if (mnemonicOrPath == null) {
                // From a source that does not preserve the path (e.g. extended keys)
                (0, properties_1.defineReadOnly)(this, "mnemonic", null);
                (0, properties_1.defineReadOnly)(this, "path", null);
            }
            else if (typeof (mnemonicOrPath) === "string") {
                // From a source that does not preserve the mnemonic (e.g. neutered)
                (0, properties_1.defineReadOnly)(this, "mnemonic", null);
                (0, properties_1.defineReadOnly)(this, "path", mnemonicOrPath);
            }
            else {
                // From a fully qualified source
                (0, properties_1.defineReadOnly)(this, "mnemonic", mnemonicOrPath);
                (0, properties_1.defineReadOnly)(this, "path", mnemonicOrPath.path);
            }
        }
        Object.defineProperty(HDNode.prototype, "extendedKey", {
            get: function () {
                // We only support the mainnet values for now, but if anyone needs
                // testnet values, let me know. I believe current sentiment is that
                // we should always use mainnet, and use BIP-44 to derive the network
                //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
                //   - Testnet: public=0x043587CF, private=0x04358394
                if (this.depth >= 256) {
                    throw new Error("Depth too large!");
                }
                return base58check((0, bytes_1.concat)([
                    ((this.privateKey != null) ? "0x0488ADE4" : "0x0488B21E"),
                    (0, bytes_1.hexlify)(this.depth),
                    this.parentFingerprint,
                    (0, bytes_1.hexZeroPad)((0, bytes_1.hexlify)(this.index), 4),
                    this.chainCode,
                    ((this.privateKey != null) ? (0, bytes_1.concat)(["0x00", this.privateKey]) : this.publicKey),
                ]));
            },
            enumerable: false,
            configurable: true
        });
        HDNode.prototype.neuter = function () {
            return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
        };
        HDNode.prototype._derive = function (index) {
            if (index > 0xffffffff) {
                throw new Error("invalid index - " + String(index));
            }
            // Base path
            var path = this.path;
            if (path) {
                path += "/" + (index & ~HardenedBit);
            }
            var data = new Uint8Array(37);
            if (index & HardenedBit) {
                if (!this.privateKey) {
                    throw new Error("cannot derive child of neutered node");
                }
                // Data = 0x00 || ser_256(k_par)
                data.set((0, bytes_1.arrayify)(this.privateKey), 1);
                // Hardened path
                if (path) {
                    path += "'";
                }
            }
            else {
                // Data = ser_p(point(k_par))
                data.set((0, bytes_1.arrayify)(this.publicKey));
            }
            // Data += ser_32(i)
            for (var i = 24; i >= 0; i -= 8) {
                data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);
            }
            var I = (0, bytes_1.arrayify)((0, sha2_1.computeHmac)(sha2_1.SupportedAlgorithm.sha512, this.chainCode, data));
            var IL = I.slice(0, 32);
            var IR = I.slice(32);
            // The private key
            var ki = null;
            // The public key
            var Ki = null;
            if (this.privateKey) {
                ki = bytes32(bignumber_1.BigNumber.from(IL).add(this.privateKey).mod(N));
            }
            else {
                var ek = new signing_key_1.SigningKey((0, bytes_1.hexlify)(IL));
                Ki = ek._addPoint(this.publicKey);
            }
            var mnemonicOrPath = path;
            var srcMnemonic = this.mnemonic;
            if (srcMnemonic) {
                mnemonicOrPath = Object.freeze({
                    phrase: srcMnemonic.phrase,
                    path: path,
                    locale: (srcMnemonic.locale || "en")
                });
            }
            return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
        };
        HDNode.prototype.derivePath = function (path) {
            var components = path.split("/");
            if (components.length === 0 || (components[0] === "m" && this.depth !== 0)) {
                throw new Error("invalid path - " + path);
            }
            if (components[0] === "m") {
                components.shift();
            }
            var result = this;
            for (var i = 0; i < components.length; i++) {
                var component = components[i];
                if (component.match(/^[0-9]+'$/)) {
                    var index = parseInt(component.substring(0, component.length - 1));
                    if (index >= HardenedBit) {
                        throw new Error("invalid path index - " + component);
                    }
                    result = result._derive(HardenedBit + index);
                }
                else if (component.match(/^[0-9]+$/)) {
                    var index = parseInt(component);
                    if (index >= HardenedBit) {
                        throw new Error("invalid path index - " + component);
                    }
                    result = result._derive(index);
                }
                else {
                    throw new Error("invalid path component - " + component);
                }
            }
            return result;
        };
        HDNode._fromSeed = function (seed, mnemonic) {
            var seedArray = (0, bytes_1.arrayify)(seed);
            if (seedArray.length < 16 || seedArray.length > 64) {
                throw new Error("invalid seed");
            }
            var I = (0, bytes_1.arrayify)((0, sha2_1.computeHmac)(sha2_1.SupportedAlgorithm.sha512, MasterSecret, seedArray));
            return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic);
        };
        HDNode.fromMnemonic = function (mnemonic, password, wordlist) {
            // If a locale name was passed in, find the associated wordlist
            wordlist = getWordlist(wordlist);
            // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)
            mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);
            return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
                phrase: mnemonic,
                path: "m",
                locale: wordlist.locale
            });
        };
        HDNode.fromSeed = function (seed) {
            return HDNode._fromSeed(seed, null);
        };
        HDNode.fromExtendedKey = function (extendedKey) {
            var bytes = basex_1.Base58.decode(extendedKey);
            if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
                logger.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
            }
            var depth = bytes[4];
            var parentFingerprint = (0, bytes_1.hexlify)(bytes.slice(5, 9));
            var index = parseInt((0, bytes_1.hexlify)(bytes.slice(9, 13)).substring(2), 16);
            var chainCode = (0, bytes_1.hexlify)(bytes.slice(13, 45));
            var key = bytes.slice(45, 78);
            switch ((0, bytes_1.hexlify)(bytes.slice(0, 4))) {
                // Public Key
                case "0x0488b21e":
                case "0x043587cf":
                    return new HDNode(_constructorGuard, null, (0, bytes_1.hexlify)(key), parentFingerprint, chainCode, index, depth, null);
                // Private Key
                case "0x0488ade4":
                case "0x04358394 ":
                    if (key[0] !== 0) {
                        break;
                    }
                    return new HDNode(_constructorGuard, (0, bytes_1.hexlify)(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
            }
            return logger.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
        };
        return HDNode;
    }());
    exports.HDNode = HDNode;
    function mnemonicToSeed(mnemonic, password) {
        if (!password) {
            password = "";
        }
        var salt = (0, strings_1.toUtf8Bytes)("mnemonic" + password, strings_1.UnicodeNormalizationForm.NFKD);
        return (0, pbkdf2_1.pbkdf2)((0, strings_1.toUtf8Bytes)(mnemonic, strings_1.UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
    }
    exports.mnemonicToSeed = mnemonicToSeed;
    function mnemonicToEntropy(mnemonic, wordlist) {
        wordlist = getWordlist(wordlist);
        logger.checkNormalize();
        var words = wordlist.split(mnemonic);
        if ((words.length % 3) !== 0) {
            throw new Error("invalid mnemonic");
        }
        var entropy = (0, bytes_1.arrayify)(new Uint8Array(Math.ceil(11 * words.length / 8)));
        var offset = 0;
        for (var i = 0; i < words.length; i++) {
            var index = wordlist.getWordIndex(words[i].normalize("NFKD"));
            if (index === -1) {
                throw new Error("invalid mnemonic");
            }
            for (var bit = 0; bit < 11; bit++) {
                if (index & (1 << (10 - bit))) {
                    entropy[offset >> 3] |= (1 << (7 - (offset % 8)));
                }
                offset++;
            }
        }
        var entropyBits = 32 * words.length / 3;
        var checksumBits = words.length / 3;
        var checksumMask = getUpperMask(checksumBits);
        var checksum = (0, bytes_1.arrayify)((0, sha2_1.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
        if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
            throw new Error("invalid checksum");
        }
        return (0, bytes_1.hexlify)(entropy.slice(0, entropyBits / 8));
    }
    exports.mnemonicToEntropy = mnemonicToEntropy;
    function entropyToMnemonic(entropy, wordlist) {
        wordlist = getWordlist(wordlist);
        entropy = (0, bytes_1.arrayify)(entropy);
        if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {
            throw new Error("invalid entropy");
        }
        var indices = [0];
        var remainingBits = 11;
        for (var i = 0; i < entropy.length; i++) {
            // Consume the whole byte (with still more to go)
            if (remainingBits > 8) {
                indices[indices.length - 1] <<= 8;
                indices[indices.length - 1] |= entropy[i];
                remainingBits -= 8;
                // This byte will complete an 11-bit index
            }
            else {
                indices[indices.length - 1] <<= remainingBits;
                indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);
                // Start the next word
                indices.push(entropy[i] & getLowerMask(8 - remainingBits));
                remainingBits += 3;
            }
        }
        // Compute the checksum bits
        var checksumBits = entropy.length / 4;
        var checksum = (0, bytes_1.arrayify)((0, sha2_1.sha256)(entropy))[0] & getUpperMask(checksumBits);
        // Shift the checksum into the word indices
        indices[indices.length - 1] <<= checksumBits;
        indices[indices.length - 1] |= (checksum >> (8 - checksumBits));
        return wordlist.join(indices.map(function (index) { return wordlist.getWord(index); }));
    }
    exports.entropyToMnemonic = entropyToMnemonic;
    function isValidMnemonic(mnemonic, wordlist) {
        try {
            mnemonicToEntropy(mnemonic, wordlist);
            return true;
        }
        catch (error) { }
        return false;
    }
    exports.isValidMnemonic = isValidMnemonic;
    function getAccountPath(index) {
        if (typeof (index) !== "number" || index < 0 || index >= HardenedBit || index % 1) {
            logger.throwArgumentError("invalid account index", "index", index);
        }
        return "m/44'/60'/" + index + "'/0/0";
    }
    exports.getAccountPath = getAccountPath;
    
    },{"./_version":45,"@ethersproject/basex":25,"@ethersproject/bignumber":29,"@ethersproject/bytes":31,"@ethersproject/logger":56,"@ethersproject/pbkdf2":60,"@ethersproject/properties":62,"@ethersproject/sha2":89,"@ethersproject/signing-key":93,"@ethersproject/strings":99,"@ethersproject/transactions":102,"@ethersproject/wordlists":111}],47:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "json-wallets/5.5.0";
    
    },{}],48:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decrypt = exports.CrowdsaleAccount = void 0;
    var aes_js_1 = __importDefault(require("aes-js"));
    var address_1 = require("@ethersproject/address");
    var bytes_1 = require("@ethersproject/bytes");
    var keccak256_1 = require("@ethersproject/keccak256");
    var pbkdf2_1 = require("@ethersproject/pbkdf2");
    var strings_1 = require("@ethersproject/strings");
    var properties_1 = require("@ethersproject/properties");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var utils_1 = require("./utils");
    var CrowdsaleAccount = /** @class */ (function (_super) {
        __extends(CrowdsaleAccount, _super);
        function CrowdsaleAccount() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CrowdsaleAccount.prototype.isCrowdsaleAccount = function (value) {
            return !!(value && value._isCrowdsaleAccount);
        };
        return CrowdsaleAccount;
    }(properties_1.Description));
    exports.CrowdsaleAccount = CrowdsaleAccount;
    // See: https://github.com/ethereum/pyethsaletool
    function decrypt(json, password) {
        var data = JSON.parse(json);
        password = (0, utils_1.getPassword)(password);
        // Ethereum Address
        var ethaddr = (0, address_1.getAddress)((0, utils_1.searchPath)(data, "ethaddr"));
        // Encrypted Seed
        var encseed = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "encseed"));
        if (!encseed || (encseed.length % 16) !== 0) {
            logger.throwArgumentError("invalid encseed", "json", json);
        }
        var key = (0, bytes_1.arrayify)((0, pbkdf2_1.pbkdf2)(password, password, 2000, 32, "sha256")).slice(0, 16);
        var iv = encseed.slice(0, 16);
        var encryptedSeed = encseed.slice(16);
        // Decrypt the seed
        var aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key, iv);
        var seed = aes_js_1.default.padding.pkcs7.strip((0, bytes_1.arrayify)(aesCbc.decrypt(encryptedSeed)));
        // This wallet format is weird... Convert the binary encoded hex to a string.
        var seedHex = "";
        for (var i = 0; i < seed.length; i++) {
            seedHex += String.fromCharCode(seed[i]);
        }
        var seedHexBytes = (0, strings_1.toUtf8Bytes)(seedHex);
        var privateKey = (0, keccak256_1.keccak256)(seedHexBytes);
        return new CrowdsaleAccount({
            _isCrowdsaleAccount: true,
            address: ethaddr,
            privateKey: privateKey
        });
    }
    exports.decrypt = decrypt;
    
    },{"./_version":47,"./utils":52,"@ethersproject/address":22,"@ethersproject/bytes":31,"@ethersproject/keccak256":54,"@ethersproject/logger":56,"@ethersproject/pbkdf2":60,"@ethersproject/properties":62,"@ethersproject/strings":99,"aes-js":53}],49:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decryptJsonWalletSync = exports.decryptJsonWallet = exports.getJsonWalletAddress = exports.isKeystoreWallet = exports.isCrowdsaleWallet = exports.encryptKeystore = exports.decryptKeystoreSync = exports.decryptKeystore = exports.decryptCrowdsale = void 0;
    var crowdsale_1 = require("./crowdsale");
    Object.defineProperty(exports, "decryptCrowdsale", { enumerable: true, get: function () { return crowdsale_1.decrypt; } });
    var inspect_1 = require("./inspect");
    Object.defineProperty(exports, "getJsonWalletAddress", { enumerable: true, get: function () { return inspect_1.getJsonWalletAddress; } });
    Object.defineProperty(exports, "isCrowdsaleWallet", { enumerable: true, get: function () { return inspect_1.isCrowdsaleWallet; } });
    Object.defineProperty(exports, "isKeystoreWallet", { enumerable: true, get: function () { return inspect_1.isKeystoreWallet; } });
    var keystore_1 = require("./keystore");
    Object.defineProperty(exports, "decryptKeystore", { enumerable: true, get: function () { return keystore_1.decrypt; } });
    Object.defineProperty(exports, "decryptKeystoreSync", { enumerable: true, get: function () { return keystore_1.decryptSync; } });
    Object.defineProperty(exports, "encryptKeystore", { enumerable: true, get: function () { return keystore_1.encrypt; } });
    function decryptJsonWallet(json, password, progressCallback) {
        if ((0, inspect_1.isCrowdsaleWallet)(json)) {
            if (progressCallback) {
                progressCallback(0);
            }
            var account = (0, crowdsale_1.decrypt)(json, password);
            if (progressCallback) {
                progressCallback(1);
            }
            return Promise.resolve(account);
        }
        if ((0, inspect_1.isKeystoreWallet)(json)) {
            return (0, keystore_1.decrypt)(json, password, progressCallback);
        }
        return Promise.reject(new Error("invalid JSON wallet"));
    }
    exports.decryptJsonWallet = decryptJsonWallet;
    function decryptJsonWalletSync(json, password) {
        if ((0, inspect_1.isCrowdsaleWallet)(json)) {
            return (0, crowdsale_1.decrypt)(json, password);
        }
        if ((0, inspect_1.isKeystoreWallet)(json)) {
            return (0, keystore_1.decryptSync)(json, password);
        }
        throw new Error("invalid JSON wallet");
    }
    exports.decryptJsonWalletSync = decryptJsonWalletSync;
    
    },{"./crowdsale":48,"./inspect":50,"./keystore":51}],50:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getJsonWalletAddress = exports.isKeystoreWallet = exports.isCrowdsaleWallet = void 0;
    var address_1 = require("@ethersproject/address");
    function isCrowdsaleWallet(json) {
        var data = null;
        try {
            data = JSON.parse(json);
        }
        catch (error) {
            return false;
        }
        return (data.encseed && data.ethaddr);
    }
    exports.isCrowdsaleWallet = isCrowdsaleWallet;
    function isKeystoreWallet(json) {
        var data = null;
        try {
            data = JSON.parse(json);
        }
        catch (error) {
            return false;
        }
        if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
            return false;
        }
        // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff
        return true;
    }
    exports.isKeystoreWallet = isKeystoreWallet;
    //export function isJsonWallet(json: string): boolean {
    //    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));
    //}
    function getJsonWalletAddress(json) {
        if (isCrowdsaleWallet(json)) {
            try {
                return (0, address_1.getAddress)(JSON.parse(json).ethaddr);
            }
            catch (error) {
                return null;
            }
        }
        if (isKeystoreWallet(json)) {
            try {
                return (0, address_1.getAddress)(JSON.parse(json).address);
            }
            catch (error) {
                return null;
            }
        }
        return null;
    }
    exports.getJsonWalletAddress = getJsonWalletAddress;
    
    },{"@ethersproject/address":22}],51:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encrypt = exports.decrypt = exports.decryptSync = exports.KeystoreAccount = void 0;
    var aes_js_1 = __importDefault(require("aes-js"));
    var scrypt_js_1 = __importDefault(require("scrypt-js"));
    var address_1 = require("@ethersproject/address");
    var bytes_1 = require("@ethersproject/bytes");
    var hdnode_1 = require("@ethersproject/hdnode");
    var keccak256_1 = require("@ethersproject/keccak256");
    var pbkdf2_1 = require("@ethersproject/pbkdf2");
    var random_1 = require("@ethersproject/random");
    var properties_1 = require("@ethersproject/properties");
    var transactions_1 = require("@ethersproject/transactions");
    var utils_1 = require("./utils");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    // Exported Types
    function hasMnemonic(value) {
        return (value != null && value.mnemonic && value.mnemonic.phrase);
    }
    var KeystoreAccount = /** @class */ (function (_super) {
        __extends(KeystoreAccount, _super);
        function KeystoreAccount() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        KeystoreAccount.prototype.isKeystoreAccount = function (value) {
            return !!(value && value._isKeystoreAccount);
        };
        return KeystoreAccount;
    }(properties_1.Description));
    exports.KeystoreAccount = KeystoreAccount;
    function _decrypt(data, key, ciphertext) {
        var cipher = (0, utils_1.searchPath)(data, "crypto/cipher");
        if (cipher === "aes-128-ctr") {
            var iv = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "crypto/cipherparams/iv"));
            var counter = new aes_js_1.default.Counter(iv);
            var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(key, counter);
            return (0, bytes_1.arrayify)(aesCtr.decrypt(ciphertext));
        }
        return null;
    }
    function _getAccount(data, key) {
        var ciphertext = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "crypto/ciphertext"));
        var computedMAC = (0, bytes_1.hexlify)((0, keccak256_1.keccak256)((0, bytes_1.concat)([key.slice(16, 32), ciphertext]))).substring(2);
        if (computedMAC !== (0, utils_1.searchPath)(data, "crypto/mac").toLowerCase()) {
            throw new Error("invalid password");
        }
        var privateKey = _decrypt(data, key.slice(0, 16), ciphertext);
        if (!privateKey) {
            logger.throwError("unsupported cipher", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "decrypt"
            });
        }
        var mnemonicKey = key.slice(32, 64);
        var address = (0, transactions_1.computeAddress)(privateKey);
        if (data.address) {
            var check = data.address.toLowerCase();
            if (check.substring(0, 2) !== "0x") {
                check = "0x" + check;
            }
            if ((0, address_1.getAddress)(check) !== address) {
                throw new Error("address mismatch");
            }
        }
        var account = {
            _isKeystoreAccount: true,
            address: address,
            privateKey: (0, bytes_1.hexlify)(privateKey)
        };
        // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase
        if ((0, utils_1.searchPath)(data, "x-ethers/version") === "0.1") {
            var mnemonicCiphertext = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "x-ethers/mnemonicCiphertext"));
            var mnemonicIv = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "x-ethers/mnemonicCounter"));
            var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);
            var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
            var path = (0, utils_1.searchPath)(data, "x-ethers/path") || hdnode_1.defaultPath;
            var locale = (0, utils_1.searchPath)(data, "x-ethers/locale") || "en";
            var entropy = (0, bytes_1.arrayify)(mnemonicAesCtr.decrypt(mnemonicCiphertext));
            try {
                var mnemonic = (0, hdnode_1.entropyToMnemonic)(entropy, locale);
                var node = hdnode_1.HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
                if (node.privateKey != account.privateKey) {
                    throw new Error("mnemonic mismatch");
                }
                account.mnemonic = node.mnemonic;
            }
            catch (error) {
                // If we don't have the locale wordlist installed to
                // read this mnemonic, just bail and don't set the
                // mnemonic
                if (error.code !== logger_1.Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
                    throw error;
                }
            }
        }
        return new KeystoreAccount(account);
    }
    function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
        return (0, bytes_1.arrayify)((0, pbkdf2_1.pbkdf2)(passwordBytes, salt, count, dkLen, prfFunc));
    }
    function pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {
        return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
    }
    function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
        var passwordBytes = (0, utils_1.getPassword)(password);
        var kdf = (0, utils_1.searchPath)(data, "crypto/kdf");
        if (kdf && typeof (kdf) === "string") {
            var throwError = function (name, value) {
                return logger.throwArgumentError("invalid key-derivation function parameters", name, value);
            };
            if (kdf.toLowerCase() === "scrypt") {
                var salt = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "crypto/kdfparams/salt"));
                var N = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/n"));
                var r = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/r"));
                var p = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/p"));
                // Check for all required parameters
                if (!N || !r || !p) {
                    throwError("kdf", kdf);
                }
                // Make sure N is a power of 2
                if ((N & (N - 1)) !== 0) {
                    throwError("N", N);
                }
                var dkLen = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/dklen"));
                if (dkLen !== 32) {
                    throwError("dklen", dkLen);
                }
                return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);
            }
            else if (kdf.toLowerCase() === "pbkdf2") {
                var salt = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "crypto/kdfparams/salt"));
                var prfFunc = null;
                var prf = (0, utils_1.searchPath)(data, "crypto/kdfparams/prf");
                if (prf === "hmac-sha256") {
                    prfFunc = "sha256";
                }
                else if (prf === "hmac-sha512") {
                    prfFunc = "sha512";
                }
                else {
                    throwError("prf", prf);
                }
                var count = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/c"));
                var dkLen = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/dklen"));
                if (dkLen !== 32) {
                    throwError("dklen", dkLen);
                }
                return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
            }
        }
        return logger.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
    }
    function decryptSync(json, password) {
        var data = JSON.parse(json);
        var key = _computeKdfKey(data, password, pbkdf2Sync, scrypt_js_1.default.syncScrypt);
        return _getAccount(data, key);
    }
    exports.decryptSync = decryptSync;
    function decrypt(json, password, progressCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var data, key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        data = JSON.parse(json);
                        return [4 /*yield*/, _computeKdfKey(data, password, pbkdf2, scrypt_js_1.default.scrypt, progressCallback)];
                    case 1:
                        key = _a.sent();
                        return [2 /*return*/, _getAccount(data, key)];
                }
            });
        });
    }
    exports.decrypt = decrypt;
    function encrypt(account, password, options, progressCallback) {
        try {
            // Check the address matches the private key
            if ((0, address_1.getAddress)(account.address) !== (0, transactions_1.computeAddress)(account.privateKey)) {
                throw new Error("address/privateKey mismatch");
            }
            // Check the mnemonic (if any) matches the private key
            if (hasMnemonic(account)) {
                var mnemonic = account.mnemonic;
                var node = hdnode_1.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || hdnode_1.defaultPath);
                if (node.privateKey != account.privateKey) {
                    throw new Error("mnemonic mismatch");
                }
            }
        }
        catch (e) {
            return Promise.reject(e);
        }
        // The options are optional, so adjust the call as needed
        if (typeof (options) === "function" && !progressCallback) {
            progressCallback = options;
            options = {};
        }
        if (!options) {
            options = {};
        }
        var privateKey = (0, bytes_1.arrayify)(account.privateKey);
        var passwordBytes = (0, utils_1.getPassword)(password);
        var entropy = null;
        var path = null;
        var locale = null;
        if (hasMnemonic(account)) {
            var srcMnemonic = account.mnemonic;
            entropy = (0, bytes_1.arrayify)((0, hdnode_1.mnemonicToEntropy)(srcMnemonic.phrase, srcMnemonic.locale || "en"));
            path = srcMnemonic.path || hdnode_1.defaultPath;
            locale = srcMnemonic.locale || "en";
        }
        var client = options.client;
        if (!client) {
            client = "ethers.js";
        }
        // Check/generate the salt
        var salt = null;
        if (options.salt) {
            salt = (0, bytes_1.arrayify)(options.salt);
        }
        else {
            salt = (0, random_1.randomBytes)(32);
            ;
        }
        // Override initialization vector
        var iv = null;
        if (options.iv) {
            iv = (0, bytes_1.arrayify)(options.iv);
            if (iv.length !== 16) {
                throw new Error("invalid iv");
            }
        }
        else {
            iv = (0, random_1.randomBytes)(16);
        }
        // Override the uuid
        var uuidRandom = null;
        if (options.uuid) {
            uuidRandom = (0, bytes_1.arrayify)(options.uuid);
            if (uuidRandom.length !== 16) {
                throw new Error("invalid uuid");
            }
        }
        else {
            uuidRandom = (0, random_1.randomBytes)(16);
        }
        // Override the scrypt password-based key derivation function parameters
        var N = (1 << 17), r = 8, p = 1;
        if (options.scrypt) {
            if (options.scrypt.N) {
                N = options.scrypt.N;
            }
            if (options.scrypt.r) {
                r = options.scrypt.r;
            }
            if (options.scrypt.p) {
                p = options.scrypt.p;
            }
        }
        // We take 64 bytes:
        //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)
        //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)
        return scrypt_js_1.default.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then(function (key) {
            key = (0, bytes_1.arrayify)(key);
            // This will be used to encrypt the wallet (as per Web3 secret storage)
            var derivedKey = key.slice(0, 16);
            var macPrefix = key.slice(16, 32);
            // This will be used to encrypt the mnemonic phrase (if any)
            var mnemonicKey = key.slice(32, 64);
            // Encrypt the private key
            var counter = new aes_js_1.default.Counter(iv);
            var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(derivedKey, counter);
            var ciphertext = (0, bytes_1.arrayify)(aesCtr.encrypt(privateKey));
            // Compute the message authentication code, used to check the password
            var mac = (0, keccak256_1.keccak256)((0, bytes_1.concat)([macPrefix, ciphertext]));
            // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
            var data = {
                address: account.address.substring(2).toLowerCase(),
                id: (0, utils_1.uuidV4)(uuidRandom),
                version: 3,
                Crypto: {
                    cipher: "aes-128-ctr",
                    cipherparams: {
                        iv: (0, bytes_1.hexlify)(iv).substring(2),
                    },
                    ciphertext: (0, bytes_1.hexlify)(ciphertext).substring(2),
                    kdf: "scrypt",
                    kdfparams: {
                        salt: (0, bytes_1.hexlify)(salt).substring(2),
                        n: N,
                        dklen: 32,
                        p: p,
                        r: r
                    },
                    mac: mac.substring(2)
                }
            };
            // If we have a mnemonic, encrypt it into the JSON wallet
            if (entropy) {
                var mnemonicIv = (0, random_1.randomBytes)(16);
                var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);
                var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
                var mnemonicCiphertext = (0, bytes_1.arrayify)(mnemonicAesCtr.encrypt(entropy));
                var now = new Date();
                var timestamp = (now.getUTCFullYear() + "-" +
                    (0, utils_1.zpad)(now.getUTCMonth() + 1, 2) + "-" +
                    (0, utils_1.zpad)(now.getUTCDate(), 2) + "T" +
                    (0, utils_1.zpad)(now.getUTCHours(), 2) + "-" +
                    (0, utils_1.zpad)(now.getUTCMinutes(), 2) + "-" +
                    (0, utils_1.zpad)(now.getUTCSeconds(), 2) + ".0Z");
                data["x-ethers"] = {
                    client: client,
                    gethFilename: ("UTC--" + timestamp + "--" + data.address),
                    mnemonicCounter: (0, bytes_1.hexlify)(mnemonicIv).substring(2),
                    mnemonicCiphertext: (0, bytes_1.hexlify)(mnemonicCiphertext).substring(2),
                    path: path,
                    locale: locale,
                    version: "0.1"
                };
            }
            return JSON.stringify(data);
        });
    }
    exports.encrypt = encrypt;
    
    },{"./_version":47,"./utils":52,"@ethersproject/address":22,"@ethersproject/bytes":31,"@ethersproject/hdnode":46,"@ethersproject/keccak256":54,"@ethersproject/logger":56,"@ethersproject/pbkdf2":60,"@ethersproject/properties":62,"@ethersproject/random":83,"@ethersproject/transactions":102,"aes-js":53,"scrypt-js":217}],52:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uuidV4 = exports.searchPath = exports.getPassword = exports.zpad = exports.looseArrayify = void 0;
    var bytes_1 = require("@ethersproject/bytes");
    var strings_1 = require("@ethersproject/strings");
    function looseArrayify(hexString) {
        if (typeof (hexString) === 'string' && hexString.substring(0, 2) !== '0x') {
            hexString = '0x' + hexString;
        }
        return (0, bytes_1.arrayify)(hexString);
    }
    exports.looseArrayify = looseArrayify;
    function zpad(value, length) {
        value = String(value);
        while (value.length < length) {
            value = '0' + value;
        }
        return value;
    }
    exports.zpad = zpad;
    function getPassword(password) {
        if (typeof (password) === 'string') {
            return (0, strings_1.toUtf8Bytes)(password, strings_1.UnicodeNormalizationForm.NFKC);
        }
        return (0, bytes_1.arrayify)(password);
    }
    exports.getPassword = getPassword;
    function searchPath(object, path) {
        var currentChild = object;
        var comps = path.toLowerCase().split('/');
        for (var i = 0; i < comps.length; i++) {
            // Search for a child object with a case-insensitive matching key
            var matchingChild = null;
            for (var key in currentChild) {
                if (key.toLowerCase() === comps[i]) {
                    matchingChild = currentChild[key];
                    break;
                }
            }
            // Didn't find one. :'(
            if (matchingChild === null) {
                return null;
            }
            // Now check this child...
            currentChild = matchingChild;
        }
        return currentChild;
    }
    exports.searchPath = searchPath;
    // See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)
    function uuidV4(randomBytes) {
        var bytes = (0, bytes_1.arrayify)(randomBytes);
        // Section: 4.1.3:
        // - time_hi_and_version[12:16] = 0b0100
        bytes[6] = (bytes[6] & 0x0f) | 0x40;
        // Section 4.4
        // - clock_seq_hi_and_reserved[6] = 0b0
        // - clock_seq_hi_and_reserved[7] = 0b1
        bytes[8] = (bytes[8] & 0x3f) | 0x80;
        var value = (0, bytes_1.hexlify)(bytes);
        return [
            value.substring(2, 10),
            value.substring(10, 14),
            value.substring(14, 18),
            value.substring(18, 22),
            value.substring(22, 34),
        ].join("-");
    }
    exports.uuidV4 = uuidV4;
    
    },{"@ethersproject/bytes":31,"@ethersproject/strings":99}],53:[function(require,module,exports){
    "use strict";
    
    (function(root) {
    
        function checkInt(value) {
            return (parseInt(value) === value);
        }
    
        function checkInts(arrayish) {
            if (!checkInt(arrayish.length)) { return false; }
    
            for (var i = 0; i < arrayish.length; i++) {
                if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
                    return false;
                }
            }
    
            return true;
        }
    
        function coerceArray(arg, copy) {
    
            // ArrayBuffer view
            if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {
    
                if (copy) {
                    if (arg.slice) {
                        arg = arg.slice();
                    } else {
                        arg = Array.prototype.slice.call(arg);
                    }
                }
    
                return arg;
            }
    
            // It's an array; check it is a valid representation of a byte
            if (Array.isArray(arg)) {
                if (!checkInts(arg)) {
                    throw new Error('Array contains invalid value: ' + arg);
                }
    
                return new Uint8Array(arg);
            }
    
            // Something else, but behaves like an array (maybe a Buffer? Arguments?)
            if (checkInt(arg.length) && checkInts(arg)) {
                return new Uint8Array(arg);
            }
    
            throw new Error('unsupported array-like object');
        }
    
        function createArray(length) {
            return new Uint8Array(length);
        }
    
        function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
            if (sourceStart != null || sourceEnd != null) {
                if (sourceArray.slice) {
                    sourceArray = sourceArray.slice(sourceStart, sourceEnd);
                } else {
                    sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
                }
            }
            targetArray.set(sourceArray, targetStart);
        }
    
    
    
        var convertUtf8 = (function() {
            function toBytes(text) {
                var result = [], i = 0;
                text = encodeURI(text);
                while (i < text.length) {
                    var c = text.charCodeAt(i++);
    
                    // if it is a % sign, encode the following 2 bytes as a hex value
                    if (c === 37) {
                        result.push(parseInt(text.substr(i, 2), 16))
                        i += 2;
    
                    // otherwise, just the actual byte
                    } else {
                        result.push(c)
                    }
                }
    
                return coerceArray(result);
            }
    
            function fromBytes(bytes) {
                var result = [], i = 0;
    
                while (i < bytes.length) {
                    var c = bytes[i];
    
                    if (c < 128) {
                        result.push(String.fromCharCode(c));
                        i++;
                    } else if (c > 191 && c < 224) {
                        result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));
                        i += 2;
                    } else {
                        result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));
                        i += 3;
                    }
                }
    
                return result.join('');
            }
    
            return {
                toBytes: toBytes,
                fromBytes: fromBytes,
            }
        })();
    
        var convertHex = (function() {
            function toBytes(text) {
                var result = [];
                for (var i = 0; i < text.length; i += 2) {
                    result.push(parseInt(text.substr(i, 2), 16));
                }
    
                return result;
            }
    
            // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
            var Hex = '0123456789abcdef';
    
            function fromBytes(bytes) {
                    var result = [];
                    for (var i = 0; i < bytes.length; i++) {
                        var v = bytes[i];
                        result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
                    }
                    return result.join('');
            }
    
            return {
                toBytes: toBytes,
                fromBytes: fromBytes,
            }
        })();
    
    
        // Number of rounds by keysize
        var numberOfRounds = {16: 10, 24: 12, 32: 14}
    
        // Round constant words
        var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];
    
        // S-box and Inverse S-box (S is for Substitution)
        var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
        var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];
    
        // Transformations for encryption
        var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
        var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
        var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
        var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];
    
        // Transformations for decryption
        var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
        var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
        var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
        var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];
    
        // Transformations for decryption key expansion
        var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
        var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
        var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
        var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];
    
        function convertToInt32(bytes) {
            var result = [];
            for (var i = 0; i < bytes.length; i += 4) {
                result.push(
                    (bytes[i    ] << 24) |
                    (bytes[i + 1] << 16) |
                    (bytes[i + 2] <<  8) |
                     bytes[i + 3]
                );
            }
            return result;
        }
    
        var AES = function(key) {
            if (!(this instanceof AES)) {
                throw Error('AES must be instanitated with `new`');
            }
    
            Object.defineProperty(this, 'key', {
                value: coerceArray(key, true)
            });
    
            this._prepare();
        }
    
    
        AES.prototype._prepare = function() {
    
            var rounds = numberOfRounds[this.key.length];
            if (rounds == null) {
                throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
            }
    
            // encryption round keys
            this._Ke = [];
    
            // decryption round keys
            this._Kd = [];
    
            for (var i = 0; i <= rounds; i++) {
                this._Ke.push([0, 0, 0, 0]);
                this._Kd.push([0, 0, 0, 0]);
            }
    
            var roundKeyCount = (rounds + 1) * 4;
            var KC = this.key.length / 4;
    
            // convert the key into ints
            var tk = convertToInt32(this.key);
    
            // copy values into round key arrays
            var index;
            for (var i = 0; i < KC; i++) {
                index = i >> 2;
                this._Ke[index][i % 4] = tk[i];
                this._Kd[rounds - index][i % 4] = tk[i];
            }
    
            // key expansion (fips-197 section 5.2)
            var rconpointer = 0;
            var t = KC, tt;
            while (t < roundKeyCount) {
                tt = tk[KC - 1];
                tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
                          (S[(tt >>  8) & 0xFF] << 16) ^
                          (S[ tt        & 0xFF] <<  8) ^
                           S[(tt >> 24) & 0xFF]        ^
                          (rcon[rconpointer] << 24));
                rconpointer += 1;
    
                // key expansion (for non-256 bit)
                if (KC != 8) {
                    for (var i = 1; i < KC; i++) {
                        tk[i] ^= tk[i - 1];
                    }
    
                // key expansion for 256-bit keys is "slightly different" (fips-197)
                } else {
                    for (var i = 1; i < (KC / 2); i++) {
                        tk[i] ^= tk[i - 1];
                    }
                    tt = tk[(KC / 2) - 1];
    
                    tk[KC / 2] ^= (S[ tt        & 0xFF]        ^
                                  (S[(tt >>  8) & 0xFF] <<  8) ^
                                  (S[(tt >> 16) & 0xFF] << 16) ^
                                  (S[(tt >> 24) & 0xFF] << 24));
    
                    for (var i = (KC / 2) + 1; i < KC; i++) {
                        tk[i] ^= tk[i - 1];
                    }
                }
    
                // copy values into round key arrays
                var i = 0, r, c;
                while (i < KC && t < roundKeyCount) {
                    r = t >> 2;
                    c = t % 4;
                    this._Ke[r][c] = tk[i];
                    this._Kd[rounds - r][c] = tk[i++];
                    t++;
                }
            }
    
            // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
            for (var r = 1; r < rounds; r++) {
                for (var c = 0; c < 4; c++) {
                    tt = this._Kd[r][c];
                    this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^
                                      U2[(tt >> 16) & 0xFF] ^
                                      U3[(tt >>  8) & 0xFF] ^
                                      U4[ tt        & 0xFF]);
                }
            }
        }
    
        AES.prototype.encrypt = function(plaintext) {
            if (plaintext.length != 16) {
                throw new Error('invalid plaintext size (must be 16 bytes)');
            }
    
            var rounds = this._Ke.length - 1;
            var a = [0, 0, 0, 0];
    
            // convert plaintext to (ints ^ key)
            var t = convertToInt32(plaintext);
            for (var i = 0; i < 4; i++) {
                t[i] ^= this._Ke[0][i];
            }
    
            // apply round transforms
            for (var r = 1; r < rounds; r++) {
                for (var i = 0; i < 4; i++) {
                    a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^
                            T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
                            T3[(t[(i + 2) % 4] >>  8) & 0xff] ^
                            T4[ t[(i + 3) % 4]        & 0xff] ^
                            this._Ke[r][i]);
                }
                t = a.slice();
            }
    
            // the last round is special
            var result = createArray(16), tt;
            for (var i = 0; i < 4; i++) {
                tt = this._Ke[rounds][i];
                result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
                result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
                result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
                result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;
            }
    
            return result;
        }
    
        AES.prototype.decrypt = function(ciphertext) {
            if (ciphertext.length != 16) {
                throw new Error('invalid ciphertext size (must be 16 bytes)');
            }
    
            var rounds = this._Kd.length - 1;
            var a = [0, 0, 0, 0];
    
            // convert plaintext to (ints ^ key)
            var t = convertToInt32(ciphertext);
            for (var i = 0; i < 4; i++) {
                t[i] ^= this._Kd[0][i];
            }
    
            // apply round transforms
            for (var r = 1; r < rounds; r++) {
                for (var i = 0; i < 4; i++) {
                    a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^
                            T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
                            T7[(t[(i + 2) % 4] >>  8) & 0xff] ^
                            T8[ t[(i + 1) % 4]        & 0xff] ^
                            this._Kd[r][i]);
                }
                t = a.slice();
            }
    
            // the last round is special
            var result = createArray(16), tt;
            for (var i = 0; i < 4; i++) {
                tt = this._Kd[rounds][i];
                result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
                result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
                result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
                result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;
            }
    
            return result;
        }
    
    
        /**
         *  Mode Of Operation - Electonic Codebook (ECB)
         */
        var ModeOfOperationECB = function(key) {
            if (!(this instanceof ModeOfOperationECB)) {
                throw Error('AES must be instanitated with `new`');
            }
    
            this.description = "Electronic Code Block";
            this.name = "ecb";
    
            this._aes = new AES(key);
        }
    
        ModeOfOperationECB.prototype.encrypt = function(plaintext) {
            plaintext = coerceArray(plaintext);
    
            if ((plaintext.length % 16) !== 0) {
                throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
            }
    
            var ciphertext = createArray(plaintext.length);
            var block = createArray(16);
    
            for (var i = 0; i < plaintext.length; i += 16) {
                copyArray(plaintext, block, 0, i, i + 16);
                block = this._aes.encrypt(block);
                copyArray(block, ciphertext, i);
            }
    
            return ciphertext;
        }
    
        ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
            ciphertext = coerceArray(ciphertext);
    
            if ((ciphertext.length % 16) !== 0) {
                throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
            }
    
            var plaintext = createArray(ciphertext.length);
            var block = createArray(16);
    
            for (var i = 0; i < ciphertext.length; i += 16) {
                copyArray(ciphertext, block, 0, i, i + 16);
                block = this._aes.decrypt(block);
                copyArray(block, plaintext, i);
            }
    
            return plaintext;
        }
    
    
        /**
         *  Mode Of Operation - Cipher Block Chaining (CBC)
         */
        var ModeOfOperationCBC = function(key, iv) {
            if (!(this instanceof ModeOfOperationCBC)) {
                throw Error('AES must be instanitated with `new`');
            }
    
            this.description = "Cipher Block Chaining";
            this.name = "cbc";
    
            if (!iv) {
                iv = createArray(16);
    
            } else if (iv.length != 16) {
                throw new Error('invalid initialation vector size (must be 16 bytes)');
            }
    
            this._lastCipherblock = coerceArray(iv, true);
    
            this._aes = new AES(key);
        }
    
        ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
            plaintext = coerceArray(plaintext);
    
            if ((plaintext.length % 16) !== 0) {
                throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
            }
    
            var ciphertext = createArray(plaintext.length);
            var block = createArray(16);
    
            for (var i = 0; i < plaintext.length; i += 16) {
                copyArray(plaintext, block, 0, i, i + 16);
    
                for (var j = 0; j < 16; j++) {
                    block[j] ^= this._lastCipherblock[j];
                }
    
                this._lastCipherblock = this._aes.encrypt(block);
                copyArray(this._lastCipherblock, ciphertext, i);
            }
    
            return ciphertext;
        }
    
        ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
            ciphertext = coerceArray(ciphertext);
    
            if ((ciphertext.length % 16) !== 0) {
                throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
            }
    
            var plaintext = createArray(ciphertext.length);
            var block = createArray(16);
    
            for (var i = 0; i < ciphertext.length; i += 16) {
                copyArray(ciphertext, block, 0, i, i + 16);
                block = this._aes.decrypt(block);
    
                for (var j = 0; j < 16; j++) {
                    plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
                }
    
                copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
            }
    
            return plaintext;
        }
    
    
        /**
         *  Mode Of Operation - Cipher Feedback (CFB)
         */
        var ModeOfOperationCFB = function(key, iv, segmentSize) {
            if (!(this instanceof ModeOfOperationCFB)) {
                throw Error('AES must be instanitated with `new`');
            }
    
            this.description = "Cipher Feedback";
            this.name = "cfb";
    
            if (!iv) {
                iv = createArray(16);
    
            } else if (iv.length != 16) {
                throw new Error('invalid initialation vector size (must be 16 size)');
            }
    
            if (!segmentSize) { segmentSize = 1; }
    
            this.segmentSize = segmentSize;
    
            this._shiftRegister = coerceArray(iv, true);
    
            this._aes = new AES(key);
        }
    
        ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
            if ((plaintext.length % this.segmentSize) != 0) {
                throw new Error('invalid plaintext size (must be segmentSize bytes)');
            }
    
            var encrypted = coerceArray(plaintext, true);
    
            var xorSegment;
            for (var i = 0; i < encrypted.length; i += this.segmentSize) {
                xorSegment = this._aes.encrypt(this._shiftRegister);
                for (var j = 0; j < this.segmentSize; j++) {
                    encrypted[i + j] ^= xorSegment[j];
                }
    
                // Shift the register
                copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
                copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
            }
    
            return encrypted;
        }
    
        ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
            if ((ciphertext.length % this.segmentSize) != 0) {
                throw new Error('invalid ciphertext size (must be segmentSize bytes)');
            }
    
            var plaintext = coerceArray(ciphertext, true);
    
            var xorSegment;
            for (var i = 0; i < plaintext.length; i += this.segmentSize) {
                xorSegment = this._aes.encrypt(this._shiftRegister);
    
                for (var j = 0; j < this.segmentSize; j++) {
                    plaintext[i + j] ^= xorSegment[j];
                }
    
                // Shift the register
                copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
                copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
            }
    
            return plaintext;
        }
    
        /**
         *  Mode Of Operation - Output Feedback (OFB)
         */
        var ModeOfOperationOFB = function(key, iv) {
            if (!(this instanceof ModeOfOperationOFB)) {
                throw Error('AES must be instanitated with `new`');
            }
    
            this.description = "Output Feedback";
            this.name = "ofb";
    
            if (!iv) {
                iv = createArray(16);
    
            } else if (iv.length != 16) {
                throw new Error('invalid initialation vector size (must be 16 bytes)');
            }
    
            this._lastPrecipher = coerceArray(iv, true);
            this._lastPrecipherIndex = 16;
    
            this._aes = new AES(key);
        }
    
        ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
            var encrypted = coerceArray(plaintext, true);
    
            for (var i = 0; i < encrypted.length; i++) {
                if (this._lastPrecipherIndex === 16) {
                    this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
                    this._lastPrecipherIndex = 0;
                }
                encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
            }
    
            return encrypted;
        }
    
        // Decryption is symetric
        ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;
    
    
        /**
         *  Counter object for CTR common mode of operation
         */
        var Counter = function(initialValue) {
            if (!(this instanceof Counter)) {
                throw Error('Counter must be instanitated with `new`');
            }
    
            // We allow 0, but anything false-ish uses the default 1
            if (initialValue !== 0 && !initialValue) { initialValue = 1; }
    
            if (typeof(initialValue) === 'number') {
                this._counter = createArray(16);
                this.setValue(initialValue);
    
            } else {
                this.setBytes(initialValue);
            }
        }
    
        Counter.prototype.setValue = function(value) {
            if (typeof(value) !== 'number' || parseInt(value) != value) {
                throw new Error('invalid counter value (must be an integer)');
            }
    
            for (var index = 15; index >= 0; --index) {
                this._counter[index] = value % 256;
                value = value >> 8;
            }
        }
    
        Counter.prototype.setBytes = function(bytes) {
            bytes = coerceArray(bytes, true);
    
            if (bytes.length != 16) {
                throw new Error('invalid counter bytes size (must be 16 bytes)');
            }
    
            this._counter = bytes;
        };
    
        Counter.prototype.increment = function() {
            for (var i = 15; i >= 0; i--) {
                if (this._counter[i] === 255) {
                    this._counter[i] = 0;
                } else {
                    this._counter[i]++;
                    break;
                }
            }
        }
    
    
        /**
         *  Mode Of Operation - Counter (CTR)
         */
        var ModeOfOperationCTR = function(key, counter) {
            if (!(this instanceof ModeOfOperationCTR)) {
                throw Error('AES must be instanitated with `new`');
            }
    
            this.description = "Counter";
            this.name = "ctr";
    
            if (!(counter instanceof Counter)) {
                counter = new Counter(counter)
            }
    
            this._counter = counter;
    
            this._remainingCounter = null;
            this._remainingCounterIndex = 16;
    
            this._aes = new AES(key);
        }
    
        ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
            var encrypted = coerceArray(plaintext, true);
    
            for (var i = 0; i < encrypted.length; i++) {
                if (this._remainingCounterIndex === 16) {
                    this._remainingCounter = this._aes.encrypt(this._counter._counter);
                    this._remainingCounterIndex = 0;
                    this._counter.increment();
                }
                encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
            }
    
            return encrypted;
        }
    
        // Decryption is symetric
        ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;
    
    
        ///////////////////////
        // Padding
    
        // See:https://tools.ietf.org/html/rfc2315
        function pkcs7pad(data) {
            data = coerceArray(data, true);
            var padder = 16 - (data.length % 16);
            var result = createArray(data.length + padder);
            copyArray(data, result);
            for (var i = data.length; i < result.length; i++) {
                result[i] = padder;
            }
            return result;
        }
    
        function pkcs7strip(data) {
            data = coerceArray(data, true);
            if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }
    
            var padder = data[data.length - 1];
            if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }
    
            var length = data.length - padder;
            for (var i = 0; i < padder; i++) {
                if (data[length + i] !== padder) {
                    throw new Error('PKCS#7 invalid padding byte');
                }
            }
    
            var result = createArray(length);
            copyArray(data, result, 0, 0, length);
            return result;
        }
    
        ///////////////////////
        // Exporting
    
    
        // The block cipher
        var aesjs = {
            AES: AES,
            Counter: Counter,
    
            ModeOfOperation: {
                ecb: ModeOfOperationECB,
                cbc: ModeOfOperationCBC,
                cfb: ModeOfOperationCFB,
                ofb: ModeOfOperationOFB,
                ctr: ModeOfOperationCTR
            },
    
            utils: {
                hex: convertHex,
                utf8: convertUtf8
            },
    
            padding: {
                pkcs7: {
                    pad: pkcs7pad,
                    strip: pkcs7strip
                }
            },
    
            _arrayTest: {
                coerceArray: coerceArray,
                createArray: createArray,
                copyArray: copyArray,
            }
        };
    
    
        // node.js
        if (typeof exports !== 'undefined') {
            module.exports = aesjs
    
        // RequireJS/AMD
        // http://www.requirejs.org/docs/api.html
        // https://github.com/amdjs/amdjs-api/wiki/AMD
        } else if (typeof(define) === 'function' && define.amd) {
            define(aesjs);
    
        // Web Browsers
        } else {
    
            // If there was an existing library at "aesjs" make sure it's still available
            if (root.aesjs) {
                aesjs._aesjs = root.aesjs;
            }
    
            root.aesjs = aesjs;
        }
    
    
    })(this);
    
    },{}],54:[function(require,module,exports){
    "use strict";
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.keccak256 = void 0;
    var js_sha3_1 = __importDefault(require("js-sha3"));
    var bytes_1 = require("@ethersproject/bytes");
    function keccak256(data) {
        return '0x' + js_sha3_1.default.keccak_256((0, bytes_1.arrayify)(data));
    }
    exports.keccak256 = keccak256;
    
    },{"@ethersproject/bytes":31,"js-sha3":186}],55:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "logger/5.5.0";
    
    },{}],56:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Logger = exports.ErrorCode = exports.LogLevel = void 0;
    var _permanentCensorErrors = false;
    var _censorErrors = false;
    var LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
    var _logLevel = LogLevels["default"];
    var _version_1 = require("./_version");
    var _globalLogger = null;
    function _checkNormalize() {
        try {
            var missing_1 = [];
            // Make sure all forms of normalization are supported
            ["NFD", "NFC", "NFKD", "NFKC"].forEach(function (form) {
                try {
                    if ("test".normalize(form) !== "test") {
                        throw new Error("bad normalize");
                    }
                    ;
                }
                catch (error) {
                    missing_1.push(form);
                }
            });
            if (missing_1.length) {
                throw new Error("missing " + missing_1.join(", "));
            }
            if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
                throw new Error("broken implementation");
            }
        }
        catch (error) {
            return error.message;
        }
        return null;
    }
    var _normalizeError = _checkNormalize();
    var LogLevel;
    (function (LogLevel) {
        LogLevel["DEBUG"] = "DEBUG";
        LogLevel["INFO"] = "INFO";
        LogLevel["WARNING"] = "WARNING";
        LogLevel["ERROR"] = "ERROR";
        LogLevel["OFF"] = "OFF";
    })(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
    var ErrorCode;
    (function (ErrorCode) {
        ///////////////////
        // Generic Errors
        // Unknown Error
        ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        // Not Implemented
        ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        // Unsupported Operation
        //   - operation
        ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
        //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
        ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
        // Some sort of bad response from the server
        ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
        // Timeout
        ErrorCode["TIMEOUT"] = "TIMEOUT";
        ///////////////////
        // Operational  Errors
        // Buffer Overrun
        ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        // Numeric Fault
        //   - operation: the operation being executed
        //   - fault: the reason this faulted
        ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ///////////////////
        // Argument Errors
        // Missing new operator to an object
        //  - name: The name of the class
        ErrorCode["MISSING_NEW"] = "MISSING_NEW";
        // Invalid argument (e.g. value is incompatible with type) to a function:
        //   - argument: The argument name that was invalid
        //   - value: The value of the argument
        ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        // Missing argument to a function:
        //   - count: The number of arguments received
        //   - expectedCount: The number of arguments expected
        ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        // Too many arguments
        //   - count: The number of arguments received
        //   - expectedCount: The number of arguments expected
        ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ///////////////////
        // Blockchain Errors
        // Call exception
        //  - transaction: the transaction
        //  - address?: the contract address
        //  - args?: The arguments passed into the function
        //  - method?: The Solidity method signature
        //  - errorSignature?: The EIP848 error signature
        //  - errorArgs?: The EIP848 error parameters
        //  - reason: The reason (only for EIP848 "Error(string)")
        ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        // Insufficient funds (< value + gasLimit * gasPrice)
        //   - transaction: the transaction attempted
        ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        // Nonce has already been used
        //   - transaction: the transaction attempted
        ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        // The replacement fee for the transaction is too low
        //   - transaction: the transaction attempted
        ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        // The gas limit could not be estimated
        //   - transaction: the transaction passed to estimateGas
        ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        // The transaction was replaced by one with a higher gas price
        //   - reason: "cancelled", "replaced" or "repriced"
        //   - cancelled: true if reason == "cancelled" or reason == "replaced")
        //   - hash: original transaction hash
        //   - replacement: the full TransactionsResponse for the replacement
        //   - receipt: the receipt of the replacement
        ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
    })(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
    ;
    var HEX = "0123456789abcdef";
    var Logger = /** @class */ (function () {
        function Logger(version) {
            Object.defineProperty(this, "version", {
                enumerable: true,
                value: version,
                writable: false
            });
        }
        Logger.prototype._log = function (logLevel, args) {
            var level = logLevel.toLowerCase();
            if (LogLevels[level] == null) {
                this.throwArgumentError("invalid log level name", "logLevel", logLevel);
            }
            if (_logLevel > LogLevels[level]) {
                return;
            }
            console.log.apply(console, args);
        };
        Logger.prototype.debug = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._log(Logger.levels.DEBUG, args);
        };
        Logger.prototype.info = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._log(Logger.levels.INFO, args);
        };
        Logger.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._log(Logger.levels.WARNING, args);
        };
        Logger.prototype.makeError = function (message, code, params) {
            // Errors are being censored
            if (_censorErrors) {
                return this.makeError("censored error", code, {});
            }
            if (!code) {
                code = Logger.errors.UNKNOWN_ERROR;
            }
            if (!params) {
                params = {};
            }
            var messageDetails = [];
            Object.keys(params).forEach(function (key) {
                var value = params[key];
                try {
                    if (value instanceof Uint8Array) {
                        var hex = "";
                        for (var i = 0; i < value.length; i++) {
                            hex += HEX[value[i] >> 4];
                            hex += HEX[value[i] & 0x0f];
                        }
                        messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
                    }
                    else {
                        messageDetails.push(key + "=" + JSON.stringify(value));
                    }
                }
                catch (error) {
                    messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
                }
            });
            messageDetails.push("code=" + code);
            messageDetails.push("version=" + this.version);
            var reason = message;
            if (messageDetails.length) {
                message += " (" + messageDetails.join(", ") + ")";
            }
            // @TODO: Any??
            var error = new Error(message);
            error.reason = reason;
            error.code = code;
            Object.keys(params).forEach(function (key) {
                error[key] = params[key];
            });
            return error;
        };
        Logger.prototype.throwError = function (message, code, params) {
            throw this.makeError(message, code, params);
        };
        Logger.prototype.throwArgumentError = function (message, name, value) {
            return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
                argument: name,
                value: value
            });
        };
        Logger.prototype.assert = function (condition, message, code, params) {
            if (!!condition) {
                return;
            }
            this.throwError(message, code, params);
        };
        Logger.prototype.assertArgument = function (condition, message, name, value) {
            if (!!condition) {
                return;
            }
            this.throwArgumentError(message, name, value);
        };
        Logger.prototype.checkNormalize = function (message) {
            if (message == null) {
                message = "platform missing String.prototype.normalize";
            }
            if (_normalizeError) {
                this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "String.prototype.normalize", form: _normalizeError
                });
            }
        };
        Logger.prototype.checkSafeUint53 = function (value, message) {
            if (typeof (value) !== "number") {
                return;
            }
            if (message == null) {
                message = "value not safe";
            }
            if (value < 0 || value >= 0x1fffffffffffff) {
                this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                    operation: "checkSafeInteger",
                    fault: "out-of-safe-range",
                    value: value
                });
            }
            if (value % 1) {
                this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                    operation: "checkSafeInteger",
                    fault: "non-integer",
                    value: value
                });
            }
        };
        Logger.prototype.checkArgumentCount = function (count, expectedCount, message) {
            if (message) {
                message = ": " + message;
            }
            else {
                message = "";
            }
            if (count < expectedCount) {
                this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
                    count: count,
                    expectedCount: expectedCount
                });
            }
            if (count > expectedCount) {
                this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
                    count: count,
                    expectedCount: expectedCount
                });
            }
        };
        Logger.prototype.checkNew = function (target, kind) {
            if (target === Object || target == null) {
                this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
            }
        };
        Logger.prototype.checkAbstract = function (target, kind) {
            if (target === kind) {
                this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
            }
            else if (target === Object || target == null) {
                this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
            }
        };
        Logger.globalLogger = function () {
            if (!_globalLogger) {
                _globalLogger = new Logger(_version_1.version);
            }
            return _globalLogger;
        };
        Logger.setCensorship = function (censorship, permanent) {
            if (!censorship && permanent) {
                this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setCensorship"
                });
            }
            if (_permanentCensorErrors) {
                if (!censorship) {
                    return;
                }
                this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setCensorship"
                });
            }
            _censorErrors = !!censorship;
            _permanentCensorErrors = !!permanent;
        };
        Logger.setLogLevel = function (logLevel) {
            var level = LogLevels[logLevel.toLowerCase()];
            if (level == null) {
                Logger.globalLogger().warn("invalid log level - " + logLevel);
                return;
            }
            _logLevel = level;
        };
        Logger.from = function (version) {
            return new Logger(version);
        };
        Logger.errors = ErrorCode;
        Logger.levels = LogLevel;
        return Logger;
    }());
    exports.Logger = Logger;
    
    },{"./_version":55}],57:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "networks/5.5.2";
    
    },{}],58:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getNetwork = void 0;
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    ;
    function isRenetworkable(value) {
        return (value && typeof (value.renetwork) === "function");
    }
    function ethDefaultProvider(network) {
        var func = function (providers, options) {
            if (options == null) {
                options = {};
            }
            var providerList = [];
            if (providers.InfuraProvider) {
                try {
                    providerList.push(new providers.InfuraProvider(network, options.infura));
                }
                catch (error) { }
            }
            if (providers.EtherscanProvider) {
                try {
                    providerList.push(new providers.EtherscanProvider(network, options.etherscan));
                }
                catch (error) { }
            }
            if (providers.AlchemyProvider) {
                try {
                    providerList.push(new providers.AlchemyProvider(network, options.alchemy));
                }
                catch (error) { }
            }
            if (providers.PocketProvider) {
                // These networks are currently faulty on Pocket as their
                // network does not handle the Berlin hardfork, which is
                // live on these ones.
                // @TODO: This goes away once Pocket has upgraded their nodes
                var skip = ["goerli", "ropsten", "rinkeby"];
                try {
                    var provider = new providers.PocketProvider(network);
                    if (provider.network && skip.indexOf(provider.network.name) === -1) {
                        providerList.push(provider);
                    }
                }
                catch (error) { }
            }
            if (providers.CloudflareProvider) {
                try {
                    providerList.push(new providers.CloudflareProvider(network));
                }
                catch (error) { }
            }
            if (providerList.length === 0) {
                return null;
            }
            if (providers.FallbackProvider) {
                var quorum = 1;
                if (options.quorum != null) {
                    quorum = options.quorum;
                }
                else if (network === "homestead") {
                    quorum = 2;
                }
                return new providers.FallbackProvider(providerList, quorum);
            }
            return providerList[0];
        };
        func.renetwork = function (network) {
            return ethDefaultProvider(network);
        };
        return func;
    }
    function etcDefaultProvider(url, network) {
        var func = function (providers, options) {
            if (providers.JsonRpcProvider) {
                return new providers.JsonRpcProvider(url, network);
            }
            return null;
        };
        func.renetwork = function (network) {
            return etcDefaultProvider(url, network);
        };
        return func;
    }
    var homestead = {
        chainId: 1,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "homestead",
        _defaultProvider: ethDefaultProvider("homestead")
    };
    var ropsten = {
        chainId: 3,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "ropsten",
        _defaultProvider: ethDefaultProvider("ropsten")
    };
    var classicMordor = {
        chainId: 63,
        name: "classicMordor",
        _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
    };
    // See: https://chainlist.org
    var networks = {
        unspecified: { chainId: 0, name: "unspecified" },
        homestead: homestead,
        mainnet: homestead,
        morden: { chainId: 2, name: "morden" },
        ropsten: ropsten,
        testnet: ropsten,
        rinkeby: {
            chainId: 4,
            ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            name: "rinkeby",
            _defaultProvider: ethDefaultProvider("rinkeby")
        },
        kovan: {
            chainId: 42,
            name: "kovan",
            _defaultProvider: ethDefaultProvider("kovan")
        },
        goerli: {
            chainId: 5,
            ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            name: "goerli",
            _defaultProvider: ethDefaultProvider("goerli")
        },
        kintsugi: { chainId: 1337702, name: "kintsugi" },
        // ETC (See: #351)
        classic: {
            chainId: 61,
            name: "classic",
            _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/etc", "classic")
        },
        classicMorden: { chainId: 62, name: "classicMorden" },
        classicMordor: classicMordor,
        classicTestnet: classicMordor,
        classicKotti: {
            chainId: 6,
            name: "classicKotti",
            _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/kotti", "classicKotti")
        },
        xdai: { chainId: 100, name: "xdai" },
        matic: { chainId: 137, name: "matic" },
        maticmum: { chainId: 80001, name: "maticmum" },
        optimism: { chainId: 10, name: "optimism" },
        "optimism-kovan": { chainId: 69, name: "optimism-kovan" },
        "optimism-goerli": { chainId: 420, name: "optimism-goerli" },
        arbitrum: { chainId: 42161, name: "arbitrum" },
        "arbitrum-rinkeby": { chainId: 421611, name: "arbitrum-rinkeby" },
        bnb: { chainId: 56, name: "bnb" },
        bnbt: { chainId: 97, name: "bnbt" },
    };
    /**
     *  getNetwork
     *
     *  Converts a named common networks or chain ID (network ID) to a Network
     *  and verifies a network is a valid Network..
     */
    function getNetwork(network) {
        // No network (null)
        if (network == null) {
            return null;
        }
        if (typeof (network) === "number") {
            for (var name_1 in networks) {
                var standard_1 = networks[name_1];
                if (standard_1.chainId === network) {
                    return {
                        name: standard_1.name,
                        chainId: standard_1.chainId,
                        ensAddress: (standard_1.ensAddress || null),
                        _defaultProvider: (standard_1._defaultProvider || null)
                    };
                }
            }
            return {
                chainId: network,
                name: "unknown"
            };
        }
        if (typeof (network) === "string") {
            var standard_2 = networks[network];
            if (standard_2 == null) {
                return null;
            }
            return {
                name: standard_2.name,
                chainId: standard_2.chainId,
                ensAddress: standard_2.ensAddress,
                _defaultProvider: (standard_2._defaultProvider || null)
            };
        }
        var standard = networks[network.name];
        // Not a standard network; check that it is a valid network in general
        if (!standard) {
            if (typeof (network.chainId) !== "number") {
                logger.throwArgumentError("invalid network chainId", "network", network);
            }
            return network;
        }
        // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)
        if (network.chainId !== 0 && network.chainId !== standard.chainId) {
            logger.throwArgumentError("network chainId mismatch", "network", network);
        }
        // @TODO: In the next major version add an attach function to a defaultProvider
        // class and move the _defaultProvider internal to this file (extend Network)
        var defaultProvider = network._defaultProvider || null;
        if (defaultProvider == null && standard._defaultProvider) {
            if (isRenetworkable(standard._defaultProvider)) {
                defaultProvider = standard._defaultProvider.renetwork(network);
            }
            else {
                defaultProvider = standard._defaultProvider;
            }
        }
        // Standard Network (allow overriding the ENS address)
        return {
            name: network.name,
            chainId: standard.chainId,
            ensAddress: (network.ensAddress || standard.ensAddress || null),
            _defaultProvider: defaultProvider
        };
    }
    exports.getNetwork = getNetwork;
    
    },{"./_version":57,"@ethersproject/logger":56}],59:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pbkdf2 = void 0;
    var bytes_1 = require("@ethersproject/bytes");
    var sha2_1 = require("@ethersproject/sha2");
    function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {
        password = (0, bytes_1.arrayify)(password);
        salt = (0, bytes_1.arrayify)(salt);
        var hLen;
        var l = 1;
        var DK = new Uint8Array(keylen);
        var block1 = new Uint8Array(salt.length + 4);
        block1.set(salt);
        //salt.copy(block1, 0, 0, salt.length)
        var r;
        var T;
        for (var i = 1; i <= l; i++) {
            //block1.writeUInt32BE(i, salt.length)
            block1[salt.length] = (i >> 24) & 0xff;
            block1[salt.length + 1] = (i >> 16) & 0xff;
            block1[salt.length + 2] = (i >> 8) & 0xff;
            block1[salt.length + 3] = i & 0xff;
            //let U = createHmac(password).update(block1).digest();
            var U = (0, bytes_1.arrayify)((0, sha2_1.computeHmac)(hashAlgorithm, password, block1));
            if (!hLen) {
                hLen = U.length;
                T = new Uint8Array(hLen);
                l = Math.ceil(keylen / hLen);
                r = keylen - (l - 1) * hLen;
            }
            //U.copy(T, 0, 0, hLen)
            T.set(U);
            for (var j = 1; j < iterations; j++) {
                //U = createHmac(password).update(U).digest();
                U = (0, bytes_1.arrayify)((0, sha2_1.computeHmac)(hashAlgorithm, password, U));
                for (var k = 0; k < hLen; k++)
                    T[k] ^= U[k];
            }
            var destPos = (i - 1) * hLen;
            var len = (i === l ? r : hLen);
            //T.copy(DK, destPos, 0, len)
            DK.set((0, bytes_1.arrayify)(T).slice(0, len), destPos);
        }
        return (0, bytes_1.hexlify)(DK);
    }
    exports.pbkdf2 = pbkdf2;
    
    },{"@ethersproject/bytes":31,"@ethersproject/sha2":89}],60:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pbkdf2 = void 0;
    var pbkdf2_1 = require("./pbkdf2");
    Object.defineProperty(exports, "pbkdf2", { enumerable: true, get: function () { return pbkdf2_1.pbkdf2; } });
    
    },{"./pbkdf2":59}],61:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "properties/5.5.0";
    
    },{}],62:[function(require,module,exports){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Description = exports.deepCopy = exports.shallowCopy = exports.checkProperties = exports.resolveProperties = exports.getStatic = exports.defineReadOnly = void 0;
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    function defineReadOnly(object, name, value) {
        Object.defineProperty(object, name, {
            enumerable: true,
            value: value,
            writable: false,
        });
    }
    exports.defineReadOnly = defineReadOnly;
    // Crawl up the constructor chain to find a static method
    function getStatic(ctor, key) {
        for (var i = 0; i < 32; i++) {
            if (ctor[key]) {
                return ctor[key];
            }
            if (!ctor.prototype || typeof (ctor.prototype) !== "object") {
                break;
            }
            ctor = Object.getPrototypeOf(ctor.prototype).constructor;
        }
        return null;
    }
    exports.getStatic = getStatic;
    function resolveProperties(object) {
        return __awaiter(this, void 0, void 0, function () {
            var promises, results;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        promises = Object.keys(object).map(function (key) {
                            var value = object[key];
                            return Promise.resolve(value).then(function (v) { return ({ key: key, value: v }); });
                        });
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1:
                        results = _a.sent();
                        return [2 /*return*/, results.reduce(function (accum, result) {
                                accum[(result.key)] = result.value;
                                return accum;
                            }, {})];
                }
            });
        });
    }
    exports.resolveProperties = resolveProperties;
    function checkProperties(object, properties) {
        if (!object || typeof (object) !== "object") {
            logger.throwArgumentError("invalid object", "object", object);
        }
        Object.keys(object).forEach(function (key) {
            if (!properties[key]) {
                logger.throwArgumentError("invalid object key - " + key, "transaction:" + key, object);
            }
        });
    }
    exports.checkProperties = checkProperties;
    function shallowCopy(object) {
        var result = {};
        for (var key in object) {
            result[key] = object[key];
        }
        return result;
    }
    exports.shallowCopy = shallowCopy;
    var opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
    function _isFrozen(object) {
        // Opaque objects are not mutable, so safe to copy by assignment
        if (object === undefined || object === null || opaque[typeof (object)]) {
            return true;
        }
        if (Array.isArray(object) || typeof (object) === "object") {
            if (!Object.isFrozen(object)) {
                return false;
            }
            var keys = Object.keys(object);
            for (var i = 0; i < keys.length; i++) {
                var value = null;
                try {
                    value = object[keys[i]];
                }
                catch (error) {
                    // If accessing a value triggers an error, it is a getter
                    // designed to do so (e.g. Result) and is therefore "frozen"
                    continue;
                }
                if (!_isFrozen(value)) {
                    return false;
                }
            }
            return true;
        }
        return logger.throwArgumentError("Cannot deepCopy " + typeof (object), "object", object);
    }
    // Returns a new copy of object, such that no properties may be replaced.
    // New properties may be added only to objects.
    function _deepCopy(object) {
        if (_isFrozen(object)) {
            return object;
        }
        // Arrays are mutable, so we need to create a copy
        if (Array.isArray(object)) {
            return Object.freeze(object.map(function (item) { return deepCopy(item); }));
        }
        if (typeof (object) === "object") {
            var result = {};
            for (var key in object) {
                var value = object[key];
                if (value === undefined) {
                    continue;
                }
                defineReadOnly(result, key, deepCopy(value));
            }
            return result;
        }
        return logger.throwArgumentError("Cannot deepCopy " + typeof (object), "object", object);
    }
    function deepCopy(object) {
        return _deepCopy(object);
    }
    exports.deepCopy = deepCopy;
    var Description = /** @class */ (function () {
        function Description(info) {
            for (var key in info) {
                this[key] = deepCopy(info[key]);
            }
        }
        return Description;
    }());
    exports.Description = Description;
    
    },{"./_version":61,"@ethersproject/logger":56}],63:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "providers/5.5.3";
    
    },{}],64:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AlchemyProvider = exports.AlchemyWebSocketProvider = void 0;
    var properties_1 = require("@ethersproject/properties");
    var formatter_1 = require("./formatter");
    var websocket_provider_1 = require("./websocket-provider");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var url_json_rpc_provider_1 = require("./url-json-rpc-provider");
    // This key was provided to ethers.js by Alchemy to be used by the
    // default provider, but it is recommended that for your own
    // production environments, that you acquire your own API key at:
    //   https://dashboard.alchemyapi.io
    var defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
    var AlchemyWebSocketProvider = /** @class */ (function (_super) {
        __extends(AlchemyWebSocketProvider, _super);
        function AlchemyWebSocketProvider(network, apiKey) {
            var _this = this;
            var provider = new AlchemyProvider(network, apiKey);
            var url = provider.connection.url.replace(/^http/i, "ws")
                .replace(".alchemyapi.", ".ws.alchemyapi.");
            _this = _super.call(this, url, provider.network) || this;
            (0, properties_1.defineReadOnly)(_this, "apiKey", provider.apiKey);
            return _this;
        }
        AlchemyWebSocketProvider.prototype.isCommunityResource = function () {
            return (this.apiKey === defaultApiKey);
        };
        return AlchemyWebSocketProvider;
    }(websocket_provider_1.WebSocketProvider));
    exports.AlchemyWebSocketProvider = AlchemyWebSocketProvider;
    var AlchemyProvider = /** @class */ (function (_super) {
        __extends(AlchemyProvider, _super);
        function AlchemyProvider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AlchemyProvider.getWebSocketProvider = function (network, apiKey) {
            return new AlchemyWebSocketProvider(network, apiKey);
        };
        AlchemyProvider.getApiKey = function (apiKey) {
            if (apiKey == null) {
                return defaultApiKey;
            }
            if (apiKey && typeof (apiKey) !== "string") {
                logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
            }
            return apiKey;
        };
        AlchemyProvider.getUrl = function (network, apiKey) {
            var host = null;
            switch (network.name) {
                case "homestead":
                    host = "eth-mainnet.alchemyapi.io/v2/";
                    break;
                case "ropsten":
                    host = "eth-ropsten.alchemyapi.io/v2/";
                    break;
                case "rinkeby":
                    host = "eth-rinkeby.alchemyapi.io/v2/";
                    break;
                case "goerli":
                    host = "eth-goerli.alchemyapi.io/v2/";
                    break;
                case "kovan":
                    host = "eth-kovan.alchemyapi.io/v2/";
                    break;
                case "matic":
                    host = "polygon-mainnet.g.alchemy.com/v2/";
                    break;
                case "maticmum":
                    host = "polygon-mumbai.g.alchemy.com/v2/";
                    break;
                case "arbitrum":
                    host = "arb-mainnet.g.alchemy.com/v2/";
                    break;
                case "arbitrum-rinkeby":
                    host = "arb-rinkeby.g.alchemy.com/v2/";
                    break;
                case "optimism":
                    host = "opt-mainnet.g.alchemy.com/v2/";
                    break;
                case "optimism-kovan":
                    host = "opt-kovan.g.alchemy.com/v2/";
                    break;
                default:
                    logger.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return {
                allowGzip: true,
                url: ("https:/" + "/" + host + apiKey),
                throttleCallback: function (attempt, url) {
                    if (apiKey === defaultApiKey) {
                        (0, formatter_1.showThrottleMessage)();
                    }
                    return Promise.resolve(true);
                }
            };
        };
        AlchemyProvider.prototype.isCommunityResource = function () {
            return (this.apiKey === defaultApiKey);
        };
        return AlchemyProvider;
    }(url_json_rpc_provider_1.UrlJsonRpcProvider));
    exports.AlchemyProvider = AlchemyProvider;
    
    },{"./_version":63,"./formatter":71,"./url-json-rpc-provider":78,"./websocket-provider":80,"@ethersproject/logger":56,"@ethersproject/properties":62}],65:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseProvider = exports.Resolver = exports.Event = void 0;
    var abstract_provider_1 = require("@ethersproject/abstract-provider");
    var basex_1 = require("@ethersproject/basex");
    var bignumber_1 = require("@ethersproject/bignumber");
    var bytes_1 = require("@ethersproject/bytes");
    var constants_1 = require("@ethersproject/constants");
    var hash_1 = require("@ethersproject/hash");
    var networks_1 = require("@ethersproject/networks");
    var properties_1 = require("@ethersproject/properties");
    var sha2_1 = require("@ethersproject/sha2");
    var strings_1 = require("@ethersproject/strings");
    var web_1 = require("@ethersproject/web");
    var bech32_1 = __importDefault(require("bech32"));
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var formatter_1 = require("./formatter");
    //////////////////////////////
    // Event Serializeing
    function checkTopic(topic) {
        if (topic == null) {
            return "null";
        }
        if ((0, bytes_1.hexDataLength)(topic) !== 32) {
            logger.throwArgumentError("invalid topic", "topic", topic);
        }
        return topic.toLowerCase();
    }
    function serializeTopics(topics) {
        // Remove trailing null AND-topics; they are redundant
        topics = topics.slice();
        while (topics.length > 0 && topics[topics.length - 1] == null) {
            topics.pop();
        }
        return topics.map(function (topic) {
            if (Array.isArray(topic)) {
                // Only track unique OR-topics
                var unique_1 = {};
                topic.forEach(function (topic) {
                    unique_1[checkTopic(topic)] = true;
                });
                // The order of OR-topics does not matter
                var sorted = Object.keys(unique_1);
                sorted.sort();
                return sorted.join("|");
            }
            else {
                return checkTopic(topic);
            }
        }).join("&");
    }
    function deserializeTopics(data) {
        if (data === "") {
            return [];
        }
        return data.split(/&/g).map(function (topic) {
            if (topic === "") {
                return [];
            }
            var comps = topic.split("|").map(function (topic) {
                return ((topic === "null") ? null : topic);
            });
            return ((comps.length === 1) ? comps[0] : comps);
        });
    }
    function getEventTag(eventName) {
        if (typeof (eventName) === "string") {
            eventName = eventName.toLowerCase();
            if ((0, bytes_1.hexDataLength)(eventName) === 32) {
                return "tx:" + eventName;
            }
            if (eventName.indexOf(":") === -1) {
                return eventName;
            }
        }
        else if (Array.isArray(eventName)) {
            return "filter:*:" + serializeTopics(eventName);
        }
        else if (abstract_provider_1.ForkEvent.isForkEvent(eventName)) {
            logger.warn("not implemented");
            throw new Error("not implemented");
        }
        else if (eventName && typeof (eventName) === "object") {
            return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
        }
        throw new Error("invalid event - " + eventName);
    }
    //////////////////////////////
    // Helper Object
    function getTime() {
        return (new Date()).getTime();
    }
    function stall(duration) {
        return new Promise(function (resolve) {
            setTimeout(resolve, duration);
        });
    }
    //////////////////////////////
    // Provider Object
    /**
     *  EventType
     *   - "block"
     *   - "poll"
     *   - "didPoll"
     *   - "pending"
     *   - "error"
     *   - "network"
     *   - filter
     *   - topics array
     *   - transaction hash
     */
    var PollableEvents = ["block", "network", "pending", "poll"];
    var Event = /** @class */ (function () {
        function Event(tag, listener, once) {
            (0, properties_1.defineReadOnly)(this, "tag", tag);
            (0, properties_1.defineReadOnly)(this, "listener", listener);
            (0, properties_1.defineReadOnly)(this, "once", once);
        }
        Object.defineProperty(Event.prototype, "event", {
            get: function () {
                switch (this.type) {
                    case "tx":
                        return this.hash;
                    case "filter":
                        return this.filter;
                }
                return this.tag;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Event.prototype, "type", {
            get: function () {
                return this.tag.split(":")[0];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Event.prototype, "hash", {
            get: function () {
                var comps = this.tag.split(":");
                if (comps[0] !== "tx") {
                    return null;
                }
                return comps[1];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Event.prototype, "filter", {
            get: function () {
                var comps = this.tag.split(":");
                if (comps[0] !== "filter") {
                    return null;
                }
                var address = comps[1];
                var topics = deserializeTopics(comps[2]);
                var filter = {};
                if (topics.length > 0) {
                    filter.topics = topics;
                }
                if (address && address !== "*") {
                    filter.address = address;
                }
                return filter;
            },
            enumerable: false,
            configurable: true
        });
        Event.prototype.pollable = function () {
            return (this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0);
        };
        return Event;
    }());
    exports.Event = Event;
    ;
    // https://github.com/satoshilabs/slips/blob/master/slip-0044.md
    var coinInfos = {
        "0": { symbol: "btc", p2pkh: 0x00, p2sh: 0x05, prefix: "bc" },
        "2": { symbol: "ltc", p2pkh: 0x30, p2sh: 0x32, prefix: "ltc" },
        "3": { symbol: "doge", p2pkh: 0x1e, p2sh: 0x16 },
        "60": { symbol: "eth", ilk: "eth" },
        "61": { symbol: "etc", ilk: "eth" },
        "700": { symbol: "xdai", ilk: "eth" },
    };
    function bytes32ify(value) {
        return (0, bytes_1.hexZeroPad)(bignumber_1.BigNumber.from(value).toHexString(), 32);
    }
    // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)
    function base58Encode(data) {
        return basex_1.Base58.encode((0, bytes_1.concat)([data, (0, bytes_1.hexDataSlice)((0, sha2_1.sha256)((0, sha2_1.sha256)(data)), 0, 4)]));
    }
    var matcherIpfs = new RegExp("^(ipfs):/\/(.*)$", "i");
    var matchers = [
        new RegExp("^(https):/\/(.*)$", "i"),
        new RegExp("^(data):(.*)$", "i"),
        matcherIpfs,
        new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i"),
    ];
    function _parseString(result) {
        try {
            return (0, strings_1.toUtf8String)(_parseBytes(result));
        }
        catch (error) { }
        return null;
    }
    function _parseBytes(result) {
        if (result === "0x") {
            return null;
        }
        var offset = bignumber_1.BigNumber.from((0, bytes_1.hexDataSlice)(result, 0, 32)).toNumber();
        var length = bignumber_1.BigNumber.from((0, bytes_1.hexDataSlice)(result, offset, offset + 32)).toNumber();
        return (0, bytes_1.hexDataSlice)(result, offset + 32, offset + 32 + length);
    }
    // Trim off the ipfs:// prefix and return the default gateway URL
    function getIpfsLink(link) {
        if (link.match(/^ipfs:\/\/ipfs\//i)) {
            link = link.substring(12);
        }
        else if (link.match(/^ipfs:\/\//i)) {
            link = link.substring(7);
        }
        else {
            logger.throwArgumentError("unsupported IPFS format", "link", link);
        }
        return "https://gateway.ipfs.io/ipfs/" + link;
    }
    var Resolver = /** @class */ (function () {
        // The resolvedAddress is only for creating a ReverseLookup resolver
        function Resolver(provider, address, name, resolvedAddress) {
            (0, properties_1.defineReadOnly)(this, "provider", provider);
            (0, properties_1.defineReadOnly)(this, "name", name);
            (0, properties_1.defineReadOnly)(this, "address", provider.formatter.address(address));
            (0, properties_1.defineReadOnly)(this, "_resolvedAddress", resolvedAddress);
        }
        Resolver.prototype._fetchBytes = function (selector, parameters) {
            return __awaiter(this, void 0, void 0, function () {
                var tx, _a, error_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            tx = {
                                to: this.address,
                                data: (0, bytes_1.hexConcat)([selector, (0, hash_1.namehash)(this.name), (parameters || "0x")])
                            };
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            _a = _parseBytes;
                            return [4 /*yield*/, this.provider.call(tx)];
                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];
                        case 3:
                            error_1 = _b.sent();
                            if (error_1.code === logger_1.Logger.errors.CALL_EXCEPTION) {
                                return [2 /*return*/, null];
                            }
                            return [2 /*return*/, null];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        Resolver.prototype._getAddress = function (coinType, hexBytes) {
            var coinInfo = coinInfos[String(coinType)];
            if (coinInfo == null) {
                logger.throwError("unsupported coin type: " + coinType, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "getAddress(" + coinType + ")"
                });
            }
            if (coinInfo.ilk === "eth") {
                return this.provider.formatter.address(hexBytes);
            }
            var bytes = (0, bytes_1.arrayify)(hexBytes);
            // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG
            if (coinInfo.p2pkh != null) {
                var p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
                if (p2pkh) {
                    var length_1 = parseInt(p2pkh[1], 16);
                    if (p2pkh[2].length === length_1 * 2 && length_1 >= 1 && length_1 <= 75) {
                        return base58Encode((0, bytes_1.concat)([[coinInfo.p2pkh], ("0x" + p2pkh[2])]));
                    }
                }
            }
            // P2SH: OP_HASH160 <scriptHash> OP_EQUAL
            if (coinInfo.p2sh != null) {
                var p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
                if (p2sh) {
                    var length_2 = parseInt(p2sh[1], 16);
                    if (p2sh[2].length === length_2 * 2 && length_2 >= 1 && length_2 <= 75) {
                        return base58Encode((0, bytes_1.concat)([[coinInfo.p2sh], ("0x" + p2sh[2])]));
                    }
                }
            }
            // Bech32
            if (coinInfo.prefix != null) {
                var length_3 = bytes[1];
                // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program
                var version_1 = bytes[0];
                if (version_1 === 0x00) {
                    if (length_3 !== 20 && length_3 !== 32) {
                        version_1 = -1;
                    }
                }
                else {
                    version_1 = -1;
                }
                if (version_1 >= 0 && bytes.length === 2 + length_3 && length_3 >= 1 && length_3 <= 75) {
                    var words = bech32_1.default.toWords(bytes.slice(2));
                    words.unshift(version_1);
                    return bech32_1.default.encode(coinInfo.prefix, words);
                }
            }
            return null;
        };
        Resolver.prototype.getAddress = function (coinType) {
            return __awaiter(this, void 0, void 0, function () {
                var transaction, hexBytes_1, error_2, hexBytes, address;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (coinType == null) {
                                coinType = 60;
                            }
                            if (!(coinType === 60)) return [3 /*break*/, 4];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            transaction = {
                                to: this.address,
                                data: ("0x3b3b57de" + (0, hash_1.namehash)(this.name).substring(2))
                            };
                            return [4 /*yield*/, this.provider.call(transaction)];
                        case 2:
                            hexBytes_1 = _a.sent();
                            // No address
                            if (hexBytes_1 === "0x" || hexBytes_1 === constants_1.HashZero) {
                                return [2 /*return*/, null];
                            }
                            return [2 /*return*/, this.provider.formatter.callAddress(hexBytes_1)];
                        case 3:
                            error_2 = _a.sent();
                            if (error_2.code === logger_1.Logger.errors.CALL_EXCEPTION) {
                                return [2 /*return*/, null];
                            }
                            throw error_2;
                        case 4: return [4 /*yield*/, this._fetchBytes("0xf1cb7e06", bytes32ify(coinType))];
                        case 5:
                            hexBytes = _a.sent();
                            // No address
                            if (hexBytes == null || hexBytes === "0x") {
                                return [2 /*return*/, null];
                            }
                            address = this._getAddress(coinType, hexBytes);
                            if (address == null) {
                                logger.throwError("invalid or unsupported coin data", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                                    operation: "getAddress(" + coinType + ")",
                                    coinType: coinType,
                                    data: hexBytes
                                });
                            }
                            return [2 /*return*/, address];
                    }
                });
            });
        };
        Resolver.prototype.getAvatar = function () {
            return __awaiter(this, void 0, void 0, function () {
                var linkage, avatar, i, match, scheme, _a, selector, owner, _b, comps, addr, tokenId, tokenOwner, _c, _d, balance, _e, _f, tx, metadataUrl, _g, metadata, imageUrl, ipfs, error_3;
                return __generator(this, function (_h) {
                    switch (_h.label) {
                        case 0:
                            linkage = [{ type: "name", content: this.name }];
                            _h.label = 1;
                        case 1:
                            _h.trys.push([1, 19, , 20]);
                            return [4 /*yield*/, this.getText("avatar")];
                        case 2:
                            avatar = _h.sent();
                            if (avatar == null) {
                                return [2 /*return*/, null];
                            }
                            i = 0;
                            _h.label = 3;
                        case 3:
                            if (!(i < matchers.length)) return [3 /*break*/, 18];
                            match = avatar.match(matchers[i]);
                            if (match == null) {
                                return [3 /*break*/, 17];
                            }
                            scheme = match[1].toLowerCase();
                            _a = scheme;
                            switch (_a) {
                                case "https": return [3 /*break*/, 4];
                                case "data": return [3 /*break*/, 5];
                                case "ipfs": return [3 /*break*/, 6];
                                case "erc721": return [3 /*break*/, 7];
                                case "erc1155": return [3 /*break*/, 7];
                            }
                            return [3 /*break*/, 17];
                        case 4:
                            linkage.push({ type: "url", content: avatar });
                            return [2 /*return*/, { linkage: linkage, url: avatar }];
                        case 5:
                            linkage.push({ type: "data", content: avatar });
                            return [2 /*return*/, { linkage: linkage, url: avatar }];
                        case 6:
                            linkage.push({ type: "ipfs", content: avatar });
                            return [2 /*return*/, { linkage: linkage, url: getIpfsLink(avatar) }];
                        case 7:
                            selector = (scheme === "erc721") ? "0xc87b56dd" : "0x0e89341c";
                            linkage.push({ type: scheme, content: avatar });
                            _b = this._resolvedAddress;
                            if (_b) return [3 /*break*/, 9];
                            return [4 /*yield*/, this.getAddress()];
                        case 8:
                            _b = (_h.sent());
                            _h.label = 9;
                        case 9:
                            owner = (_b);
                            comps = (match[2] || "").split("/");
                            if (comps.length !== 2) {
                                return [2 /*return*/, null];
                            }
                            return [4 /*yield*/, this.provider.formatter.address(comps[0])];
                        case 10:
                            addr = _h.sent();
                            tokenId = (0, bytes_1.hexZeroPad)(bignumber_1.BigNumber.from(comps[1]).toHexString(), 32);
                            if (!(scheme === "erc721")) return [3 /*break*/, 12];
                            _d = (_c = this.provider.formatter).callAddress;
                            return [4 /*yield*/, this.provider.call({
                                    to: addr, data: (0, bytes_1.hexConcat)(["0x6352211e", tokenId])
                                })];
                        case 11:
                            tokenOwner = _d.apply(_c, [_h.sent()]);
                            if (owner !== tokenOwner) {
                                return [2 /*return*/, null];
                            }
                            linkage.push({ type: "owner", content: tokenOwner });
                            return [3 /*break*/, 14];
                        case 12:
                            if (!(scheme === "erc1155")) return [3 /*break*/, 14];
                            _f = (_e = bignumber_1.BigNumber).from;
                            return [4 /*yield*/, this.provider.call({
                                    to: addr, data: (0, bytes_1.hexConcat)(["0x00fdd58e", (0, bytes_1.hexZeroPad)(owner, 32), tokenId])
                                })];
                        case 13:
                            balance = _f.apply(_e, [_h.sent()]);
                            if (balance.isZero()) {
                                return [2 /*return*/, null];
                            }
                            linkage.push({ type: "balance", content: balance.toString() });
                            _h.label = 14;
                        case 14:
                            tx = {
                                to: this.provider.formatter.address(comps[0]),
                                data: (0, bytes_1.hexConcat)([selector, tokenId])
                            };
                            _g = _parseString;
                            return [4 /*yield*/, this.provider.call(tx)];
                        case 15:
                            metadataUrl = _g.apply(void 0, [_h.sent()]);
                            if (metadataUrl == null) {
                                return [2 /*return*/, null];
                            }
                            linkage.push({ type: "metadata-url-base", content: metadataUrl });
                            // ERC-1155 allows a generic {id} in the URL
                            if (scheme === "erc1155") {
                                metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
                                linkage.push({ type: "metadata-url-expanded", content: metadataUrl });
                            }
                            // Transform IPFS metadata links
                            if (metadataUrl.match(/^ipfs:/i)) {
                                metadataUrl = getIpfsLink(metadataUrl);
                            }
                            linkage.push({ type: "metadata-url", content: metadataUrl });
                            return [4 /*yield*/, (0, web_1.fetchJson)(metadataUrl)];
                        case 16:
                            metadata = _h.sent();
                            if (!metadata) {
                                return [2 /*return*/, null];
                            }
                            linkage.push({ type: "metadata", content: JSON.stringify(metadata) });
                            imageUrl = metadata.image;
                            if (typeof (imageUrl) !== "string") {
                                return [2 /*return*/, null];
                            }
                            if (imageUrl.match(/^(https:\/\/|data:)/i)) {
                                // Allow
                            }
                            else {
                                ipfs = imageUrl.match(matcherIpfs);
                                if (ipfs == null) {
                                    return [2 /*return*/, null];
                                }
                                linkage.push({ type: "url-ipfs", content: imageUrl });
                                imageUrl = getIpfsLink(imageUrl);
                            }
                            linkage.push({ type: "url", content: imageUrl });
                            return [2 /*return*/, { linkage: linkage, url: imageUrl }];
                        case 17:
                            i++;
                            return [3 /*break*/, 3];
                        case 18: return [3 /*break*/, 20];
                        case 19:
                            error_3 = _h.sent();
                            return [3 /*break*/, 20];
                        case 20: return [2 /*return*/, null];
                    }
                });
            });
        };
        Resolver.prototype.getContentHash = function () {
            return __awaiter(this, void 0, void 0, function () {
                var hexBytes, ipfs, length_4, swarm;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._fetchBytes("0xbc1c58d1")];
                        case 1:
                            hexBytes = _a.sent();
                            // No contenthash
                            if (hexBytes == null || hexBytes === "0x") {
                                return [2 /*return*/, null];
                            }
                            ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                            if (ipfs) {
                                length_4 = parseInt(ipfs[3], 16);
                                if (ipfs[4].length === length_4 * 2) {
                                    return [2 /*return*/, "ipfs:/\/" + basex_1.Base58.encode("0x" + ipfs[1])];
                                }
                            }
                            swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
                            if (swarm) {
                                if (swarm[1].length === (32 * 2)) {
                                    return [2 /*return*/, "bzz:/\/" + swarm[1]];
                                }
                            }
                            return [2 /*return*/, logger.throwError("invalid or unsupported content hash data", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                                    operation: "getContentHash()",
                                    data: hexBytes
                                })];
                    }
                });
            });
        };
        Resolver.prototype.getText = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var keyBytes, hexBytes;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            keyBytes = (0, strings_1.toUtf8Bytes)(key);
                            // The nodehash consumes the first slot, so the string pointer targets
                            // offset 64, with the length at offset 64 and data starting at offset 96
                            keyBytes = (0, bytes_1.concat)([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);
                            // Pad to word-size (32 bytes)
                            if ((keyBytes.length % 32) !== 0) {
                                keyBytes = (0, bytes_1.concat)([keyBytes, (0, bytes_1.hexZeroPad)("0x", 32 - (key.length % 32))]);
                            }
                            return [4 /*yield*/, this._fetchBytes("0x59d1d43c", (0, bytes_1.hexlify)(keyBytes))];
                        case 1:
                            hexBytes = _a.sent();
                            if (hexBytes == null || hexBytes === "0x") {
                                return [2 /*return*/, null];
                            }
                            return [2 /*return*/, (0, strings_1.toUtf8String)(hexBytes)];
                    }
                });
            });
        };
        return Resolver;
    }());
    exports.Resolver = Resolver;
    var defaultFormatter = null;
    var nextPollId = 1;
    var BaseProvider = /** @class */ (function (_super) {
        __extends(BaseProvider, _super);
        /**
         *  ready
         *
         *  A Promise<Network> that resolves only once the provider is ready.
         *
         *  Sub-classes that call the super with a network without a chainId
         *  MUST set this. Standard named networks have a known chainId.
         *
         */
        function BaseProvider(network) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkNew(_newTarget, abstract_provider_1.Provider);
            _this = _super.call(this) || this;
            // Events being listened to
            _this._events = [];
            _this._emitted = { block: -2 };
            _this.formatter = _newTarget.getFormatter();
            // If network is any, this Provider allows the underlying
            // network to change dynamically, and we auto-detect the
            // current network
            (0, properties_1.defineReadOnly)(_this, "anyNetwork", (network === "any"));
            if (_this.anyNetwork) {
                network = _this.detectNetwork();
            }
            if (network instanceof Promise) {
                _this._networkPromise = network;
                // Squash any "unhandled promise" errors; that do not need to be handled
                network.catch(function (error) { });
                // Trigger initial network setting (async)
                _this._ready().catch(function (error) { });
            }
            else {
                var knownNetwork = (0, properties_1.getStatic)(_newTarget, "getNetwork")(network);
                if (knownNetwork) {
                    (0, properties_1.defineReadOnly)(_this, "_network", knownNetwork);
                    _this.emit("network", knownNetwork, null);
                }
                else {
                    logger.throwArgumentError("invalid network", "network", network);
                }
            }
            _this._maxInternalBlockNumber = -1024;
            _this._lastBlockNumber = -2;
            _this._pollingInterval = 4000;
            _this._fastQueryDate = 0;
            return _this;
        }
        BaseProvider.prototype._ready = function () {
            return __awaiter(this, void 0, void 0, function () {
                var network, error_4;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this._network == null)) return [3 /*break*/, 7];
                            network = null;
                            if (!this._networkPromise) return [3 /*break*/, 4];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this._networkPromise];
                        case 2:
                            network = _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            error_4 = _a.sent();
                            return [3 /*break*/, 4];
                        case 4:
                            if (!(network == null)) return [3 /*break*/, 6];
                            return [4 /*yield*/, this.detectNetwork()];
                        case 5:
                            network = _a.sent();
                            _a.label = 6;
                        case 6:
                            // This should never happen; every Provider sub-class should have
                            // suggested a network by here (or have thrown).
                            if (!network) {
                                logger.throwError("no network detected", logger_1.Logger.errors.UNKNOWN_ERROR, {});
                            }
                            // Possible this call stacked so do not call defineReadOnly again
                            if (this._network == null) {
                                if (this.anyNetwork) {
                                    this._network = network;
                                }
                                else {
                                    (0, properties_1.defineReadOnly)(this, "_network", network);
                                }
                                this.emit("network", network, null);
                            }
                            _a.label = 7;
                        case 7: return [2 /*return*/, this._network];
                    }
                });
            });
        };
        Object.defineProperty(BaseProvider.prototype, "ready", {
            // This will always return the most recently established network.
            // For "any", this can change (a "network" event is emitted before
            // any change is reflected); otherwise this cannot change
            get: function () {
                var _this = this;
                return (0, web_1.poll)(function () {
                    return _this._ready().then(function (network) {
                        return network;
                    }, function (error) {
                        // If the network isn't running yet, we will wait
                        if (error.code === logger_1.Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
                            return undefined;
                        }
                        throw error;
                    });
                });
            },
            enumerable: false,
            configurable: true
        });
        // @TODO: Remove this and just create a singleton formatter
        BaseProvider.getFormatter = function () {
            if (defaultFormatter == null) {
                defaultFormatter = new formatter_1.Formatter();
            }
            return defaultFormatter;
        };
        // @TODO: Remove this and just use getNetwork
        BaseProvider.getNetwork = function (network) {
            return (0, networks_1.getNetwork)((network == null) ? "homestead" : network);
        };
        // Fetches the blockNumber, but will reuse any result that is less
        // than maxAge old or has been requested since the last request
        BaseProvider.prototype._getInternalBlockNumber = function (maxAge) {
            return __awaiter(this, void 0, void 0, function () {
                var internalBlockNumber, result, error_5, reqTime, checkInternalBlockNumber;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._ready()];
                        case 1:
                            _a.sent();
                            if (!(maxAge > 0)) return [3 /*break*/, 7];
                            _a.label = 2;
                        case 2:
                            if (!this._internalBlockNumber) return [3 /*break*/, 7];
                            internalBlockNumber = this._internalBlockNumber;
                            _a.label = 3;
                        case 3:
                            _a.trys.push([3, 5, , 6]);
                            return [4 /*yield*/, internalBlockNumber];
                        case 4:
                            result = _a.sent();
                            if ((getTime() - result.respTime) <= maxAge) {
                                return [2 /*return*/, result.blockNumber];
                            }
                            // Too old; fetch a new value
                            return [3 /*break*/, 7];
                        case 5:
                            error_5 = _a.sent();
                            // The fetch rejected; if we are the first to get the
                            // rejection, drop through so we replace it with a new
                            // fetch; all others blocked will then get that fetch
                            // which won't match the one they "remembered" and loop
                            if (this._internalBlockNumber === internalBlockNumber) {
                                return [3 /*break*/, 7];
                            }
                            return [3 /*break*/, 6];
                        case 6: return [3 /*break*/, 2];
                        case 7:
                            reqTime = getTime();
                            checkInternalBlockNumber = (0, properties_1.resolveProperties)({
                                blockNumber: this.perform("getBlockNumber", {}),
                                networkError: this.getNetwork().then(function (network) { return (null); }, function (error) { return (error); })
                            }).then(function (_a) {
                                var blockNumber = _a.blockNumber, networkError = _a.networkError;
                                if (networkError) {
                                    // Unremember this bad internal block number
                                    if (_this._internalBlockNumber === checkInternalBlockNumber) {
                                        _this._internalBlockNumber = null;
                                    }
                                    throw networkError;
                                }
                                var respTime = getTime();
                                blockNumber = bignumber_1.BigNumber.from(blockNumber).toNumber();
                                if (blockNumber < _this._maxInternalBlockNumber) {
                                    blockNumber = _this._maxInternalBlockNumber;
                                }
                                _this._maxInternalBlockNumber = blockNumber;
                                _this._setFastBlockNumber(blockNumber); // @TODO: Still need this?
                                return { blockNumber: blockNumber, reqTime: reqTime, respTime: respTime };
                            });
                            this._internalBlockNumber = checkInternalBlockNumber;
                            // Swallow unhandled exceptions; if needed they are handled else where
                            checkInternalBlockNumber.catch(function (error) {
                                // Don't null the dead (rejected) fetch, if it has already been updated
                                if (_this._internalBlockNumber === checkInternalBlockNumber) {
                                    _this._internalBlockNumber = null;
                                }
                            });
                            return [4 /*yield*/, checkInternalBlockNumber];
                        case 8: return [2 /*return*/, (_a.sent()).blockNumber];
                    }
                });
            });
        };
        BaseProvider.prototype.poll = function () {
            return __awaiter(this, void 0, void 0, function () {
                var pollId, runners, blockNumber, error_6, i;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            pollId = nextPollId++;
                            runners = [];
                            blockNumber = null;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this._getInternalBlockNumber(100 + this.pollingInterval / 2)];
                        case 2:
                            blockNumber = _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            error_6 = _a.sent();
                            this.emit("error", error_6);
                            return [2 /*return*/];
                        case 4:
                            this._setFastBlockNumber(blockNumber);
                            // Emit a poll event after we have the latest (fast) block number
                            this.emit("poll", pollId, blockNumber);
                            // If the block has not changed, meh.
                            if (blockNumber === this._lastBlockNumber) {
                                this.emit("didPoll", pollId);
                                return [2 /*return*/];
                            }
                            // First polling cycle, trigger a "block" events
                            if (this._emitted.block === -2) {
                                this._emitted.block = blockNumber - 1;
                            }
                            if (Math.abs((this._emitted.block) - blockNumber) > 1000) {
                                logger.warn("network block skew detected; skipping block events (emitted=" + this._emitted.block + " blockNumber" + blockNumber + ")");
                                this.emit("error", logger.makeError("network block skew detected", logger_1.Logger.errors.NETWORK_ERROR, {
                                    blockNumber: blockNumber,
                                    event: "blockSkew",
                                    previousBlockNumber: this._emitted.block
                                }));
                                this.emit("block", blockNumber);
                            }
                            else {
                                // Notify all listener for each block that has passed
                                for (i = this._emitted.block + 1; i <= blockNumber; i++) {
                                    this.emit("block", i);
                                }
                            }
                            // The emitted block was updated, check for obsolete events
                            if (this._emitted.block !== blockNumber) {
                                this._emitted.block = blockNumber;
                                Object.keys(this._emitted).forEach(function (key) {
                                    // The block event does not expire
                                    if (key === "block") {
                                        return;
                                    }
                                    // The block we were at when we emitted this event
                                    var eventBlockNumber = _this._emitted[key];
                                    // We cannot garbage collect pending transactions or blocks here
                                    // They should be garbage collected by the Provider when setting
                                    // "pending" events
                                    if (eventBlockNumber === "pending") {
                                        return;
                                    }
                                    // Evict any transaction hashes or block hashes over 12 blocks
                                    // old, since they should not return null anyways
                                    if (blockNumber - eventBlockNumber > 12) {
                                        delete _this._emitted[key];
                                    }
                                });
                            }
                            // First polling cycle
                            if (this._lastBlockNumber === -2) {
                                this._lastBlockNumber = blockNumber - 1;
                            }
                            // Find all transaction hashes we are waiting on
                            this._events.forEach(function (event) {
                                switch (event.type) {
                                    case "tx": {
                                        var hash_2 = event.hash;
                                        var runner = _this.getTransactionReceipt(hash_2).then(function (receipt) {
                                            if (!receipt || receipt.blockNumber == null) {
                                                return null;
                                            }
                                            _this._emitted["t:" + hash_2] = receipt.blockNumber;
                                            _this.emit(hash_2, receipt);
                                            return null;
                                        }).catch(function (error) { _this.emit("error", error); });
                                        runners.push(runner);
                                        break;
                                    }
                                    case "filter": {
                                        var filter_1 = event.filter;
                                        filter_1.fromBlock = _this._lastBlockNumber + 1;
                                        filter_1.toBlock = blockNumber;
                                        var runner = _this.getLogs(filter_1).then(function (logs) {
                                            if (logs.length === 0) {
                                                return;
                                            }
                                            logs.forEach(function (log) {
                                                _this._emitted["b:" + log.blockHash] = log.blockNumber;
                                                _this._emitted["t:" + log.transactionHash] = log.blockNumber;
                                                _this.emit(filter_1, log);
                                            });
                                        }).catch(function (error) { _this.emit("error", error); });
                                        runners.push(runner);
                                        break;
                                    }
                                }
                            });
                            this._lastBlockNumber = blockNumber;
                            // Once all events for this loop have been processed, emit "didPoll"
                            Promise.all(runners).then(function () {
                                _this.emit("didPoll", pollId);
                            }).catch(function (error) { _this.emit("error", error); });
                            return [2 /*return*/];
                    }
                });
            });
        };
        // Deprecated; do not use this
        BaseProvider.prototype.resetEventsBlock = function (blockNumber) {
            this._lastBlockNumber = blockNumber - 1;
            if (this.polling) {
                this.poll();
            }
        };
        Object.defineProperty(BaseProvider.prototype, "network", {
            get: function () {
                return this._network;
            },
            enumerable: false,
            configurable: true
        });
        // This method should query the network if the underlying network
        // can change, such as when connected to a JSON-RPC backend
        BaseProvider.prototype.detectNetwork = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, logger.throwError("provider does not support network detection", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "provider.detectNetwork"
                        })];
                });
            });
        };
        BaseProvider.prototype.getNetwork = function () {
            return __awaiter(this, void 0, void 0, function () {
                var network, currentNetwork, error;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._ready()];
                        case 1:
                            network = _a.sent();
                            return [4 /*yield*/, this.detectNetwork()];
                        case 2:
                            currentNetwork = _a.sent();
                            if (!(network.chainId !== currentNetwork.chainId)) return [3 /*break*/, 5];
                            if (!this.anyNetwork) return [3 /*break*/, 4];
                            this._network = currentNetwork;
                            // Reset all internal block number guards and caches
                            this._lastBlockNumber = -2;
                            this._fastBlockNumber = null;
                            this._fastBlockNumberPromise = null;
                            this._fastQueryDate = 0;
                            this._emitted.block = -2;
                            this._maxInternalBlockNumber = -1024;
                            this._internalBlockNumber = null;
                            // The "network" event MUST happen before this method resolves
                            // so any events have a chance to unregister, so we stall an
                            // additional event loop before returning from /this/ call
                            this.emit("network", currentNetwork, network);
                            return [4 /*yield*/, stall(0)];
                        case 3:
                            _a.sent();
                            return [2 /*return*/, this._network];
                        case 4:
                            error = logger.makeError("underlying network changed", logger_1.Logger.errors.NETWORK_ERROR, {
                                event: "changed",
                                network: network,
                                detectedNetwork: currentNetwork
                            });
                            this.emit("error", error);
                            throw error;
                        case 5: return [2 /*return*/, network];
                    }
                });
            });
        };
        Object.defineProperty(BaseProvider.prototype, "blockNumber", {
            get: function () {
                var _this = this;
                this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(function (blockNumber) {
                    _this._setFastBlockNumber(blockNumber);
                }, function (error) { });
                return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseProvider.prototype, "polling", {
            get: function () {
                return (this._poller != null);
            },
            set: function (value) {
                var _this = this;
                if (value && !this._poller) {
                    this._poller = setInterval(function () { _this.poll(); }, this.pollingInterval);
                    if (!this._bootstrapPoll) {
                        this._bootstrapPoll = setTimeout(function () {
                            _this.poll();
                            // We block additional polls until the polling interval
                            // is done, to prevent overwhelming the poll function
                            _this._bootstrapPoll = setTimeout(function () {
                                // If polling was disabled, something may require a poke
                                // since starting the bootstrap poll and it was disabled
                                if (!_this._poller) {
                                    _this.poll();
                                }
                                // Clear out the bootstrap so we can do another
                                _this._bootstrapPoll = null;
                            }, _this.pollingInterval);
                        }, 0);
                    }
                }
                else if (!value && this._poller) {
                    clearInterval(this._poller);
                    this._poller = null;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseProvider.prototype, "pollingInterval", {
            get: function () {
                return this._pollingInterval;
            },
            set: function (value) {
                var _this = this;
                if (typeof (value) !== "number" || value <= 0 || parseInt(String(value)) != value) {
                    throw new Error("invalid polling interval");
                }
                this._pollingInterval = value;
                if (this._poller) {
                    clearInterval(this._poller);
                    this._poller = setInterval(function () { _this.poll(); }, this._pollingInterval);
                }
            },
            enumerable: false,
            configurable: true
        });
        BaseProvider.prototype._getFastBlockNumber = function () {
            var _this = this;
            var now = getTime();
            // Stale block number, request a newer value
            if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {
                this._fastQueryDate = now;
                this._fastBlockNumberPromise = this.getBlockNumber().then(function (blockNumber) {
                    if (_this._fastBlockNumber == null || blockNumber > _this._fastBlockNumber) {
                        _this._fastBlockNumber = blockNumber;
                    }
                    return _this._fastBlockNumber;
                });
            }
            return this._fastBlockNumberPromise;
        };
        BaseProvider.prototype._setFastBlockNumber = function (blockNumber) {
            // Older block, maybe a stale request
            if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
                return;
            }
            // Update the time we updated the blocknumber
            this._fastQueryDate = getTime();
            // Newer block number, use  it
            if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
                this._fastBlockNumber = blockNumber;
                this._fastBlockNumberPromise = Promise.resolve(blockNumber);
            }
        };
        BaseProvider.prototype.waitForTransaction = function (transactionHash, confirmations, timeout) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null)];
                });
            });
        };
        BaseProvider.prototype._waitForTransaction = function (transactionHash, confirmations, timeout, replaceable) {
            return __awaiter(this, void 0, void 0, function () {
                var receipt;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getTransactionReceipt(transactionHash)];
                        case 1:
                            receipt = _a.sent();
                            // Receipt is already good
                            if ((receipt ? receipt.confirmations : 0) >= confirmations) {
                                return [2 /*return*/, receipt];
                            }
                            // Poll until the receipt is good...
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    var cancelFuncs = [];
                                    var done = false;
                                    var alreadyDone = function () {
                                        if (done) {
                                            return true;
                                        }
                                        done = true;
                                        cancelFuncs.forEach(function (func) { func(); });
                                        return false;
                                    };
                                    var minedHandler = function (receipt) {
                                        if (receipt.confirmations < confirmations) {
                                            return;
                                        }
                                        if (alreadyDone()) {
                                            return;
                                        }
                                        resolve(receipt);
                                    };
                                    _this.on(transactionHash, minedHandler);
                                    cancelFuncs.push(function () { _this.removeListener(transactionHash, minedHandler); });
                                    if (replaceable) {
                                        var lastBlockNumber_1 = replaceable.startBlock;
                                        var scannedBlock_1 = null;
                                        var replaceHandler_1 = function (blockNumber) { return __awaiter(_this, void 0, void 0, function () {
                                            var _this = this;
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0:
                                                        if (done) {
                                                            return [2 /*return*/];
                                                        }
                                                        // Wait 1 second; this is only used in the case of a fault, so
                                                        // we will trade off a little bit of latency for more consistent
                                                        // results and fewer JSON-RPC calls
                                                        return [4 /*yield*/, stall(1000)];
                                                    case 1:
                                                        // Wait 1 second; this is only used in the case of a fault, so
                                                        // we will trade off a little bit of latency for more consistent
                                                        // results and fewer JSON-RPC calls
                                                        _a.sent();
                                                        this.getTransactionCount(replaceable.from).then(function (nonce) { return __awaiter(_this, void 0, void 0, function () {
                                                            var mined, block, ti, tx, receipt_1, reason;
                                                            return __generator(this, function (_a) {
                                                                switch (_a.label) {
                                                                    case 0:
                                                                        if (done) {
                                                                            return [2 /*return*/];
                                                                        }
                                                                        if (!(nonce <= replaceable.nonce)) return [3 /*break*/, 1];
                                                                        lastBlockNumber_1 = blockNumber;
                                                                        return [3 /*break*/, 9];
                                                                    case 1: return [4 /*yield*/, this.getTransaction(transactionHash)];
                                                                    case 2:
                                                                        mined = _a.sent();
                                                                        if (mined && mined.blockNumber != null) {
                                                                            return [2 /*return*/];
                                                                        }
                                                                        // First time scanning. We start a little earlier for some
                                                                        // wiggle room here to handle the eventually consistent nature
                                                                        // of blockchain (e.g. the getTransactionCount was for a
                                                                        // different block)
                                                                        if (scannedBlock_1 == null) {
                                                                            scannedBlock_1 = lastBlockNumber_1 - 3;
                                                                            if (scannedBlock_1 < replaceable.startBlock) {
                                                                                scannedBlock_1 = replaceable.startBlock;
                                                                            }
                                                                        }
                                                                        _a.label = 3;
                                                                    case 3:
                                                                        if (!(scannedBlock_1 <= blockNumber)) return [3 /*break*/, 9];
                                                                        if (done) {
                                                                            return [2 /*return*/];
                                                                        }
                                                                        return [4 /*yield*/, this.getBlockWithTransactions(scannedBlock_1)];
                                                                    case 4:
                                                                        block = _a.sent();
                                                                        ti = 0;
                                                                        _a.label = 5;
                                                                    case 5:
                                                                        if (!(ti < block.transactions.length)) return [3 /*break*/, 8];
                                                                        tx = block.transactions[ti];
                                                                        // Successfully mined!
                                                                        if (tx.hash === transactionHash) {
                                                                            return [2 /*return*/];
                                                                        }
                                                                        if (!(tx.from === replaceable.from && tx.nonce === replaceable.nonce)) return [3 /*break*/, 7];
                                                                        if (done) {
                                                                            return [2 /*return*/];
                                                                        }
                                                                        return [4 /*yield*/, this.waitForTransaction(tx.hash, confirmations)];
                                                                    case 6:
                                                                        receipt_1 = _a.sent();
                                                                        // Already resolved or rejected (prolly a timeout)
                                                                        if (alreadyDone()) {
                                                                            return [2 /*return*/];
                                                                        }
                                                                        reason = "replaced";
                                                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {
                                                                            reason = "repriced";
                                                                        }
                                                                        else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) {
                                                                            reason = "cancelled";
                                                                        }
                                                                        // Explain why we were replaced
                                                                        reject(logger.makeError("transaction was replaced", logger_1.Logger.errors.TRANSACTION_REPLACED, {
                                                                            cancelled: (reason === "replaced" || reason === "cancelled"),
                                                                            reason: reason,
                                                                            replacement: this._wrapTransaction(tx),
                                                                            hash: transactionHash,
                                                                            receipt: receipt_1
                                                                        }));
                                                                        return [2 /*return*/];
                                                                    case 7:
                                                                        ti++;
                                                                        return [3 /*break*/, 5];
                                                                    case 8:
                                                                        scannedBlock_1++;
                                                                        return [3 /*break*/, 3];
                                                                    case 9:
                                                                        if (done) {
                                                                            return [2 /*return*/];
                                                                        }
                                                                        this.once("block", replaceHandler_1);
                                                                        return [2 /*return*/];
                                                                }
                                                            });
                                                        }); }, function (error) {
                                                            if (done) {
                                                                return;
                                                            }
                                                            _this.once("block", replaceHandler_1);
                                                        });
                                                        return [2 /*return*/];
                                                }
                                            });
                                        }); };
                                        if (done) {
                                            return;
                                        }
                                        _this.once("block", replaceHandler_1);
                                        cancelFuncs.push(function () {
                                            _this.removeListener("block", replaceHandler_1);
                                        });
                                    }
                                    if (typeof (timeout) === "number" && timeout > 0) {
                                        var timer_1 = setTimeout(function () {
                                            if (alreadyDone()) {
                                                return;
                                            }
                                            reject(logger.makeError("timeout exceeded", logger_1.Logger.errors.TIMEOUT, { timeout: timeout }));
                                        }, timeout);
                                        if (timer_1.unref) {
                                            timer_1.unref();
                                        }
                                        cancelFuncs.push(function () { clearTimeout(timer_1); });
                                    }
                                })];
                    }
                });
            });
        };
        BaseProvider.prototype.getBlockNumber = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this._getInternalBlockNumber(0)];
                });
            });
        };
        BaseProvider.prototype.getGasPrice = function () {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.perform("getGasPrice", {})];
                        case 2:
                            result = _a.sent();
                            try {
                                return [2 /*return*/, bignumber_1.BigNumber.from(result)];
                            }
                            catch (error) {
                                return [2 /*return*/, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                                        method: "getGasPrice",
                                        result: result,
                                        error: error
                                    })];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        BaseProvider.prototype.getBalance = function (addressOrName, blockTag) {
            return __awaiter(this, void 0, void 0, function () {
                var params, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, (0, properties_1.resolveProperties)({
                                    address: this._getAddress(addressOrName),
                                    blockTag: this._getBlockTag(blockTag)
                                })];
                        case 2:
                            params = _a.sent();
                            return [4 /*yield*/, this.perform("getBalance", params)];
                        case 3:
                            result = _a.sent();
                            try {
                                return [2 /*return*/, bignumber_1.BigNumber.from(result)];
                            }
                            catch (error) {
                                return [2 /*return*/, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                                        method: "getBalance",
                                        params: params,
                                        result: result,
                                        error: error
                                    })];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        BaseProvider.prototype.getTransactionCount = function (addressOrName, blockTag) {
            return __awaiter(this, void 0, void 0, function () {
                var params, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, (0, properties_1.resolveProperties)({
                                    address: this._getAddress(addressOrName),
                                    blockTag: this._getBlockTag(blockTag)
                                })];
                        case 2:
                            params = _a.sent();
                            return [4 /*yield*/, this.perform("getTransactionCount", params)];
                        case 3:
                            result = _a.sent();
                            try {
                                return [2 /*return*/, bignumber_1.BigNumber.from(result).toNumber()];
                            }
                            catch (error) {
                                return [2 /*return*/, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                                        method: "getTransactionCount",
                                        params: params,
                                        result: result,
                                        error: error
                                    })];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        BaseProvider.prototype.getCode = function (addressOrName, blockTag) {
            return __awaiter(this, void 0, void 0, function () {
                var params, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, (0, properties_1.resolveProperties)({
                                    address: this._getAddress(addressOrName),
                                    blockTag: this._getBlockTag(blockTag)
                                })];
                        case 2:
                            params = _a.sent();
                            return [4 /*yield*/, this.perform("getCode", params)];
                        case 3:
                            result = _a.sent();
                            try {
                                return [2 /*return*/, (0, bytes_1.hexlify)(result)];
                            }
                            catch (error) {
                                return [2 /*return*/, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                                        method: "getCode",
                                        params: params,
                                        result: result,
                                        error: error
                                    })];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        BaseProvider.prototype.getStorageAt = function (addressOrName, position, blockTag) {
            return __awaiter(this, void 0, void 0, function () {
                var params, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, (0, properties_1.resolveProperties)({
                                    address: this._getAddress(addressOrName),
                                    blockTag: this._getBlockTag(blockTag),
                                    position: Promise.resolve(position).then(function (p) { return (0, bytes_1.hexValue)(p); })
                                })];
                        case 2:
                            params = _a.sent();
                            return [4 /*yield*/, this.perform("getStorageAt", params)];
                        case 3:
                            result = _a.sent();
                            try {
                                return [2 /*return*/, (0, bytes_1.hexlify)(result)];
                            }
                            catch (error) {
                                return [2 /*return*/, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                                        method: "getStorageAt",
                                        params: params,
                                        result: result,
                                        error: error
                                    })];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        // This should be called by any subclass wrapping a TransactionResponse
        BaseProvider.prototype._wrapTransaction = function (tx, hash, startBlock) {
            var _this = this;
            if (hash != null && (0, bytes_1.hexDataLength)(hash) !== 32) {
                throw new Error("invalid response - sendTransaction");
            }
            var result = tx;
            // Check the hash we expect is the same as the hash the server reported
            if (hash != null && tx.hash !== hash) {
                logger.throwError("Transaction hash mismatch from Provider.sendTransaction.", logger_1.Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });
            }
            result.wait = function (confirms, timeout) { return __awaiter(_this, void 0, void 0, function () {
                var replacement, receipt;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (confirms == null) {
                                confirms = 1;
                            }
                            if (timeout == null) {
                                timeout = 0;
                            }
                            replacement = undefined;
                            if (confirms !== 0 && startBlock != null) {
                                replacement = {
                                    data: tx.data,
                                    from: tx.from,
                                    nonce: tx.nonce,
                                    to: tx.to,
                                    value: tx.value,
                                    startBlock: startBlock
                                };
                            }
                            return [4 /*yield*/, this._waitForTransaction(tx.hash, confirms, timeout, replacement)];
                        case 1:
                            receipt = _a.sent();
                            if (receipt == null && confirms === 0) {
                                return [2 /*return*/, null];
                            }
                            // No longer pending, allow the polling loop to garbage collect this
                            this._emitted["t:" + tx.hash] = receipt.blockNumber;
                            if (receipt.status === 0) {
                                logger.throwError("transaction failed", logger_1.Logger.errors.CALL_EXCEPTION, {
                                    transactionHash: tx.hash,
                                    transaction: tx,
                                    receipt: receipt
                                });
                            }
                            return [2 /*return*/, receipt];
                    }
                });
            }); };
            return result;
        };
        BaseProvider.prototype.sendTransaction = function (signedTransaction) {
            return __awaiter(this, void 0, void 0, function () {
                var hexTx, tx, blockNumber, hash, error_7;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, Promise.resolve(signedTransaction).then(function (t) { return (0, bytes_1.hexlify)(t); })];
                        case 2:
                            hexTx = _a.sent();
                            tx = this.formatter.transaction(signedTransaction);
                            if (tx.confirmations == null) {
                                tx.confirmations = 0;
                            }
                            return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                        case 3:
                            blockNumber = _a.sent();
                            _a.label = 4;
                        case 4:
                            _a.trys.push([4, 6, , 7]);
                            return [4 /*yield*/, this.perform("sendTransaction", { signedTransaction: hexTx })];
                        case 5:
                            hash = _a.sent();
                            return [2 /*return*/, this._wrapTransaction(tx, hash, blockNumber)];
                        case 6:
                            error_7 = _a.sent();
                            error_7.transaction = tx;
                            error_7.transactionHash = tx.hash;
                            throw error_7;
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        BaseProvider.prototype._getTransactionRequest = function (transaction) {
            return __awaiter(this, void 0, void 0, function () {
                var values, tx, _a, _b;
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, transaction];
                        case 1:
                            values = _c.sent();
                            tx = {};
                            ["from", "to"].forEach(function (key) {
                                if (values[key] == null) {
                                    return;
                                }
                                tx[key] = Promise.resolve(values[key]).then(function (v) { return (v ? _this._getAddress(v) : null); });
                            });
                            ["gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value"].forEach(function (key) {
                                if (values[key] == null) {
                                    return;
                                }
                                tx[key] = Promise.resolve(values[key]).then(function (v) { return (v ? bignumber_1.BigNumber.from(v) : null); });
                            });
                            ["type"].forEach(function (key) {
                                if (values[key] == null) {
                                    return;
                                }
                                tx[key] = Promise.resolve(values[key]).then(function (v) { return ((v != null) ? v : null); });
                            });
                            if (values.accessList) {
                                tx.accessList = this.formatter.accessList(values.accessList);
                            }
                            ["data"].forEach(function (key) {
                                if (values[key] == null) {
                                    return;
                                }
                                tx[key] = Promise.resolve(values[key]).then(function (v) { return (v ? (0, bytes_1.hexlify)(v) : null); });
                            });
                            _b = (_a = this.formatter).transactionRequest;
                            return [4 /*yield*/, (0, properties_1.resolveProperties)(tx)];
                        case 2: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                    }
                });
            });
        };
        BaseProvider.prototype._getFilter = function (filter) {
            return __awaiter(this, void 0, void 0, function () {
                var result, _a, _b;
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, filter];
                        case 1:
                            filter = _c.sent();
                            result = {};
                            if (filter.address != null) {
                                result.address = this._getAddress(filter.address);
                            }
                            ["blockHash", "topics"].forEach(function (key) {
                                if (filter[key] == null) {
                                    return;
                                }
                                result[key] = filter[key];
                            });
                            ["fromBlock", "toBlock"].forEach(function (key) {
                                if (filter[key] == null) {
                                    return;
                                }
                                result[key] = _this._getBlockTag(filter[key]);
                            });
                            _b = (_a = this.formatter).filter;
                            return [4 /*yield*/, (0, properties_1.resolveProperties)(result)];
                        case 2: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                    }
                });
            });
        };
        BaseProvider.prototype.call = function (transaction, blockTag) {
            return __awaiter(this, void 0, void 0, function () {
                var params, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, (0, properties_1.resolveProperties)({
                                    transaction: this._getTransactionRequest(transaction),
                                    blockTag: this._getBlockTag(blockTag)
                                })];
                        case 2:
                            params = _a.sent();
                            return [4 /*yield*/, this.perform("call", params)];
                        case 3:
                            result = _a.sent();
                            try {
                                return [2 /*return*/, (0, bytes_1.hexlify)(result)];
                            }
                            catch (error) {
                                return [2 /*return*/, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                                        method: "call",
                                        params: params,
                                        result: result,
                                        error: error
                                    })];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        BaseProvider.prototype.estimateGas = function (transaction) {
            return __awaiter(this, void 0, void 0, function () {
                var params, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, (0, properties_1.resolveProperties)({
                                    transaction: this._getTransactionRequest(transaction)
                                })];
                        case 2:
                            params = _a.sent();
                            return [4 /*yield*/, this.perform("estimateGas", params)];
                        case 3:
                            result = _a.sent();
                            try {
                                return [2 /*return*/, bignumber_1.BigNumber.from(result)];
                            }
                            catch (error) {
                                return [2 /*return*/, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                                        method: "estimateGas",
                                        params: params,
                                        result: result,
                                        error: error
                                    })];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        BaseProvider.prototype._getAddress = function (addressOrName) {
            return __awaiter(this, void 0, void 0, function () {
                var address;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, addressOrName];
                        case 1:
                            addressOrName = _a.sent();
                            if (typeof (addressOrName) !== "string") {
                                logger.throwArgumentError("invalid address or ENS name", "name", addressOrName);
                            }
                            return [4 /*yield*/, this.resolveName(addressOrName)];
                        case 2:
                            address = _a.sent();
                            if (address == null) {
                                logger.throwError("ENS name not configured", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                                    operation: "resolveName(" + JSON.stringify(addressOrName) + ")"
                                });
                            }
                            return [2 /*return*/, address];
                    }
                });
            });
        };
        BaseProvider.prototype._getBlock = function (blockHashOrBlockTag, includeTransactions) {
            return __awaiter(this, void 0, void 0, function () {
                var blockNumber, params, _a, error_8;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _b.sent();
                            return [4 /*yield*/, blockHashOrBlockTag];
                        case 2:
                            blockHashOrBlockTag = _b.sent();
                            blockNumber = -128;
                            params = {
                                includeTransactions: !!includeTransactions
                            };
                            if (!(0, bytes_1.isHexString)(blockHashOrBlockTag, 32)) return [3 /*break*/, 3];
                            params.blockHash = blockHashOrBlockTag;
                            return [3 /*break*/, 6];
                        case 3:
                            _b.trys.push([3, 5, , 6]);
                            _a = params;
                            return [4 /*yield*/, this._getBlockTag(blockHashOrBlockTag)];
                        case 4:
                            _a.blockTag = _b.sent();
                            if ((0, bytes_1.isHexString)(params.blockTag)) {
                                blockNumber = parseInt(params.blockTag.substring(2), 16);
                            }
                            return [3 /*break*/, 6];
                        case 5:
                            error_8 = _b.sent();
                            logger.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/, (0, web_1.poll)(function () { return __awaiter(_this, void 0, void 0, function () {
                                var block, blockNumber_1, i, tx, confirmations, blockWithTxs;
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.perform("getBlock", params)];
                                        case 1:
                                            block = _a.sent();
                                            // Block was not found
                                            if (block == null) {
                                                // For blockhashes, if we didn't say it existed, that blockhash may
                                                // not exist. If we did see it though, perhaps from a log, we know
                                                // it exists, and this node is just not caught up yet.
                                                if (params.blockHash != null) {
                                                    if (this._emitted["b:" + params.blockHash] == null) {
                                                        return [2 /*return*/, null];
                                                    }
                                                }
                                                // For block tags, if we are asking for a future block, we return null
                                                if (params.blockTag != null) {
                                                    if (blockNumber > this._emitted.block) {
                                                        return [2 /*return*/, null];
                                                    }
                                                }
                                                // Retry on the next block
                                                return [2 /*return*/, undefined];
                                            }
                                            if (!includeTransactions) return [3 /*break*/, 8];
                                            blockNumber_1 = null;
                                            i = 0;
                                            _a.label = 2;
                                        case 2:
                                            if (!(i < block.transactions.length)) return [3 /*break*/, 7];
                                            tx = block.transactions[i];
                                            if (!(tx.blockNumber == null)) return [3 /*break*/, 3];
                                            tx.confirmations = 0;
                                            return [3 /*break*/, 6];
                                        case 3:
                                            if (!(tx.confirmations == null)) return [3 /*break*/, 6];
                                            if (!(blockNumber_1 == null)) return [3 /*break*/, 5];
                                            return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                                        case 4:
                                            blockNumber_1 = _a.sent();
                                            _a.label = 5;
                                        case 5:
                                            confirmations = (blockNumber_1 - tx.blockNumber) + 1;
                                            if (confirmations <= 0) {
                                                confirmations = 1;
                                            }
                                            tx.confirmations = confirmations;
                                            _a.label = 6;
                                        case 6:
                                            i++;
                                            return [3 /*break*/, 2];
                                        case 7:
                                            blockWithTxs = this.formatter.blockWithTransactions(block);
                                            blockWithTxs.transactions = blockWithTxs.transactions.map(function (tx) { return _this._wrapTransaction(tx); });
                                            return [2 /*return*/, blockWithTxs];
                                        case 8: return [2 /*return*/, this.formatter.block(block)];
                                    }
                                });
                            }); }, { oncePoll: this })];
                    }
                });
            });
        };
        BaseProvider.prototype.getBlock = function (blockHashOrBlockTag) {
            return (this._getBlock(blockHashOrBlockTag, false));
        };
        BaseProvider.prototype.getBlockWithTransactions = function (blockHashOrBlockTag) {
            return (this._getBlock(blockHashOrBlockTag, true));
        };
        BaseProvider.prototype.getTransaction = function (transactionHash) {
            return __awaiter(this, void 0, void 0, function () {
                var params;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, transactionHash];
                        case 2:
                            transactionHash = _a.sent();
                            params = { transactionHash: this.formatter.hash(transactionHash, true) };
                            return [2 /*return*/, (0, web_1.poll)(function () { return __awaiter(_this, void 0, void 0, function () {
                                    var result, tx, blockNumber, confirmations;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, this.perform("getTransaction", params)];
                                            case 1:
                                                result = _a.sent();
                                                if (result == null) {
                                                    if (this._emitted["t:" + transactionHash] == null) {
                                                        return [2 /*return*/, null];
                                                    }
                                                    return [2 /*return*/, undefined];
                                                }
                                                tx = this.formatter.transactionResponse(result);
                                                if (!(tx.blockNumber == null)) return [3 /*break*/, 2];
                                                tx.confirmations = 0;
                                                return [3 /*break*/, 4];
                                            case 2:
                                                if (!(tx.confirmations == null)) return [3 /*break*/, 4];
                                                return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                                            case 3:
                                                blockNumber = _a.sent();
                                                confirmations = (blockNumber - tx.blockNumber) + 1;
                                                if (confirmations <= 0) {
                                                    confirmations = 1;
                                                }
                                                tx.confirmations = confirmations;
                                                _a.label = 4;
                                            case 4: return [2 /*return*/, this._wrapTransaction(tx)];
                                        }
                                    });
                                }); }, { oncePoll: this })];
                    }
                });
            });
        };
        BaseProvider.prototype.getTransactionReceipt = function (transactionHash) {
            return __awaiter(this, void 0, void 0, function () {
                var params;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, transactionHash];
                        case 2:
                            transactionHash = _a.sent();
                            params = { transactionHash: this.formatter.hash(transactionHash, true) };
                            return [2 /*return*/, (0, web_1.poll)(function () { return __awaiter(_this, void 0, void 0, function () {
                                    var result, receipt, blockNumber, confirmations;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, this.perform("getTransactionReceipt", params)];
                                            case 1:
                                                result = _a.sent();
                                                if (result == null) {
                                                    if (this._emitted["t:" + transactionHash] == null) {
                                                        return [2 /*return*/, null];
                                                    }
                                                    return [2 /*return*/, undefined];
                                                }
                                                // "geth-etc" returns receipts before they are ready
                                                if (result.blockHash == null) {
                                                    return [2 /*return*/, undefined];
                                                }
                                                receipt = this.formatter.receipt(result);
                                                if (!(receipt.blockNumber == null)) return [3 /*break*/, 2];
                                                receipt.confirmations = 0;
                                                return [3 /*break*/, 4];
                                            case 2:
                                                if (!(receipt.confirmations == null)) return [3 /*break*/, 4];
                                                return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                                            case 3:
                                                blockNumber = _a.sent();
                                                confirmations = (blockNumber - receipt.blockNumber) + 1;
                                                if (confirmations <= 0) {
                                                    confirmations = 1;
                                                }
                                                receipt.confirmations = confirmations;
                                                _a.label = 4;
                                            case 4: return [2 /*return*/, receipt];
                                        }
                                    });
                                }); }, { oncePoll: this })];
                    }
                });
            });
        };
        BaseProvider.prototype.getLogs = function (filter) {
            return __awaiter(this, void 0, void 0, function () {
                var params, logs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, (0, properties_1.resolveProperties)({ filter: this._getFilter(filter) })];
                        case 2:
                            params = _a.sent();
                            return [4 /*yield*/, this.perform("getLogs", params)];
                        case 3:
                            logs = _a.sent();
                            logs.forEach(function (log) {
                                if (log.removed == null) {
                                    log.removed = false;
                                }
                            });
                            return [2 /*return*/, formatter_1.Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs)];
                    }
                });
            });
        };
        BaseProvider.prototype.getEtherPrice = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, this.perform("getEtherPrice", {})];
                    }
                });
            });
        };
        BaseProvider.prototype._getBlockTag = function (blockTag) {
            return __awaiter(this, void 0, void 0, function () {
                var blockNumber;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, blockTag];
                        case 1:
                            blockTag = _a.sent();
                            if (!(typeof (blockTag) === "number" && blockTag < 0)) return [3 /*break*/, 3];
                            if (blockTag % 1) {
                                logger.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
                            }
                            return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                        case 2:
                            blockNumber = _a.sent();
                            blockNumber += blockTag;
                            if (blockNumber < 0) {
                                blockNumber = 0;
                            }
                            return [2 /*return*/, this.formatter.blockTag(blockNumber)];
                        case 3: return [2 /*return*/, this.formatter.blockTag(blockTag)];
                    }
                });
            });
        };
        BaseProvider.prototype.getResolver = function (name) {
            return __awaiter(this, void 0, void 0, function () {
                var address, error_9;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this._getResolver(name)];
                        case 1:
                            address = _a.sent();
                            if (address == null) {
                                return [2 /*return*/, null];
                            }
                            return [2 /*return*/, new Resolver(this, address, name)];
                        case 2:
                            error_9 = _a.sent();
                            if (error_9.code === logger_1.Logger.errors.CALL_EXCEPTION) {
                                return [2 /*return*/, null];
                            }
                            throw error_9;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        BaseProvider.prototype._getResolver = function (name) {
            return __awaiter(this, void 0, void 0, function () {
                var network, transaction, _a, _b, error_10;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            network = _c.sent();
                            // No ENS...
                            if (!network.ensAddress) {
                                logger.throwError("network does not support ENS", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation: "ENS", network: network.name });
                            }
                            transaction = {
                                to: network.ensAddress,
                                data: ("0x0178b8bf" + (0, hash_1.namehash)(name).substring(2))
                            };
                            _c.label = 2;
                        case 2:
                            _c.trys.push([2, 4, , 5]);
                            _b = (_a = this.formatter).callAddress;
                            return [4 /*yield*/, this.call(transaction)];
                        case 3: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                        case 4:
                            error_10 = _c.sent();
                            if (error_10.code === logger_1.Logger.errors.CALL_EXCEPTION) {
                                return [2 /*return*/, null];
                            }
                            throw error_10;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        BaseProvider.prototype.resolveName = function (name) {
            return __awaiter(this, void 0, void 0, function () {
                var resolver;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, name];
                        case 1:
                            name = _a.sent();
                            // If it is already an address, nothing to resolve
                            try {
                                return [2 /*return*/, Promise.resolve(this.formatter.address(name))];
                            }
                            catch (error) {
                                // If is is a hexstring, the address is bad (See #694)
                                if ((0, bytes_1.isHexString)(name)) {
                                    throw error;
                                }
                            }
                            if (typeof (name) !== "string") {
                                logger.throwArgumentError("invalid ENS name", "name", name);
                            }
                            return [4 /*yield*/, this.getResolver(name)];
                        case 2:
                            resolver = _a.sent();
                            if (!resolver) {
                                return [2 /*return*/, null];
                            }
                            return [4 /*yield*/, resolver.getAddress()];
                        case 3: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        BaseProvider.prototype.lookupAddress = function (address) {
            return __awaiter(this, void 0, void 0, function () {
                var reverseName, resolverAddress, bytes, _a, length, name, addr;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, address];
                        case 1:
                            address = _b.sent();
                            address = this.formatter.address(address);
                            reverseName = address.substring(2).toLowerCase() + ".addr.reverse";
                            return [4 /*yield*/, this._getResolver(reverseName)];
                        case 2:
                            resolverAddress = _b.sent();
                            if (!resolverAddress) {
                                return [2 /*return*/, null];
                            }
                            _a = bytes_1.arrayify;
                            return [4 /*yield*/, this.call({
                                    to: resolverAddress,
                                    data: ("0x691f3431" + (0, hash_1.namehash)(reverseName).substring(2))
                                })];
                        case 3:
                            bytes = _a.apply(void 0, [_b.sent()]);
                            // Strip off the dynamic string pointer (0x20)
                            if (bytes.length < 32 || !bignumber_1.BigNumber.from(bytes.slice(0, 32)).eq(32)) {
                                return [2 /*return*/, null];
                            }
                            bytes = bytes.slice(32);
                            // Not a length-prefixed string
                            if (bytes.length < 32) {
                                return [2 /*return*/, null];
                            }
                            length = bignumber_1.BigNumber.from(bytes.slice(0, 32)).toNumber();
                            bytes = bytes.slice(32);
                            // Length longer than available data
                            if (length > bytes.length) {
                                return [2 /*return*/, null];
                            }
                            name = (0, strings_1.toUtf8String)(bytes.slice(0, length));
                            return [4 /*yield*/, this.resolveName(name)];
                        case 4:
                            addr = _b.sent();
                            if (addr != address) {
                                return [2 /*return*/, null];
                            }
                            return [2 /*return*/, name];
                    }
                });
            });
        };
        BaseProvider.prototype.getAvatar = function (nameOrAddress) {
            return __awaiter(this, void 0, void 0, function () {
                var resolver, address, reverseName, resolverAddress, avatar;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            resolver = null;
                            if (!(0, bytes_1.isHexString)(nameOrAddress)) return [3 /*break*/, 2];
                            address = this.formatter.address(nameOrAddress);
                            reverseName = address.substring(2).toLowerCase() + ".addr.reverse";
                            return [4 /*yield*/, this._getResolver(reverseName)];
                        case 1:
                            resolverAddress = _a.sent();
                            if (!resolverAddress) {
                                return [2 /*return*/, null];
                            }
                            resolver = new Resolver(this, resolverAddress, "_", address);
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, this.getResolver(nameOrAddress)];
                        case 3:
                            // ENS name; forward lookup
                            resolver = _a.sent();
                            if (!resolver) {
                                return [2 /*return*/, null];
                            }
                            _a.label = 4;
                        case 4: return [4 /*yield*/, resolver.getAvatar()];
                        case 5:
                            avatar = _a.sent();
                            if (avatar == null) {
                                return [2 /*return*/, null];
                            }
                            return [2 /*return*/, avatar.url];
                    }
                });
            });
        };
        BaseProvider.prototype.perform = function (method, params) {
            return logger.throwError(method + " not implemented", logger_1.Logger.errors.NOT_IMPLEMENTED, { operation: method });
        };
        BaseProvider.prototype._startEvent = function (event) {
            this.polling = (this._events.filter(function (e) { return e.pollable(); }).length > 0);
        };
        BaseProvider.prototype._stopEvent = function (event) {
            this.polling = (this._events.filter(function (e) { return e.pollable(); }).length > 0);
        };
        BaseProvider.prototype._addEventListener = function (eventName, listener, once) {
            var event = new Event(getEventTag(eventName), listener, once);
            this._events.push(event);
            this._startEvent(event);
            return this;
        };
        BaseProvider.prototype.on = function (eventName, listener) {
            return this._addEventListener(eventName, listener, false);
        };
        BaseProvider.prototype.once = function (eventName, listener) {
            return this._addEventListener(eventName, listener, true);
        };
        BaseProvider.prototype.emit = function (eventName) {
            var _this = this;
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var result = false;
            var stopped = [];
            var eventTag = getEventTag(eventName);
            this._events = this._events.filter(function (event) {
                if (event.tag !== eventTag) {
                    return true;
                }
                setTimeout(function () {
                    event.listener.apply(_this, args);
                }, 0);
                result = true;
                if (event.once) {
                    stopped.push(event);
                    return false;
                }
                return true;
            });
            stopped.forEach(function (event) { _this._stopEvent(event); });
            return result;
        };
        BaseProvider.prototype.listenerCount = function (eventName) {
            if (!eventName) {
                return this._events.length;
            }
            var eventTag = getEventTag(eventName);
            return this._events.filter(function (event) {
                return (event.tag === eventTag);
            }).length;
        };
        BaseProvider.prototype.listeners = function (eventName) {
            if (eventName == null) {
                return this._events.map(function (event) { return event.listener; });
            }
            var eventTag = getEventTag(eventName);
            return this._events
                .filter(function (event) { return (event.tag === eventTag); })
                .map(function (event) { return event.listener; });
        };
        BaseProvider.prototype.off = function (eventName, listener) {
            var _this = this;
            if (listener == null) {
                return this.removeAllListeners(eventName);
            }
            var stopped = [];
            var found = false;
            var eventTag = getEventTag(eventName);
            this._events = this._events.filter(function (event) {
                if (event.tag !== eventTag || event.listener != listener) {
                    return true;
                }
                if (found) {
                    return true;
                }
                found = true;
                stopped.push(event);
                return false;
            });
            stopped.forEach(function (event) { _this._stopEvent(event); });
            return this;
        };
        BaseProvider.prototype.removeAllListeners = function (eventName) {
            var _this = this;
            var stopped = [];
            if (eventName == null) {
                stopped = this._events;
                this._events = [];
            }
            else {
                var eventTag_1 = getEventTag(eventName);
                this._events = this._events.filter(function (event) {
                    if (event.tag !== eventTag_1) {
                        return true;
                    }
                    stopped.push(event);
                    return false;
                });
            }
            stopped.forEach(function (event) { _this._stopEvent(event); });
            return this;
        };
        return BaseProvider;
    }(abstract_provider_1.Provider));
    exports.BaseProvider = BaseProvider;
    
    },{"./_version":63,"./formatter":71,"@ethersproject/abstract-provider":18,"@ethersproject/basex":25,"@ethersproject/bignumber":29,"@ethersproject/bytes":31,"@ethersproject/constants":35,"@ethersproject/hash":41,"@ethersproject/logger":56,"@ethersproject/networks":58,"@ethersproject/properties":62,"@ethersproject/sha2":89,"@ethersproject/strings":99,"@ethersproject/web":109,"bech32":122}],66:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IpcProvider = void 0;
    var IpcProvider = null;
    exports.IpcProvider = IpcProvider;
    
    },{}],67:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebSocket = void 0;
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var WS = null;
    exports.WebSocket = WS;
    try {
        exports.WebSocket = WS = WebSocket;
        if (WS == null) {
            throw new Error("inject please");
        }
    }
    catch (error) {
        var logger_2 = new logger_1.Logger(_version_1.version);
        exports.WebSocket = WS = function () {
            logger_2.throwError("WebSockets not supported in this environment", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new WebSocket()"
            });
        };
    }
    
    },{"./_version":63,"@ethersproject/logger":56}],68:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CloudflareProvider = void 0;
    var url_json_rpc_provider_1 = require("./url-json-rpc-provider");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var CloudflareProvider = /** @class */ (function (_super) {
        __extends(CloudflareProvider, _super);
        function CloudflareProvider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CloudflareProvider.getApiKey = function (apiKey) {
            if (apiKey != null) {
                logger.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
            }
            return null;
        };
        CloudflareProvider.getUrl = function (network, apiKey) {
            var host = null;
            switch (network.name) {
                case "homestead":
                    host = "https://cloudflare-eth.com/";
                    break;
                default:
                    logger.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return host;
        };
        CloudflareProvider.prototype.perform = function (method, params) {
            return __awaiter(this, void 0, void 0, function () {
                var block;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(method === "getBlockNumber")) return [3 /*break*/, 2];
                            return [4 /*yield*/, _super.prototype.perform.call(this, "getBlock", { blockTag: "latest" })];
                        case 1:
                            block = _a.sent();
                            return [2 /*return*/, block.number];
                        case 2: return [2 /*return*/, _super.prototype.perform.call(this, method, params)];
                    }
                });
            });
        };
        return CloudflareProvider;
    }(url_json_rpc_provider_1.UrlJsonRpcProvider));
    exports.CloudflareProvider = CloudflareProvider;
    
    },{"./_version":63,"./url-json-rpc-provider":78,"@ethersproject/logger":56}],69:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EtherscanProvider = void 0;
    var bytes_1 = require("@ethersproject/bytes");
    var properties_1 = require("@ethersproject/properties");
    var transactions_1 = require("@ethersproject/transactions");
    var web_1 = require("@ethersproject/web");
    var formatter_1 = require("./formatter");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var base_provider_1 = require("./base-provider");
    // The transaction has already been sanitized by the calls in Provider
    function getTransactionPostData(transaction) {
        var result = {};
        for (var key in transaction) {
            if (transaction[key] == null) {
                continue;
            }
            var value = transaction[key];
            if (key === "type" && value === 0) {
                continue;
            }
            // Quantity-types require no leading zero, unless 0
            if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
                value = (0, bytes_1.hexValue)((0, bytes_1.hexlify)(value));
            }
            else if (key === "accessList") {
                value = "[" + (0, transactions_1.accessListify)(value).map(function (set) {
                    return "{address:\"" + set.address + "\",storageKeys:[\"" + set.storageKeys.join('","') + "\"]}";
                }).join(",") + "]";
            }
            else {
                value = (0, bytes_1.hexlify)(value);
            }
            result[key] = value;
        }
        return result;
    }
    function getResult(result) {
        // getLogs, getHistory have weird success responses
        if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
            return result.result;
        }
        if (result.status != 1 || result.message != "OK") {
            var error = new Error("invalid response");
            error.result = JSON.stringify(result);
            if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
                error.throttleRetry = true;
            }
            throw error;
        }
        return result.result;
    }
    function getJsonResult(result) {
        // This response indicates we are being throttled
        if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
            var error = new Error("throttled response");
            error.result = JSON.stringify(result);
            error.throttleRetry = true;
            throw error;
        }
        if (result.jsonrpc != "2.0") {
            // @TODO: not any
            var error = new Error("invalid response");
            error.result = JSON.stringify(result);
            throw error;
        }
        if (result.error) {
            // @TODO: not any
            var error = new Error(result.error.message || "unknown error");
            if (result.error.code) {
                error.code = result.error.code;
            }
            if (result.error.data) {
                error.data = result.error.data;
            }
            throw error;
        }
        return result.result;
    }
    // The blockTag was normalized as a string by the Provider pre-perform operations
    function checkLogTag(blockTag) {
        if (blockTag === "pending") {
            throw new Error("pending not supported");
        }
        if (blockTag === "latest") {
            return blockTag;
        }
        return parseInt(blockTag.substring(2), 16);
    }
    var defaultApiKey = "9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB";
    function checkError(method, error, transaction) {
        // Undo the "convenience" some nodes are attempting to prevent backwards
        // incompatibility; maybe for v6 consider forwarding reverts as errors
        if (method === "call" && error.code === logger_1.Logger.errors.SERVER_ERROR) {
            var e = error.error;
            // Etherscan keeps changing their string
            if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {
                // Etherscan prefixes the data like "Reverted 0x1234"
                var data = e.data;
                if (data) {
                    data = "0x" + data.replace(/^.*0x/i, "");
                }
                if ((0, bytes_1.isHexString)(data)) {
                    return data;
                }
                logger.throwError("missing revert data in call exception", logger_1.Logger.errors.CALL_EXCEPTION, {
                    error: error,
                    data: "0x"
                });
            }
        }
        // Get the message from any nested error structure
        var message = error.message;
        if (error.code === logger_1.Logger.errors.SERVER_ERROR) {
            if (error.error && typeof (error.error.message) === "string") {
                message = error.error.message;
            }
            else if (typeof (error.body) === "string") {
                message = error.body;
            }
            else if (typeof (error.responseText) === "string") {
                message = error.responseText;
            }
        }
        message = (message || "").toLowerCase();
        // "Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0"
        if (message.match(/insufficient funds/)) {
            logger.throwError("insufficient funds for intrinsic transaction cost", logger_1.Logger.errors.INSUFFICIENT_FUNDS, {
                error: error,
                method: method,
                transaction: transaction
            });
        }
        // "Transaction with the same hash was already imported."
        if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
            logger.throwError("nonce has already been used", logger_1.Logger.errors.NONCE_EXPIRED, {
                error: error,
                method: method,
                transaction: transaction
            });
        }
        // "Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce."
        if (message.match(/another transaction with same nonce/)) {
            logger.throwError("replacement fee too low", logger_1.Logger.errors.REPLACEMENT_UNDERPRICED, {
                error: error,
                method: method,
                transaction: transaction
            });
        }
        if (message.match(/execution failed due to an exception|execution reverted/)) {
            logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                error: error,
                method: method,
                transaction: transaction
            });
        }
        throw error;
    }
    var EtherscanProvider = /** @class */ (function (_super) {
        __extends(EtherscanProvider, _super);
        function EtherscanProvider(network, apiKey) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkNew(_newTarget, EtherscanProvider);
            _this = _super.call(this, network) || this;
            (0, properties_1.defineReadOnly)(_this, "baseUrl", _this.getBaseUrl());
            (0, properties_1.defineReadOnly)(_this, "apiKey", apiKey || defaultApiKey);
            return _this;
        }
        EtherscanProvider.prototype.getBaseUrl = function () {
            switch (this.network ? this.network.name : "invalid") {
                case "homestead":
                    return "https:/\/api.etherscan.io";
                case "ropsten":
                    return "https:/\/api-ropsten.etherscan.io";
                case "rinkeby":
                    return "https:/\/api-rinkeby.etherscan.io";
                case "kovan":
                    return "https:/\/api-kovan.etherscan.io";
                case "goerli":
                    return "https:/\/api-goerli.etherscan.io";
                default:
            }
            return logger.throwArgumentError("unsupported network", "network", name);
        };
        EtherscanProvider.prototype.getUrl = function (module, params) {
            var query = Object.keys(params).reduce(function (accum, key) {
                var value = params[key];
                if (value != null) {
                    accum += "&" + key + "=" + value;
                }
                return accum;
            }, "");
            var apiKey = ((this.apiKey) ? "&apikey=" + this.apiKey : "");
            return this.baseUrl + "/api?module=" + module + query + apiKey;
        };
        EtherscanProvider.prototype.getPostUrl = function () {
            return this.baseUrl + "/api";
        };
        EtherscanProvider.prototype.getPostData = function (module, params) {
            params.module = module;
            params.apikey = this.apiKey;
            return params;
        };
        EtherscanProvider.prototype.fetch = function (module, params, post) {
            return __awaiter(this, void 0, void 0, function () {
                var url, payload, procFunc, connection, payloadStr, result;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            url = (post ? this.getPostUrl() : this.getUrl(module, params));
                            payload = (post ? this.getPostData(module, params) : null);
                            procFunc = (module === "proxy") ? getJsonResult : getResult;
                            this.emit("debug", {
                                action: "request",
                                request: url,
                                provider: this
                            });
                            connection = {
                                url: url,
                                throttleSlotInterval: 1000,
                                throttleCallback: function (attempt, url) {
                                    if (_this.isCommunityResource()) {
                                        (0, formatter_1.showThrottleMessage)();
                                    }
                                    return Promise.resolve(true);
                                }
                            };
                            payloadStr = null;
                            if (payload) {
                                connection.headers = { "content-type": "application/x-www-form-urlencoded; charset=UTF-8" };
                                payloadStr = Object.keys(payload).map(function (key) {
                                    return key + "=" + payload[key];
                                }).join("&");
                            }
                            return [4 /*yield*/, (0, web_1.fetchJson)(connection, payloadStr, procFunc || getJsonResult)];
                        case 1:
                            result = _a.sent();
                            this.emit("debug", {
                                action: "response",
                                request: url,
                                response: (0, properties_1.deepCopy)(result),
                                provider: this
                            });
                            return [2 /*return*/, result];
                    }
                });
            });
        };
        EtherscanProvider.prototype.detectNetwork = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.network];
                });
            });
        };
        EtherscanProvider.prototype.perform = function (method, params) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, postData, error_1, postData, error_2, args, topic0, logs, blocks, i, log, block, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _a = method;
                            switch (_a) {
                                case "getBlockNumber": return [3 /*break*/, 1];
                                case "getGasPrice": return [3 /*break*/, 2];
                                case "getBalance": return [3 /*break*/, 3];
                                case "getTransactionCount": return [3 /*break*/, 4];
                                case "getCode": return [3 /*break*/, 5];
                                case "getStorageAt": return [3 /*break*/, 6];
                                case "sendTransaction": return [3 /*break*/, 7];
                                case "getBlock": return [3 /*break*/, 8];
                                case "getTransaction": return [3 /*break*/, 9];
                                case "getTransactionReceipt": return [3 /*break*/, 10];
                                case "call": return [3 /*break*/, 11];
                                case "estimateGas": return [3 /*break*/, 15];
                                case "getLogs": return [3 /*break*/, 19];
                                case "getEtherPrice": return [3 /*break*/, 26];
                            }
                            return [3 /*break*/, 28];
                        case 1: return [2 /*return*/, this.fetch("proxy", { action: "eth_blockNumber" })];
                        case 2: return [2 /*return*/, this.fetch("proxy", { action: "eth_gasPrice" })];
                        case 3: 
                        // Returns base-10 result
                        return [2 /*return*/, this.fetch("account", {
                                action: "balance",
                                address: params.address,
                                tag: params.blockTag
                            })];
                        case 4: return [2 /*return*/, this.fetch("proxy", {
                                action: "eth_getTransactionCount",
                                address: params.address,
                                tag: params.blockTag
                            })];
                        case 5: return [2 /*return*/, this.fetch("proxy", {
                                action: "eth_getCode",
                                address: params.address,
                                tag: params.blockTag
                            })];
                        case 6: return [2 /*return*/, this.fetch("proxy", {
                                action: "eth_getStorageAt",
                                address: params.address,
                                position: params.position,
                                tag: params.blockTag
                            })];
                        case 7: return [2 /*return*/, this.fetch("proxy", {
                                action: "eth_sendRawTransaction",
                                hex: params.signedTransaction
                            }, true).catch(function (error) {
                                return checkError("sendTransaction", error, params.signedTransaction);
                            })];
                        case 8:
                            if (params.blockTag) {
                                return [2 /*return*/, this.fetch("proxy", {
                                        action: "eth_getBlockByNumber",
                                        tag: params.blockTag,
                                        boolean: (params.includeTransactions ? "true" : "false")
                                    })];
                            }
                            throw new Error("getBlock by blockHash not implemented");
                        case 9: return [2 /*return*/, this.fetch("proxy", {
                                action: "eth_getTransactionByHash",
                                txhash: params.transactionHash
                            })];
                        case 10: return [2 /*return*/, this.fetch("proxy", {
                                action: "eth_getTransactionReceipt",
                                txhash: params.transactionHash
                            })];
                        case 11:
                            if (params.blockTag !== "latest") {
                                throw new Error("EtherscanProvider does not support blockTag for call");
                            }
                            postData = getTransactionPostData(params.transaction);
                            postData.module = "proxy";
                            postData.action = "eth_call";
                            _c.label = 12;
                        case 12:
                            _c.trys.push([12, 14, , 15]);
                            return [4 /*yield*/, this.fetch("proxy", postData, true)];
                        case 13: return [2 /*return*/, _c.sent()];
                        case 14:
                            error_1 = _c.sent();
                            return [2 /*return*/, checkError("call", error_1, params.transaction)];
                        case 15:
                            postData = getTransactionPostData(params.transaction);
                            postData.module = "proxy";
                            postData.action = "eth_estimateGas";
                            _c.label = 16;
                        case 16:
                            _c.trys.push([16, 18, , 19]);
                            return [4 /*yield*/, this.fetch("proxy", postData, true)];
                        case 17: return [2 /*return*/, _c.sent()];
                        case 18:
                            error_2 = _c.sent();
                            return [2 /*return*/, checkError("estimateGas", error_2, params.transaction)];
                        case 19:
                            args = { action: "getLogs" };
                            if (params.filter.fromBlock) {
                                args.fromBlock = checkLogTag(params.filter.fromBlock);
                            }
                            if (params.filter.toBlock) {
                                args.toBlock = checkLogTag(params.filter.toBlock);
                            }
                            if (params.filter.address) {
                                args.address = params.filter.address;
                            }
                            // @TODO: We can handle slightly more complicated logs using the logs API
                            if (params.filter.topics && params.filter.topics.length > 0) {
                                if (params.filter.topics.length > 1) {
                                    logger.throwError("unsupported topic count", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
                                }
                                if (params.filter.topics.length === 1) {
                                    topic0 = params.filter.topics[0];
                                    if (typeof (topic0) !== "string" || topic0.length !== 66) {
                                        logger.throwError("unsupported topic format", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });
                                    }
                                    args.topic0 = topic0;
                                }
                            }
                            return [4 /*yield*/, this.fetch("logs", args)];
                        case 20:
                            logs = _c.sent();
                            blocks = {};
                            i = 0;
                            _c.label = 21;
                        case 21:
                            if (!(i < logs.length)) return [3 /*break*/, 25];
                            log = logs[i];
                            if (log.blockHash != null) {
                                return [3 /*break*/, 24];
                            }
                            if (!(blocks[log.blockNumber] == null)) return [3 /*break*/, 23];
                            return [4 /*yield*/, this.getBlock(log.blockNumber)];
                        case 22:
                            block = _c.sent();
                            if (block) {
                                blocks[log.blockNumber] = block.hash;
                            }
                            _c.label = 23;
                        case 23:
                            log.blockHash = blocks[log.blockNumber];
                            _c.label = 24;
                        case 24:
                            i++;
                            return [3 /*break*/, 21];
                        case 25: return [2 /*return*/, logs];
                        case 26:
                            if (this.network.name !== "homestead") {
                                return [2 /*return*/, 0.0];
                            }
                            _b = parseFloat;
                            return [4 /*yield*/, this.fetch("stats", { action: "ethprice" })];
                        case 27: return [2 /*return*/, _b.apply(void 0, [(_c.sent()).ethusd])];
                        case 28: return [3 /*break*/, 29];
                        case 29: return [2 /*return*/, _super.prototype.perform.call(this, method, params)];
                    }
                });
            });
        };
        // Note: The `page` page parameter only allows pagination within the
        //       10,000 window available without a page and offset parameter
        //       Error: Result window is too large, PageNo x Offset size must
        //              be less than or equal to 10000
        EtherscanProvider.prototype.getHistory = function (addressOrName, startBlock, endBlock) {
            return __awaiter(this, void 0, void 0, function () {
                var params, result;
                var _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = {
                                action: "txlist"
                            };
                            return [4 /*yield*/, this.resolveName(addressOrName)];
                        case 1:
                            params = (_a.address = (_b.sent()),
                                _a.startblock = ((startBlock == null) ? 0 : startBlock),
                                _a.endblock = ((endBlock == null) ? 99999999 : endBlock),
                                _a.sort = "asc",
                                _a);
                            return [4 /*yield*/, this.fetch("account", params)];
                        case 2:
                            result = _b.sent();
                            return [2 /*return*/, result.map(function (tx) {
                                    ["contractAddress", "to"].forEach(function (key) {
                                        if (tx[key] == "") {
                                            delete tx[key];
                                        }
                                    });
                                    if (tx.creates == null && tx.contractAddress != null) {
                                        tx.creates = tx.contractAddress;
                                    }
                                    var item = _this.formatter.transactionResponse(tx);
                                    if (tx.timeStamp) {
                                        item.timestamp = parseInt(tx.timeStamp);
                                    }
                                    return item;
                                })];
                    }
                });
            });
        };
        EtherscanProvider.prototype.isCommunityResource = function () {
            return (this.apiKey === defaultApiKey);
        };
        return EtherscanProvider;
    }(base_provider_1.BaseProvider));
    exports.EtherscanProvider = EtherscanProvider;
    
    },{"./_version":63,"./base-provider":65,"./formatter":71,"@ethersproject/bytes":31,"@ethersproject/logger":56,"@ethersproject/properties":62,"@ethersproject/transactions":102,"@ethersproject/web":109}],70:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FallbackProvider = void 0;
    var abstract_provider_1 = require("@ethersproject/abstract-provider");
    var bignumber_1 = require("@ethersproject/bignumber");
    var bytes_1 = require("@ethersproject/bytes");
    var properties_1 = require("@ethersproject/properties");
    var random_1 = require("@ethersproject/random");
    var web_1 = require("@ethersproject/web");
    var base_provider_1 = require("./base-provider");
    var formatter_1 = require("./formatter");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    function now() { return (new Date()).getTime(); }
    // Returns to network as long as all agree, or null if any is null.
    // Throws an error if any two networks do not match.
    function checkNetworks(networks) {
        var result = null;
        for (var i = 0; i < networks.length; i++) {
            var network = networks[i];
            // Null! We do not know our network; bail.
            if (network == null) {
                return null;
            }
            if (result) {
                // Make sure the network matches the previous networks
                if (!(result.name === network.name && result.chainId === network.chainId &&
                    ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {
                    logger.throwArgumentError("provider mismatch", "networks", networks);
                }
            }
            else {
                result = network;
            }
        }
        return result;
    }
    function median(values, maxDelta) {
        values = values.slice().sort();
        var middle = Math.floor(values.length / 2);
        // Odd length; take the middle
        if (values.length % 2) {
            return values[middle];
        }
        // Even length; take the average of the two middle
        var a = values[middle - 1], b = values[middle];
        if (maxDelta != null && Math.abs(a - b) > maxDelta) {
            return null;
        }
        return (a + b) / 2;
    }
    function serialize(value) {
        if (value === null) {
            return "null";
        }
        else if (typeof (value) === "number" || typeof (value) === "boolean") {
            return JSON.stringify(value);
        }
        else if (typeof (value) === "string") {
            return value;
        }
        else if (bignumber_1.BigNumber.isBigNumber(value)) {
            return value.toString();
        }
        else if (Array.isArray(value)) {
            return JSON.stringify(value.map(function (i) { return serialize(i); }));
        }
        else if (typeof (value) === "object") {
            var keys = Object.keys(value);
            keys.sort();
            return "{" + keys.map(function (key) {
                var v = value[key];
                if (typeof (v) === "function") {
                    v = "[function]";
                }
                else {
                    v = serialize(v);
                }
                return JSON.stringify(key) + ":" + v;
            }).join(",") + "}";
        }
        throw new Error("unknown value type: " + typeof (value));
    }
    // Next request ID to use for emitting debug info
    var nextRid = 1;
    ;
    function stall(duration) {
        var cancel = null;
        var timer = null;
        var promise = (new Promise(function (resolve) {
            cancel = function () {
                if (timer) {
                    clearTimeout(timer);
                    timer = null;
                }
                resolve();
            };
            timer = setTimeout(cancel, duration);
        }));
        var wait = function (func) {
            promise = promise.then(func);
            return promise;
        };
        function getPromise() {
            return promise;
        }
        return { cancel: cancel, getPromise: getPromise, wait: wait };
    }
    var ForwardErrors = [
        logger_1.Logger.errors.CALL_EXCEPTION,
        logger_1.Logger.errors.INSUFFICIENT_FUNDS,
        logger_1.Logger.errors.NONCE_EXPIRED,
        logger_1.Logger.errors.REPLACEMENT_UNDERPRICED,
        logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT
    ];
    var ForwardProperties = [
        "address",
        "args",
        "errorArgs",
        "errorSignature",
        "method",
        "transaction",
    ];
    ;
    function exposeDebugConfig(config, now) {
        var result = {
            weight: config.weight
        };
        Object.defineProperty(result, "provider", { get: function () { return config.provider; } });
        if (config.start) {
            result.start = config.start;
        }
        if (now) {
            result.duration = (now - config.start);
        }
        if (config.done) {
            if (config.error) {
                result.error = config.error;
            }
            else {
                result.result = config.result || null;
            }
        }
        return result;
    }
    function normalizedTally(normalize, quorum) {
        return function (configs) {
            // Count the votes for each result
            var tally = {};
            configs.forEach(function (c) {
                var value = normalize(c.result);
                if (!tally[value]) {
                    tally[value] = { count: 0, result: c.result };
                }
                tally[value].count++;
            });
            // Check for a quorum on any given result
            var keys = Object.keys(tally);
            for (var i = 0; i < keys.length; i++) {
                var check = tally[keys[i]];
                if (check.count >= quorum) {
                    return check.result;
                }
            }
            // No quroum
            return undefined;
        };
    }
    function getProcessFunc(provider, method, params) {
        var normalize = serialize;
        switch (method) {
            case "getBlockNumber":
                // Return the median value, unless there is (median + 1) is also
                // present, in which case that is probably true and the median
                // is going to be stale soon. In the event of a malicious node,
                // the lie will be true soon enough.
                return function (configs) {
                    var values = configs.map(function (c) { return c.result; });
                    // Get the median block number
                    var blockNumber = median(configs.map(function (c) { return c.result; }), 2);
                    if (blockNumber == null) {
                        return undefined;
                    }
                    blockNumber = Math.ceil(blockNumber);
                    // If the next block height is present, its prolly safe to use
                    if (values.indexOf(blockNumber + 1) >= 0) {
                        blockNumber++;
                    }
                    // Don't ever roll back the blockNumber
                    if (blockNumber >= provider._highestBlockNumber) {
                        provider._highestBlockNumber = blockNumber;
                    }
                    return provider._highestBlockNumber;
                };
            case "getGasPrice":
                // Return the middle (round index up) value, similar to median
                // but do not average even entries and choose the higher.
                // Malicious actors must compromise 50% of the nodes to lie.
                return function (configs) {
                    var values = configs.map(function (c) { return c.result; });
                    values.sort();
                    return values[Math.floor(values.length / 2)];
                };
            case "getEtherPrice":
                // Returns the median price. Malicious actors must compromise at
                // least 50% of the nodes to lie (in a meaningful way).
                return function (configs) {
                    return median(configs.map(function (c) { return c.result; }));
                };
            // No additional normalizing required; serialize is enough
            case "getBalance":
            case "getTransactionCount":
            case "getCode":
            case "getStorageAt":
            case "call":
            case "estimateGas":
            case "getLogs":
                break;
            // We drop the confirmations from transactions as it is approximate
            case "getTransaction":
            case "getTransactionReceipt":
                normalize = function (tx) {
                    if (tx == null) {
                        return null;
                    }
                    tx = (0, properties_1.shallowCopy)(tx);
                    tx.confirmations = -1;
                    return serialize(tx);
                };
                break;
            // We drop the confirmations from transactions as it is approximate
            case "getBlock":
                // We drop the confirmations from transactions as it is approximate
                if (params.includeTransactions) {
                    normalize = function (block) {
                        if (block == null) {
                            return null;
                        }
                        block = (0, properties_1.shallowCopy)(block);
                        block.transactions = block.transactions.map(function (tx) {
                            tx = (0, properties_1.shallowCopy)(tx);
                            tx.confirmations = -1;
                            return tx;
                        });
                        return serialize(block);
                    };
                }
                else {
                    normalize = function (block) {
                        if (block == null) {
                            return null;
                        }
                        return serialize(block);
                    };
                }
                break;
            default:
                throw new Error("unknown method: " + method);
        }
        // Return the result if and only if the expected quorum is
        // satisfied and agreed upon for the final result.
        return normalizedTally(normalize, provider.quorum);
    }
    // If we are doing a blockTag query, we need to make sure the backend is
    // caught up to the FallbackProvider, before sending a request to it.
    function waitForSync(config, blockNumber) {
        return __awaiter(this, void 0, void 0, function () {
            var provider;
            return __generator(this, function (_a) {
                provider = (config.provider);
                if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {
                    return [2 /*return*/, provider];
                }
                return [2 /*return*/, (0, web_1.poll)(function () {
                        return new Promise(function (resolve, reject) {
                            setTimeout(function () {
                                // We are synced
                                if (provider.blockNumber >= blockNumber) {
                                    return resolve(provider);
                                }
                                // We're done; just quit
                                if (config.cancelled) {
                                    return resolve(null);
                                }
                                // Try again, next block
                                return resolve(undefined);
                            }, 0);
                        });
                    }, { oncePoll: provider })];
            });
        });
    }
    function getRunner(config, currentBlockNumber, method, params) {
        return __awaiter(this, void 0, void 0, function () {
            var provider, _a, filter;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        provider = config.provider;
                        _a = method;
                        switch (_a) {
                            case "getBlockNumber": return [3 /*break*/, 1];
                            case "getGasPrice": return [3 /*break*/, 1];
                            case "getEtherPrice": return [3 /*break*/, 2];
                            case "getBalance": return [3 /*break*/, 3];
                            case "getTransactionCount": return [3 /*break*/, 3];
                            case "getCode": return [3 /*break*/, 3];
                            case "getStorageAt": return [3 /*break*/, 6];
                            case "getBlock": return [3 /*break*/, 9];
                            case "call": return [3 /*break*/, 12];
                            case "estimateGas": return [3 /*break*/, 12];
                            case "getTransaction": return [3 /*break*/, 15];
                            case "getTransactionReceipt": return [3 /*break*/, 15];
                            case "getLogs": return [3 /*break*/, 16];
                        }
                        return [3 /*break*/, 19];
                    case 1: return [2 /*return*/, provider[method]()];
                    case 2:
                        if (provider.getEtherPrice) {
                            return [2 /*return*/, provider.getEtherPrice()];
                        }
                        return [3 /*break*/, 19];
                    case 3:
                        if (!(params.blockTag && (0, bytes_1.isHexString)(params.blockTag))) return [3 /*break*/, 5];
                        return [4 /*yield*/, waitForSync(config, currentBlockNumber)];
                    case 4:
                        provider = _b.sent();
                        _b.label = 5;
                    case 5: return [2 /*return*/, provider[method](params.address, params.blockTag || "latest")];
                    case 6:
                        if (!(params.blockTag && (0, bytes_1.isHexString)(params.blockTag))) return [3 /*break*/, 8];
                        return [4 /*yield*/, waitForSync(config, currentBlockNumber)];
                    case 7:
                        provider = _b.sent();
                        _b.label = 8;
                    case 8: return [2 /*return*/, provider.getStorageAt(params.address, params.position, params.blockTag || "latest")];
                    case 9:
                        if (!(params.blockTag && (0, bytes_1.isHexString)(params.blockTag))) return [3 /*break*/, 11];
                        return [4 /*yield*/, waitForSync(config, currentBlockNumber)];
                    case 10:
                        provider = _b.sent();
                        _b.label = 11;
                    case 11: return [2 /*return*/, provider[(params.includeTransactions ? "getBlockWithTransactions" : "getBlock")](params.blockTag || params.blockHash)];
                    case 12:
                        if (!(params.blockTag && (0, bytes_1.isHexString)(params.blockTag))) return [3 /*break*/, 14];
                        return [4 /*yield*/, waitForSync(config, currentBlockNumber)];
                    case 13:
                        provider = _b.sent();
                        _b.label = 14;
                    case 14: return [2 /*return*/, provider[method](params.transaction)];
                    case 15: return [2 /*return*/, provider[method](params.transactionHash)];
                    case 16:
                        filter = params.filter;
                        if (!((filter.fromBlock && (0, bytes_1.isHexString)(filter.fromBlock)) || (filter.toBlock && (0, bytes_1.isHexString)(filter.toBlock)))) return [3 /*break*/, 18];
                        return [4 /*yield*/, waitForSync(config, currentBlockNumber)];
                    case 17:
                        provider = _b.sent();
                        _b.label = 18;
                    case 18: return [2 /*return*/, provider.getLogs(filter)];
                    case 19: return [2 /*return*/, logger.throwError("unknown method error", logger_1.Logger.errors.UNKNOWN_ERROR, {
                            method: method,
                            params: params
                        })];
                }
            });
        });
    }
    var FallbackProvider = /** @class */ (function (_super) {
        __extends(FallbackProvider, _super);
        function FallbackProvider(providers, quorum) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkNew(_newTarget, FallbackProvider);
            if (providers.length === 0) {
                logger.throwArgumentError("missing providers", "providers", providers);
            }
            var providerConfigs = providers.map(function (configOrProvider, index) {
                if (abstract_provider_1.Provider.isProvider(configOrProvider)) {
                    var stallTimeout = (0, formatter_1.isCommunityResource)(configOrProvider) ? 2000 : 750;
                    var priority = 1;
                    return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout: stallTimeout, priority: priority });
                }
                var config = (0, properties_1.shallowCopy)(configOrProvider);
                if (config.priority == null) {
                    config.priority = 1;
                }
                if (config.stallTimeout == null) {
                    config.stallTimeout = (0, formatter_1.isCommunityResource)(configOrProvider) ? 2000 : 750;
                }
                if (config.weight == null) {
                    config.weight = 1;
                }
                var weight = config.weight;
                if (weight % 1 || weight > 512 || weight < 1) {
                    logger.throwArgumentError("invalid weight; must be integer in [1, 512]", "providers[" + index + "].weight", weight);
                }
                return Object.freeze(config);
            });
            var total = providerConfigs.reduce(function (accum, c) { return (accum + c.weight); }, 0);
            if (quorum == null) {
                quorum = total / 2;
            }
            else if (quorum > total) {
                logger.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
            }
            // Are all providers' networks are known
            var networkOrReady = checkNetworks(providerConfigs.map(function (c) { return (c.provider).network; }));
            // Not all networks are known; we must stall
            if (networkOrReady == null) {
                networkOrReady = new Promise(function (resolve, reject) {
                    setTimeout(function () {
                        _this.detectNetwork().then(resolve, reject);
                    }, 0);
                });
            }
            _this = _super.call(this, networkOrReady) || this;
            // Preserve a copy, so we do not get mutated
            (0, properties_1.defineReadOnly)(_this, "providerConfigs", Object.freeze(providerConfigs));
            (0, properties_1.defineReadOnly)(_this, "quorum", quorum);
            _this._highestBlockNumber = -1;
            return _this;
        }
        FallbackProvider.prototype.detectNetwork = function () {
            return __awaiter(this, void 0, void 0, function () {
                var networks;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, Promise.all(this.providerConfigs.map(function (c) { return c.provider.getNetwork(); }))];
                        case 1:
                            networks = _a.sent();
                            return [2 /*return*/, checkNetworks(networks)];
                    }
                });
            });
        };
        FallbackProvider.prototype.perform = function (method, params) {
            return __awaiter(this, void 0, void 0, function () {
                var results, i_1, result, processFunc, configs, currentBlockNumber, i, first, _loop_1, this_1, state_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(method === "sendTransaction")) return [3 /*break*/, 2];
                            return [4 /*yield*/, Promise.all(this.providerConfigs.map(function (c) {
                                    return c.provider.sendTransaction(params.signedTransaction).then(function (result) {
                                        return result.hash;
                                    }, function (error) {
                                        return error;
                                    });
                                }))];
                        case 1:
                            results = _a.sent();
                            // Any success is good enough (other errors are likely "already seen" errors
                            for (i_1 = 0; i_1 < results.length; i_1++) {
                                result = results[i_1];
                                if (typeof (result) === "string") {
                                    return [2 /*return*/, result];
                                }
                            }
                            // They were all an error; pick the first error
                            throw results[0];
                        case 2:
                            if (!(this._highestBlockNumber === -1 && method !== "getBlockNumber")) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.getBlockNumber()];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4:
                            processFunc = getProcessFunc(this, method, params);
                            configs = (0, random_1.shuffled)(this.providerConfigs.map(properties_1.shallowCopy));
                            configs.sort(function (a, b) { return (a.priority - b.priority); });
                            currentBlockNumber = this._highestBlockNumber;
                            i = 0;
                            first = true;
                            _loop_1 = function () {
                                var t0, inflightWeight, _loop_2, waiting, results, result, errors;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            t0 = now();
                                            inflightWeight = configs.filter(function (c) { return (c.runner && ((t0 - c.start) < c.stallTimeout)); })
                                                .reduce(function (accum, c) { return (accum + c.weight); }, 0);
                                            _loop_2 = function () {
                                                var config = configs[i++];
                                                var rid = nextRid++;
                                                config.start = now();
                                                config.staller = stall(config.stallTimeout);
                                                config.staller.wait(function () { config.staller = null; });
                                                config.runner = getRunner(config, currentBlockNumber, method, params).then(function (result) {
                                                    config.done = true;
                                                    config.result = result;
                                                    if (_this.listenerCount("debug")) {
                                                        _this.emit("debug", {
                                                            action: "request",
                                                            rid: rid,
                                                            backend: exposeDebugConfig(config, now()),
                                                            request: { method: method, params: (0, properties_1.deepCopy)(params) },
                                                            provider: _this
                                                        });
                                                    }
                                                }, function (error) {
                                                    config.done = true;
                                                    config.error = error;
                                                    if (_this.listenerCount("debug")) {
                                                        _this.emit("debug", {
                                                            action: "request",
                                                            rid: rid,
                                                            backend: exposeDebugConfig(config, now()),
                                                            request: { method: method, params: (0, properties_1.deepCopy)(params) },
                                                            provider: _this
                                                        });
                                                    }
                                                });
                                                if (this_1.listenerCount("debug")) {
                                                    this_1.emit("debug", {
                                                        action: "request",
                                                        rid: rid,
                                                        backend: exposeDebugConfig(config, null),
                                                        request: { method: method, params: (0, properties_1.deepCopy)(params) },
                                                        provider: this_1
                                                    });
                                                }
                                                inflightWeight += config.weight;
                                            };
                                            // Start running enough to meet quorum
                                            while (inflightWeight < this_1.quorum && i < configs.length) {
                                                _loop_2();
                                            }
                                            waiting = [];
                                            configs.forEach(function (c) {
                                                if (c.done || !c.runner) {
                                                    return;
                                                }
                                                waiting.push(c.runner);
                                                if (c.staller) {
                                                    waiting.push(c.staller.getPromise());
                                                }
                                            });
                                            if (!waiting.length) return [3 /*break*/, 2];
                                            return [4 /*yield*/, Promise.race(waiting)];
                                        case 1:
                                            _b.sent();
                                            _b.label = 2;
                                        case 2:
                                            results = configs.filter(function (c) { return (c.done && c.error == null); });
                                            if (!(results.length >= this_1.quorum)) return [3 /*break*/, 5];
                                            result = processFunc(results);
                                            if (result !== undefined) {
                                                // Shut down any stallers
                                                configs.forEach(function (c) {
                                                    if (c.staller) {
                                                        c.staller.cancel();
                                                    }
                                                    c.cancelled = true;
                                                });
                                                return [2 /*return*/, { value: result }];
                                            }
                                            if (!!first) return [3 /*break*/, 4];
                                            return [4 /*yield*/, stall(100).getPromise()];
                                        case 3:
                                            _b.sent();
                                            _b.label = 4;
                                        case 4:
                                            first = false;
                                            _b.label = 5;
                                        case 5:
                                            errors = configs.reduce(function (accum, c) {
                                                if (!c.done || c.error == null) {
                                                    return accum;
                                                }
                                                var code = (c.error).code;
                                                if (ForwardErrors.indexOf(code) >= 0) {
                                                    if (!accum[code]) {
                                                        accum[code] = { error: c.error, weight: 0 };
                                                    }
                                                    accum[code].weight += c.weight;
                                                }
                                                return accum;
                                            }, ({}));
                                            Object.keys(errors).forEach(function (errorCode) {
                                                var tally = errors[errorCode];
                                                if (tally.weight < _this.quorum) {
                                                    return;
                                                }
                                                // Shut down any stallers
                                                configs.forEach(function (c) {
                                                    if (c.staller) {
                                                        c.staller.cancel();
                                                    }
                                                    c.cancelled = true;
                                                });
                                                var e = (tally.error);
                                                var props = {};
                                                ForwardProperties.forEach(function (name) {
                                                    if (e[name] == null) {
                                                        return;
                                                    }
                                                    props[name] = e[name];
                                                });
                                                logger.throwError(e.reason || e.message, errorCode, props);
                                            });
                                            // All configs have run to completion; we will never get more data
                                            if (configs.filter(function (c) { return !c.done; }).length === 0) {
                                                return [2 /*return*/, "break"];
                                            }
                                            return [2 /*return*/];
                                    }
                                });
                            };
                            this_1 = this;
                            _a.label = 5;
                        case 5:
                            if (!true) return [3 /*break*/, 7];
                            return [5 /*yield**/, _loop_1()];
                        case 6:
                            state_1 = _a.sent();
                            if (typeof state_1 === "object")
                                return [2 /*return*/, state_1.value];
                            if (state_1 === "break")
                                return [3 /*break*/, 7];
                            return [3 /*break*/, 5];
                        case 7:
                            // Shut down any stallers; shouldn't be any
                            configs.forEach(function (c) {
                                if (c.staller) {
                                    c.staller.cancel();
                                }
                                c.cancelled = true;
                            });
                            return [2 /*return*/, logger.throwError("failed to meet quorum", logger_1.Logger.errors.SERVER_ERROR, {
                                    method: method,
                                    params: params,
                                    //results: configs.map((c) => c.result),
                                    //errors: configs.map((c) => c.error),
                                    results: configs.map(function (c) { return exposeDebugConfig(c); }),
                                    provider: this
                                })];
                    }
                });
            });
        };
        return FallbackProvider;
    }(base_provider_1.BaseProvider));
    exports.FallbackProvider = FallbackProvider;
    
    },{"./_version":63,"./base-provider":65,"./formatter":71,"@ethersproject/abstract-provider":18,"@ethersproject/bignumber":29,"@ethersproject/bytes":31,"@ethersproject/logger":56,"@ethersproject/properties":62,"@ethersproject/random":83,"@ethersproject/web":109}],71:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.showThrottleMessage = exports.isCommunityResource = exports.isCommunityResourcable = exports.Formatter = void 0;
    var address_1 = require("@ethersproject/address");
    var bignumber_1 = require("@ethersproject/bignumber");
    var bytes_1 = require("@ethersproject/bytes");
    var constants_1 = require("@ethersproject/constants");
    var properties_1 = require("@ethersproject/properties");
    var transactions_1 = require("@ethersproject/transactions");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var Formatter = /** @class */ (function () {
        function Formatter() {
            var _newTarget = this.constructor;
            logger.checkNew(_newTarget, Formatter);
            this.formats = this.getDefaultFormats();
        }
        Formatter.prototype.getDefaultFormats = function () {
            var _this = this;
            var formats = ({});
            var address = this.address.bind(this);
            var bigNumber = this.bigNumber.bind(this);
            var blockTag = this.blockTag.bind(this);
            var data = this.data.bind(this);
            var hash = this.hash.bind(this);
            var hex = this.hex.bind(this);
            var number = this.number.bind(this);
            var type = this.type.bind(this);
            var strictData = function (v) { return _this.data(v, true); };
            formats.transaction = {
                hash: hash,
                type: type,
                accessList: Formatter.allowNull(this.accessList.bind(this), null),
                blockHash: Formatter.allowNull(hash, null),
                blockNumber: Formatter.allowNull(number, null),
                transactionIndex: Formatter.allowNull(number, null),
                confirmations: Formatter.allowNull(number, null),
                from: address,
                // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)
                // must be set
                gasPrice: Formatter.allowNull(bigNumber),
                maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
                maxFeePerGas: Formatter.allowNull(bigNumber),
                gasLimit: bigNumber,
                to: Formatter.allowNull(address, null),
                value: bigNumber,
                nonce: number,
                data: data,
                r: Formatter.allowNull(this.uint256),
                s: Formatter.allowNull(this.uint256),
                v: Formatter.allowNull(number),
                creates: Formatter.allowNull(address, null),
                raw: Formatter.allowNull(data),
            };
            formats.transactionRequest = {
                from: Formatter.allowNull(address),
                nonce: Formatter.allowNull(number),
                gasLimit: Formatter.allowNull(bigNumber),
                gasPrice: Formatter.allowNull(bigNumber),
                maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
                maxFeePerGas: Formatter.allowNull(bigNumber),
                to: Formatter.allowNull(address),
                value: Formatter.allowNull(bigNumber),
                data: Formatter.allowNull(strictData),
                type: Formatter.allowNull(number),
                accessList: Formatter.allowNull(this.accessList.bind(this), null),
            };
            formats.receiptLog = {
                transactionIndex: number,
                blockNumber: number,
                transactionHash: hash,
                address: address,
                topics: Formatter.arrayOf(hash),
                data: data,
                logIndex: number,
                blockHash: hash,
            };
            formats.receipt = {
                to: Formatter.allowNull(this.address, null),
                from: Formatter.allowNull(this.address, null),
                contractAddress: Formatter.allowNull(address, null),
                transactionIndex: number,
                // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
                root: Formatter.allowNull(hex),
                gasUsed: bigNumber,
                logsBloom: Formatter.allowNull(data),
                blockHash: hash,
                transactionHash: hash,
                logs: Formatter.arrayOf(this.receiptLog.bind(this)),
                blockNumber: number,
                confirmations: Formatter.allowNull(number, null),
                cumulativeGasUsed: bigNumber,
                effectiveGasPrice: Formatter.allowNull(bigNumber),
                status: Formatter.allowNull(number),
                type: type
            };
            formats.block = {
                hash: hash,
                parentHash: hash,
                number: number,
                timestamp: number,
                nonce: Formatter.allowNull(hex),
                difficulty: this.difficulty.bind(this),
                gasLimit: bigNumber,
                gasUsed: bigNumber,
                miner: address,
                extraData: data,
                transactions: Formatter.allowNull(Formatter.arrayOf(hash)),
                baseFeePerGas: Formatter.allowNull(bigNumber)
            };
            formats.blockWithTransactions = (0, properties_1.shallowCopy)(formats.block);
            formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
            formats.filter = {
                fromBlock: Formatter.allowNull(blockTag, undefined),
                toBlock: Formatter.allowNull(blockTag, undefined),
                blockHash: Formatter.allowNull(hash, undefined),
                address: Formatter.allowNull(address, undefined),
                topics: Formatter.allowNull(this.topics.bind(this), undefined),
            };
            formats.filterLog = {
                blockNumber: Formatter.allowNull(number),
                blockHash: Formatter.allowNull(hash),
                transactionIndex: number,
                removed: Formatter.allowNull(this.boolean.bind(this)),
                address: address,
                data: Formatter.allowFalsish(data, "0x"),
                topics: Formatter.arrayOf(hash),
                transactionHash: hash,
                logIndex: number,
            };
            return formats;
        };
        Formatter.prototype.accessList = function (accessList) {
            return (0, transactions_1.accessListify)(accessList || []);
        };
        // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number
        // Strict! Used on input.
        Formatter.prototype.number = function (number) {
            if (number === "0x") {
                return 0;
            }
            return bignumber_1.BigNumber.from(number).toNumber();
        };
        Formatter.prototype.type = function (number) {
            if (number === "0x" || number == null) {
                return 0;
            }
            return bignumber_1.BigNumber.from(number).toNumber();
        };
        // Strict! Used on input.
        Formatter.prototype.bigNumber = function (value) {
            return bignumber_1.BigNumber.from(value);
        };
        // Requires a boolean, "true" or  "false"; returns a boolean
        Formatter.prototype.boolean = function (value) {
            if (typeof (value) === "boolean") {
                return value;
            }
            if (typeof (value) === "string") {
                value = value.toLowerCase();
                if (value === "true") {
                    return true;
                }
                if (value === "false") {
                    return false;
                }
            }
            throw new Error("invalid boolean - " + value);
        };
        Formatter.prototype.hex = function (value, strict) {
            if (typeof (value) === "string") {
                if (!strict && value.substring(0, 2) !== "0x") {
                    value = "0x" + value;
                }
                if ((0, bytes_1.isHexString)(value)) {
                    return value.toLowerCase();
                }
            }
            return logger.throwArgumentError("invalid hash", "value", value);
        };
        Formatter.prototype.data = function (value, strict) {
            var result = this.hex(value, strict);
            if ((result.length % 2) !== 0) {
                throw new Error("invalid data; odd-length - " + value);
            }
            return result;
        };
        // Requires an address
        // Strict! Used on input.
        Formatter.prototype.address = function (value) {
            return (0, address_1.getAddress)(value);
        };
        Formatter.prototype.callAddress = function (value) {
            if (!(0, bytes_1.isHexString)(value, 32)) {
                return null;
            }
            var address = (0, address_1.getAddress)((0, bytes_1.hexDataSlice)(value, 12));
            return (address === constants_1.AddressZero) ? null : address;
        };
        Formatter.prototype.contractAddress = function (value) {
            return (0, address_1.getContractAddress)(value);
        };
        // Strict! Used on input.
        Formatter.prototype.blockTag = function (blockTag) {
            if (blockTag == null) {
                return "latest";
            }
            if (blockTag === "earliest") {
                return "0x0";
            }
            if (blockTag === "latest" || blockTag === "pending") {
                return blockTag;
            }
            if (typeof (blockTag) === "number" || (0, bytes_1.isHexString)(blockTag)) {
                return (0, bytes_1.hexValue)(blockTag);
            }
            throw new Error("invalid blockTag");
        };
        // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.
        Formatter.prototype.hash = function (value, strict) {
            var result = this.hex(value, strict);
            if ((0, bytes_1.hexDataLength)(result) !== 32) {
                return logger.throwArgumentError("invalid hash", "value", value);
            }
            return result;
        };
        // Returns the difficulty as a number, or if too large (i.e. PoA network) null
        Formatter.prototype.difficulty = function (value) {
            if (value == null) {
                return null;
            }
            var v = bignumber_1.BigNumber.from(value);
            try {
                return v.toNumber();
            }
            catch (error) { }
            return null;
        };
        Formatter.prototype.uint256 = function (value) {
            if (!(0, bytes_1.isHexString)(value)) {
                throw new Error("invalid uint256");
            }
            return (0, bytes_1.hexZeroPad)(value, 32);
        };
        Formatter.prototype._block = function (value, format) {
            if (value.author != null && value.miner == null) {
                value.miner = value.author;
            }
            // The difficulty may need to come from _difficulty in recursed blocks
            var difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;
            var result = Formatter.check(format, value);
            result._difficulty = ((difficulty == null) ? null : bignumber_1.BigNumber.from(difficulty));
            return result;
        };
        Formatter.prototype.block = function (value) {
            return this._block(value, this.formats.block);
        };
        Formatter.prototype.blockWithTransactions = function (value) {
            return this._block(value, this.formats.blockWithTransactions);
        };
        // Strict! Used on input.
        Formatter.prototype.transactionRequest = function (value) {
            return Formatter.check(this.formats.transactionRequest, value);
        };
        Formatter.prototype.transactionResponse = function (transaction) {
            // Rename gas to gasLimit
            if (transaction.gas != null && transaction.gasLimit == null) {
                transaction.gasLimit = transaction.gas;
            }
            // Some clients (TestRPC) do strange things like return 0x0 for the
            // 0 address; correct this to be a real address
            if (transaction.to && bignumber_1.BigNumber.from(transaction.to).isZero()) {
                transaction.to = "0x0000000000000000000000000000000000000000";
            }
            // Rename input to data
            if (transaction.input != null && transaction.data == null) {
                transaction.data = transaction.input;
            }
            // If to and creates are empty, populate the creates from the transaction
            if (transaction.to == null && transaction.creates == null) {
                transaction.creates = this.contractAddress(transaction);
            }
            if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {
                transaction.accessList = [];
            }
            var result = Formatter.check(this.formats.transaction, transaction);
            if (transaction.chainId != null) {
                var chainId = transaction.chainId;
                if ((0, bytes_1.isHexString)(chainId)) {
                    chainId = bignumber_1.BigNumber.from(chainId).toNumber();
                }
                result.chainId = chainId;
            }
            else {
                var chainId = transaction.networkId;
                // geth-etc returns chainId
                if (chainId == null && result.v == null) {
                    chainId = transaction.chainId;
                }
                if ((0, bytes_1.isHexString)(chainId)) {
                    chainId = bignumber_1.BigNumber.from(chainId).toNumber();
                }
                if (typeof (chainId) !== "number" && result.v != null) {
                    chainId = (result.v - 35) / 2;
                    if (chainId < 0) {
                        chainId = 0;
                    }
                    chainId = parseInt(chainId);
                }
                if (typeof (chainId) !== "number") {
                    chainId = 0;
                }
                result.chainId = chainId;
            }
            // 0x0000... should actually be null
            if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
                result.blockHash = null;
            }
            return result;
        };
        Formatter.prototype.transaction = function (value) {
            return (0, transactions_1.parse)(value);
        };
        Formatter.prototype.receiptLog = function (value) {
            return Formatter.check(this.formats.receiptLog, value);
        };
        Formatter.prototype.receipt = function (value) {
            var result = Formatter.check(this.formats.receipt, value);
            // RSK incorrectly implemented EIP-658, so we munge things a bit here for it
            if (result.root != null) {
                if (result.root.length <= 4) {
                    // Could be 0x00, 0x0, 0x01 or 0x1
                    var value_1 = bignumber_1.BigNumber.from(result.root).toNumber();
                    if (value_1 === 0 || value_1 === 1) {
                        // Make sure if both are specified, they match
                        if (result.status != null && (result.status !== value_1)) {
                            logger.throwArgumentError("alt-root-status/status mismatch", "value", { root: result.root, status: result.status });
                        }
                        result.status = value_1;
                        delete result.root;
                    }
                    else {
                        logger.throwArgumentError("invalid alt-root-status", "value.root", result.root);
                    }
                }
                else if (result.root.length !== 66) {
                    // Must be a valid bytes32
                    logger.throwArgumentError("invalid root hash", "value.root", result.root);
                }
            }
            if (result.status != null) {
                result.byzantium = true;
            }
            return result;
        };
        Formatter.prototype.topics = function (value) {
            var _this = this;
            if (Array.isArray(value)) {
                return value.map(function (v) { return _this.topics(v); });
            }
            else if (value != null) {
                return this.hash(value, true);
            }
            return null;
        };
        Formatter.prototype.filter = function (value) {
            return Formatter.check(this.formats.filter, value);
        };
        Formatter.prototype.filterLog = function (value) {
            return Formatter.check(this.formats.filterLog, value);
        };
        Formatter.check = function (format, object) {
            var result = {};
            for (var key in format) {
                try {
                    var value = format[key](object[key]);
                    if (value !== undefined) {
                        result[key] = value;
                    }
                }
                catch (error) {
                    error.checkKey = key;
                    error.checkValue = object[key];
                    throw error;
                }
            }
            return result;
        };
        // if value is null-ish, nullValue is returned
        Formatter.allowNull = function (format, nullValue) {
            return (function (value) {
                if (value == null) {
                    return nullValue;
                }
                return format(value);
            });
        };
        // If value is false-ish, replaceValue is returned
        Formatter.allowFalsish = function (format, replaceValue) {
            return (function (value) {
                if (!value) {
                    return replaceValue;
                }
                return format(value);
            });
        };
        // Requires an Array satisfying check
        Formatter.arrayOf = function (format) {
            return (function (array) {
                if (!Array.isArray(array)) {
                    throw new Error("not an array");
                }
                var result = [];
                array.forEach(function (value) {
                    result.push(format(value));
                });
                return result;
            });
        };
        return Formatter;
    }());
    exports.Formatter = Formatter;
    function isCommunityResourcable(value) {
        return (value && typeof (value.isCommunityResource) === "function");
    }
    exports.isCommunityResourcable = isCommunityResourcable;
    function isCommunityResource(value) {
        return (isCommunityResourcable(value) && value.isCommunityResource());
    }
    exports.isCommunityResource = isCommunityResource;
    // Show the throttle message only once
    var throttleMessage = false;
    function showThrottleMessage() {
        if (throttleMessage) {
            return;
        }
        throttleMessage = true;
        console.log("========= NOTICE =========");
        console.log("Request-Rate Exceeded  (this message will not be repeated)");
        console.log("");
        console.log("The default API keys for each service are provided as a highly-throttled,");
        console.log("community resource for low-traffic projects and early prototyping.");
        console.log("");
        console.log("While your application will continue to function, we highly recommended");
        console.log("signing up for your own API keys to improve performance, increase your");
        console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
        console.log("");
        console.log("For more details: https:/\/docs.ethers.io/api-keys/");
        console.log("==========================");
    }
    exports.showThrottleMessage = showThrottleMessage;
    
    },{"./_version":63,"@ethersproject/address":22,"@ethersproject/bignumber":29,"@ethersproject/bytes":31,"@ethersproject/constants":35,"@ethersproject/logger":56,"@ethersproject/properties":62,"@ethersproject/transactions":102}],72:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Formatter = exports.showThrottleMessage = exports.isCommunityResourcable = exports.isCommunityResource = exports.getNetwork = exports.getDefaultProvider = exports.JsonRpcSigner = exports.IpcProvider = exports.WebSocketProvider = exports.Web3Provider = exports.StaticJsonRpcProvider = exports.PocketProvider = exports.NodesmithProvider = exports.JsonRpcBatchProvider = exports.JsonRpcProvider = exports.InfuraWebSocketProvider = exports.InfuraProvider = exports.EtherscanProvider = exports.CloudflareProvider = exports.AlchemyWebSocketProvider = exports.AlchemyProvider = exports.FallbackProvider = exports.UrlJsonRpcProvider = exports.Resolver = exports.BaseProvider = exports.Provider = void 0;
    var abstract_provider_1 = require("@ethersproject/abstract-provider");
    Object.defineProperty(exports, "Provider", { enumerable: true, get: function () { return abstract_provider_1.Provider; } });
    var networks_1 = require("@ethersproject/networks");
    Object.defineProperty(exports, "getNetwork", { enumerable: true, get: function () { return networks_1.getNetwork; } });
    var base_provider_1 = require("./base-provider");
    Object.defineProperty(exports, "BaseProvider", { enumerable: true, get: function () { return base_provider_1.BaseProvider; } });
    Object.defineProperty(exports, "Resolver", { enumerable: true, get: function () { return base_provider_1.Resolver; } });
    var alchemy_provider_1 = require("./alchemy-provider");
    Object.defineProperty(exports, "AlchemyProvider", { enumerable: true, get: function () { return alchemy_provider_1.AlchemyProvider; } });
    Object.defineProperty(exports, "AlchemyWebSocketProvider", { enumerable: true, get: function () { return alchemy_provider_1.AlchemyWebSocketProvider; } });
    var cloudflare_provider_1 = require("./cloudflare-provider");
    Object.defineProperty(exports, "CloudflareProvider", { enumerable: true, get: function () { return cloudflare_provider_1.CloudflareProvider; } });
    var etherscan_provider_1 = require("./etherscan-provider");
    Object.defineProperty(exports, "EtherscanProvider", { enumerable: true, get: function () { return etherscan_provider_1.EtherscanProvider; } });
    var fallback_provider_1 = require("./fallback-provider");
    Object.defineProperty(exports, "FallbackProvider", { enumerable: true, get: function () { return fallback_provider_1.FallbackProvider; } });
    var ipc_provider_1 = require("./ipc-provider");
    Object.defineProperty(exports, "IpcProvider", { enumerable: true, get: function () { return ipc_provider_1.IpcProvider; } });
    var infura_provider_1 = require("./infura-provider");
    Object.defineProperty(exports, "InfuraProvider", { enumerable: true, get: function () { return infura_provider_1.InfuraProvider; } });
    Object.defineProperty(exports, "InfuraWebSocketProvider", { enumerable: true, get: function () { return infura_provider_1.InfuraWebSocketProvider; } });
    var json_rpc_provider_1 = require("./json-rpc-provider");
    Object.defineProperty(exports, "JsonRpcProvider", { enumerable: true, get: function () { return json_rpc_provider_1.JsonRpcProvider; } });
    Object.defineProperty(exports, "JsonRpcSigner", { enumerable: true, get: function () { return json_rpc_provider_1.JsonRpcSigner; } });
    var json_rpc_batch_provider_1 = require("./json-rpc-batch-provider");
    Object.defineProperty(exports, "JsonRpcBatchProvider", { enumerable: true, get: function () { return json_rpc_batch_provider_1.JsonRpcBatchProvider; } });
    var nodesmith_provider_1 = require("./nodesmith-provider");
    Object.defineProperty(exports, "NodesmithProvider", { enumerable: true, get: function () { return nodesmith_provider_1.NodesmithProvider; } });
    var pocket_provider_1 = require("./pocket-provider");
    Object.defineProperty(exports, "PocketProvider", { enumerable: true, get: function () { return pocket_provider_1.PocketProvider; } });
    var url_json_rpc_provider_1 = require("./url-json-rpc-provider");
    Object.defineProperty(exports, "StaticJsonRpcProvider", { enumerable: true, get: function () { return url_json_rpc_provider_1.StaticJsonRpcProvider; } });
    Object.defineProperty(exports, "UrlJsonRpcProvider", { enumerable: true, get: function () { return url_json_rpc_provider_1.UrlJsonRpcProvider; } });
    var web3_provider_1 = require("./web3-provider");
    Object.defineProperty(exports, "Web3Provider", { enumerable: true, get: function () { return web3_provider_1.Web3Provider; } });
    var websocket_provider_1 = require("./websocket-provider");
    Object.defineProperty(exports, "WebSocketProvider", { enumerable: true, get: function () { return websocket_provider_1.WebSocketProvider; } });
    var formatter_1 = require("./formatter");
    Object.defineProperty(exports, "Formatter", { enumerable: true, get: function () { return formatter_1.Formatter; } });
    Object.defineProperty(exports, "isCommunityResourcable", { enumerable: true, get: function () { return formatter_1.isCommunityResourcable; } });
    Object.defineProperty(exports, "isCommunityResource", { enumerable: true, get: function () { return formatter_1.isCommunityResource; } });
    Object.defineProperty(exports, "showThrottleMessage", { enumerable: true, get: function () { return formatter_1.showThrottleMessage; } });
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    ////////////////////////
    // Helper Functions
    function getDefaultProvider(network, options) {
        if (network == null) {
            network = "homestead";
        }
        // If passed a URL, figure out the right type of provider based on the scheme
        if (typeof (network) === "string") {
            // @TODO: Add support for IpcProvider; maybe if it ends in ".ipc"?
            // Handle http and ws (and their secure variants)
            var match = network.match(/^(ws|http)s?:/i);
            if (match) {
                switch (match[1]) {
                    case "http":
                        return new json_rpc_provider_1.JsonRpcProvider(network);
                    case "ws":
                        return new websocket_provider_1.WebSocketProvider(network);
                    default:
                        logger.throwArgumentError("unsupported URL scheme", "network", network);
                }
            }
        }
        var n = (0, networks_1.getNetwork)(network);
        if (!n || !n._defaultProvider) {
            logger.throwError("unsupported getDefaultProvider network", logger_1.Logger.errors.NETWORK_ERROR, {
                operation: "getDefaultProvider",
                network: network
            });
        }
        return n._defaultProvider({
            FallbackProvider: fallback_provider_1.FallbackProvider,
            AlchemyProvider: alchemy_provider_1.AlchemyProvider,
            CloudflareProvider: cloudflare_provider_1.CloudflareProvider,
            EtherscanProvider: etherscan_provider_1.EtherscanProvider,
            InfuraProvider: infura_provider_1.InfuraProvider,
            JsonRpcProvider: json_rpc_provider_1.JsonRpcProvider,
            NodesmithProvider: nodesmith_provider_1.NodesmithProvider,
            PocketProvider: pocket_provider_1.PocketProvider,
            Web3Provider: web3_provider_1.Web3Provider,
            IpcProvider: ipc_provider_1.IpcProvider,
        }, options);
    }
    exports.getDefaultProvider = getDefaultProvider;
    
    },{"./_version":63,"./alchemy-provider":64,"./base-provider":65,"./cloudflare-provider":68,"./etherscan-provider":69,"./fallback-provider":70,"./formatter":71,"./infura-provider":73,"./ipc-provider":66,"./json-rpc-batch-provider":74,"./json-rpc-provider":75,"./nodesmith-provider":76,"./pocket-provider":77,"./url-json-rpc-provider":78,"./web3-provider":79,"./websocket-provider":80,"@ethersproject/abstract-provider":18,"@ethersproject/logger":56,"@ethersproject/networks":58}],73:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InfuraProvider = exports.InfuraWebSocketProvider = void 0;
    var properties_1 = require("@ethersproject/properties");
    var websocket_provider_1 = require("./websocket-provider");
    var formatter_1 = require("./formatter");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var url_json_rpc_provider_1 = require("./url-json-rpc-provider");
    var defaultProjectId = "84842078b09946638c03157f83405213";
    var InfuraWebSocketProvider = /** @class */ (function (_super) {
        __extends(InfuraWebSocketProvider, _super);
        function InfuraWebSocketProvider(network, apiKey) {
            var _this = this;
            var provider = new InfuraProvider(network, apiKey);
            var connection = provider.connection;
            if (connection.password) {
                logger.throwError("INFURA WebSocket project secrets unsupported", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "InfuraProvider.getWebSocketProvider()"
                });
            }
            var url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
            _this = _super.call(this, url, network) || this;
            (0, properties_1.defineReadOnly)(_this, "apiKey", provider.projectId);
            (0, properties_1.defineReadOnly)(_this, "projectId", provider.projectId);
            (0, properties_1.defineReadOnly)(_this, "projectSecret", provider.projectSecret);
            return _this;
        }
        InfuraWebSocketProvider.prototype.isCommunityResource = function () {
            return (this.projectId === defaultProjectId);
        };
        return InfuraWebSocketProvider;
    }(websocket_provider_1.WebSocketProvider));
    exports.InfuraWebSocketProvider = InfuraWebSocketProvider;
    var InfuraProvider = /** @class */ (function (_super) {
        __extends(InfuraProvider, _super);
        function InfuraProvider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        InfuraProvider.getWebSocketProvider = function (network, apiKey) {
            return new InfuraWebSocketProvider(network, apiKey);
        };
        InfuraProvider.getApiKey = function (apiKey) {
            var apiKeyObj = {
                apiKey: defaultProjectId,
                projectId: defaultProjectId,
                projectSecret: null
            };
            if (apiKey == null) {
                return apiKeyObj;
            }
            if (typeof (apiKey) === "string") {
                apiKeyObj.projectId = apiKey;
            }
            else if (apiKey.projectSecret != null) {
                logger.assertArgument((typeof (apiKey.projectId) === "string"), "projectSecret requires a projectId", "projectId", apiKey.projectId);
                logger.assertArgument((typeof (apiKey.projectSecret) === "string"), "invalid projectSecret", "projectSecret", "[REDACTED]");
                apiKeyObj.projectId = apiKey.projectId;
                apiKeyObj.projectSecret = apiKey.projectSecret;
            }
            else if (apiKey.projectId) {
                apiKeyObj.projectId = apiKey.projectId;
            }
            apiKeyObj.apiKey = apiKeyObj.projectId;
            return apiKeyObj;
        };
        InfuraProvider.getUrl = function (network, apiKey) {
            var host = null;
            switch (network ? network.name : "unknown") {
                case "homestead":
                    host = "mainnet.infura.io";
                    break;
                case "ropsten":
                    host = "ropsten.infura.io";
                    break;
                case "rinkeby":
                    host = "rinkeby.infura.io";
                    break;
                case "kovan":
                    host = "kovan.infura.io";
                    break;
                case "goerli":
                    host = "goerli.infura.io";
                    break;
                case "matic":
                    host = "polygon-mainnet.infura.io";
                    break;
                case "maticmum":
                    host = "polygon-mumbai.infura.io";
                    break;
                case "optimism":
                    host = "optimism-mainnet.infura.io";
                    break;
                case "optimism-kovan":
                    host = "optimism-kovan.infura.io";
                    break;
                case "arbitrum":
                    host = "arbitrum-mainnet.infura.io";
                    break;
                case "arbitrum-rinkeby":
                    host = "arbitrum-rinkeby.infura.io";
                    break;
                default:
                    logger.throwError("unsupported network", logger_1.Logger.errors.INVALID_ARGUMENT, {
                        argument: "network",
                        value: network
                    });
            }
            var connection = {
                allowGzip: true,
                url: ("https:/" + "/" + host + "/v3/" + apiKey.projectId),
                throttleCallback: function (attempt, url) {
                    if (apiKey.projectId === defaultProjectId) {
                        (0, formatter_1.showThrottleMessage)();
                    }
                    return Promise.resolve(true);
                }
            };
            if (apiKey.projectSecret != null) {
                connection.user = "";
                connection.password = apiKey.projectSecret;
            }
            return connection;
        };
        InfuraProvider.prototype.isCommunityResource = function () {
            return (this.projectId === defaultProjectId);
        };
        return InfuraProvider;
    }(url_json_rpc_provider_1.UrlJsonRpcProvider));
    exports.InfuraProvider = InfuraProvider;
    
    },{"./_version":63,"./formatter":71,"./url-json-rpc-provider":78,"./websocket-provider":80,"@ethersproject/logger":56,"@ethersproject/properties":62}],74:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JsonRpcBatchProvider = void 0;
    var properties_1 = require("@ethersproject/properties");
    var web_1 = require("@ethersproject/web");
    var json_rpc_provider_1 = require("./json-rpc-provider");
    // Experimental
    var JsonRpcBatchProvider = /** @class */ (function (_super) {
        __extends(JsonRpcBatchProvider, _super);
        function JsonRpcBatchProvider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        JsonRpcBatchProvider.prototype.send = function (method, params) {
            var _this = this;
            var request = {
                method: method,
                params: params,
                id: (this._nextId++),
                jsonrpc: "2.0"
            };
            if (this._pendingBatch == null) {
                this._pendingBatch = [];
            }
            var inflightRequest = { request: request, resolve: null, reject: null };
            var promise = new Promise(function (resolve, reject) {
                inflightRequest.resolve = resolve;
                inflightRequest.reject = reject;
            });
            this._pendingBatch.push(inflightRequest);
            if (!this._pendingBatchAggregator) {
                // Schedule batch for next event loop + short duration
                this._pendingBatchAggregator = setTimeout(function () {
                    // Get teh current batch and clear it, so new requests
                    // go into the next batch
                    var batch = _this._pendingBatch;
                    _this._pendingBatch = null;
                    _this._pendingBatchAggregator = null;
                    // Get the request as an array of requests
                    var request = batch.map(function (inflight) { return inflight.request; });
                    _this.emit("debug", {
                        action: "requestBatch",
                        request: (0, properties_1.deepCopy)(request),
                        provider: _this
                    });
                    return (0, web_1.fetchJson)(_this.connection, JSON.stringify(request)).then(function (result) {
                        _this.emit("debug", {
                            action: "response",
                            request: request,
                            response: result,
                            provider: _this
                        });
                        // For each result, feed it to the correct Promise, depending
                        // on whether it was a success or error
                        batch.forEach(function (inflightRequest, index) {
                            var payload = result[index];
                            if (payload.error) {
                                var error = new Error(payload.error.message);
                                error.code = payload.error.code;
                                error.data = payload.error.data;
                                inflightRequest.reject(error);
                            }
                            else {
                                inflightRequest.resolve(payload.result);
                            }
                        });
                    }, function (error) {
                        _this.emit("debug", {
                            action: "response",
                            error: error,
                            request: request,
                            provider: _this
                        });
                        batch.forEach(function (inflightRequest) {
                            inflightRequest.reject(error);
                        });
                    });
                }, 10);
            }
            return promise;
        };
        return JsonRpcBatchProvider;
    }(json_rpc_provider_1.JsonRpcProvider));
    exports.JsonRpcBatchProvider = JsonRpcBatchProvider;
    
    },{"./json-rpc-provider":75,"@ethersproject/properties":62,"@ethersproject/web":109}],75:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JsonRpcProvider = exports.JsonRpcSigner = void 0;
    var abstract_signer_1 = require("@ethersproject/abstract-signer");
    var bignumber_1 = require("@ethersproject/bignumber");
    var bytes_1 = require("@ethersproject/bytes");
    var hash_1 = require("@ethersproject/hash");
    var properties_1 = require("@ethersproject/properties");
    var strings_1 = require("@ethersproject/strings");
    var transactions_1 = require("@ethersproject/transactions");
    var web_1 = require("@ethersproject/web");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var base_provider_1 = require("./base-provider");
    var errorGas = ["call", "estimateGas"];
    function checkError(method, error, params) {
        // Undo the "convenience" some nodes are attempting to prevent backwards
        // incompatibility; maybe for v6 consider forwarding reverts as errors
        if (method === "call" && error.code === logger_1.Logger.errors.SERVER_ERROR) {
            var e = error.error;
            if (e && e.message.match("reverted") && (0, bytes_1.isHexString)(e.data)) {
                return e.data;
            }
            logger.throwError("missing revert data in call exception", logger_1.Logger.errors.CALL_EXCEPTION, {
                error: error,
                data: "0x"
            });
        }
        var message = error.message;
        if (error.code === logger_1.Logger.errors.SERVER_ERROR && error.error && typeof (error.error.message) === "string") {
            message = error.error.message;
        }
        else if (typeof (error.body) === "string") {
            message = error.body;
        }
        else if (typeof (error.responseText) === "string") {
            message = error.responseText;
        }
        message = (message || "").toLowerCase();
        var transaction = params.transaction || params.signedTransaction;
        // "insufficient funds for gas * price + value + cost(data)"
        if (message.match(/insufficient funds|base fee exceeds gas limit/)) {
            logger.throwError("insufficient funds for intrinsic transaction cost", logger_1.Logger.errors.INSUFFICIENT_FUNDS, {
                error: error,
                method: method,
                transaction: transaction
            });
        }
        // "nonce too low"
        if (message.match(/nonce too low/)) {
            logger.throwError("nonce has already been used", logger_1.Logger.errors.NONCE_EXPIRED, {
                error: error,
                method: method,
                transaction: transaction
            });
        }
        // "replacement transaction underpriced"
        if (message.match(/replacement transaction underpriced/)) {
            logger.throwError("replacement fee too low", logger_1.Logger.errors.REPLACEMENT_UNDERPRICED, {
                error: error,
                method: method,
                transaction: transaction
            });
        }
        // "replacement transaction underpriced"
        if (message.match(/only replay-protected/)) {
            logger.throwError("legacy pre-eip-155 transactions not supported", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                error: error,
                method: method,
                transaction: transaction
            });
        }
        if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {
            logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                error: error,
                method: method,
                transaction: transaction
            });
        }
        throw error;
    }
    function timer(timeout) {
        return new Promise(function (resolve) {
            setTimeout(resolve, timeout);
        });
    }
    function getResult(payload) {
        if (payload.error) {
            // @TODO: not any
            var error = new Error(payload.error.message);
            error.code = payload.error.code;
            error.data = payload.error.data;
            throw error;
        }
        return payload.result;
    }
    function getLowerCase(value) {
        if (value) {
            return value.toLowerCase();
        }
        return value;
    }
    var _constructorGuard = {};
    var JsonRpcSigner = /** @class */ (function (_super) {
        __extends(JsonRpcSigner, _super);
        function JsonRpcSigner(constructorGuard, provider, addressOrIndex) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkNew(_newTarget, JsonRpcSigner);
            _this = _super.call(this) || this;
            if (constructorGuard !== _constructorGuard) {
                throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
            }
            (0, properties_1.defineReadOnly)(_this, "provider", provider);
            if (addressOrIndex == null) {
                addressOrIndex = 0;
            }
            if (typeof (addressOrIndex) === "string") {
                (0, properties_1.defineReadOnly)(_this, "_address", _this.provider.formatter.address(addressOrIndex));
                (0, properties_1.defineReadOnly)(_this, "_index", null);
            }
            else if (typeof (addressOrIndex) === "number") {
                (0, properties_1.defineReadOnly)(_this, "_index", addressOrIndex);
                (0, properties_1.defineReadOnly)(_this, "_address", null);
            }
            else {
                logger.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
            }
            return _this;
        }
        JsonRpcSigner.prototype.connect = function (provider) {
            return logger.throwError("cannot alter JSON-RPC Signer connection", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "connect"
            });
        };
        JsonRpcSigner.prototype.connectUnchecked = function () {
            return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);
        };
        JsonRpcSigner.prototype.getAddress = function () {
            var _this = this;
            if (this._address) {
                return Promise.resolve(this._address);
            }
            return this.provider.send("eth_accounts", []).then(function (accounts) {
                if (accounts.length <= _this._index) {
                    logger.throwError("unknown account #" + _this._index, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "getAddress"
                    });
                }
                return _this.provider.formatter.address(accounts[_this._index]);
            });
        };
        JsonRpcSigner.prototype.sendUncheckedTransaction = function (transaction) {
            var _this = this;
            transaction = (0, properties_1.shallowCopy)(transaction);
            var fromAddress = this.getAddress().then(function (address) {
                if (address) {
                    address = address.toLowerCase();
                }
                return address;
            });
            // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user
            // wishes to use this, it is easy to specify explicitly, otherwise
            // we look it up for them.
            if (transaction.gasLimit == null) {
                var estimate = (0, properties_1.shallowCopy)(transaction);
                estimate.from = fromAddress;
                transaction.gasLimit = this.provider.estimateGas(estimate);
            }
            if (transaction.to != null) {
                transaction.to = Promise.resolve(transaction.to).then(function (to) { return __awaiter(_this, void 0, void 0, function () {
                    var address;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (to == null) {
                                    return [2 /*return*/, null];
                                }
                                return [4 /*yield*/, this.provider.resolveName(to)];
                            case 1:
                                address = _a.sent();
                                if (address == null) {
                                    logger.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                                }
                                return [2 /*return*/, address];
                        }
                    });
                }); });
            }
            return (0, properties_1.resolveProperties)({
                tx: (0, properties_1.resolveProperties)(transaction),
                sender: fromAddress
            }).then(function (_a) {
                var tx = _a.tx, sender = _a.sender;
                if (tx.from != null) {
                    if (tx.from.toLowerCase() !== sender) {
                        logger.throwArgumentError("from address mismatch", "transaction", transaction);
                    }
                }
                else {
                    tx.from = sender;
                }
                var hexTx = _this.provider.constructor.hexlifyTransaction(tx, { from: true });
                return _this.provider.send("eth_sendTransaction", [hexTx]).then(function (hash) {
                    return hash;
                }, function (error) {
                    return checkError("sendTransaction", error, hexTx);
                });
            });
        };
        JsonRpcSigner.prototype.signTransaction = function (transaction) {
            return logger.throwError("signing transactions is unsupported", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "signTransaction"
            });
        };
        JsonRpcSigner.prototype.sendTransaction = function (transaction) {
            return __awaiter(this, void 0, void 0, function () {
                var blockNumber, hash, error_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval)];
                        case 1:
                            blockNumber = _a.sent();
                            return [4 /*yield*/, this.sendUncheckedTransaction(transaction)];
                        case 2:
                            hash = _a.sent();
                            _a.label = 3;
                        case 3:
                            _a.trys.push([3, 5, , 6]);
                            return [4 /*yield*/, (0, web_1.poll)(function () { return __awaiter(_this, void 0, void 0, function () {
                                    var tx;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, this.provider.getTransaction(hash)];
                                            case 1:
                                                tx = _a.sent();
                                                if (tx === null) {
                                                    return [2 /*return*/, undefined];
                                                }
                                                return [2 /*return*/, this.provider._wrapTransaction(tx, hash, blockNumber)];
                                        }
                                    });
                                }); }, { oncePoll: this.provider })];
                        case 4: 
                        // Unfortunately, JSON-RPC only provides and opaque transaction hash
                        // for a response, and we need the actual transaction, so we poll
                        // for it; it should show up very quickly
                        return [2 /*return*/, _a.sent()];
                        case 5:
                            error_1 = _a.sent();
                            error_1.transactionHash = hash;
                            throw error_1;
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        JsonRpcSigner.prototype.signMessage = function (message) {
            return __awaiter(this, void 0, void 0, function () {
                var data, address;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            data = ((typeof (message) === "string") ? (0, strings_1.toUtf8Bytes)(message) : message);
                            return [4 /*yield*/, this.getAddress()];
                        case 1:
                            address = _a.sent();
                            return [4 /*yield*/, this.provider.send("personal_sign", [(0, bytes_1.hexlify)(data), address.toLowerCase()])];
                        case 2: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        JsonRpcSigner.prototype._legacySignMessage = function (message) {
            return __awaiter(this, void 0, void 0, function () {
                var data, address;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            data = ((typeof (message) === "string") ? (0, strings_1.toUtf8Bytes)(message) : message);
                            return [4 /*yield*/, this.getAddress()];
                        case 1:
                            address = _a.sent();
                            return [4 /*yield*/, this.provider.send("eth_sign", [address.toLowerCase(), (0, bytes_1.hexlify)(data)])];
                        case 2: 
                        // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
                        return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        JsonRpcSigner.prototype._signTypedData = function (domain, types, value) {
            return __awaiter(this, void 0, void 0, function () {
                var populated, address;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, hash_1._TypedDataEncoder.resolveNames(domain, types, value, function (name) {
                                return _this.provider.resolveName(name);
                            })];
                        case 1:
                            populated = _a.sent();
                            return [4 /*yield*/, this.getAddress()];
                        case 2:
                            address = _a.sent();
                            return [4 /*yield*/, this.provider.send("eth_signTypedData_v4", [
                                    address.toLowerCase(),
                                    JSON.stringify(hash_1._TypedDataEncoder.getPayload(populated.domain, types, populated.value))
                                ])];
                        case 3: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        JsonRpcSigner.prototype.unlock = function (password) {
            return __awaiter(this, void 0, void 0, function () {
                var provider, address;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            provider = this.provider;
                            return [4 /*yield*/, this.getAddress()];
                        case 1:
                            address = _a.sent();
                            return [2 /*return*/, provider.send("personal_unlockAccount", [address.toLowerCase(), password, null])];
                    }
                });
            });
        };
        return JsonRpcSigner;
    }(abstract_signer_1.Signer));
    exports.JsonRpcSigner = JsonRpcSigner;
    var UncheckedJsonRpcSigner = /** @class */ (function (_super) {
        __extends(UncheckedJsonRpcSigner, _super);
        function UncheckedJsonRpcSigner() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UncheckedJsonRpcSigner.prototype.sendTransaction = function (transaction) {
            var _this = this;
            return this.sendUncheckedTransaction(transaction).then(function (hash) {
                return {
                    hash: hash,
                    nonce: null,
                    gasLimit: null,
                    gasPrice: null,
                    data: null,
                    value: null,
                    chainId: null,
                    confirmations: 0,
                    from: null,
                    wait: function (confirmations) { return _this.provider.waitForTransaction(hash, confirmations); }
                };
            });
        };
        return UncheckedJsonRpcSigner;
    }(JsonRpcSigner));
    var allowedTransactionKeys = {
        chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,
        type: true, accessList: true,
        maxFeePerGas: true, maxPriorityFeePerGas: true
    };
    var JsonRpcProvider = /** @class */ (function (_super) {
        __extends(JsonRpcProvider, _super);
        function JsonRpcProvider(url, network) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkNew(_newTarget, JsonRpcProvider);
            var networkOrReady = network;
            // The network is unknown, query the JSON-RPC for it
            if (networkOrReady == null) {
                networkOrReady = new Promise(function (resolve, reject) {
                    setTimeout(function () {
                        _this.detectNetwork().then(function (network) {
                            resolve(network);
                        }, function (error) {
                            reject(error);
                        });
                    }, 0);
                });
            }
            _this = _super.call(this, networkOrReady) || this;
            // Default URL
            if (!url) {
                url = (0, properties_1.getStatic)(_this.constructor, "defaultUrl")();
            }
            if (typeof (url) === "string") {
                (0, properties_1.defineReadOnly)(_this, "connection", Object.freeze({
                    url: url
                }));
            }
            else {
                (0, properties_1.defineReadOnly)(_this, "connection", Object.freeze((0, properties_1.shallowCopy)(url)));
            }
            _this._nextId = 42;
            return _this;
        }
        Object.defineProperty(JsonRpcProvider.prototype, "_cache", {
            get: function () {
                if (this._eventLoopCache == null) {
                    this._eventLoopCache = {};
                }
                return this._eventLoopCache;
            },
            enumerable: false,
            configurable: true
        });
        JsonRpcProvider.defaultUrl = function () {
            return "http:/\/localhost:8545";
        };
        JsonRpcProvider.prototype.detectNetwork = function () {
            var _this = this;
            if (!this._cache["detectNetwork"]) {
                this._cache["detectNetwork"] = this._uncachedDetectNetwork();
                // Clear this cache at the beginning of the next event loop
                setTimeout(function () {
                    _this._cache["detectNetwork"] = null;
                }, 0);
            }
            return this._cache["detectNetwork"];
        };
        JsonRpcProvider.prototype._uncachedDetectNetwork = function () {
            return __awaiter(this, void 0, void 0, function () {
                var chainId, error_2, error_3, getNetwork;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, timer(0)];
                        case 1:
                            _a.sent();
                            chainId = null;
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 9]);
                            return [4 /*yield*/, this.send("eth_chainId", [])];
                        case 3:
                            chainId = _a.sent();
                            return [3 /*break*/, 9];
                        case 4:
                            error_2 = _a.sent();
                            _a.label = 5;
                        case 5:
                            _a.trys.push([5, 7, , 8]);
                            return [4 /*yield*/, this.send("net_version", [])];
                        case 6:
                            chainId = _a.sent();
                            return [3 /*break*/, 8];
                        case 7:
                            error_3 = _a.sent();
                            return [3 /*break*/, 8];
                        case 8: return [3 /*break*/, 9];
                        case 9:
                            if (chainId != null) {
                                getNetwork = (0, properties_1.getStatic)(this.constructor, "getNetwork");
                                try {
                                    return [2 /*return*/, getNetwork(bignumber_1.BigNumber.from(chainId).toNumber())];
                                }
                                catch (error) {
                                    return [2 /*return*/, logger.throwError("could not detect network", logger_1.Logger.errors.NETWORK_ERROR, {
                                            chainId: chainId,
                                            event: "invalidNetwork",
                                            serverError: error
                                        })];
                                }
                            }
                            return [2 /*return*/, logger.throwError("could not detect network", logger_1.Logger.errors.NETWORK_ERROR, {
                                    event: "noNetwork"
                                })];
                    }
                });
            });
        };
        JsonRpcProvider.prototype.getSigner = function (addressOrIndex) {
            return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);
        };
        JsonRpcProvider.prototype.getUncheckedSigner = function (addressOrIndex) {
            return this.getSigner(addressOrIndex).connectUnchecked();
        };
        JsonRpcProvider.prototype.listAccounts = function () {
            var _this = this;
            return this.send("eth_accounts", []).then(function (accounts) {
                return accounts.map(function (a) { return _this.formatter.address(a); });
            });
        };
        JsonRpcProvider.prototype.send = function (method, params) {
            var _this = this;
            var request = {
                method: method,
                params: params,
                id: (this._nextId++),
                jsonrpc: "2.0"
            };
            this.emit("debug", {
                action: "request",
                request: (0, properties_1.deepCopy)(request),
                provider: this
            });
            // We can expand this in the future to any call, but for now these
            // are the biggest wins and do not require any serializing parameters.
            var cache = (["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0);
            if (cache && this._cache[method]) {
                return this._cache[method];
            }
            var result = (0, web_1.fetchJson)(this.connection, JSON.stringify(request), getResult).then(function (result) {
                _this.emit("debug", {
                    action: "response",
                    request: request,
                    response: result,
                    provider: _this
                });
                return result;
            }, function (error) {
                _this.emit("debug", {
                    action: "response",
                    error: error,
                    request: request,
                    provider: _this
                });
                throw error;
            });
            // Cache the fetch, but clear it on the next event loop
            if (cache) {
                this._cache[method] = result;
                setTimeout(function () {
                    _this._cache[method] = null;
                }, 0);
            }
            return result;
        };
        JsonRpcProvider.prototype.prepareRequest = function (method, params) {
            switch (method) {
                case "getBlockNumber":
                    return ["eth_blockNumber", []];
                case "getGasPrice":
                    return ["eth_gasPrice", []];
                case "getBalance":
                    return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
                case "getTransactionCount":
                    return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
                case "getCode":
                    return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
                case "getStorageAt":
                    return ["eth_getStorageAt", [getLowerCase(params.address), params.position, params.blockTag]];
                case "sendTransaction":
                    return ["eth_sendRawTransaction", [params.signedTransaction]];
                case "getBlock":
                    if (params.blockTag) {
                        return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
                    }
                    else if (params.blockHash) {
                        return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
                    }
                    return null;
                case "getTransaction":
                    return ["eth_getTransactionByHash", [params.transactionHash]];
                case "getTransactionReceipt":
                    return ["eth_getTransactionReceipt", [params.transactionHash]];
                case "call": {
                    var hexlifyTransaction = (0, properties_1.getStatic)(this.constructor, "hexlifyTransaction");
                    return ["eth_call", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];
                }
                case "estimateGas": {
                    var hexlifyTransaction = (0, properties_1.getStatic)(this.constructor, "hexlifyTransaction");
                    return ["eth_estimateGas", [hexlifyTransaction(params.transaction, { from: true })]];
                }
                case "getLogs":
                    if (params.filter && params.filter.address != null) {
                        params.filter.address = getLowerCase(params.filter.address);
                    }
                    return ["eth_getLogs", [params.filter]];
                default:
                    break;
            }
            return null;
        };
        JsonRpcProvider.prototype.perform = function (method, params) {
            return __awaiter(this, void 0, void 0, function () {
                var tx, feeData, args, error_4;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(method === "call" || method === "estimateGas")) return [3 /*break*/, 2];
                            tx = params.transaction;
                            if (!(tx && tx.type != null && bignumber_1.BigNumber.from(tx.type).isZero())) return [3 /*break*/, 2];
                            if (!(tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.getFeeData()];
                        case 1:
                            feeData = _a.sent();
                            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                                // Network doesn't know about EIP-1559 (and hence type)
                                params = (0, properties_1.shallowCopy)(params);
                                params.transaction = (0, properties_1.shallowCopy)(tx);
                                delete params.transaction.type;
                            }
                            _a.label = 2;
                        case 2:
                            args = this.prepareRequest(method, params);
                            if (args == null) {
                                logger.throwError(method + " not implemented", logger_1.Logger.errors.NOT_IMPLEMENTED, { operation: method });
                            }
                            _a.label = 3;
                        case 3:
                            _a.trys.push([3, 5, , 6]);
                            return [4 /*yield*/, this.send(args[0], args[1])];
                        case 4: return [2 /*return*/, _a.sent()];
                        case 5:
                            error_4 = _a.sent();
                            return [2 /*return*/, checkError(method, error_4, params)];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        JsonRpcProvider.prototype._startEvent = function (event) {
            if (event.tag === "pending") {
                this._startPending();
            }
            _super.prototype._startEvent.call(this, event);
        };
        JsonRpcProvider.prototype._startPending = function () {
            if (this._pendingFilter != null) {
                return;
            }
            var self = this;
            var pendingFilter = this.send("eth_newPendingTransactionFilter", []);
            this._pendingFilter = pendingFilter;
            pendingFilter.then(function (filterId) {
                function poll() {
                    self.send("eth_getFilterChanges", [filterId]).then(function (hashes) {
                        if (self._pendingFilter != pendingFilter) {
                            return null;
                        }
                        var seq = Promise.resolve();
                        hashes.forEach(function (hash) {
                            // @TODO: This should be garbage collected at some point... How? When?
                            self._emitted["t:" + hash.toLowerCase()] = "pending";
                            seq = seq.then(function () {
                                return self.getTransaction(hash).then(function (tx) {
                                    self.emit("pending", tx);
                                    return null;
                                });
                            });
                        });
                        return seq.then(function () {
                            return timer(1000);
                        });
                    }).then(function () {
                        if (self._pendingFilter != pendingFilter) {
                            self.send("eth_uninstallFilter", [filterId]);
                            return;
                        }
                        setTimeout(function () { poll(); }, 0);
                        return null;
                    }).catch(function (error) { });
                }
                poll();
                return filterId;
            }).catch(function (error) { });
        };
        JsonRpcProvider.prototype._stopEvent = function (event) {
            if (event.tag === "pending" && this.listenerCount("pending") === 0) {
                this._pendingFilter = null;
            }
            _super.prototype._stopEvent.call(this, event);
        };
        // Convert an ethers.js transaction into a JSON-RPC transaction
        //  - gasLimit => gas
        //  - All values hexlified
        //  - All numeric values zero-striped
        //  - All addresses are lowercased
        // NOTE: This allows a TransactionRequest, but all values should be resolved
        //       before this is called
        // @TODO: This will likely be removed in future versions and prepareRequest
        //        will be the preferred method for this.
        JsonRpcProvider.hexlifyTransaction = function (transaction, allowExtra) {
            // Check only allowed properties are given
            var allowed = (0, properties_1.shallowCopy)(allowedTransactionKeys);
            if (allowExtra) {
                for (var key in allowExtra) {
                    if (allowExtra[key]) {
                        allowed[key] = true;
                    }
                }
            }
            (0, properties_1.checkProperties)(transaction, allowed);
            var result = {};
            // Some nodes (INFURA ropsten; INFURA mainnet is fine) do not like leading zeros.
            ["gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach(function (key) {
                if (transaction[key] == null) {
                    return;
                }
                var value = (0, bytes_1.hexValue)(transaction[key]);
                if (key === "gasLimit") {
                    key = "gas";
                }
                result[key] = value;
            });
            ["from", "to", "data"].forEach(function (key) {
                if (transaction[key] == null) {
                    return;
                }
                result[key] = (0, bytes_1.hexlify)(transaction[key]);
            });
            if (transaction.accessList) {
                result["accessList"] = (0, transactions_1.accessListify)(transaction.accessList);
            }
            return result;
        };
        return JsonRpcProvider;
    }(base_provider_1.BaseProvider));
    exports.JsonRpcProvider = JsonRpcProvider;
    
    },{"./_version":63,"./base-provider":65,"@ethersproject/abstract-signer":20,"@ethersproject/bignumber":29,"@ethersproject/bytes":31,"@ethersproject/hash":41,"@ethersproject/logger":56,"@ethersproject/properties":62,"@ethersproject/strings":99,"@ethersproject/transactions":102,"@ethersproject/web":109}],76:[function(require,module,exports){
    /* istanbul ignore file */
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodesmithProvider = void 0;
    var url_json_rpc_provider_1 = require("./url-json-rpc-provider");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    // Special API key provided by Nodesmith for ethers.js
    var defaultApiKey = "ETHERS_JS_SHARED";
    var NodesmithProvider = /** @class */ (function (_super) {
        __extends(NodesmithProvider, _super);
        function NodesmithProvider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NodesmithProvider.getApiKey = function (apiKey) {
            if (apiKey && typeof (apiKey) !== "string") {
                logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
            }
            return apiKey || defaultApiKey;
        };
        NodesmithProvider.getUrl = function (network, apiKey) {
            logger.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
            var host = null;
            switch (network.name) {
                case "homestead":
                    host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
                    break;
                case "ropsten":
                    host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
                    break;
                case "rinkeby":
                    host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
                    break;
                case "goerli":
                    host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
                    break;
                case "kovan":
                    host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
                    break;
                default:
                    logger.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return (host + "?apiKey=" + apiKey);
        };
        return NodesmithProvider;
    }(url_json_rpc_provider_1.UrlJsonRpcProvider));
    exports.NodesmithProvider = NodesmithProvider;
    
    },{"./_version":63,"./url-json-rpc-provider":78,"@ethersproject/logger":56}],77:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PocketProvider = void 0;
    var properties_1 = require("@ethersproject/properties");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var url_json_rpc_provider_1 = require("./url-json-rpc-provider");
    // These are load-balancer-based application IDs
    var defaultApplicationIds = {
        homestead: "6004bcd10040261633ade990",
        ropsten: "6004bd4d0040261633ade991",
        rinkeby: "6004bda20040261633ade994",
        goerli: "6004bd860040261633ade992",
    };
    var PocketProvider = /** @class */ (function (_super) {
        __extends(PocketProvider, _super);
        function PocketProvider(network, apiKey) {
            // We need a bit of creativity in the constructor because
            // Pocket uses different default API keys based on the network
            var _newTarget = this.constructor;
            var _this = this;
            if (apiKey == null) {
                var n = (0, properties_1.getStatic)(_newTarget, "getNetwork")(network);
                if (n) {
                    var applicationId = defaultApplicationIds[n.name];
                    if (applicationId) {
                        apiKey = {
                            applicationId: applicationId,
                            loadBalancer: true
                        };
                    }
                }
                // If there was any issue above, we don't know this network
                if (apiKey == null) {
                    logger.throwError("unsupported network", logger_1.Logger.errors.INVALID_ARGUMENT, {
                        argument: "network",
                        value: network
                    });
                }
            }
            _this = _super.call(this, network, apiKey) || this;
            return _this;
        }
        PocketProvider.getApiKey = function (apiKey) {
            // Most API Providers allow null to get the default configuration, but
            // Pocket requires the network to decide the default provider, so we
            // rely on hijacking the constructor to add a sensible default for us
            if (apiKey == null) {
                logger.throwArgumentError("PocketProvider.getApiKey does not support null apiKey", "apiKey", apiKey);
            }
            var apiKeyObj = {
                applicationId: null,
                loadBalancer: false,
                applicationSecretKey: null
            };
            // Parse applicationId and applicationSecretKey
            if (typeof (apiKey) === "string") {
                apiKeyObj.applicationId = apiKey;
            }
            else if (apiKey.applicationSecretKey != null) {
                logger.assertArgument((typeof (apiKey.applicationId) === "string"), "applicationSecretKey requires an applicationId", "applicationId", apiKey.applicationId);
                logger.assertArgument((typeof (apiKey.applicationSecretKey) === "string"), "invalid applicationSecretKey", "applicationSecretKey", "[REDACTED]");
                apiKeyObj.applicationId = apiKey.applicationId;
                apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
                apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
            }
            else if (apiKey.applicationId) {
                logger.assertArgument((typeof (apiKey.applicationId) === "string"), "apiKey.applicationId must be a string", "apiKey.applicationId", apiKey.applicationId);
                apiKeyObj.applicationId = apiKey.applicationId;
                apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
            }
            else {
                logger.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
            }
            return apiKeyObj;
        };
        PocketProvider.getUrl = function (network, apiKey) {
            var host = null;
            switch (network ? network.name : "unknown") {
                case "homestead":
                    host = "eth-mainnet.gateway.pokt.network";
                    break;
                case "ropsten":
                    host = "eth-ropsten.gateway.pokt.network";
                    break;
                case "rinkeby":
                    host = "eth-rinkeby.gateway.pokt.network";
                    break;
                case "goerli":
                    host = "eth-goerli.gateway.pokt.network";
                    break;
                default:
                    logger.throwError("unsupported network", logger_1.Logger.errors.INVALID_ARGUMENT, {
                        argument: "network",
                        value: network
                    });
            }
            var url = null;
            if (apiKey.loadBalancer) {
                url = "https://" + host + "/v1/lb/" + apiKey.applicationId;
            }
            else {
                url = "https://" + host + "/v1/" + apiKey.applicationId;
            }
            var connection = { url: url };
            // Initialize empty headers
            connection.headers = {};
            // Apply application secret key
            if (apiKey.applicationSecretKey != null) {
                connection.user = "";
                connection.password = apiKey.applicationSecretKey;
            }
            return connection;
        };
        PocketProvider.prototype.isCommunityResource = function () {
            return (this.applicationId === defaultApplicationIds[this.network.name]);
        };
        return PocketProvider;
    }(url_json_rpc_provider_1.UrlJsonRpcProvider));
    exports.PocketProvider = PocketProvider;
    
    },{"./_version":63,"./url-json-rpc-provider":78,"@ethersproject/logger":56,"@ethersproject/properties":62}],78:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UrlJsonRpcProvider = exports.StaticJsonRpcProvider = void 0;
    var properties_1 = require("@ethersproject/properties");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var json_rpc_provider_1 = require("./json-rpc-provider");
    // A StaticJsonRpcProvider is useful when you *know* for certain that
    // the backend will never change, as it never calls eth_chainId to
    // verify its backend. However, if the backend does change, the effects
    // are undefined and may include:
    // - inconsistent results
    // - locking up the UI
    // - block skew warnings
    // - wrong results
    // If the network is not explicit (i.e. auto-detection is expected), the
    // node MUST be running and available to respond to requests BEFORE this
    // is instantiated.
    var StaticJsonRpcProvider = /** @class */ (function (_super) {
        __extends(StaticJsonRpcProvider, _super);
        function StaticJsonRpcProvider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        StaticJsonRpcProvider.prototype.detectNetwork = function () {
            return __awaiter(this, void 0, void 0, function () {
                var network;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            network = this.network;
                            if (!(network == null)) return [3 /*break*/, 2];
                            return [4 /*yield*/, _super.prototype.detectNetwork.call(this)];
                        case 1:
                            network = _a.sent();
                            if (!network) {
                                logger.throwError("no network detected", logger_1.Logger.errors.UNKNOWN_ERROR, {});
                            }
                            // If still not set, set it
                            if (this._network == null) {
                                // A static network does not support "any"
                                (0, properties_1.defineReadOnly)(this, "_network", network);
                                this.emit("network", network, null);
                            }
                            _a.label = 2;
                        case 2: return [2 /*return*/, network];
                    }
                });
            });
        };
        return StaticJsonRpcProvider;
    }(json_rpc_provider_1.JsonRpcProvider));
    exports.StaticJsonRpcProvider = StaticJsonRpcProvider;
    var UrlJsonRpcProvider = /** @class */ (function (_super) {
        __extends(UrlJsonRpcProvider, _super);
        function UrlJsonRpcProvider(network, apiKey) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkAbstract(_newTarget, UrlJsonRpcProvider);
            // Normalize the Network and API Key
            network = (0, properties_1.getStatic)(_newTarget, "getNetwork")(network);
            apiKey = (0, properties_1.getStatic)(_newTarget, "getApiKey")(apiKey);
            var connection = (0, properties_1.getStatic)(_newTarget, "getUrl")(network, apiKey);
            _this = _super.call(this, connection, network) || this;
            if (typeof (apiKey) === "string") {
                (0, properties_1.defineReadOnly)(_this, "apiKey", apiKey);
            }
            else if (apiKey != null) {
                Object.keys(apiKey).forEach(function (key) {
                    (0, properties_1.defineReadOnly)(_this, key, apiKey[key]);
                });
            }
            return _this;
        }
        UrlJsonRpcProvider.prototype._startPending = function () {
            logger.warn("WARNING: API provider does not support pending filters");
        };
        UrlJsonRpcProvider.prototype.isCommunityResource = function () {
            return false;
        };
        UrlJsonRpcProvider.prototype.getSigner = function (address) {
            return logger.throwError("API provider does not support signing", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation: "getSigner" });
        };
        UrlJsonRpcProvider.prototype.listAccounts = function () {
            return Promise.resolve([]);
        };
        // Return a defaultApiKey if null, otherwise validate the API key
        UrlJsonRpcProvider.getApiKey = function (apiKey) {
            return apiKey;
        };
        // Returns the url or connection for the given network and API key. The
        // API key will have been sanitized by the getApiKey first, so any validation
        // or transformations can be done there.
        UrlJsonRpcProvider.getUrl = function (network, apiKey) {
            return logger.throwError("not implemented; sub-classes must override getUrl", logger_1.Logger.errors.NOT_IMPLEMENTED, {
                operation: "getUrl"
            });
        };
        return UrlJsonRpcProvider;
    }(StaticJsonRpcProvider));
    exports.UrlJsonRpcProvider = UrlJsonRpcProvider;
    
    },{"./_version":63,"./json-rpc-provider":75,"@ethersproject/logger":56,"@ethersproject/properties":62}],79:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Web3Provider = void 0;
    var properties_1 = require("@ethersproject/properties");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var json_rpc_provider_1 = require("./json-rpc-provider");
    var _nextId = 1;
    function buildWeb3LegacyFetcher(provider, sendFunc) {
        var fetcher = "Web3LegacyFetcher";
        return function (method, params) {
            var _this = this;
            var request = {
                method: method,
                params: params,
                id: (_nextId++),
                jsonrpc: "2.0"
            };
            return new Promise(function (resolve, reject) {
                _this.emit("debug", {
                    action: "request",
                    fetcher: fetcher,
                    request: (0, properties_1.deepCopy)(request),
                    provider: _this
                });
                sendFunc(request, function (error, response) {
                    if (error) {
                        _this.emit("debug", {
                            action: "response",
                            fetcher: fetcher,
                            error: error,
                            request: request,
                            provider: _this
                        });
                        return reject(error);
                    }
                    _this.emit("debug", {
                        action: "response",
                        fetcher: fetcher,
                        request: request,
                        response: response,
                        provider: _this
                    });
                    if (response.error) {
                        var error_1 = new Error(response.error.message);
                        error_1.code = response.error.code;
                        error_1.data = response.error.data;
                        return reject(error_1);
                    }
                    resolve(response.result);
                });
            });
        };
    }
    function buildEip1193Fetcher(provider) {
        return function (method, params) {
            var _this = this;
            if (params == null) {
                params = [];
            }
            var request = { method: method, params: params };
            this.emit("debug", {
                action: "request",
                fetcher: "Eip1193Fetcher",
                request: (0, properties_1.deepCopy)(request),
                provider: this
            });
            return provider.request(request).then(function (response) {
                _this.emit("debug", {
                    action: "response",
                    fetcher: "Eip1193Fetcher",
                    request: request,
                    response: response,
                    provider: _this
                });
                return response;
            }, function (error) {
                _this.emit("debug", {
                    action: "response",
                    fetcher: "Eip1193Fetcher",
                    request: request,
                    error: error,
                    provider: _this
                });
                throw error;
            });
        };
    }
    var Web3Provider = /** @class */ (function (_super) {
        __extends(Web3Provider, _super);
        function Web3Provider(provider, network) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkNew(_newTarget, Web3Provider);
            if (provider == null) {
                logger.throwArgumentError("missing provider", "provider", provider);
            }
            var path = null;
            var jsonRpcFetchFunc = null;
            var subprovider = null;
            if (typeof (provider) === "function") {
                path = "unknown:";
                jsonRpcFetchFunc = provider;
            }
            else {
                path = provider.host || provider.path || "";
                if (!path && provider.isMetaMask) {
                    path = "metamask";
                }
                subprovider = provider;
                if (provider.request) {
                    if (path === "") {
                        path = "eip-1193:";
                    }
                    jsonRpcFetchFunc = buildEip1193Fetcher(provider);
                }
                else if (provider.sendAsync) {
                    jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
                }
                else if (provider.send) {
                    jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
                }
                else {
                    logger.throwArgumentError("unsupported provider", "provider", provider);
                }
                if (!path) {
                    path = "unknown:";
                }
            }
            _this = _super.call(this, path, network) || this;
            (0, properties_1.defineReadOnly)(_this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
            (0, properties_1.defineReadOnly)(_this, "provider", subprovider);
            return _this;
        }
        Web3Provider.prototype.send = function (method, params) {
            return this.jsonRpcFetchFunc(method, params);
        };
        return Web3Provider;
    }(json_rpc_provider_1.JsonRpcProvider));
    exports.Web3Provider = Web3Provider;
    
    },{"./_version":63,"./json-rpc-provider":75,"@ethersproject/logger":56,"@ethersproject/properties":62}],80:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebSocketProvider = void 0;
    var bignumber_1 = require("@ethersproject/bignumber");
    var properties_1 = require("@ethersproject/properties");
    var json_rpc_provider_1 = require("./json-rpc-provider");
    var ws_1 = require("./ws");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    /**
     *  Notes:
     *
     *  This provider differs a bit from the polling providers. One main
     *  difference is how it handles consistency. The polling providers
     *  will stall responses to ensure a consistent state, while this
     *  WebSocket provider assumes the connected backend will manage this.
     *
     *  For example, if a polling provider emits an event which indicates
     *  the event occurred in blockhash XXX, a call to fetch that block by
     *  its hash XXX, if not present will retry until it is present. This
     *  can occur when querying a pool of nodes that are mildly out of sync
     *  with each other.
     */
    var NextId = 1;
    // For more info about the Real-time Event API see:
    //   https://geth.ethereum.org/docs/rpc/pubsub
    var WebSocketProvider = /** @class */ (function (_super) {
        __extends(WebSocketProvider, _super);
        function WebSocketProvider(url, network) {
            var _this = this;
            // This will be added in the future; please open an issue to expedite
            if (network === "any") {
                logger.throwError("WebSocketProvider does not support 'any' network yet", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "network:any"
                });
            }
            _this = _super.call(this, url, network) || this;
            _this._pollingInterval = -1;
            _this._wsReady = false;
            (0, properties_1.defineReadOnly)(_this, "_websocket", new ws_1.WebSocket(_this.connection.url));
            (0, properties_1.defineReadOnly)(_this, "_requests", {});
            (0, properties_1.defineReadOnly)(_this, "_subs", {});
            (0, properties_1.defineReadOnly)(_this, "_subIds", {});
            (0, properties_1.defineReadOnly)(_this, "_detectNetwork", _super.prototype.detectNetwork.call(_this));
            // Stall sending requests until the socket is open...
            _this._websocket.onopen = function () {
                _this._wsReady = true;
                Object.keys(_this._requests).forEach(function (id) {
                    _this._websocket.send(_this._requests[id].payload);
                });
            };
            _this._websocket.onmessage = function (messageEvent) {
                var data = messageEvent.data;
                var result = JSON.parse(data);
                if (result.id != null) {
                    var id = String(result.id);
                    var request = _this._requests[id];
                    delete _this._requests[id];
                    if (result.result !== undefined) {
                        request.callback(null, result.result);
                        _this.emit("debug", {
                            action: "response",
                            request: JSON.parse(request.payload),
                            response: result.result,
                            provider: _this
                        });
                    }
                    else {
                        var error = null;
                        if (result.error) {
                            error = new Error(result.error.message || "unknown error");
                            (0, properties_1.defineReadOnly)(error, "code", result.error.code || null);
                            (0, properties_1.defineReadOnly)(error, "response", data);
                        }
                        else {
                            error = new Error("unknown error");
                        }
                        request.callback(error, undefined);
                        _this.emit("debug", {
                            action: "response",
                            error: error,
                            request: JSON.parse(request.payload),
                            provider: _this
                        });
                    }
                }
                else if (result.method === "eth_subscription") {
                    // Subscription...
                    var sub = _this._subs[result.params.subscription];
                    if (sub) {
                        //this.emit.apply(this,                  );
                        sub.processFunc(result.params.result);
                    }
                }
                else {
                    console.warn("this should not happen");
                }
            };
            // This Provider does not actually poll, but we want to trigger
            // poll events for things that depend on them (like stalling for
            // block and transaction lookups)
            var fauxPoll = setInterval(function () {
                _this.emit("poll");
            }, 1000);
            if (fauxPoll.unref) {
                fauxPoll.unref();
            }
            return _this;
        }
        WebSocketProvider.prototype.detectNetwork = function () {
            return this._detectNetwork;
        };
        Object.defineProperty(WebSocketProvider.prototype, "pollingInterval", {
            get: function () {
                return 0;
            },
            set: function (value) {
                logger.throwError("cannot set polling interval on WebSocketProvider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setPollingInterval"
                });
            },
            enumerable: false,
            configurable: true
        });
        WebSocketProvider.prototype.resetEventsBlock = function (blockNumber) {
            logger.throwError("cannot reset events block on WebSocketProvider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "resetEventBlock"
            });
        };
        WebSocketProvider.prototype.poll = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, null];
                });
            });
        };
        Object.defineProperty(WebSocketProvider.prototype, "polling", {
            set: function (value) {
                if (!value) {
                    return;
                }
                logger.throwError("cannot set polling on WebSocketProvider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setPolling"
                });
            },
            enumerable: false,
            configurable: true
        });
        WebSocketProvider.prototype.send = function (method, params) {
            var _this = this;
            var rid = NextId++;
            return new Promise(function (resolve, reject) {
                function callback(error, result) {
                    if (error) {
                        return reject(error);
                    }
                    return resolve(result);
                }
                var payload = JSON.stringify({
                    method: method,
                    params: params,
                    id: rid,
                    jsonrpc: "2.0"
                });
                _this.emit("debug", {
                    action: "request",
                    request: JSON.parse(payload),
                    provider: _this
                });
                _this._requests[String(rid)] = { callback: callback, payload: payload };
                if (_this._wsReady) {
                    _this._websocket.send(payload);
                }
            });
        };
        WebSocketProvider.defaultUrl = function () {
            return "ws:/\/localhost:8546";
        };
        WebSocketProvider.prototype._subscribe = function (tag, param, processFunc) {
            return __awaiter(this, void 0, void 0, function () {
                var subIdPromise, subId;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            subIdPromise = this._subIds[tag];
                            if (subIdPromise == null) {
                                subIdPromise = Promise.all(param).then(function (param) {
                                    return _this.send("eth_subscribe", param);
                                });
                                this._subIds[tag] = subIdPromise;
                            }
                            return [4 /*yield*/, subIdPromise];
                        case 1:
                            subId = _a.sent();
                            this._subs[subId] = { tag: tag, processFunc: processFunc };
                            return [2 /*return*/];
                    }
                });
            });
        };
        WebSocketProvider.prototype._startEvent = function (event) {
            var _this = this;
            switch (event.type) {
                case "block":
                    this._subscribe("block", ["newHeads"], function (result) {
                        var blockNumber = bignumber_1.BigNumber.from(result.number).toNumber();
                        _this._emitted.block = blockNumber;
                        _this.emit("block", blockNumber);
                    });
                    break;
                case "pending":
                    this._subscribe("pending", ["newPendingTransactions"], function (result) {
                        _this.emit("pending", result);
                    });
                    break;
                case "filter":
                    this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], function (result) {
                        if (result.removed == null) {
                            result.removed = false;
                        }
                        _this.emit(event.filter, _this.formatter.filterLog(result));
                    });
                    break;
                case "tx": {
                    var emitReceipt_1 = function (event) {
                        var hash = event.hash;
                        _this.getTransactionReceipt(hash).then(function (receipt) {
                            if (!receipt) {
                                return;
                            }
                            _this.emit(hash, receipt);
                        });
                    };
                    // In case it is already mined
                    emitReceipt_1(event);
                    // To keep things simple, we start up a single newHeads subscription
                    // to keep an eye out for transactions we are watching for.
                    // Starting a subscription for an event (i.e. "tx") that is already
                    // running is (basically) a nop.
                    this._subscribe("tx", ["newHeads"], function (result) {
                        _this._events.filter(function (e) { return (e.type === "tx"); }).forEach(emitReceipt_1);
                    });
                    break;
                }
                // Nothing is needed
                case "debug":
                case "poll":
                case "willPoll":
                case "didPoll":
                case "error":
                    break;
                default:
                    console.log("unhandled:", event);
                    break;
            }
        };
        WebSocketProvider.prototype._stopEvent = function (event) {
            var _this = this;
            var tag = event.tag;
            if (event.type === "tx") {
                // There are remaining transaction event listeners
                if (this._events.filter(function (e) { return (e.type === "tx"); }).length) {
                    return;
                }
                tag = "tx";
            }
            else if (this.listenerCount(event.event)) {
                // There are remaining event listeners
                return;
            }
            var subId = this._subIds[tag];
            if (!subId) {
                return;
            }
            delete this._subIds[tag];
            subId.then(function (subId) {
                if (!_this._subs[subId]) {
                    return;
                }
                delete _this._subs[subId];
                _this.send("eth_unsubscribe", [subId]);
            });
        };
        WebSocketProvider.prototype.destroy = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this._websocket.readyState === ws_1.WebSocket.CONNECTING)) return [3 /*break*/, 2];
                            return [4 /*yield*/, (new Promise(function (resolve) {
                                    _this._websocket.onopen = function () {
                                        resolve(true);
                                    };
                                    _this._websocket.onerror = function () {
                                        resolve(false);
                                    };
                                }))];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            // Hangup
                            // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes
                            this._websocket.close(1000);
                            return [2 /*return*/];
                    }
                });
            });
        };
        return WebSocketProvider;
    }(json_rpc_provider_1.JsonRpcProvider));
    exports.WebSocketProvider = WebSocketProvider;
    
    },{"./_version":63,"./json-rpc-provider":75,"./ws":67,"@ethersproject/bignumber":29,"@ethersproject/logger":56,"@ethersproject/properties":62}],81:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "random/5.5.1";
    
    },{}],82:[function(require,module,exports){
    (function (global){(function (){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomBytes = void 0;
    var bytes_1 = require("@ethersproject/bytes");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    // Debugging line for testing browser lib in node
    //const window = { crypto: { getRandomValues: () => { } } };
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis
    function getGlobal() {
        if (typeof self !== 'undefined') {
            return self;
        }
        if (typeof window !== 'undefined') {
            return window;
        }
        if (typeof global !== 'undefined') {
            return global;
        }
        throw new Error('unable to locate global object');
    }
    ;
    var anyGlobal = getGlobal();
    var crypto = anyGlobal.crypto || anyGlobal.msCrypto;
    if (!crypto || !crypto.getRandomValues) {
        logger.warn("WARNING: Missing strong random number source");
        crypto = {
            getRandomValues: function (buffer) {
                return logger.throwError("no secure random source avaialble", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "crypto.getRandomValues"
                });
            }
        };
    }
    function randomBytes(length) {
        if (length <= 0 || length > 1024 || (length % 1) || length != length) {
            logger.throwArgumentError("invalid length", "length", length);
        }
        var result = new Uint8Array(length);
        crypto.getRandomValues(result);
        return (0, bytes_1.arrayify)(result);
    }
    exports.randomBytes = randomBytes;
    ;
    
    }).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"./_version":81,"@ethersproject/bytes":31,"@ethersproject/logger":56}],83:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shuffled = exports.randomBytes = void 0;
    var random_1 = require("./random");
    Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function () { return random_1.randomBytes; } });
    var shuffle_1 = require("./shuffle");
    Object.defineProperty(exports, "shuffled", { enumerable: true, get: function () { return shuffle_1.shuffled; } });
    
    },{"./random":82,"./shuffle":84}],84:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shuffled = void 0;
    function shuffled(array) {
        array = array.slice();
        for (var i = array.length - 1; i > 0; i--) {
            var j = Math.floor(Math.random() * (i + 1));
            var tmp = array[i];
            array[i] = array[j];
            array[j] = tmp;
        }
        return array;
    }
    exports.shuffled = shuffled;
    
    },{}],85:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "rlp/5.5.0";
    
    },{}],86:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decode = exports.encode = void 0;
    //See: https://github.com/ethereum/wiki/wiki/RLP
    var bytes_1 = require("@ethersproject/bytes");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    function arrayifyInteger(value) {
        var result = [];
        while (value) {
            result.unshift(value & 0xff);
            value >>= 8;
        }
        return result;
    }
    function unarrayifyInteger(data, offset, length) {
        var result = 0;
        for (var i = 0; i < length; i++) {
            result = (result * 256) + data[offset + i];
        }
        return result;
    }
    function _encode(object) {
        if (Array.isArray(object)) {
            var payload_1 = [];
            object.forEach(function (child) {
                payload_1 = payload_1.concat(_encode(child));
            });
            if (payload_1.length <= 55) {
                payload_1.unshift(0xc0 + payload_1.length);
                return payload_1;
            }
            var length_1 = arrayifyInteger(payload_1.length);
            length_1.unshift(0xf7 + length_1.length);
            return length_1.concat(payload_1);
        }
        if (!(0, bytes_1.isBytesLike)(object)) {
            logger.throwArgumentError("RLP object must be BytesLike", "object", object);
        }
        var data = Array.prototype.slice.call((0, bytes_1.arrayify)(object));
        if (data.length === 1 && data[0] <= 0x7f) {
            return data;
        }
        else if (data.length <= 55) {
            data.unshift(0x80 + data.length);
            return data;
        }
        var length = arrayifyInteger(data.length);
        length.unshift(0xb7 + length.length);
        return length.concat(data);
    }
    function encode(object) {
        return (0, bytes_1.hexlify)(_encode(object));
    }
    exports.encode = encode;
    function _decodeChildren(data, offset, childOffset, length) {
        var result = [];
        while (childOffset < offset + 1 + length) {
            var decoded = _decode(data, childOffset);
            result.push(decoded.result);
            childOffset += decoded.consumed;
            if (childOffset > offset + 1 + length) {
                logger.throwError("child data too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
            }
        }
        return { consumed: (1 + length), result: result };
    }
    // returns { consumed: number, result: Object }
    function _decode(data, offset) {
        if (data.length === 0) {
            logger.throwError("data too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
        }
        // Array with extra length prefix
        if (data[offset] >= 0xf8) {
            var lengthLength = data[offset] - 0xf7;
            if (offset + 1 + lengthLength > data.length) {
                logger.throwError("data short segment too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
            }
            var length_2 = unarrayifyInteger(data, offset + 1, lengthLength);
            if (offset + 1 + lengthLength + length_2 > data.length) {
                logger.throwError("data long segment too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
            }
            return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length_2);
        }
        else if (data[offset] >= 0xc0) {
            var length_3 = data[offset] - 0xc0;
            if (offset + 1 + length_3 > data.length) {
                logger.throwError("data array too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
            }
            return _decodeChildren(data, offset, offset + 1, length_3);
        }
        else if (data[offset] >= 0xb8) {
            var lengthLength = data[offset] - 0xb7;
            if (offset + 1 + lengthLength > data.length) {
                logger.throwError("data array too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
            }
            var length_4 = unarrayifyInteger(data, offset + 1, lengthLength);
            if (offset + 1 + lengthLength + length_4 > data.length) {
                logger.throwError("data array too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
            }
            var result = (0, bytes_1.hexlify)(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length_4));
            return { consumed: (1 + lengthLength + length_4), result: result };
        }
        else if (data[offset] >= 0x80) {
            var length_5 = data[offset] - 0x80;
            if (offset + 1 + length_5 > data.length) {
                logger.throwError("data too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
            }
            var result = (0, bytes_1.hexlify)(data.slice(offset + 1, offset + 1 + length_5));
            return { consumed: (1 + length_5), result: result };
        }
        return { consumed: 1, result: (0, bytes_1.hexlify)(data[offset]) };
    }
    function decode(data) {
        var bytes = (0, bytes_1.arrayify)(data);
        var decoded = _decode(bytes, 0);
        if (decoded.consumed !== bytes.length) {
            logger.throwArgumentError("invalid rlp data", "data", data);
        }
        return decoded.result;
    }
    exports.decode = decode;
    
    },{"./_version":85,"@ethersproject/bytes":31,"@ethersproject/logger":56}],87:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "sha2/5.5.0";
    
    },{}],88:[function(require,module,exports){
    "use strict";
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.computeHmac = exports.sha512 = exports.sha256 = exports.ripemd160 = void 0;
    var hash_js_1 = __importDefault(require("hash.js"));
    //const _ripemd160 = _hash.ripemd160;
    var bytes_1 = require("@ethersproject/bytes");
    var types_1 = require("./types");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    function ripemd160(data) {
        return "0x" + (hash_js_1.default.ripemd160().update((0, bytes_1.arrayify)(data)).digest("hex"));
    }
    exports.ripemd160 = ripemd160;
    function sha256(data) {
        return "0x" + (hash_js_1.default.sha256().update((0, bytes_1.arrayify)(data)).digest("hex"));
    }
    exports.sha256 = sha256;
    function sha512(data) {
        return "0x" + (hash_js_1.default.sha512().update((0, bytes_1.arrayify)(data)).digest("hex"));
    }
    exports.sha512 = sha512;
    function computeHmac(algorithm, key, data) {
        if (!types_1.SupportedAlgorithm[algorithm]) {
            logger.throwError("unsupported algorithm " + algorithm, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "hmac",
                algorithm: algorithm
            });
        }
        return "0x" + hash_js_1.default.hmac(hash_js_1.default[algorithm], (0, bytes_1.arrayify)(key)).update((0, bytes_1.arrayify)(data)).digest("hex");
    }
    exports.computeHmac = computeHmac;
    
    },{"./_version":87,"./types":90,"@ethersproject/bytes":31,"@ethersproject/logger":56,"hash.js":171}],89:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SupportedAlgorithm = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.computeHmac = void 0;
    var sha2_1 = require("./sha2");
    Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function () { return sha2_1.computeHmac; } });
    Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function () { return sha2_1.ripemd160; } });
    Object.defineProperty(exports, "sha256", { enumerable: true, get: function () { return sha2_1.sha256; } });
    Object.defineProperty(exports, "sha512", { enumerable: true, get: function () { return sha2_1.sha512; } });
    var types_1 = require("./types");
    Object.defineProperty(exports, "SupportedAlgorithm", { enumerable: true, get: function () { return types_1.SupportedAlgorithm; } });
    
    },{"./sha2":88,"./types":90}],90:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SupportedAlgorithm = void 0;
    var SupportedAlgorithm;
    (function (SupportedAlgorithm) {
        SupportedAlgorithm["sha256"] = "sha256";
        SupportedAlgorithm["sha512"] = "sha512";
    })(SupportedAlgorithm = exports.SupportedAlgorithm || (exports.SupportedAlgorithm = {}));
    ;
    
    },{}],91:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "signing-key/5.5.0";
    
    },{}],92:[function(require,module,exports){
    "use strict";
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EC = void 0;
    var elliptic_1 = __importDefault(require("elliptic"));
    var EC = elliptic_1.default.ec;
    exports.EC = EC;
    
    },{"elliptic":127}],93:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.computePublicKey = exports.recoverPublicKey = exports.SigningKey = void 0;
    var elliptic_1 = require("./elliptic");
    var bytes_1 = require("@ethersproject/bytes");
    var properties_1 = require("@ethersproject/properties");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var _curve = null;
    function getCurve() {
        if (!_curve) {
            _curve = new elliptic_1.EC("secp256k1");
        }
        return _curve;
    }
    var SigningKey = /** @class */ (function () {
        function SigningKey(privateKey) {
            (0, properties_1.defineReadOnly)(this, "curve", "secp256k1");
            (0, properties_1.defineReadOnly)(this, "privateKey", (0, bytes_1.hexlify)(privateKey));
            var keyPair = getCurve().keyFromPrivate((0, bytes_1.arrayify)(this.privateKey));
            (0, properties_1.defineReadOnly)(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
            (0, properties_1.defineReadOnly)(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
            (0, properties_1.defineReadOnly)(this, "_isSigningKey", true);
        }
        SigningKey.prototype._addPoint = function (other) {
            var p0 = getCurve().keyFromPublic((0, bytes_1.arrayify)(this.publicKey));
            var p1 = getCurve().keyFromPublic((0, bytes_1.arrayify)(other));
            return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
        };
        SigningKey.prototype.signDigest = function (digest) {
            var keyPair = getCurve().keyFromPrivate((0, bytes_1.arrayify)(this.privateKey));
            var digestBytes = (0, bytes_1.arrayify)(digest);
            if (digestBytes.length !== 32) {
                logger.throwArgumentError("bad digest length", "digest", digest);
            }
            var signature = keyPair.sign(digestBytes, { canonical: true });
            return (0, bytes_1.splitSignature)({
                recoveryParam: signature.recoveryParam,
                r: (0, bytes_1.hexZeroPad)("0x" + signature.r.toString(16), 32),
                s: (0, bytes_1.hexZeroPad)("0x" + signature.s.toString(16), 32),
            });
        };
        SigningKey.prototype.computeSharedSecret = function (otherKey) {
            var keyPair = getCurve().keyFromPrivate((0, bytes_1.arrayify)(this.privateKey));
            var otherKeyPair = getCurve().keyFromPublic((0, bytes_1.arrayify)(computePublicKey(otherKey)));
            return (0, bytes_1.hexZeroPad)("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
        };
        SigningKey.isSigningKey = function (value) {
            return !!(value && value._isSigningKey);
        };
        return SigningKey;
    }());
    exports.SigningKey = SigningKey;
    function recoverPublicKey(digest, signature) {
        var sig = (0, bytes_1.splitSignature)(signature);
        var rs = { r: (0, bytes_1.arrayify)(sig.r), s: (0, bytes_1.arrayify)(sig.s) };
        return "0x" + getCurve().recoverPubKey((0, bytes_1.arrayify)(digest), rs, sig.recoveryParam).encode("hex", false);
    }
    exports.recoverPublicKey = recoverPublicKey;
    function computePublicKey(key, compressed) {
        var bytes = (0, bytes_1.arrayify)(key);
        if (bytes.length === 32) {
            var signingKey = new SigningKey(bytes);
            if (compressed) {
                return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
            }
            return signingKey.publicKey;
        }
        else if (bytes.length === 33) {
            if (compressed) {
                return (0, bytes_1.hexlify)(bytes);
            }
            return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
        }
        else if (bytes.length === 65) {
            if (!compressed) {
                return (0, bytes_1.hexlify)(bytes);
            }
            return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
        }
        return logger.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
    }
    exports.computePublicKey = computePublicKey;
    
    },{"./_version":91,"./elliptic":92,"@ethersproject/bytes":31,"@ethersproject/logger":56,"@ethersproject/properties":62}],94:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "solidity/5.5.0";
    
    },{}],95:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sha256 = exports.keccak256 = exports.pack = void 0;
    var bignumber_1 = require("@ethersproject/bignumber");
    var bytes_1 = require("@ethersproject/bytes");
    var keccak256_1 = require("@ethersproject/keccak256");
    var sha2_1 = require("@ethersproject/sha2");
    var strings_1 = require("@ethersproject/strings");
    var regexBytes = new RegExp("^bytes([0-9]+)$");
    var regexNumber = new RegExp("^(u?int)([0-9]*)$");
    var regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
    var Zeros = "0000000000000000000000000000000000000000000000000000000000000000";
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    function _pack(type, value, isArray) {
        switch (type) {
            case "address":
                if (isArray) {
                    return (0, bytes_1.zeroPad)(value, 32);
                }
                return (0, bytes_1.arrayify)(value);
            case "string":
                return (0, strings_1.toUtf8Bytes)(value);
            case "bytes":
                return (0, bytes_1.arrayify)(value);
            case "bool":
                value = (value ? "0x01" : "0x00");
                if (isArray) {
                    return (0, bytes_1.zeroPad)(value, 32);
                }
                return (0, bytes_1.arrayify)(value);
        }
        var match = type.match(regexNumber);
        if (match) {
            //let signed = (match[1] === "int")
            var size = parseInt(match[2] || "256");
            if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {
                logger.throwArgumentError("invalid number type", "type", type);
            }
            if (isArray) {
                size = 256;
            }
            value = bignumber_1.BigNumber.from(value).toTwos(size);
            return (0, bytes_1.zeroPad)(value, size / 8);
        }
        match = type.match(regexBytes);
        if (match) {
            var size = parseInt(match[1]);
            if (String(size) !== match[1] || size === 0 || size > 32) {
                logger.throwArgumentError("invalid bytes type", "type", type);
            }
            if ((0, bytes_1.arrayify)(value).byteLength !== size) {
                logger.throwArgumentError("invalid value for " + type, "value", value);
            }
            if (isArray) {
                return (0, bytes_1.arrayify)((value + Zeros).substring(0, 66));
            }
            return value;
        }
        match = type.match(regexArray);
        if (match && Array.isArray(value)) {
            var baseType_1 = match[1];
            var count = parseInt(match[2] || String(value.length));
            if (count != value.length) {
                logger.throwArgumentError("invalid array length for " + type, "value", value);
            }
            var result_1 = [];
            value.forEach(function (value) {
                result_1.push(_pack(baseType_1, value, true));
            });
            return (0, bytes_1.concat)(result_1);
        }
        return logger.throwArgumentError("invalid type", "type", type);
    }
    // @TODO: Array Enum
    function pack(types, values) {
        if (types.length != values.length) {
            logger.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
        }
        var tight = [];
        types.forEach(function (type, index) {
            tight.push(_pack(type, values[index]));
        });
        return (0, bytes_1.hexlify)((0, bytes_1.concat)(tight));
    }
    exports.pack = pack;
    function keccak256(types, values) {
        return (0, keccak256_1.keccak256)(pack(types, values));
    }
    exports.keccak256 = keccak256;
    function sha256(types, values) {
        return (0, sha2_1.sha256)(pack(types, values));
    }
    exports.sha256 = sha256;
    
    },{"./_version":94,"@ethersproject/bignumber":29,"@ethersproject/bytes":31,"@ethersproject/keccak256":54,"@ethersproject/logger":56,"@ethersproject/sha2":89,"@ethersproject/strings":99}],96:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "strings/5.5.0";
    
    },{}],97:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseBytes32String = exports.formatBytes32String = void 0;
    var constants_1 = require("@ethersproject/constants");
    var bytes_1 = require("@ethersproject/bytes");
    var utf8_1 = require("./utf8");
    function formatBytes32String(text) {
        // Get the bytes
        var bytes = (0, utf8_1.toUtf8Bytes)(text);
        // Check we have room for null-termination
        if (bytes.length > 31) {
            throw new Error("bytes32 string must be less than 32 bytes");
        }
        // Zero-pad (implicitly null-terminates)
        return (0, bytes_1.hexlify)((0, bytes_1.concat)([bytes, constants_1.HashZero]).slice(0, 32));
    }
    exports.formatBytes32String = formatBytes32String;
    function parseBytes32String(bytes) {
        var data = (0, bytes_1.arrayify)(bytes);
        // Must be 32 bytes with a null-termination
        if (data.length !== 32) {
            throw new Error("invalid bytes32 - not 32 bytes long");
        }
        if (data[31] !== 0) {
            throw new Error("invalid bytes32 string - no null terminator");
        }
        // Find the null termination
        var length = 31;
        while (data[length - 1] === 0) {
            length--;
        }
        // Determine the string value
        return (0, utf8_1.toUtf8String)(data.slice(0, length));
    }
    exports.parseBytes32String = parseBytes32String;
    
    },{"./utf8":100,"@ethersproject/bytes":31,"@ethersproject/constants":35}],98:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.nameprep = exports._nameprepTableC = exports._nameprepTableB2 = exports._nameprepTableA1 = void 0;
    var utf8_1 = require("./utf8");
    function bytes2(data) {
        if ((data.length % 4) !== 0) {
            throw new Error("bad data");
        }
        var result = [];
        for (var i = 0; i < data.length; i += 4) {
            result.push(parseInt(data.substring(i, i + 4), 16));
        }
        return result;
    }
    function createTable(data, func) {
        if (!func) {
            func = function (value) { return [parseInt(value, 16)]; };
        }
        var lo = 0;
        var result = {};
        data.split(",").forEach(function (pair) {
            var comps = pair.split(":");
            lo += parseInt(comps[0], 16);
            result[lo] = func(comps[1]);
        });
        return result;
    }
    function createRangeTable(data) {
        var hi = 0;
        return data.split(",").map(function (v) {
            var comps = v.split("-");
            if (comps.length === 1) {
                comps[1] = "0";
            }
            else if (comps[1] === "") {
                comps[1] = "1";
            }
            var lo = hi + parseInt(comps[0], 16);
            hi = parseInt(comps[1], 16);
            return { l: lo, h: hi };
        });
    }
    function matchMap(value, ranges) {
        var lo = 0;
        for (var i = 0; i < ranges.length; i++) {
            var range = ranges[i];
            lo += range.l;
            if (value >= lo && value <= lo + range.h && ((value - lo) % (range.d || 1)) === 0) {
                if (range.e && range.e.indexOf(value - lo) !== -1) {
                    continue;
                }
                return range;
            }
        }
        return null;
    }
    var Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
    // @TODO: Make this relative...
    var Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map(function (v) { return parseInt(v, 16); });
    var Table_B_2_ranges = [
        { h: 25, s: 32, l: 65 },
        { h: 30, s: 32, e: [23], l: 127 },
        { h: 54, s: 1, e: [48], l: 64, d: 2 },
        { h: 14, s: 1, l: 57, d: 2 },
        { h: 44, s: 1, l: 17, d: 2 },
        { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },
        { h: 16, s: 1, l: 68, d: 2 },
        { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },
        { h: 26, s: 32, e: [17], l: 435 },
        { h: 22, s: 1, l: 71, d: 2 },
        { h: 15, s: 80, l: 40 },
        { h: 31, s: 32, l: 16 },
        { h: 32, s: 1, l: 80, d: 2 },
        { h: 52, s: 1, l: 42, d: 2 },
        { h: 12, s: 1, l: 55, d: 2 },
        { h: 40, s: 1, e: [38], l: 15, d: 2 },
        { h: 14, s: 1, l: 48, d: 2 },
        { h: 37, s: 48, l: 49 },
        { h: 148, s: 1, l: 6351, d: 2 },
        { h: 88, s: 1, l: 160, d: 2 },
        { h: 15, s: 16, l: 704 },
        { h: 25, s: 26, l: 854 },
        { h: 25, s: 32, l: 55915 },
        { h: 37, s: 40, l: 1247 },
        { h: 25, s: -119711, l: 53248 },
        { h: 25, s: -119763, l: 52 },
        { h: 25, s: -119815, l: 52 },
        { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },
        { h: 25, s: -119919, l: 52 },
        { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },
        { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },
        { h: 25, s: -120075, l: 52 },
        { h: 25, s: -120127, l: 52 },
        { h: 25, s: -120179, l: 52 },
        { h: 25, s: -120231, l: 52 },
        { h: 25, s: -120283, l: 52 },
        { h: 25, s: -120335, l: 52 },
        { h: 24, s: -119543, e: [17], l: 56 },
        { h: 24, s: -119601, e: [17], l: 58 },
        { h: 24, s: -119659, e: [17], l: 58 },
        { h: 24, s: -119717, e: [17], l: 58 },
        { h: 24, s: -119775, e: [17], l: 58 }
    ];
    var Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
    var Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
    var Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
    var Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
    function flatten(values) {
        return values.reduce(function (accum, value) {
            value.forEach(function (value) { accum.push(value); });
            return accum;
        }, []);
    }
    function _nameprepTableA1(codepoint) {
        return !!matchMap(codepoint, Table_A_1_ranges);
    }
    exports._nameprepTableA1 = _nameprepTableA1;
    function _nameprepTableB2(codepoint) {
        var range = matchMap(codepoint, Table_B_2_ranges);
        if (range) {
            return [codepoint + range.s];
        }
        var codes = Table_B_2_lut_abs[codepoint];
        if (codes) {
            return codes;
        }
        var shift = Table_B_2_lut_rel[codepoint];
        if (shift) {
            return [codepoint + shift[0]];
        }
        var complex = Table_B_2_complex[codepoint];
        if (complex) {
            return complex;
        }
        return null;
    }
    exports._nameprepTableB2 = _nameprepTableB2;
    function _nameprepTableC(codepoint) {
        return !!matchMap(codepoint, Table_C_ranges);
    }
    exports._nameprepTableC = _nameprepTableC;
    function nameprep(value) {
        // This allows platforms with incomplete normalize to bypass
        // it for very basic names which the built-in toLowerCase
        // will certainly handle correctly
        if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
            return value.toLowerCase();
        }
        // Get the code points (keeping the current normalization)
        var codes = (0, utf8_1.toUtf8CodePoints)(value);
        codes = flatten(codes.map(function (code) {
            // Substitute Table B.1 (Maps to Nothing)
            if (Table_B_1_flags.indexOf(code) >= 0) {
                return [];
            }
            if (code >= 0xfe00 && code <= 0xfe0f) {
                return [];
            }
            // Substitute Table B.2 (Case Folding)
            var codesTableB2 = _nameprepTableB2(code);
            if (codesTableB2) {
                return codesTableB2;
            }
            // No Substitution
            return [code];
        }));
        // Normalize using form KC
        codes = (0, utf8_1.toUtf8CodePoints)((0, utf8_1._toUtf8String)(codes), utf8_1.UnicodeNormalizationForm.NFKC);
        // Prohibit Tables C.1.2, C.2.2, C.3, C.4, C.5, C.6, C.7, C.8, C.9
        codes.forEach(function (code) {
            if (_nameprepTableC(code)) {
                throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
            }
        });
        // Prohibit Unassigned Code Points (Table A.1)
        codes.forEach(function (code) {
            if (_nameprepTableA1(code)) {
                throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
            }
        });
        // IDNA extras
        var name = (0, utf8_1._toUtf8String)(codes);
        // IDNA: 4.2.3.1
        if (name.substring(0, 1) === "-" || name.substring(2, 4) === "--" || name.substring(name.length - 1) === "-") {
            throw new Error("invalid hyphen");
        }
        // IDNA: 4.2.4
        if (name.length > 63) {
            throw new Error("too long");
        }
        return name;
    }
    exports.nameprep = nameprep;
    
    },{"./utf8":100}],99:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.nameprep = exports.parseBytes32String = exports.formatBytes32String = exports.UnicodeNormalizationForm = exports.Utf8ErrorReason = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports._toEscapedUtf8String = void 0;
    var bytes32_1 = require("./bytes32");
    Object.defineProperty(exports, "formatBytes32String", { enumerable: true, get: function () { return bytes32_1.formatBytes32String; } });
    Object.defineProperty(exports, "parseBytes32String", { enumerable: true, get: function () { return bytes32_1.parseBytes32String; } });
    var idna_1 = require("./idna");
    Object.defineProperty(exports, "nameprep", { enumerable: true, get: function () { return idna_1.nameprep; } });
    var utf8_1 = require("./utf8");
    Object.defineProperty(exports, "_toEscapedUtf8String", { enumerable: true, get: function () { return utf8_1._toEscapedUtf8String; } });
    Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function () { return utf8_1.toUtf8Bytes; } });
    Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function () { return utf8_1.toUtf8CodePoints; } });
    Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function () { return utf8_1.toUtf8String; } });
    Object.defineProperty(exports, "UnicodeNormalizationForm", { enumerable: true, get: function () { return utf8_1.UnicodeNormalizationForm; } });
    Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function () { return utf8_1.Utf8ErrorFuncs; } });
    Object.defineProperty(exports, "Utf8ErrorReason", { enumerable: true, get: function () { return utf8_1.Utf8ErrorReason; } });
    
    },{"./bytes32":97,"./idna":98,"./utf8":100}],100:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8CodePoints = exports.toUtf8String = exports._toUtf8String = exports._toEscapedUtf8String = exports.toUtf8Bytes = exports.Utf8ErrorFuncs = exports.Utf8ErrorReason = exports.UnicodeNormalizationForm = void 0;
    var bytes_1 = require("@ethersproject/bytes");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    ///////////////////////////////
    var UnicodeNormalizationForm;
    (function (UnicodeNormalizationForm) {
        UnicodeNormalizationForm["current"] = "";
        UnicodeNormalizationForm["NFC"] = "NFC";
        UnicodeNormalizationForm["NFD"] = "NFD";
        UnicodeNormalizationForm["NFKC"] = "NFKC";
        UnicodeNormalizationForm["NFKD"] = "NFKD";
    })(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));
    ;
    var Utf8ErrorReason;
    (function (Utf8ErrorReason) {
        // A continuation byte was present where there was nothing to continue
        // - offset = the index the codepoint began in
        Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
        // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
        // - offset = the index the codepoint began in
        Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix";
        // The string is too short to process the expected codepoint
        // - offset = the index the codepoint began in
        Utf8ErrorReason["OVERRUN"] = "string overrun";
        // A missing continuation byte was expected but not found
        // - offset = the index the continuation byte was expected at
        Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte";
        // The computed code point is outside the range for UTF-8
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; outside the UTF-8 range
        Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range";
        // UTF-8 strings may not contain UTF-16 surrogate pairs
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range
        Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate";
        // The string is an overlong representation
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; already bounds checked
        Utf8ErrorReason["OVERLONG"] = "overlong representation";
    })(Utf8ErrorReason = exports.Utf8ErrorReason || (exports.Utf8ErrorReason = {}));
    ;
    function errorFunc(reason, offset, bytes, output, badCodepoint) {
        return logger.throwArgumentError("invalid codepoint at offset " + offset + "; " + reason, "bytes", bytes);
    }
    function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
        // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
        if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
            var i = 0;
            for (var o = offset + 1; o < bytes.length; o++) {
                if (bytes[o] >> 6 !== 0x02) {
                    break;
                }
                i++;
            }
            return i;
        }
        // This byte runs us past the end of the string, so just jump to the end
        // (but the first byte was read already read and therefore skipped)
        if (reason === Utf8ErrorReason.OVERRUN) {
            return bytes.length - offset - 1;
        }
        // Nothing to skip
        return 0;
    }
    function replaceFunc(reason, offset, bytes, output, badCodepoint) {
        // Overlong representations are otherwise "valid" code points; just non-deistingtished
        if (reason === Utf8ErrorReason.OVERLONG) {
            output.push(badCodepoint);
            return 0;
        }
        // Put the replacement character into the output
        output.push(0xfffd);
        // Otherwise, process as if ignoring errors
        return ignoreFunc(reason, offset, bytes, output, badCodepoint);
    }
    // Common error handing strategies
    exports.Utf8ErrorFuncs = Object.freeze({
        error: errorFunc,
        ignore: ignoreFunc,
        replace: replaceFunc
    });
    // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
    function getUtf8CodePoints(bytes, onError) {
        if (onError == null) {
            onError = exports.Utf8ErrorFuncs.error;
        }
        bytes = (0, bytes_1.arrayify)(bytes);
        var result = [];
        var i = 0;
        // Invalid bytes are ignored
        while (i < bytes.length) {
            var c = bytes[i++];
            // 0xxx xxxx
            if (c >> 7 === 0) {
                result.push(c);
                continue;
            }
            // Multibyte; how many bytes left for this character?
            var extraLength = null;
            var overlongMask = null;
            // 110x xxxx 10xx xxxx
            if ((c & 0xe0) === 0xc0) {
                extraLength = 1;
                overlongMask = 0x7f;
                // 1110 xxxx 10xx xxxx 10xx xxxx
            }
            else if ((c & 0xf0) === 0xe0) {
                extraLength = 2;
                overlongMask = 0x7ff;
                // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
            }
            else if ((c & 0xf8) === 0xf0) {
                extraLength = 3;
                overlongMask = 0xffff;
            }
            else {
                if ((c & 0xc0) === 0x80) {
                    i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
                }
                else {
                    i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
                }
                continue;
            }
            // Do we have enough bytes in our data?
            if (i - 1 + extraLength >= bytes.length) {
                i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
                continue;
            }
            // Remove the length prefix from the char
            var res = c & ((1 << (8 - extraLength - 1)) - 1);
            for (var j = 0; j < extraLength; j++) {
                var nextChar = bytes[i];
                // Invalid continuation byte
                if ((nextChar & 0xc0) != 0x80) {
                    i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
                    res = null;
                    break;
                }
                ;
                res = (res << 6) | (nextChar & 0x3f);
                i++;
            }
            // See above loop for invalid continuation byte
            if (res === null) {
                continue;
            }
            // Maximum code point
            if (res > 0x10ffff) {
                i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
                continue;
            }
            // Reserved for UTF-16 surrogate halves
            if (res >= 0xd800 && res <= 0xdfff) {
                i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
                continue;
            }
            // Check for overlong sequences (more bytes than needed)
            if (res <= overlongMask) {
                i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
                continue;
            }
            result.push(res);
        }
        return result;
    }
    // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
    function toUtf8Bytes(str, form) {
        if (form === void 0) { form = UnicodeNormalizationForm.current; }
        if (form != UnicodeNormalizationForm.current) {
            logger.checkNormalize();
            str = str.normalize(form);
        }
        var result = [];
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c < 0x80) {
                result.push(c);
            }
            else if (c < 0x800) {
                result.push((c >> 6) | 0xc0);
                result.push((c & 0x3f) | 0x80);
            }
            else if ((c & 0xfc00) == 0xd800) {
                i++;
                var c2 = str.charCodeAt(i);
                if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
                    throw new Error("invalid utf-8 string");
                }
                // Surrogate Pair
                var pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
                result.push((pair >> 18) | 0xf0);
                result.push(((pair >> 12) & 0x3f) | 0x80);
                result.push(((pair >> 6) & 0x3f) | 0x80);
                result.push((pair & 0x3f) | 0x80);
            }
            else {
                result.push((c >> 12) | 0xe0);
                result.push(((c >> 6) & 0x3f) | 0x80);
                result.push((c & 0x3f) | 0x80);
            }
        }
        return (0, bytes_1.arrayify)(result);
    }
    exports.toUtf8Bytes = toUtf8Bytes;
    ;
    function escapeChar(value) {
        var hex = ("0000" + value.toString(16));
        return "\\u" + hex.substring(hex.length - 4);
    }
    function _toEscapedUtf8String(bytes, onError) {
        return '"' + getUtf8CodePoints(bytes, onError).map(function (codePoint) {
            if (codePoint < 256) {
                switch (codePoint) {
                    case 8: return "\\b";
                    case 9: return "\\t";
                    case 10: return "\\n";
                    case 13: return "\\r";
                    case 34: return "\\\"";
                    case 92: return "\\\\";
                }
                if (codePoint >= 32 && codePoint < 127) {
                    return String.fromCharCode(codePoint);
                }
            }
            if (codePoint <= 0xffff) {
                return escapeChar(codePoint);
            }
            codePoint -= 0x10000;
            return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);
        }).join("") + '"';
    }
    exports._toEscapedUtf8String = _toEscapedUtf8String;
    function _toUtf8String(codePoints) {
        return codePoints.map(function (codePoint) {
            if (codePoint <= 0xffff) {
                return String.fromCharCode(codePoint);
            }
            codePoint -= 0x10000;
            return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));
        }).join("");
    }
    exports._toUtf8String = _toUtf8String;
    function toUtf8String(bytes, onError) {
        return _toUtf8String(getUtf8CodePoints(bytes, onError));
    }
    exports.toUtf8String = toUtf8String;
    function toUtf8CodePoints(str, form) {
        if (form === void 0) { form = UnicodeNormalizationForm.current; }
        return getUtf8CodePoints(toUtf8Bytes(str, form));
    }
    exports.toUtf8CodePoints = toUtf8CodePoints;
    
    },{"./_version":96,"@ethersproject/bytes":31,"@ethersproject/logger":56}],101:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "transactions/5.5.0";
    
    },{}],102:[function(require,module,exports){
    "use strict";
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parse = exports.serialize = exports.accessListify = exports.recoverAddress = exports.computeAddress = exports.TransactionTypes = void 0;
    var address_1 = require("@ethersproject/address");
    var bignumber_1 = require("@ethersproject/bignumber");
    var bytes_1 = require("@ethersproject/bytes");
    var constants_1 = require("@ethersproject/constants");
    var keccak256_1 = require("@ethersproject/keccak256");
    var properties_1 = require("@ethersproject/properties");
    var RLP = __importStar(require("@ethersproject/rlp"));
    var signing_key_1 = require("@ethersproject/signing-key");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var TransactionTypes;
    (function (TransactionTypes) {
        TransactionTypes[TransactionTypes["legacy"] = 0] = "legacy";
        TransactionTypes[TransactionTypes["eip2930"] = 1] = "eip2930";
        TransactionTypes[TransactionTypes["eip1559"] = 2] = "eip1559";
    })(TransactionTypes = exports.TransactionTypes || (exports.TransactionTypes = {}));
    ;
    ///////////////////////////////
    function handleAddress(value) {
        if (value === "0x") {
            return null;
        }
        return (0, address_1.getAddress)(value);
    }
    function handleNumber(value) {
        if (value === "0x") {
            return constants_1.Zero;
        }
        return bignumber_1.BigNumber.from(value);
    }
    // Legacy Transaction Fields
    var transactionFields = [
        { name: "nonce", maxLength: 32, numeric: true },
        { name: "gasPrice", maxLength: 32, numeric: true },
        { name: "gasLimit", maxLength: 32, numeric: true },
        { name: "to", length: 20 },
        { name: "value", maxLength: 32, numeric: true },
        { name: "data" },
    ];
    var allowedTransactionKeys = {
        chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, type: true, value: true
    };
    function computeAddress(key) {
        var publicKey = (0, signing_key_1.computePublicKey)(key);
        return (0, address_1.getAddress)((0, bytes_1.hexDataSlice)((0, keccak256_1.keccak256)((0, bytes_1.hexDataSlice)(publicKey, 1)), 12));
    }
    exports.computeAddress = computeAddress;
    function recoverAddress(digest, signature) {
        return computeAddress((0, signing_key_1.recoverPublicKey)((0, bytes_1.arrayify)(digest), signature));
    }
    exports.recoverAddress = recoverAddress;
    function formatNumber(value, name) {
        var result = (0, bytes_1.stripZeros)(bignumber_1.BigNumber.from(value).toHexString());
        if (result.length > 32) {
            logger.throwArgumentError("invalid length for " + name, ("transaction:" + name), value);
        }
        return result;
    }
    function accessSetify(addr, storageKeys) {
        return {
            address: (0, address_1.getAddress)(addr),
            storageKeys: (storageKeys || []).map(function (storageKey, index) {
                if ((0, bytes_1.hexDataLength)(storageKey) !== 32) {
                    logger.throwArgumentError("invalid access list storageKey", "accessList[" + addr + ":" + index + "]", storageKey);
                }
                return storageKey.toLowerCase();
            })
        };
    }
    function accessListify(value) {
        if (Array.isArray(value)) {
            return value.map(function (set, index) {
                if (Array.isArray(set)) {
                    if (set.length > 2) {
                        logger.throwArgumentError("access list expected to be [ address, storageKeys[] ]", "value[" + index + "]", set);
                    }
                    return accessSetify(set[0], set[1]);
                }
                return accessSetify(set.address, set.storageKeys);
            });
        }
        var result = Object.keys(value).map(function (addr) {
            var storageKeys = value[addr].reduce(function (accum, storageKey) {
                accum[storageKey] = true;
                return accum;
            }, {});
            return accessSetify(addr, Object.keys(storageKeys).sort());
        });
        result.sort(function (a, b) { return (a.address.localeCompare(b.address)); });
        return result;
    }
    exports.accessListify = accessListify;
    function formatAccessList(value) {
        return accessListify(value).map(function (set) { return [set.address, set.storageKeys]; });
    }
    function _serializeEip1559(transaction, signature) {
        // If there is an explicit gasPrice, make sure it matches the
        // EIP-1559 fees; otherwise they may not understand what they
        // think they are setting in terms of fee.
        if (transaction.gasPrice != null) {
            var gasPrice = bignumber_1.BigNumber.from(transaction.gasPrice);
            var maxFeePerGas = bignumber_1.BigNumber.from(transaction.maxFeePerGas || 0);
            if (!gasPrice.eq(maxFeePerGas)) {
                logger.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
                    gasPrice: gasPrice,
                    maxFeePerGas: maxFeePerGas
                });
            }
        }
        var fields = [
            formatNumber(transaction.chainId || 0, "chainId"),
            formatNumber(transaction.nonce || 0, "nonce"),
            formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
            formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
            formatNumber(transaction.gasLimit || 0, "gasLimit"),
            ((transaction.to != null) ? (0, address_1.getAddress)(transaction.to) : "0x"),
            formatNumber(transaction.value || 0, "value"),
            (transaction.data || "0x"),
            (formatAccessList(transaction.accessList || []))
        ];
        if (signature) {
            var sig = (0, bytes_1.splitSignature)(signature);
            fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
            fields.push((0, bytes_1.stripZeros)(sig.r));
            fields.push((0, bytes_1.stripZeros)(sig.s));
        }
        return (0, bytes_1.hexConcat)(["0x02", RLP.encode(fields)]);
    }
    function _serializeEip2930(transaction, signature) {
        var fields = [
            formatNumber(transaction.chainId || 0, "chainId"),
            formatNumber(transaction.nonce || 0, "nonce"),
            formatNumber(transaction.gasPrice || 0, "gasPrice"),
            formatNumber(transaction.gasLimit || 0, "gasLimit"),
            ((transaction.to != null) ? (0, address_1.getAddress)(transaction.to) : "0x"),
            formatNumber(transaction.value || 0, "value"),
            (transaction.data || "0x"),
            (formatAccessList(transaction.accessList || []))
        ];
        if (signature) {
            var sig = (0, bytes_1.splitSignature)(signature);
            fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
            fields.push((0, bytes_1.stripZeros)(sig.r));
            fields.push((0, bytes_1.stripZeros)(sig.s));
        }
        return (0, bytes_1.hexConcat)(["0x01", RLP.encode(fields)]);
    }
    // Legacy Transactions and EIP-155
    function _serialize(transaction, signature) {
        (0, properties_1.checkProperties)(transaction, allowedTransactionKeys);
        var raw = [];
        transactionFields.forEach(function (fieldInfo) {
            var value = transaction[fieldInfo.name] || ([]);
            var options = {};
            if (fieldInfo.numeric) {
                options.hexPad = "left";
            }
            value = (0, bytes_1.arrayify)((0, bytes_1.hexlify)(value, options));
            // Fixed-width field
            if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
                logger.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
            }
            // Variable-width (with a maximum)
            if (fieldInfo.maxLength) {
                value = (0, bytes_1.stripZeros)(value);
                if (value.length > fieldInfo.maxLength) {
                    logger.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
                }
            }
            raw.push((0, bytes_1.hexlify)(value));
        });
        var chainId = 0;
        if (transaction.chainId != null) {
            // A chainId was provided; if non-zero we'll use EIP-155
            chainId = transaction.chainId;
            if (typeof (chainId) !== "number") {
                logger.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
            }
        }
        else if (signature && !(0, bytes_1.isBytesLike)(signature) && signature.v > 28) {
            // No chainId provided, but the signature is signing with EIP-155; derive chainId
            chainId = Math.floor((signature.v - 35) / 2);
        }
        // We have an EIP-155 transaction (chainId was specified and non-zero)
        if (chainId !== 0) {
            raw.push((0, bytes_1.hexlify)(chainId)); // @TODO: hexValue?
            raw.push("0x");
            raw.push("0x");
        }
        // Requesting an unsigned transaction
        if (!signature) {
            return RLP.encode(raw);
        }
        // The splitSignature will ensure the transaction has a recoveryParam in the
        // case that the signTransaction function only adds a v.
        var sig = (0, bytes_1.splitSignature)(signature);
        // We pushed a chainId and null r, s on for hashing only; remove those
        var v = 27 + sig.recoveryParam;
        if (chainId !== 0) {
            raw.pop();
            raw.pop();
            raw.pop();
            v += chainId * 2 + 8;
            // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!
            if (sig.v > 28 && sig.v !== v) {
                logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
            }
        }
        else if (sig.v !== v) {
            logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
        }
        raw.push((0, bytes_1.hexlify)(v));
        raw.push((0, bytes_1.stripZeros)((0, bytes_1.arrayify)(sig.r)));
        raw.push((0, bytes_1.stripZeros)((0, bytes_1.arrayify)(sig.s)));
        return RLP.encode(raw);
    }
    function serialize(transaction, signature) {
        // Legacy and EIP-155 Transactions
        if (transaction.type == null || transaction.type === 0) {
            if (transaction.accessList != null) {
                logger.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
            }
            return _serialize(transaction, signature);
        }
        // Typed Transactions (EIP-2718)
        switch (transaction.type) {
            case 1:
                return _serializeEip2930(transaction, signature);
            case 2:
                return _serializeEip1559(transaction, signature);
            default:
                break;
        }
        return logger.throwError("unsupported transaction type: " + transaction.type, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "serializeTransaction",
            transactionType: transaction.type
        });
    }
    exports.serialize = serialize;
    function _parseEipSignature(tx, fields, serialize) {
        try {
            var recid = handleNumber(fields[0]).toNumber();
            if (recid !== 0 && recid !== 1) {
                throw new Error("bad recid");
            }
            tx.v = recid;
        }
        catch (error) {
            logger.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
        }
        tx.r = (0, bytes_1.hexZeroPad)(fields[1], 32);
        tx.s = (0, bytes_1.hexZeroPad)(fields[2], 32);
        try {
            var digest = (0, keccak256_1.keccak256)(serialize(tx));
            tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });
        }
        catch (error) {
            console.log(error);
        }
    }
    function _parseEip1559(payload) {
        var transaction = RLP.decode(payload.slice(1));
        if (transaction.length !== 9 && transaction.length !== 12) {
            logger.throwArgumentError("invalid component count for transaction type: 2", "payload", (0, bytes_1.hexlify)(payload));
        }
        var maxPriorityFeePerGas = handleNumber(transaction[2]);
        var maxFeePerGas = handleNumber(transaction[3]);
        var tx = {
            type: 2,
            chainId: handleNumber(transaction[0]).toNumber(),
            nonce: handleNumber(transaction[1]).toNumber(),
            maxPriorityFeePerGas: maxPriorityFeePerGas,
            maxFeePerGas: maxFeePerGas,
            gasPrice: null,
            gasLimit: handleNumber(transaction[4]),
            to: handleAddress(transaction[5]),
            value: handleNumber(transaction[6]),
            data: transaction[7],
            accessList: accessListify(transaction[8]),
        };
        // Unsigned EIP-1559 Transaction
        if (transaction.length === 9) {
            return tx;
        }
        tx.hash = (0, keccak256_1.keccak256)(payload);
        _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
        return tx;
    }
    function _parseEip2930(payload) {
        var transaction = RLP.decode(payload.slice(1));
        if (transaction.length !== 8 && transaction.length !== 11) {
            logger.throwArgumentError("invalid component count for transaction type: 1", "payload", (0, bytes_1.hexlify)(payload));
        }
        var tx = {
            type: 1,
            chainId: handleNumber(transaction[0]).toNumber(),
            nonce: handleNumber(transaction[1]).toNumber(),
            gasPrice: handleNumber(transaction[2]),
            gasLimit: handleNumber(transaction[3]),
            to: handleAddress(transaction[4]),
            value: handleNumber(transaction[5]),
            data: transaction[6],
            accessList: accessListify(transaction[7])
        };
        // Unsigned EIP-2930 Transaction
        if (transaction.length === 8) {
            return tx;
        }
        tx.hash = (0, keccak256_1.keccak256)(payload);
        _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
        return tx;
    }
    // Legacy Transactions and EIP-155
    function _parse(rawTransaction) {
        var transaction = RLP.decode(rawTransaction);
        if (transaction.length !== 9 && transaction.length !== 6) {
            logger.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
        }
        var tx = {
            nonce: handleNumber(transaction[0]).toNumber(),
            gasPrice: handleNumber(transaction[1]),
            gasLimit: handleNumber(transaction[2]),
            to: handleAddress(transaction[3]),
            value: handleNumber(transaction[4]),
            data: transaction[5],
            chainId: 0
        };
        // Legacy unsigned transaction
        if (transaction.length === 6) {
            return tx;
        }
        try {
            tx.v = bignumber_1.BigNumber.from(transaction[6]).toNumber();
        }
        catch (error) {
            console.log(error);
            return tx;
        }
        tx.r = (0, bytes_1.hexZeroPad)(transaction[7], 32);
        tx.s = (0, bytes_1.hexZeroPad)(transaction[8], 32);
        if (bignumber_1.BigNumber.from(tx.r).isZero() && bignumber_1.BigNumber.from(tx.s).isZero()) {
            // EIP-155 unsigned transaction
            tx.chainId = tx.v;
            tx.v = 0;
        }
        else {
            // Signed Transaction
            tx.chainId = Math.floor((tx.v - 35) / 2);
            if (tx.chainId < 0) {
                tx.chainId = 0;
            }
            var recoveryParam = tx.v - 27;
            var raw = transaction.slice(0, 6);
            if (tx.chainId !== 0) {
                raw.push((0, bytes_1.hexlify)(tx.chainId));
                raw.push("0x");
                raw.push("0x");
                recoveryParam -= tx.chainId * 2 + 8;
            }
            var digest = (0, keccak256_1.keccak256)(RLP.encode(raw));
            try {
                tx.from = recoverAddress(digest, { r: (0, bytes_1.hexlify)(tx.r), s: (0, bytes_1.hexlify)(tx.s), recoveryParam: recoveryParam });
            }
            catch (error) {
                console.log(error);
            }
            tx.hash = (0, keccak256_1.keccak256)(rawTransaction);
        }
        tx.type = null;
        return tx;
    }
    function parse(rawTransaction) {
        var payload = (0, bytes_1.arrayify)(rawTransaction);
        // Legacy and EIP-155 Transactions
        if (payload[0] > 0x7f) {
            return _parse(payload);
        }
        // Typed Transaction (EIP-2718)
        switch (payload[0]) {
            case 1:
                return _parseEip2930(payload);
            case 2:
                return _parseEip1559(payload);
            default:
                break;
        }
        return logger.throwError("unsupported transaction type: " + payload[0], logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "parseTransaction",
            transactionType: payload[0]
        });
    }
    exports.parse = parse;
    
    },{"./_version":101,"@ethersproject/address":22,"@ethersproject/bignumber":29,"@ethersproject/bytes":31,"@ethersproject/constants":35,"@ethersproject/keccak256":54,"@ethersproject/logger":56,"@ethersproject/properties":62,"@ethersproject/rlp":86,"@ethersproject/signing-key":93}],103:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "units/5.5.0";
    
    },{}],104:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseEther = exports.formatEther = exports.parseUnits = exports.formatUnits = exports.commify = void 0;
    var bignumber_1 = require("@ethersproject/bignumber");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var names = [
        "wei",
        "kwei",
        "mwei",
        "gwei",
        "szabo",
        "finney",
        "ether",
    ];
    // Some environments have issues with RegEx that contain back-tracking, so we cannot
    // use them.
    function commify(value) {
        var comps = String(value).split(".");
        if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === "." || value === "-.") {
            logger.throwArgumentError("invalid value", "value", value);
        }
        // Make sure we have at least one whole digit (0 if none)
        var whole = comps[0];
        var negative = "";
        if (whole.substring(0, 1) === "-") {
            negative = "-";
            whole = whole.substring(1);
        }
        // Make sure we have at least 1 whole digit with no leading zeros
        while (whole.substring(0, 1) === "0") {
            whole = whole.substring(1);
        }
        if (whole === "") {
            whole = "0";
        }
        var suffix = "";
        if (comps.length === 2) {
            suffix = "." + (comps[1] || "0");
        }
        while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
            suffix = suffix.substring(0, suffix.length - 1);
        }
        var formatted = [];
        while (whole.length) {
            if (whole.length <= 3) {
                formatted.unshift(whole);
                break;
            }
            else {
                var index = whole.length - 3;
                formatted.unshift(whole.substring(index));
                whole = whole.substring(0, index);
            }
        }
        return negative + formatted.join(",") + suffix;
    }
    exports.commify = commify;
    function formatUnits(value, unitName) {
        if (typeof (unitName) === "string") {
            var index = names.indexOf(unitName);
            if (index !== -1) {
                unitName = 3 * index;
            }
        }
        return (0, bignumber_1.formatFixed)(value, (unitName != null) ? unitName : 18);
    }
    exports.formatUnits = formatUnits;
    function parseUnits(value, unitName) {
        if (typeof (value) !== "string") {
            logger.throwArgumentError("value must be a string", "value", value);
        }
        if (typeof (unitName) === "string") {
            var index = names.indexOf(unitName);
            if (index !== -1) {
                unitName = 3 * index;
            }
        }
        return (0, bignumber_1.parseFixed)(value, (unitName != null) ? unitName : 18);
    }
    exports.parseUnits = parseUnits;
    function formatEther(wei) {
        return formatUnits(wei, 18);
    }
    exports.formatEther = formatEther;
    function parseEther(ether) {
        return parseUnits(ether, 18);
    }
    exports.parseEther = parseEther;
    
    },{"./_version":103,"@ethersproject/bignumber":29,"@ethersproject/logger":56}],105:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "wallet/5.5.0";
    
    },{}],106:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.verifyTypedData = exports.verifyMessage = exports.Wallet = void 0;
    var address_1 = require("@ethersproject/address");
    var abstract_provider_1 = require("@ethersproject/abstract-provider");
    var abstract_signer_1 = require("@ethersproject/abstract-signer");
    var bytes_1 = require("@ethersproject/bytes");
    var hash_1 = require("@ethersproject/hash");
    var hdnode_1 = require("@ethersproject/hdnode");
    var keccak256_1 = require("@ethersproject/keccak256");
    var properties_1 = require("@ethersproject/properties");
    var random_1 = require("@ethersproject/random");
    var signing_key_1 = require("@ethersproject/signing-key");
    var json_wallets_1 = require("@ethersproject/json-wallets");
    var transactions_1 = require("@ethersproject/transactions");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    function isAccount(value) {
        return (value != null && (0, bytes_1.isHexString)(value.privateKey, 32) && value.address != null);
    }
    function hasMnemonic(value) {
        var mnemonic = value.mnemonic;
        return (mnemonic && mnemonic.phrase);
    }
    var Wallet = /** @class */ (function (_super) {
        __extends(Wallet, _super);
        function Wallet(privateKey, provider) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkNew(_newTarget, Wallet);
            _this = _super.call(this) || this;
            if (isAccount(privateKey)) {
                var signingKey_1 = new signing_key_1.SigningKey(privateKey.privateKey);
                (0, properties_1.defineReadOnly)(_this, "_signingKey", function () { return signingKey_1; });
                (0, properties_1.defineReadOnly)(_this, "address", (0, transactions_1.computeAddress)(_this.publicKey));
                if (_this.address !== (0, address_1.getAddress)(privateKey.address)) {
                    logger.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
                }
                if (hasMnemonic(privateKey)) {
                    var srcMnemonic_1 = privateKey.mnemonic;
                    (0, properties_1.defineReadOnly)(_this, "_mnemonic", function () { return ({
                        phrase: srcMnemonic_1.phrase,
                        path: srcMnemonic_1.path || hdnode_1.defaultPath,
                        locale: srcMnemonic_1.locale || "en"
                    }); });
                    var mnemonic = _this.mnemonic;
                    var node = hdnode_1.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
                    if ((0, transactions_1.computeAddress)(node.privateKey) !== _this.address) {
                        logger.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
                    }
                }
                else {
                    (0, properties_1.defineReadOnly)(_this, "_mnemonic", function () { return null; });
                }
            }
            else {
                if (signing_key_1.SigningKey.isSigningKey(privateKey)) {
                    /* istanbul ignore if */
                    if (privateKey.curve !== "secp256k1") {
                        logger.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
                    }
                    (0, properties_1.defineReadOnly)(_this, "_signingKey", function () { return privateKey; });
                }
                else {
                    // A lot of common tools do not prefix private keys with a 0x (see: #1166)
                    if (typeof (privateKey) === "string") {
                        if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
                            privateKey = "0x" + privateKey;
                        }
                    }
                    var signingKey_2 = new signing_key_1.SigningKey(privateKey);
                    (0, properties_1.defineReadOnly)(_this, "_signingKey", function () { return signingKey_2; });
                }
                (0, properties_1.defineReadOnly)(_this, "_mnemonic", function () { return null; });
                (0, properties_1.defineReadOnly)(_this, "address", (0, transactions_1.computeAddress)(_this.publicKey));
            }
            /* istanbul ignore if */
            if (provider && !abstract_provider_1.Provider.isProvider(provider)) {
                logger.throwArgumentError("invalid provider", "provider", provider);
            }
            (0, properties_1.defineReadOnly)(_this, "provider", provider || null);
            return _this;
        }
        Object.defineProperty(Wallet.prototype, "mnemonic", {
            get: function () { return this._mnemonic(); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Wallet.prototype, "privateKey", {
            get: function () { return this._signingKey().privateKey; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Wallet.prototype, "publicKey", {
            get: function () { return this._signingKey().publicKey; },
            enumerable: false,
            configurable: true
        });
        Wallet.prototype.getAddress = function () {
            return Promise.resolve(this.address);
        };
        Wallet.prototype.connect = function (provider) {
            return new Wallet(this, provider);
        };
        Wallet.prototype.signTransaction = function (transaction) {
            var _this = this;
            return (0, properties_1.resolveProperties)(transaction).then(function (tx) {
                if (tx.from != null) {
                    if ((0, address_1.getAddress)(tx.from) !== _this.address) {
                        logger.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
                    }
                    delete tx.from;
                }
                var signature = _this._signingKey().signDigest((0, keccak256_1.keccak256)((0, transactions_1.serialize)(tx)));
                return (0, transactions_1.serialize)(tx, signature);
            });
        };
        Wallet.prototype.signMessage = function (message) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, (0, bytes_1.joinSignature)(this._signingKey().signDigest((0, hash_1.hashMessage)(message)))];
                });
            });
        };
        Wallet.prototype._signTypedData = function (domain, types, value) {
            return __awaiter(this, void 0, void 0, function () {
                var populated;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, hash_1._TypedDataEncoder.resolveNames(domain, types, value, function (name) {
                                if (_this.provider == null) {
                                    logger.throwError("cannot resolve ENS names without a provider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                                        operation: "resolveName",
                                        value: name
                                    });
                                }
                                return _this.provider.resolveName(name);
                            })];
                        case 1:
                            populated = _a.sent();
                            return [2 /*return*/, (0, bytes_1.joinSignature)(this._signingKey().signDigest(hash_1._TypedDataEncoder.hash(populated.domain, types, populated.value)))];
                    }
                });
            });
        };
        Wallet.prototype.encrypt = function (password, options, progressCallback) {
            if (typeof (options) === "function" && !progressCallback) {
                progressCallback = options;
                options = {};
            }
            if (progressCallback && typeof (progressCallback) !== "function") {
                throw new Error("invalid callback");
            }
            if (!options) {
                options = {};
            }
            return (0, json_wallets_1.encryptKeystore)(this, password, options, progressCallback);
        };
        /**
         *  Static methods to create Wallet instances.
         */
        Wallet.createRandom = function (options) {
            var entropy = (0, random_1.randomBytes)(16);
            if (!options) {
                options = {};
            }
            if (options.extraEntropy) {
                entropy = (0, bytes_1.arrayify)((0, bytes_1.hexDataSlice)((0, keccak256_1.keccak256)((0, bytes_1.concat)([entropy, options.extraEntropy])), 0, 16));
            }
            var mnemonic = (0, hdnode_1.entropyToMnemonic)(entropy, options.locale);
            return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
        };
        Wallet.fromEncryptedJson = function (json, password, progressCallback) {
            return (0, json_wallets_1.decryptJsonWallet)(json, password, progressCallback).then(function (account) {
                return new Wallet(account);
            });
        };
        Wallet.fromEncryptedJsonSync = function (json, password) {
            return new Wallet((0, json_wallets_1.decryptJsonWalletSync)(json, password));
        };
        Wallet.fromMnemonic = function (mnemonic, path, wordlist) {
            if (!path) {
                path = hdnode_1.defaultPath;
            }
            return new Wallet(hdnode_1.HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));
        };
        return Wallet;
    }(abstract_signer_1.Signer));
    exports.Wallet = Wallet;
    function verifyMessage(message, signature) {
        return (0, transactions_1.recoverAddress)((0, hash_1.hashMessage)(message), signature);
    }
    exports.verifyMessage = verifyMessage;
    function verifyTypedData(domain, types, value, signature) {
        return (0, transactions_1.recoverAddress)(hash_1._TypedDataEncoder.hash(domain, types, value), signature);
    }
    exports.verifyTypedData = verifyTypedData;
    
    },{"./_version":105,"@ethersproject/abstract-provider":18,"@ethersproject/abstract-signer":20,"@ethersproject/address":22,"@ethersproject/bytes":31,"@ethersproject/hash":41,"@ethersproject/hdnode":46,"@ethersproject/json-wallets":49,"@ethersproject/keccak256":54,"@ethersproject/logger":56,"@ethersproject/properties":62,"@ethersproject/random":83,"@ethersproject/signing-key":93,"@ethersproject/transactions":102}],107:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "web/5.5.1";
    
    },{}],108:[function(require,module,exports){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUrl = void 0;
    var bytes_1 = require("@ethersproject/bytes");
    function getUrl(href, options) {
        return __awaiter(this, void 0, void 0, function () {
            var request, response, body, headers;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (options == null) {
                            options = {};
                        }
                        request = {
                            method: (options.method || "GET"),
                            headers: (options.headers || {}),
                            body: (options.body || undefined),
                        };
                        if (options.skipFetchSetup !== true) {
                            request.mode = "cors"; // no-cors, cors, *same-origin
                            request.cache = "no-cache"; // *default, no-cache, reload, force-cache, only-if-cached
                            request.credentials = "same-origin"; // include, *same-origin, omit
                            request.redirect = "follow"; // manual, *follow, error
                            request.referrer = "client"; // no-referrer, *client
                        }
                        ;
                        return [4 /*yield*/, fetch(href, request)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.arrayBuffer()];
                    case 2:
                        body = _a.sent();
                        headers = {};
                        if (response.headers.forEach) {
                            response.headers.forEach(function (value, key) {
                                headers[key.toLowerCase()] = value;
                            });
                        }
                        else {
                            ((response.headers).keys)().forEach(function (key) {
                                headers[key.toLowerCase()] = response.headers.get(key);
                            });
                        }
                        return [2 /*return*/, {
                                headers: headers,
                                statusCode: response.status,
                                statusMessage: response.statusText,
                                body: (0, bytes_1.arrayify)(new Uint8Array(body)),
                            }];
                }
            });
        });
    }
    exports.getUrl = getUrl;
    
    },{"@ethersproject/bytes":31}],109:[function(require,module,exports){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.poll = exports.fetchJson = exports._fetchData = void 0;
    var base64_1 = require("@ethersproject/base64");
    var bytes_1 = require("@ethersproject/bytes");
    var properties_1 = require("@ethersproject/properties");
    var strings_1 = require("@ethersproject/strings");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    var logger = new logger_1.Logger(_version_1.version);
    var geturl_1 = require("./geturl");
    function staller(duration) {
        return new Promise(function (resolve) {
            setTimeout(resolve, duration);
        });
    }
    function bodyify(value, type) {
        if (value == null) {
            return null;
        }
        if (typeof (value) === "string") {
            return value;
        }
        if ((0, bytes_1.isBytesLike)(value)) {
            if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
                try {
                    return (0, strings_1.toUtf8String)(value);
                }
                catch (error) { }
                ;
            }
            return (0, bytes_1.hexlify)(value);
        }
        return value;
    }
    // This API is still a work in progress; the future changes will likely be:
    // - ConnectionInfo => FetchDataRequest<T = any>
    // - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }
    //   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)
    // - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T
    // For this reason, it should be considered internal until the API is finalized
    function _fetchData(connection, body, processFunc) {
        // How many times to retry in the event of a throttle
        var attemptLimit = (typeof (connection) === "object" && connection.throttleLimit != null) ? connection.throttleLimit : 12;
        logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0), "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
        var throttleCallback = ((typeof (connection) === "object") ? connection.throttleCallback : null);
        var throttleSlotInterval = ((typeof (connection) === "object" && typeof (connection.throttleSlotInterval) === "number") ? connection.throttleSlotInterval : 100);
        logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0), "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
        var headers = {};
        var url = null;
        // @TODO: Allow ConnectionInfo to override some of these values
        var options = {
            method: "GET",
        };
        var allow304 = false;
        var timeout = 2 * 60 * 1000;
        if (typeof (connection) === "string") {
            url = connection;
        }
        else if (typeof (connection) === "object") {
            if (connection == null || connection.url == null) {
                logger.throwArgumentError("missing URL", "connection.url", connection);
            }
            url = connection.url;
            if (typeof (connection.timeout) === "number" && connection.timeout > 0) {
                timeout = connection.timeout;
            }
            if (connection.headers) {
                for (var key in connection.headers) {
                    headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };
                    if (["if-none-match", "if-modified-since"].indexOf(key.toLowerCase()) >= 0) {
                        allow304 = true;
                    }
                }
            }
            options.allowGzip = !!connection.allowGzip;
            if (connection.user != null && connection.password != null) {
                if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
                    logger.throwError("basic authentication requires a secure https url", logger_1.Logger.errors.INVALID_ARGUMENT, { argument: "url", url: url, user: connection.user, password: "[REDACTED]" });
                }
                var authorization = connection.user + ":" + connection.password;
                headers["authorization"] = {
                    key: "Authorization",
                    value: "Basic " + (0, base64_1.encode)((0, strings_1.toUtf8Bytes)(authorization))
                };
            }
        }
        var reData = new RegExp("^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$", "i");
        var dataMatch = ((url) ? url.match(reData) : null);
        if (dataMatch) {
            try {
                var response = {
                    statusCode: 200,
                    statusMessage: "OK",
                    headers: { "content-type": dataMatch[1] },
                    body: (0, base64_1.decode)(dataMatch[2])
                };
                var result = response.body;
                if (processFunc) {
                    result = processFunc(response.body, response);
                }
                return Promise.resolve(result);
            }
            catch (error) {
                logger.throwError("processing response error", logger_1.Logger.errors.SERVER_ERROR, {
                    body: bodyify(dataMatch[1], dataMatch[2]),
                    error: error,
                    requestBody: null,
                    requestMethod: "GET",
                    url: url
                });
            }
        }
        if (body) {
            options.method = "POST";
            options.body = body;
            if (headers["content-type"] == null) {
                headers["content-type"] = { key: "Content-Type", value: "application/octet-stream" };
            }
            if (headers["content-length"] == null) {
                headers["content-length"] = { key: "Content-Length", value: String(body.length) };
            }
        }
        var flatHeaders = {};
        Object.keys(headers).forEach(function (key) {
            var header = headers[key];
            flatHeaders[header.key] = header.value;
        });
        options.headers = flatHeaders;
        var runningTimeout = (function () {
            var timer = null;
            var promise = new Promise(function (resolve, reject) {
                if (timeout) {
                    timer = setTimeout(function () {
                        if (timer == null) {
                            return;
                        }
                        timer = null;
                        reject(logger.makeError("timeout", logger_1.Logger.errors.TIMEOUT, {
                            requestBody: bodyify(options.body, flatHeaders["content-type"]),
                            requestMethod: options.method,
                            timeout: timeout,
                            url: url
                        }));
                    }, timeout);
                }
            });
            var cancel = function () {
                if (timer == null) {
                    return;
                }
                clearTimeout(timer);
                timer = null;
            };
            return { promise: promise, cancel: cancel };
        })();
        var runningFetch = (function () {
            return __awaiter(this, void 0, void 0, function () {
                var attempt, response, location_1, tryAgain, stall, retryAfter, error_1, body_1, result, error_2, tryAgain, timeout_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            attempt = 0;
                            _a.label = 1;
                        case 1:
                            if (!(attempt < attemptLimit)) return [3 /*break*/, 20];
                            response = null;
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 9, , 10]);
                            return [4 /*yield*/, (0, geturl_1.getUrl)(url, options)];
                        case 3:
                            response = _a.sent();
                            if (!(attempt < attemptLimit)) return [3 /*break*/, 8];
                            if (!(response.statusCode === 301 || response.statusCode === 302)) return [3 /*break*/, 4];
                            location_1 = response.headers.location || "";
                            if (options.method === "GET" && location_1.match(/^https:/)) {
                                url = response.headers.location;
                                return [3 /*break*/, 19];
                            }
                            return [3 /*break*/, 8];
                        case 4:
                            if (!(response.statusCode === 429)) return [3 /*break*/, 8];
                            tryAgain = true;
                            if (!throttleCallback) return [3 /*break*/, 6];
                            return [4 /*yield*/, throttleCallback(attempt, url)];
                        case 5:
                            tryAgain = _a.sent();
                            _a.label = 6;
                        case 6:
                            if (!tryAgain) return [3 /*break*/, 8];
                            stall = 0;
                            retryAfter = response.headers["retry-after"];
                            if (typeof (retryAfter) === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                                stall = parseInt(retryAfter) * 1000;
                            }
                            else {
                                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                            }
                            //console.log("Stalling 429");
                            return [4 /*yield*/, staller(stall)];
                        case 7:
                            //console.log("Stalling 429");
                            _a.sent();
                            return [3 /*break*/, 19];
                        case 8: return [3 /*break*/, 10];
                        case 9:
                            error_1 = _a.sent();
                            response = error_1.response;
                            if (response == null) {
                                runningTimeout.cancel();
                                logger.throwError("missing response", logger_1.Logger.errors.SERVER_ERROR, {
                                    requestBody: bodyify(options.body, flatHeaders["content-type"]),
                                    requestMethod: options.method,
                                    serverError: error_1,
                                    url: url
                                });
                            }
                            return [3 /*break*/, 10];
                        case 10:
                            body_1 = response.body;
                            if (allow304 && response.statusCode === 304) {
                                body_1 = null;
                            }
                            else if (response.statusCode < 200 || response.statusCode >= 300) {
                                runningTimeout.cancel();
                                logger.throwError("bad response", logger_1.Logger.errors.SERVER_ERROR, {
                                    status: response.statusCode,
                                    headers: response.headers,
                                    body: bodyify(body_1, ((response.headers) ? response.headers["content-type"] : null)),
                                    requestBody: bodyify(options.body, flatHeaders["content-type"]),
                                    requestMethod: options.method,
                                    url: url
                                });
                            }
                            if (!processFunc) return [3 /*break*/, 18];
                            _a.label = 11;
                        case 11:
                            _a.trys.push([11, 13, , 18]);
                            return [4 /*yield*/, processFunc(body_1, response)];
                        case 12:
                            result = _a.sent();
                            runningTimeout.cancel();
                            return [2 /*return*/, result];
                        case 13:
                            error_2 = _a.sent();
                            if (!(error_2.throttleRetry && attempt < attemptLimit)) return [3 /*break*/, 17];
                            tryAgain = true;
                            if (!throttleCallback) return [3 /*break*/, 15];
                            return [4 /*yield*/, throttleCallback(attempt, url)];
                        case 14:
                            tryAgain = _a.sent();
                            _a.label = 15;
                        case 15:
                            if (!tryAgain) return [3 /*break*/, 17];
                            timeout_1 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                            //console.log("Stalling callback");
                            return [4 /*yield*/, staller(timeout_1)];
                        case 16:
                            //console.log("Stalling callback");
                            _a.sent();
                            return [3 /*break*/, 19];
                        case 17:
                            runningTimeout.cancel();
                            logger.throwError("processing response error", logger_1.Logger.errors.SERVER_ERROR, {
                                body: bodyify(body_1, ((response.headers) ? response.headers["content-type"] : null)),
                                error: error_2,
                                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                                requestMethod: options.method,
                                url: url
                            });
                            return [3 /*break*/, 18];
                        case 18:
                            runningTimeout.cancel();
                            // If we had a processFunc, it either returned a T or threw above.
                            // The "body" is now a Uint8Array.
                            return [2 /*return*/, body_1];
                        case 19:
                            attempt++;
                            return [3 /*break*/, 1];
                        case 20: return [2 /*return*/, logger.throwError("failed response", logger_1.Logger.errors.SERVER_ERROR, {
                                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                                requestMethod: options.method,
                                url: url
                            })];
                    }
                });
            });
        })();
        return Promise.race([runningTimeout.promise, runningFetch]);
    }
    exports._fetchData = _fetchData;
    function fetchJson(connection, json, processFunc) {
        var processJsonFunc = function (value, response) {
            var result = null;
            if (value != null) {
                try {
                    result = JSON.parse((0, strings_1.toUtf8String)(value));
                }
                catch (error) {
                    logger.throwError("invalid JSON", logger_1.Logger.errors.SERVER_ERROR, {
                        body: value,
                        error: error
                    });
                }
            }
            if (processFunc) {
                result = processFunc(result, response);
            }
            return result;
        };
        // If we have json to send, we must
        // - add content-type of application/json (unless already overridden)
        // - convert the json to bytes
        var body = null;
        if (json != null) {
            body = (0, strings_1.toUtf8Bytes)(json);
            // Create a connection with the content-type set for JSON
            var updated = (typeof (connection) === "string") ? ({ url: connection }) : (0, properties_1.shallowCopy)(connection);
            if (updated.headers) {
                var hasContentType = (Object.keys(updated.headers).filter(function (k) { return (k.toLowerCase() === "content-type"); }).length) !== 0;
                if (!hasContentType) {
                    updated.headers = (0, properties_1.shallowCopy)(updated.headers);
                    updated.headers["content-type"] = "application/json";
                }
            }
            else {
                updated.headers = { "content-type": "application/json" };
            }
            connection = updated;
        }
        return _fetchData(connection, body, processJsonFunc);
    }
    exports.fetchJson = fetchJson;
    function poll(func, options) {
        if (!options) {
            options = {};
        }
        options = (0, properties_1.shallowCopy)(options);
        if (options.floor == null) {
            options.floor = 0;
        }
        if (options.ceiling == null) {
            options.ceiling = 10000;
        }
        if (options.interval == null) {
            options.interval = 250;
        }
        return new Promise(function (resolve, reject) {
            var timer = null;
            var done = false;
            // Returns true if cancel was successful. Unsuccessful cancel means we're already done.
            var cancel = function () {
                if (done) {
                    return false;
                }
                done = true;
                if (timer) {
                    clearTimeout(timer);
                }
                return true;
            };
            if (options.timeout) {
                timer = setTimeout(function () {
                    if (cancel()) {
                        reject(new Error("timeout"));
                    }
                }, options.timeout);
            }
            var retryLimit = options.retryLimit;
            var attempt = 0;
            function check() {
                return func().then(function (result) {
                    // If we have a result, or are allowed null then we're done
                    if (result !== undefined) {
                        if (cancel()) {
                            resolve(result);
                        }
                    }
                    else if (options.oncePoll) {
                        options.oncePoll.once("poll", check);
                    }
                    else if (options.onceBlock) {
                        options.onceBlock.once("block", check);
                        // Otherwise, exponential back-off (up to 10s) our next request
                    }
                    else if (!done) {
                        attempt++;
                        if (attempt > retryLimit) {
                            if (cancel()) {
                                reject(new Error("retry limit reached"));
                            }
                            return;
                        }
                        var timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                        if (timeout < options.floor) {
                            timeout = options.floor;
                        }
                        if (timeout > options.ceiling) {
                            timeout = options.ceiling;
                        }
                        setTimeout(check, timeout);
                    }
                    return null;
                }, function (error) {
                    if (cancel()) {
                        reject(error);
                    }
                });
            }
            check();
        });
    }
    exports.poll = poll;
    
    },{"./_version":107,"./geturl":108,"@ethersproject/base64":24,"@ethersproject/bytes":31,"@ethersproject/logger":56,"@ethersproject/properties":62,"@ethersproject/strings":99}],110:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "wordlists/5.5.0";
    
    },{}],111:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wordlists = exports.Wordlist = exports.logger = void 0;
    // Wordlists
    // See: https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md
    var wordlist_1 = require("./wordlist");
    Object.defineProperty(exports, "logger", { enumerable: true, get: function () { return wordlist_1.logger; } });
    Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function () { return wordlist_1.Wordlist; } });
    var wordlists_1 = require("./wordlists");
    Object.defineProperty(exports, "wordlists", { enumerable: true, get: function () { return wordlists_1.wordlists; } });
    
    },{"./wordlist":120,"./wordlists":121}],112:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.langCz = void 0;
    var wordlist_1 = require("./wordlist");
    var words = "AbdikaceAbecedaAdresaAgreseAkceAktovkaAlejAlkoholAmputaceAnanasAndulkaAnekdotaAnketaAntikaAnulovatArchaAroganceAsfaltAsistentAspiraceAstmaAstronomAtlasAtletikaAtolAutobusAzylBabkaBachorBacilBaculkaBadatelBagetaBagrBahnoBakterieBaladaBaletkaBalkonBalonekBalvanBalzaBambusBankomatBarbarBaretBarmanBarokoBarvaBaterkaBatohBavlnaBazalkaBazilikaBazukaBednaBeranBesedaBestieBetonBezinkaBezmocBeztakBicyklBidloBiftekBikinyBilanceBiografBiologBitvaBizonBlahobytBlatouchBlechaBleduleBleskBlikatBliznaBlokovatBlouditBludBobekBobrBodlinaBodnoutBohatostBojkotBojovatBokorysBolestBorecBoroviceBotaBoubelBouchatBoudaBouleBouratBoxerBradavkaBramboraBrankaBratrBreptaBriketaBrkoBrlohBronzBroskevBrunetkaBrusinkaBrzdaBrzyBublinaBubnovatBuchtaBuditelBudkaBudovaBufetBujarostBukviceBuldokBulvaBundaBunkrBurzaButikBuvolBuzolaBydletBylinaBytovkaBzukotCapartCarevnaCedrCeduleCejchCejnCelaCelerCelkemCelniceCeninaCennostCenovkaCentrumCenzorCestopisCetkaChalupaChapadloCharitaChataChechtatChemieChichotChirurgChladChlebaChlubitChmelChmuraChobotChocholChodbaCholeraChomoutChopitChorobaChovChrapotChrlitChrtChrupChtivostChudinaChutnatChvatChvilkaChvostChybaChystatChytitCibuleCigaretaCihelnaCihlaCinkotCirkusCisternaCitaceCitrusCizinecCizostClonaCokolivCouvatCtitelCtnostCudnostCuketaCukrCupotCvaknoutCvalCvikCvrkotCyklistaDalekoDarebaDatelDatumDceraDebataDechovkaDecibelDeficitDeflaceDeklDekretDemokratDepreseDerbyDeskaDetektivDikobrazDiktovatDiodaDiplomDiskDisplejDivadloDivochDlahaDlouhoDluhopisDnesDobroDobytekDocentDochutitDodnesDohledDohodaDohraDojemDojniceDokladDokolaDoktorDokumentDolarDolevaDolinaDomaDominantDomluvitDomovDonutitDopadDopisDoplnitDoposudDoprovodDopustitDorazitDorostDortDosahDoslovDostatekDosudDosytaDotazDotekDotknoutDoufatDoutnatDovozceDozaduDoznatDozorceDrahotaDrakDramatikDravecDrazeDrdolDrobnostDrogerieDrozdDrsnostDrtitDrzostDubenDuchovnoDudekDuhaDuhovkaDusitDusnoDutostDvojiceDvorecDynamitEkologEkonomieElektronElipsaEmailEmiseEmoceEmpatieEpizodaEpochaEpopejEposEsejEsenceEskortaEskymoEtiketaEuforieEvoluceExekuceExkurzeExpediceExplozeExportExtraktFackaFajfkaFakultaFanatikFantazieFarmacieFavoritFazoleFederaceFejetonFenkaFialkaFigurantFilozofFiltrFinanceFintaFixaceFjordFlanelFlirtFlotilaFondFosforFotbalFotkaFotonFrakceFreskaFrontaFukarFunkceFyzikaGalejeGarantGenetikaGeologGilotinaGlazuraGlejtGolemGolfistaGotikaGrafGramofonGranuleGrepGrilGrogGroteskaGumaHadiceHadrHalaHalenkaHanbaHanopisHarfaHarpunaHavranHebkostHejkalHejnoHejtmanHektarHelmaHematomHerecHernaHesloHezkyHistorikHladovkaHlasivkyHlavaHledatHlenHlodavecHlohHloupostHltatHlubinaHluchotaHmatHmotaHmyzHnisHnojivoHnoutHoblinaHobojHochHodinyHodlatHodnotaHodovatHojnostHokejHolinkaHolkaHolubHomoleHonitbaHonoraceHoralHordaHorizontHorkoHorlivecHormonHorninaHoroskopHorstvoHospodaHostinaHotovostHoubaHoufHoupatHouskaHovorHradbaHraniceHravostHrazdaHrbolekHrdinaHrdloHrdostHrnekHrobkaHromadaHrotHroudaHrozenHrstkaHrubostHryzatHubenostHubnoutHudbaHukotHumrHusitaHustotaHvozdHybnostHydrantHygienaHymnaHysterikIdylkaIhnedIkonaIluzeImunitaInfekceInflaceInkasoInovaceInspekceInternetInvalidaInvestorInzerceIronieJablkoJachtaJahodaJakmileJakostJalovecJantarJarmarkJaroJasanJasnoJatkaJavorJazykJedinecJedleJednatelJehlanJekotJelenJelitoJemnostJenomJepiceJeseterJevitJezdecJezeroJinakJindyJinochJiskraJistotaJitrniceJizvaJmenovatJogurtJurtaKabaretKabelKabinetKachnaKadetKadidloKahanKajakKajutaKakaoKaktusKalamitaKalhotyKalibrKalnostKameraKamkolivKamnaKanibalKanoeKantorKapalinaKapelaKapitolaKapkaKapleKapotaKaprKapustaKapybaraKaramelKarotkaKartonKasaKatalogKatedraKauceKauzaKavalecKazajkaKazetaKazivostKdekolivKdesiKedlubenKempKeramikaKinoKlacekKladivoKlamKlapotKlasikaKlaunKlecKlenbaKlepatKlesnoutKlidKlimaKlisnaKloboukKlokanKlopaKloubKlubovnaKlusatKluzkostKmenKmitatKmotrKnihaKnotKoaliceKoberecKobkaKoblihaKobylaKocourKohoutKojenecKokosKoktejlKolapsKoledaKolizeKoloKomandoKometaKomikKomnataKomoraKompasKomunitaKonatKonceptKondiceKonecKonfeseKongresKoninaKonkursKontaktKonzervaKopanecKopieKopnoutKoprovkaKorbelKorektorKormidloKoroptevKorpusKorunaKorytoKorzetKosatecKostkaKotelKotletaKotoulKoukatKoupelnaKousekKouzloKovbojKozaKozorohKrabiceKrachKrajinaKralovatKrasopisKravataKreditKrejcarKresbaKrevetaKriketKritikKrizeKrkavecKrmelecKrmivoKrocanKrokKronikaKropitKroupaKrovkaKrtekKruhadloKrupiceKrutostKrvinkaKrychleKryptaKrystalKrytKudlankaKufrKujnostKuklaKulajdaKulichKulkaKulometKulturaKunaKupodivuKurtKurzorKutilKvalitaKvasinkaKvestorKynologKyselinaKytaraKyticeKytkaKytovecKyvadloLabradorLachtanLadnostLaikLakomecLamelaLampaLanovkaLasiceLasoLasturaLatinkaLavinaLebkaLeckdyLedenLedniceLedovkaLedvinaLegendaLegieLegraceLehceLehkostLehnoutLektvarLenochodLentilkaLepenkaLepidloLetadloLetecLetmoLetokruhLevhartLevitaceLevobokLibraLichotkaLidojedLidskostLihovinaLijavecLilekLimetkaLinieLinkaLinoleumListopadLitinaLitovatLobistaLodivodLogikaLogopedLokalitaLoketLomcovatLopataLopuchLordLososLotrLoudalLouhLoukaLouskatLovecLstivostLucernaLuciferLumpLuskLustraceLviceLyraLyrikaLysinaMadamMadloMagistrMahagonMajetekMajitelMajoritaMakakMakoviceMakrelaMalbaMalinaMalovatMalviceMaminkaMandleMankoMarnostMasakrMaskotMasopustMaticeMatrikaMaturitaMazanecMazivoMazlitMazurkaMdlobaMechanikMeditaceMedovinaMelasaMelounMentolkaMetlaMetodaMetrMezeraMigraceMihnoutMihuleMikinaMikrofonMilenecMilimetrMilostMimikaMincovnaMinibarMinometMinulostMiskaMistrMixovatMladostMlhaMlhovinaMlokMlsatMluvitMnichMnohemMobilMocnostModelkaModlitbaMohylaMokroMolekulaMomentkaMonarchaMonoklMonstrumMontovatMonzunMosazMoskytMostMotivaceMotorkaMotykaMouchaMoudrostMozaikaMozekMozolMramorMravenecMrkevMrtvolaMrzetMrzutostMstitelMudrcMuflonMulatMumieMuniceMusetMutaceMuzeumMuzikantMyslivecMzdaNabouratNachytatNadaceNadbytekNadhozNadobroNadpisNahlasNahnatNahodileNahraditNaivitaNajednouNajistoNajmoutNaklonitNakonecNakrmitNalevoNamazatNamluvitNanometrNaokoNaopakNaostroNapadatNapevnoNaplnitNapnoutNaposledNaprostoNaroditNarubyNarychloNasaditNasekatNaslepoNastatNatolikNavenekNavrchNavzdoryNazvatNebeNechatNeckyNedalekoNedbatNeduhNegaceNehetNehodaNejenNejprveNeklidNelibostNemilostNemocNeochotaNeonkaNepokojNerostNervNesmyslNesouladNetvorNeuronNevinaNezvykleNicotaNijakNikamNikdyNiklNikterakNitroNoclehNohaviceNominaceNoraNorekNositelNosnostNouzeNovinyNovotaNozdraNudaNudleNugetNutitNutnostNutrieNymfaObalObarvitObavaObdivObecObehnatObejmoutObezitaObhajobaObilniceObjasnitObjektObklopitOblastOblekOblibaOblohaObludaObnosObohatitObojekOboutObrazecObrnaObrubaObrysObsahObsluhaObstaratObuvObvazObvinitObvodObvykleObyvatelObzorOcasOcelOcenitOchladitOchotaOchranaOcitnoutOdbojOdbytOdchodOdcizitOdebratOdeslatOdevzdatOdezvaOdhadceOdhoditOdjetOdjinudOdkazOdkoupitOdlivOdlukaOdmlkaOdolnostOdpadOdpisOdploutOdporOdpustitOdpykatOdrazkaOdsouditOdstupOdsunOdtokOdtudOdvahaOdvetaOdvolatOdvracetOdznakOfinaOfsajdOhlasOhniskoOhradaOhrozitOhryzekOkapOkeniceOklikaOknoOkouzlitOkovyOkrasaOkresOkrsekOkruhOkupantOkurkaOkusitOlejninaOlizovatOmakOmeletaOmezitOmladinaOmlouvatOmluvaOmylOnehdyOpakovatOpasekOperaceOpiceOpilostOpisovatOporaOpoziceOpravduOprotiOrbitalOrchestrOrgieOrliceOrlojOrtelOsadaOschnoutOsikaOsivoOslavaOslepitOslnitOslovitOsnovaOsobaOsolitOspalecOstenOstrahaOstudaOstychOsvojitOteplitOtiskOtopOtrhatOtrlostOtrokOtrubyOtvorOvanoutOvarOvesOvlivnitOvoceOxidOzdobaPachatelPacientPadouchPahorekPaktPalandaPalecPalivoPalubaPamfletPamlsekPanenkaPanikaPannaPanovatPanstvoPantoflePaprikaParketaParodiePartaParukaParybaPasekaPasivitaPastelkaPatentPatronaPavoukPaznehtPazourekPeckaPedagogPejsekPekloPelotonPenaltaPendrekPenzePeriskopPeroPestrostPetardaPeticePetrolejPevninaPexesoPianistaPihaPijavicePiklePiknikPilinaPilnostPilulkaPinzetaPipetaPisatelPistolePitevnaPivnicePivovarPlacentaPlakatPlamenPlanetaPlastikaPlatitPlavidloPlazPlechPlemenoPlentaPlesPletivoPlevelPlivatPlnitPlnoPlochaPlodinaPlombaPloutPlukPlynPobavitPobytPochodPocitPoctivecPodatPodcenitPodepsatPodhledPodivitPodkladPodmanitPodnikPodobaPodporaPodrazPodstataPodvodPodzimPoeziePohankaPohnutkaPohovorPohromaPohybPointaPojistkaPojmoutPokazitPoklesPokojPokrokPokutaPokynPolednePolibekPolknoutPolohaPolynomPomaluPominoutPomlkaPomocPomstaPomysletPonechatPonorkaPonurostPopadatPopelPopisekPoplachPoprositPopsatPopudPoradcePorcePorodPoruchaPoryvPosaditPosedPosilaPoskokPoslanecPosouditPospoluPostavaPosudekPosypPotahPotkanPotleskPotomekPotravaPotupaPotvoraPoukazPoutoPouzdroPovahaPovidlaPovlakPovozPovrchPovstatPovykPovzdechPozdravPozemekPoznatekPozorPozvatPracovatPrahoryPraktikaPralesPraotecPraporekPrasePravdaPrincipPrknoProbuditProcentoProdejProfeseProhraProjektProlomitPromilePronikatPropadProrokProsbaProtonProutekProvazPrskavkaPrstenPrudkostPrutPrvekPrvohoryPsanecPsovodPstruhPtactvoPubertaPuchPudlPukavecPuklinaPukrlePultPumpaPuncPupenPusaPusinkaPustinaPutovatPutykaPyramidaPyskPytelRacekRachotRadiaceRadniceRadonRaftRagbyRaketaRakovinaRamenoRampouchRandeRarachRaritaRasovnaRastrRatolestRazanceRazidloReagovatReakceReceptRedaktorReferentReflexRejnokReklamaRekordRekrutRektorReputaceRevizeRevmaRevolverRezervaRiskovatRizikoRobotikaRodokmenRohovkaRokleRokokoRomanetoRopovodRopuchaRorejsRosolRostlinaRotmistrRotopedRotundaRoubenkaRouchoRoupRouraRovinaRovniceRozborRozchodRozdatRozeznatRozhodceRozinkaRozjezdRozkazRozlohaRozmarRozpadRozruchRozsahRoztokRozumRozvodRubrikaRuchadloRukaviceRukopisRybaRybolovRychlostRydloRypadloRytinaRyzostSadistaSahatSakoSamecSamizdatSamotaSanitkaSardinkaSasankaSatelitSazbaSazeniceSborSchovatSebrankaSeceseSedadloSedimentSedloSehnatSejmoutSekeraSektaSekundaSekvojeSemenoSenoServisSesaditSeshoraSeskokSeslatSestraSesuvSesypatSetbaSetinaSetkatSetnoutSetrvatSeverSeznamShodaShrnoutSifonSilniceSirkaSirotekSirupSituaceSkafandrSkaliskoSkanzenSkautSkeptikSkicaSkladbaSkleniceSkloSkluzSkobaSkokanSkoroSkriptaSkrzSkupinaSkvostSkvrnaSlabikaSladidloSlaninaSlastSlavnostSledovatSlepecSlevaSlezinaSlibSlinaSlizniceSlonSloupekSlovoSluchSluhaSlunceSlupkaSlzaSmaragdSmetanaSmilstvoSmlouvaSmogSmradSmrkSmrtkaSmutekSmyslSnadSnahaSnobSobotaSochaSodovkaSokolSopkaSotvaSoubojSoucitSoudceSouhlasSouladSoumrakSoupravaSousedSoutokSouvisetSpalovnaSpasitelSpisSplavSpodekSpojenecSpoluSponzorSpornostSpoustaSprchaSpustitSrandaSrazSrdceSrnaSrnecSrovnatSrpenSrstSrubStaniceStarostaStatikaStavbaStehnoStezkaStodolaStolekStopaStornoStoupatStrachStresStrhnoutStromStrunaStudnaStupniceStvolStykSubjektSubtropySucharSudostSuknoSundatSunoutSurikataSurovinaSvahSvalstvoSvetrSvatbaSvazekSvisleSvitekSvobodaSvodidloSvorkaSvrabSykavkaSykotSynekSynovecSypatSypkostSyrovostSyselSytostTabletkaTabuleTahounTajemnoTajfunTajgaTajitTajnostTaktikaTamhleTamponTancovatTanecTankerTapetaTaveninaTazatelTechnikaTehdyTekutinaTelefonTemnotaTendenceTenistaTenorTeplotaTepnaTeprveTerapieTermoskaTextilTichoTiskopisTitulekTkadlecTkaninaTlapkaTleskatTlukotTlupaTmelToaletaTopinkaTopolTorzoTouhaToulecTradiceTraktorTrampTrasaTraverzaTrefitTrestTrezorTrhavinaTrhlinaTrochuTrojiceTroskaTroubaTrpceTrpitelTrpkostTrubecTruchlitTruhliceTrusTrvatTudyTuhnoutTuhostTundraTuristaTurnajTuzemskoTvarohTvorbaTvrdostTvrzTygrTykevUbohostUbozeUbratUbrousekUbrusUbytovnaUchoUctivostUdivitUhraditUjednatUjistitUjmoutUkazatelUklidnitUklonitUkotvitUkrojitUliceUlitaUlovitUmyvadloUnavitUniformaUniknoutUpadnoutUplatnitUplynoutUpoutatUpravitUranUrazitUsednoutUsilovatUsmrtitUsnadnitUsnoutUsouditUstlatUstrnoutUtahovatUtkatUtlumitUtonoutUtopenecUtrousitUvalitUvolnitUvozovkaUzdravitUzelUzeninaUzlinaUznatVagonValchaValounVanaVandalVanilkaVaranVarhanyVarovatVcelkuVchodVdovaVedroVegetaceVejceVelbloudVeletrhVelitelVelmocVelrybaVenkovVerandaVerzeVeselkaVeskrzeVesniceVespoduVestaVeterinaVeverkaVibraceVichrVideohraVidinaVidleVilaViniceVisetVitalitaVizeVizitkaVjezdVkladVkusVlajkaVlakVlasecVlevoVlhkostVlivVlnovkaVloupatVnucovatVnukVodaVodivostVodoznakVodstvoVojenskyVojnaVojskoVolantVolbaVolitVolnoVoskovkaVozidloVozovnaVpravoVrabecVracetVrahVrataVrbaVrcholekVrhatVrstvaVrtuleVsaditVstoupitVstupVtipVybavitVybratVychovatVydatVydraVyfotitVyhledatVyhnoutVyhoditVyhraditVyhubitVyjasnitVyjetVyjmoutVyklopitVykonatVylekatVymazatVymezitVymizetVymysletVynechatVynikatVynutitVypadatVyplatitVypravitVypustitVyrazitVyrovnatVyrvatVyslovitVysokoVystavitVysunoutVysypatVytasitVytesatVytratitVyvinoutVyvolatVyvrhelVyzdobitVyznatVzaduVzbuditVzchopitVzdorVzduchVzdychatVzestupVzhledemVzkazVzlykatVznikVzorekVzpouraVztahVztekXylofonZabratZabydletZachovatZadarmoZadusitZafoukatZahltitZahoditZahradaZahynoutZajatecZajetZajistitZaklepatZakoupitZalepitZamezitZamotatZamysletZanechatZanikatZaplatitZapojitZapsatZarazitZastavitZasunoutZatajitZatemnitZatknoutZaujmoutZavalitZaveletZavinitZavolatZavrtatZazvonitZbavitZbrusuZbudovatZbytekZdalekaZdarmaZdatnostZdivoZdobitZdrojZdvihZdymadloZeleninaZemanZeminaZeptatZezaduZezdolaZhatitZhltnoutZhlubokaZhotovitZhrubaZimaZimniceZjemnitZklamatZkoumatZkratkaZkumavkaZlatoZlehkaZlobaZlomZlostZlozvykZmapovatZmarZmatekZmijeZmizetZmocnitZmodratZmrzlinaZmutovatZnakZnalostZnamenatZnovuZobrazitZotavitZoubekZoufaleZploditZpomalitZpravaZprostitZprudkaZprvuZradaZranitZrcadloZrnitostZrnoZrovnaZrychlitZrzavostZtichaZtratitZubovinaZubrZvednoutZvenkuZveselaZvonZvratZvukovodZvyk";
    var wordlist = null;
    function loadWords(lang) {
        if (wordlist != null) {
            return;
        }
        wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
        // Verify the computed list matches the official list
        /* istanbul ignore if */
        if (wordlist_1.Wordlist.check(lang) !== "0x25f44555f4af25b51a711136e1c7d6e50ce9f8917d39d6b1f076b2bb4d2fac1a") {
            wordlist = null;
            throw new Error("BIP39 Wordlist for en (English) FAILED");
        }
    }
    var LangCz = /** @class */ (function (_super) {
        __extends(LangCz, _super);
        function LangCz() {
            return _super.call(this, "cz") || this;
        }
        LangCz.prototype.getWord = function (index) {
            loadWords(this);
            return wordlist[index];
        };
        LangCz.prototype.getWordIndex = function (word) {
            loadWords(this);
            return wordlist.indexOf(word);
        };
        return LangCz;
    }(wordlist_1.Wordlist));
    var langCz = new LangCz();
    exports.langCz = langCz;
    wordlist_1.Wordlist.register(langCz);
    
    },{"./wordlist":120}],113:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.langEn = void 0;
    var wordlist_1 = require("./wordlist");
    var words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
    var wordlist = null;
    function loadWords(lang) {
        if (wordlist != null) {
            return;
        }
        wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
        // Verify the computed list matches the official list
        /* istanbul ignore if */
        if (wordlist_1.Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
            wordlist = null;
            throw new Error("BIP39 Wordlist for en (English) FAILED");
        }
    }
    var LangEn = /** @class */ (function (_super) {
        __extends(LangEn, _super);
        function LangEn() {
            return _super.call(this, "en") || this;
        }
        LangEn.prototype.getWord = function (index) {
            loadWords(this);
            return wordlist[index];
        };
        LangEn.prototype.getWordIndex = function (word) {
            loadWords(this);
            return wordlist.indexOf(word);
        };
        return LangEn;
    }(wordlist_1.Wordlist));
    var langEn = new LangEn();
    exports.langEn = langEn;
    wordlist_1.Wordlist.register(langEn);
    
    },{"./wordlist":120}],114:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.langEs = void 0;
    var strings_1 = require("@ethersproject/strings");
    var wordlist_1 = require("./wordlist");
    var words = "A/bacoAbdomenAbejaAbiertoAbogadoAbonoAbortoAbrazoAbrirAbueloAbusoAcabarAcademiaAccesoAccio/nAceiteAcelgaAcentoAceptarA/cidoAclararAcne/AcogerAcosoActivoActoActrizActuarAcudirAcuerdoAcusarAdictoAdmitirAdoptarAdornoAduanaAdultoAe/reoAfectarAficio/nAfinarAfirmarA/gilAgitarAgoni/aAgostoAgotarAgregarAgrioAguaAgudoA/guilaAgujaAhogoAhorroAireAislarAjedrezAjenoAjusteAlacra/nAlambreAlarmaAlbaA/lbumAlcaldeAldeaAlegreAlejarAlertaAletaAlfilerAlgaAlgodo/nAliadoAlientoAlivioAlmaAlmejaAlmi/barAltarAltezaAltivoAltoAlturaAlumnoAlzarAmableAmanteAmapolaAmargoAmasarA/mbarA/mbitoAmenoAmigoAmistadAmorAmparoAmplioAnchoAncianoAnclaAndarAnde/nAnemiaA/nguloAnilloA/nimoAni/sAnotarAntenaAntiguoAntojoAnualAnularAnuncioA~adirA~ejoA~oApagarAparatoApetitoApioAplicarApodoAporteApoyoAprenderAprobarApuestaApuroAradoAra~aArarA/rbitroA/rbolArbustoArchivoArcoArderArdillaArduoA/reaA/ridoAriesArmoni/aArne/sAromaArpaArpo/nArregloArrozArrugaArteArtistaAsaAsadoAsaltoAscensoAsegurarAseoAsesorAsientoAsiloAsistirAsnoAsombroA/speroAstillaAstroAstutoAsumirAsuntoAtajoAtaqueAtarAtentoAteoA/ticoAtletaA/tomoAtraerAtrozAtu/nAudazAudioAugeAulaAumentoAusenteAutorAvalAvanceAvaroAveAvellanaAvenaAvestruzAvio/nAvisoAyerAyudaAyunoAzafra/nAzarAzoteAzu/carAzufreAzulBabaBaborBacheBahi/aBaileBajarBalanzaBalco/nBaldeBambu/BancoBandaBa~oBarbaBarcoBarnizBarroBa/sculaBasto/nBasuraBatallaBateri/aBatirBatutaBau/lBazarBebe/BebidaBelloBesarBesoBestiaBichoBienBingoBlancoBloqueBlusaBoaBobinaBoboBocaBocinaBodaBodegaBoinaBolaBoleroBolsaBombaBondadBonitoBonoBonsa/iBordeBorrarBosqueBoteBoti/nBo/vedaBozalBravoBrazoBrechaBreveBrilloBrincoBrisaBrocaBromaBronceBroteBrujaBruscoBrutoBuceoBucleBuenoBueyBufandaBufo/nBu/hoBuitreBultoBurbujaBurlaBurroBuscarButacaBuzo/nCaballoCabezaCabinaCabraCacaoCada/verCadenaCaerCafe/Cai/daCaima/nCajaCajo/nCalCalamarCalcioCaldoCalidadCalleCalmaCalorCalvoCamaCambioCamelloCaminoCampoCa/ncerCandilCanelaCanguroCanicaCantoCa~aCa~o/nCaobaCaosCapazCapita/nCapoteCaptarCapuchaCaraCarbo/nCa/rcelCaretaCargaCari~oCarneCarpetaCarroCartaCasaCascoCaseroCaspaCastorCatorceCatreCaudalCausaCazoCebollaCederCedroCeldaCe/lebreCelosoCe/lulaCementoCenizaCentroCercaCerdoCerezaCeroCerrarCertezaCe/spedCetroChacalChalecoChampu/ChanclaChapaCharlaChicoChisteChivoChoqueChozaChuletaChuparCiclo/nCiegoCieloCienCiertoCifraCigarroCimaCincoCineCintaCipre/sCircoCiruelaCisneCitaCiudadClamorClanClaroClaseClaveClienteClimaCli/nicaCobreCoccio/nCochinoCocinaCocoCo/digoCodoCofreCogerCoheteCoji/nCojoColaColchaColegioColgarColinaCollarColmoColumnaCombateComerComidaCo/modoCompraCondeConejoCongaConocerConsejoContarCopaCopiaCorazo/nCorbataCorchoCordo/nCoronaCorrerCoserCosmosCostaCra/neoCra/terCrearCrecerCrei/doCremaCri/aCrimenCriptaCrisisCromoCro/nicaCroquetaCrudoCruzCuadroCuartoCuatroCuboCubrirCucharaCuelloCuentoCuerdaCuestaCuevaCuidarCulebraCulpaCultoCumbreCumplirCunaCunetaCuotaCupo/nCu/pulaCurarCuriosoCursoCurvaCutisDamaDanzaDarDardoDa/tilDeberDe/bilDe/cadaDecirDedoDefensaDefinirDejarDelfi/nDelgadoDelitoDemoraDensoDentalDeporteDerechoDerrotaDesayunoDeseoDesfileDesnudoDestinoDesvi/oDetalleDetenerDeudaDi/aDiabloDiademaDiamanteDianaDiarioDibujoDictarDienteDietaDiezDifi/cilDignoDilemaDiluirDineroDirectoDirigirDiscoDise~oDisfrazDivaDivinoDobleDoceDolorDomingoDonDonarDoradoDormirDorsoDosDosisDrago/nDrogaDuchaDudaDueloDue~oDulceDu/oDuqueDurarDurezaDuroE/banoEbrioEcharEcoEcuadorEdadEdicio/nEdificioEditorEducarEfectoEficazEjeEjemploElefanteElegirElementoElevarElipseE/liteElixirElogioEludirEmbudoEmitirEmocio/nEmpateEmpe~oEmpleoEmpresaEnanoEncargoEnchufeEnci/aEnemigoEneroEnfadoEnfermoEnga~oEnigmaEnlaceEnormeEnredoEnsayoEnse~arEnteroEntrarEnvaseEnvi/oE/pocaEquipoErizoEscalaEscenaEscolarEscribirEscudoEsenciaEsferaEsfuerzoEspadaEspejoEspi/aEsposaEspumaEsqui/EstarEsteEstiloEstufaEtapaEternoE/ticaEtniaEvadirEvaluarEventoEvitarExactoExamenExcesoExcusaExentoExigirExilioExistirE/xitoExpertoExplicarExponerExtremoFa/bricaFa/bulaFachadaFa/cilFactorFaenaFajaFaldaFalloFalsoFaltarFamaFamiliaFamosoFarao/nFarmaciaFarolFarsaFaseFatigaFaunaFavorFaxFebreroFechaFelizFeoFeriaFerozFe/rtilFervorFesti/nFiableFianzaFiarFibraFiccio/nFichaFideoFiebreFielFieraFiestaFiguraFijarFijoFilaFileteFilialFiltroFinFincaFingirFinitoFirmaFlacoFlautaFlechaFlorFlotaFluirFlujoFlu/orFobiaFocaFogataFogo/nFolioFolletoFondoFormaForroFortunaForzarFosaFotoFracasoFra/gilFranjaFraseFraudeFrei/rFrenoFresaFri/oFritoFrutaFuegoFuenteFuerzaFugaFumarFuncio/nFundaFurgo/nFuriaFusilFu/tbolFuturoGacelaGafasGaitaGajoGalaGaleri/aGalloGambaGanarGanchoGangaGansoGarajeGarzaGasolinaGastarGatoGavila/nGemeloGemirGenGe/neroGenioGenteGeranioGerenteGermenGestoGiganteGimnasioGirarGiroGlaciarGloboGloriaGolGolfoGolosoGolpeGomaGordoGorilaGorraGotaGoteoGozarGradaGra/ficoGranoGrasaGratisGraveGrietaGrilloGripeGrisGritoGrosorGru/aGruesoGrumoGrupoGuanteGuapoGuardiaGuerraGui/aGui~oGuionGuisoGuitarraGusanoGustarHaberHa/bilHablarHacerHachaHadaHallarHamacaHarinaHazHaza~aHebillaHebraHechoHeladoHelioHembraHerirHermanoHe/roeHervirHieloHierroHi/gadoHigieneHijoHimnoHistoriaHocicoHogarHogueraHojaHombreHongoHonorHonraHoraHormigaHornoHostilHoyoHuecoHuelgaHuertaHuesoHuevoHuidaHuirHumanoHu/medoHumildeHumoHundirHuraca/nHurtoIconoIdealIdiomaI/doloIglesiaIglu/IgualIlegalIlusio/nImagenIma/nImitarImparImperioImponerImpulsoIncapazI/ndiceInerteInfielInformeIngenioInicioInmensoInmuneInnatoInsectoInstanteIntere/sI/ntimoIntuirInu/tilInviernoIraIrisIroni/aIslaIsloteJabali/Jabo/nJamo/nJarabeJardi/nJarraJaulaJazmi/nJefeJeringaJineteJornadaJorobaJovenJoyaJuergaJuevesJuezJugadorJugoJugueteJuicioJuncoJunglaJunioJuntarJu/piterJurarJustoJuvenilJuzgarKiloKoalaLabioLacioLacraLadoLadro/nLagartoLa/grimaLagunaLaicoLamerLa/minaLa/mparaLanaLanchaLangostaLanzaLa/pizLargoLarvaLa/stimaLataLa/texLatirLaurelLavarLazoLealLeccio/nLecheLectorLeerLegio/nLegumbreLejanoLenguaLentoLe~aLeo/nLeopardoLesio/nLetalLetraLeveLeyendaLibertadLibroLicorLi/derLidiarLienzoLigaLigeroLimaLi/miteLimo/nLimpioLinceLindoLi/neaLingoteLinoLinternaLi/quidoLisoListaLiteraLitioLitroLlagaLlamaLlantoLlaveLlegarLlenarLlevarLlorarLloverLluviaLoboLocio/nLocoLocuraLo/gicaLogroLombrizLomoLonjaLoteLuchaLucirLugarLujoLunaLunesLupaLustroLutoLuzMacetaMachoMaderaMadreMaduroMaestroMafiaMagiaMagoMai/zMaldadMaletaMallaMaloMama/MamboMamutMancoMandoManejarMangaManiqui/ManjarManoMansoMantaMa~anaMapaMa/quinaMarMarcoMareaMarfilMargenMaridoMa/rmolMarro/nMartesMarzoMasaMa/scaraMasivoMatarMateriaMatizMatrizMa/ximoMayorMazorcaMechaMedallaMedioMe/dulaMejillaMejorMelenaMelo/nMemoriaMenorMensajeMenteMenu/MercadoMerengueMe/ritoMesMeso/nMetaMeterMe/todoMetroMezclaMiedoMielMiembroMigaMilMilagroMilitarMillo/nMimoMinaMineroMi/nimoMinutoMiopeMirarMisaMiseriaMisilMismoMitadMitoMochilaMocio/nModaModeloMohoMojarMoldeMolerMolinoMomentoMomiaMonarcaMonedaMonjaMontoMo~oMoradaMorderMorenoMorirMorroMorsaMortalMoscaMostrarMotivoMoverMo/vilMozoMuchoMudarMuebleMuelaMuerteMuestraMugreMujerMulaMuletaMultaMundoMu~ecaMuralMuroMu/sculoMuseoMusgoMu/sicaMusloNa/carNacio/nNadarNaipeNaranjaNarizNarrarNasalNatalNativoNaturalNa/useaNavalNaveNavidadNecioNe/ctarNegarNegocioNegroNeo/nNervioNetoNeutroNevarNeveraNichoNidoNieblaNietoNi~ezNi~oNi/tidoNivelNoblezaNocheNo/minaNoriaNormaNorteNotaNoticiaNovatoNovelaNovioNubeNucaNu/cleoNudilloNudoNueraNueveNuezNuloNu/meroNutriaOasisObesoObispoObjetoObraObreroObservarObtenerObvioOcaOcasoOce/anoOchentaOchoOcioOcreOctavoOctubreOcultoOcuparOcurrirOdiarOdioOdiseaOesteOfensaOfertaOficioOfrecerOgroOi/doOi/rOjoOlaOleadaOlfatoOlivoOllaOlmoOlorOlvidoOmbligoOndaOnzaOpacoOpcio/nO/peraOpinarOponerOptarO/pticaOpuestoOracio/nOradorOralO/rbitaOrcaOrdenOrejaO/rganoOrgi/aOrgulloOrienteOrigenOrillaOroOrquestaOrugaOsadi/aOscuroOseznoOsoOstraOto~oOtroOvejaO/vuloO/xidoOxi/genoOyenteOzonoPactoPadrePaellaPa/ginaPagoPai/sPa/jaroPalabraPalcoPaletaPa/lidoPalmaPalomaPalparPanPanalPa/nicoPanteraPa~ueloPapa/PapelPapillaPaquetePararParcelaParedParirParoPa/rpadoParquePa/rrafoPartePasarPaseoPasio/nPasoPastaPataPatioPatriaPausaPautaPavoPayasoPeato/nPecadoPeceraPechoPedalPedirPegarPeinePelarPelda~oPeleaPeligroPellejoPeloPelucaPenaPensarPe~o/nPeo/nPeorPepinoPeque~oPeraPerchaPerderPerezaPerfilPericoPerlaPermisoPerroPersonaPesaPescaPe/simoPesta~aPe/taloPetro/leoPezPezu~aPicarPicho/nPiePiedraPiernaPiezaPijamaPilarPilotoPimientaPinoPintorPinzaPi~aPiojoPipaPirataPisarPiscinaPisoPistaPito/nPizcaPlacaPlanPlataPlayaPlazaPleitoPlenoPlomoPlumaPluralPobrePocoPoderPodioPoemaPoesi/aPoetaPolenPolici/aPolloPolvoPomadaPomeloPomoPompaPonerPorcio/nPortalPosadaPoseerPosiblePostePotenciaPotroPozoPradoPrecozPreguntaPremioPrensaPresoPrevioPrimoPri/ncipePrisio/nPrivarProaProbarProcesoProductoProezaProfesorProgramaProlePromesaProntoPropioPro/ximoPruebaPu/blicoPucheroPudorPuebloPuertaPuestoPulgaPulirPulmo/nPulpoPulsoPumaPuntoPu~alPu~oPupaPupilaPure/QuedarQuejaQuemarQuererQuesoQuietoQui/micaQuinceQuitarRa/banoRabiaRaboRacio/nRadicalRai/zRamaRampaRanchoRangoRapazRa/pidoRaptoRasgoRaspaRatoRayoRazaRazo/nReaccio/nRealidadReba~oReboteRecaerRecetaRechazoRecogerRecreoRectoRecursoRedRedondoReducirReflejoReformaRefra/nRefugioRegaloRegirReglaRegresoRehe/nReinoRei/rRejaRelatoRelevoRelieveRellenoRelojRemarRemedioRemoRencorRendirRentaRepartoRepetirReposoReptilResRescateResinaRespetoRestoResumenRetiroRetornoRetratoReunirReve/sRevistaReyRezarRicoRiegoRiendaRiesgoRifaRi/gidoRigorRinco/nRi~o/nRi/oRiquezaRisaRitmoRitoRizoRobleRoceRociarRodarRodeoRodillaRoerRojizoRojoRomeroRomperRonRoncoRondaRopaRoperoRosaRoscaRostroRotarRubi/RuborRudoRuedaRugirRuidoRuinaRuletaRuloRumboRumorRupturaRutaRutinaSa/badoSaberSabioSableSacarSagazSagradoSalaSaldoSaleroSalirSalmo/nSalo/nSalsaSaltoSaludSalvarSambaSancio/nSandi/aSanearSangreSanidadSanoSantoSapoSaqueSardinaSarte/nSastreSata/nSaunaSaxofo/nSeccio/nSecoSecretoSectaSedSeguirSeisSelloSelvaSemanaSemillaSendaSensorSe~alSe~orSepararSepiaSequi/aSerSerieSermo/nServirSesentaSesio/nSetaSetentaSeveroSexoSextoSidraSiestaSieteSigloSignoSi/labaSilbarSilencioSillaSi/mboloSimioSirenaSistemaSitioSituarSobreSocioSodioSolSolapaSoldadoSoledadSo/lidoSoltarSolucio/nSombraSondeoSonidoSonoroSonrisaSopaSoplarSoporteSordoSorpresaSorteoSoste/nSo/tanoSuaveSubirSucesoSudorSuegraSueloSue~oSuerteSufrirSujetoSulta/nSumarSuperarSuplirSuponerSupremoSurSurcoSure~oSurgirSustoSutilTabacoTabiqueTablaTabu/TacoTactoTajoTalarTalcoTalentoTallaTalo/nTama~oTamborTangoTanqueTapaTapeteTapiaTapo/nTaquillaTardeTareaTarifaTarjetaTarotTarroTartaTatuajeTauroTazaTazo/nTeatroTechoTeclaTe/cnicaTejadoTejerTejidoTelaTele/fonoTemaTemorTemploTenazTenderTenerTenisTensoTeori/aTerapiaTercoTe/rminoTernuraTerrorTesisTesoroTestigoTeteraTextoTezTibioTiburo/nTiempoTiendaTierraTiesoTigreTijeraTildeTimbreTi/midoTimoTintaTi/oTi/picoTipoTiraTiro/nTita/nTi/tereTi/tuloTizaToallaTobilloTocarTocinoTodoTogaToldoTomarTonoTontoToparTopeToqueTo/raxToreroTormentaTorneoToroTorpedoTorreTorsoTortugaTosToscoToserTo/xicoTrabajoTractorTraerTra/ficoTragoTrajeTramoTranceTratoTraumaTrazarTre/bolTreguaTreintaTrenTreparTresTribuTrigoTripaTristeTriunfoTrofeoTrompaTroncoTropaTroteTrozoTrucoTruenoTrufaTuberi/aTuboTuertoTumbaTumorTu/nelTu/nicaTurbinaTurismoTurnoTutorUbicarU/lceraUmbralUnidadUnirUniversoUnoUntarU~aUrbanoUrbeUrgenteUrnaUsarUsuarioU/tilUtopi/aUvaVacaVaci/oVacunaVagarVagoVainaVajillaValeVa/lidoValleValorVa/lvulaVampiroVaraVariarVaro/nVasoVecinoVectorVehi/culoVeinteVejezVelaVeleroVelozVenaVencerVendaVenenoVengarVenirVentaVenusVerVeranoVerboVerdeVeredaVerjaVersoVerterVi/aViajeVibrarVicioVi/ctimaVidaVi/deoVidrioViejoViernesVigorVilVillaVinagreVinoVi~edoVioli/nViralVirgoVirtudVisorVi/speraVistaVitaminaViudoVivazViveroVivirVivoVolca/nVolumenVolverVorazVotarVotoVozVueloVulgarYacerYateYeguaYemaYernoYesoYodoYogaYogurZafiroZanjaZapatoZarzaZonaZorroZumoZurdo";
    var lookup = {};
    var wordlist = null;
    function dropDiacritic(word) {
        wordlist_1.logger.checkNormalize();
        return (0, strings_1.toUtf8String)(Array.prototype.filter.call((0, strings_1.toUtf8Bytes)(word.normalize("NFD").toLowerCase()), function (c) {
            return ((c >= 65 && c <= 90) || (c >= 97 && c <= 123));
        }));
    }
    function expand(word) {
        var output = [];
        Array.prototype.forEach.call((0, strings_1.toUtf8Bytes)(word), function (c) {
            // Acute accent
            if (c === 47) {
                output.push(204);
                output.push(129);
                // n-tilde
            }
            else if (c === 126) {
                output.push(110);
                output.push(204);
                output.push(131);
            }
            else {
                output.push(c);
            }
        });
        return (0, strings_1.toUtf8String)(output);
    }
    function loadWords(lang) {
        if (wordlist != null) {
            return;
        }
        wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ").map(function (w) { return expand(w); });
        wordlist.forEach(function (word, index) {
            lookup[dropDiacritic(word)] = index;
        });
        // Verify the computed list matches the official list
        /* istanbul ignore if */
        if (wordlist_1.Wordlist.check(lang) !== "0xf74fb7092aeacdfbf8959557de22098da512207fb9f109cb526994938cf40300") {
            wordlist = null;
            throw new Error("BIP39 Wordlist for es (Spanish) FAILED");
        }
    }
    var LangEs = /** @class */ (function (_super) {
        __extends(LangEs, _super);
        function LangEs() {
            return _super.call(this, "es") || this;
        }
        LangEs.prototype.getWord = function (index) {
            loadWords(this);
            return wordlist[index];
        };
        LangEs.prototype.getWordIndex = function (word) {
            loadWords(this);
            return lookup[dropDiacritic(word)];
        };
        return LangEs;
    }(wordlist_1.Wordlist));
    var langEs = new LangEs();
    exports.langEs = langEs;
    wordlist_1.Wordlist.register(langEs);
    
    },{"./wordlist":120,"@ethersproject/strings":99}],115:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.langFr = void 0;
    var strings_1 = require("@ethersproject/strings");
    var wordlist_1 = require("./wordlist");
    var words = "";
    var wordlist = null;
    var lookup = {};
    function dropDiacritic(word) {
        wordlist_1.logger.checkNormalize();
        return (0, strings_1.toUtf8String)(Array.prototype.filter.call((0, strings_1.toUtf8Bytes)(word.normalize("NFD").toLowerCase()), function (c) {
            return ((c >= 65 && c <= 90) || (c >= 97 && c <= 123));
        }));
    }
    function expand(word) {
        var output = [];
        Array.prototype.forEach.call((0, strings_1.toUtf8Bytes)(word), function (c) {
            // Acute accent
            if (c === 47) {
                output.push(204);
                output.push(129);
                // Grave accent
            }
            else if (c === 45) {
                output.push(204);
                output.push(128);
            }
            else {
                output.push(c);
            }
        });
        return (0, strings_1.toUtf8String)(output);
    }
    function loadWords(lang) {
        if (wordlist != null) {
            return;
        }
        wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ").map(function (w) { return expand(w); });
        wordlist.forEach(function (word, index) {
            lookup[dropDiacritic(word)] = index;
        });
        // Verify the computed list matches the official list
        /* istanbul ignore if */
        if (wordlist_1.Wordlist.check(lang) !== "0x51deb7ae009149dc61a6bd18a918eb7ac78d2775726c68e598b92d002519b045") {
            wordlist = null;
            throw new Error("BIP39 Wordlist for fr (French) FAILED");
        }
    }
    var LangFr = /** @class */ (function (_super) {
        __extends(LangFr, _super);
        function LangFr() {
            return _super.call(this, "fr") || this;
        }
        LangFr.prototype.getWord = function (index) {
            loadWords(this);
            return wordlist[index];
        };
        LangFr.prototype.getWordIndex = function (word) {
            loadWords(this);
            return lookup[dropDiacritic(word)];
        };
        return LangFr;
    }(wordlist_1.Wordlist));
    var langFr = new LangFr();
    exports.langFr = langFr;
    wordlist_1.Wordlist.register(langFr);
    
    },{"./wordlist":120,"@ethersproject/strings":99}],116:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.langIt = void 0;
    var wordlist_1 = require("./wordlist");
    var words = "AbacoAbbaglioAbbinatoAbeteAbissoAbolireAbrasivoAbrogatoAccadereAccennoAccusatoAcetoneAchilleAcidoAcquaAcreAcrilicoAcrobataAcutoAdagioAddebitoAddomeAdeguatoAderireAdipeAdottareAdulareAffabileAffettoAffissoAffrantoAforismaAfosoAfricanoAgaveAgenteAgevoleAggancioAgireAgitareAgonismoAgricoloAgrumetoAguzzoAlabardaAlatoAlbatroAlberatoAlboAlbumeAlceAlcolicoAlettoneAlfaAlgebraAlianteAlibiAlimentoAllagatoAllegroAllievoAllodolaAllusivoAlmenoAlogenoAlpacaAlpestreAltalenaAlternoAlticcioAltroveAlunnoAlveoloAlzareAmalgamaAmanitaAmarenaAmbitoAmbratoAmebaAmericaAmetistaAmicoAmmassoAmmendaAmmirareAmmonitoAmoreAmpioAmpliareAmuletoAnacardoAnagrafeAnalistaAnarchiaAnatraAncaAncellaAncoraAndareAndreaAnelloAngeloAngolareAngustoAnimaAnnegareAnnidatoAnnoAnnuncioAnonimoAnticipoAnziApaticoAperturaApodeApparireAppetitoAppoggioApprodoAppuntoAprileArabicaArachideAragostaAraldicaArancioAraturaArazzoArbitroArchivioArditoArenileArgentoArgineArgutoAriaArmoniaArneseArredatoArringaArrostoArsenicoArsoArteficeArzilloAsciuttoAscoltoAsepsiAsetticoAsfaltoAsinoAsolaAspiratoAsproAssaggioAsseAssolutoAssurdoAstaAstenutoAsticeAstrattoAtavicoAteismoAtomicoAtonoAttesaAttivareAttornoAttritoAttualeAusilioAustriaAutistaAutonomoAutunnoAvanzatoAvereAvvenireAvvisoAvvolgereAzioneAzotoAzzimoAzzurroBabeleBaccanoBacinoBacoBadessaBadilataBagnatoBaitaBalconeBaldoBalenaBallataBalzanoBambinoBandireBaraondaBarbaroBarcaBaritonoBarlumeBaroccoBasilicoBassoBatostaBattutoBauleBavaBavosaBeccoBeffaBelgioBelvaBendaBenevoleBenignoBenzinaBereBerlinaBetaBibitaBiciBidoneBifidoBigaBilanciaBimboBinocoloBiologoBipedeBipolareBirbanteBirraBiscottoBisestoBisnonnoBisonteBisturiBizzarroBlandoBlattaBollitoBonificoBordoBoscoBotanicoBottinoBozzoloBraccioBradipoBramaBrancaBravuraBretellaBrevettoBrezzaBrigliaBrillanteBrindareBroccoloBrodoBronzinaBrulloBrunoBubboneBucaBudinoBuffoneBuioBulboBuonoBurloneBurrascaBussolaBustaCadettoCaducoCalamaroCalcoloCalesseCalibroCalmoCaloriaCambusaCamerataCamiciaCamminoCamolaCampaleCanapaCandelaCaneCaninoCanottoCantinaCapaceCapelloCapitoloCapogiroCapperoCapraCapsulaCarapaceCarcassaCardoCarismaCarovanaCarrettoCartolinaCasaccioCascataCasermaCasoCassoneCastelloCasualeCatastaCatenaCatrameCautoCavilloCedibileCedrataCefaloCelebreCellulareCenaCenoneCentesimoCeramicaCercareCertoCerumeCervelloCesoiaCespoCetoChelaChiaroChiccaChiedereChimeraChinaChirurgoChitarraCiaoCiclismoCifrareCignoCilindroCiottoloCircaCirrosiCitricoCittadinoCiuffoCivettaCivileClassicoClinicaCloroCoccoCodardoCodiceCoerenteCognomeCollareColmatoColoreColposoColtivatoColzaComaCometaCommandoComodoComputerComuneConcisoCondurreConfermaCongelareConiugeConnessoConoscereConsumoContinuoConvegnoCopertoCopioneCoppiaCopricapoCorazzaCordataCoricatoCorniceCorollaCorpoCorredoCorsiaCorteseCosmicoCostanteCotturaCovatoCratereCravattaCreatoCredereCremosoCrescitaCretaCricetoCrinaleCrisiCriticoCroceCronacaCrostataCrucialeCruscaCucireCuculoCuginoCullatoCupolaCuratoreCursoreCurvoCuscinoCustodeDadoDainoDalmataDamerinoDanielaDannosoDanzareDatatoDavantiDavveroDebuttoDecennioDecisoDeclinoDecolloDecretoDedicatoDefinitoDeformeDegnoDelegareDelfinoDelirioDeltaDemenzaDenotatoDentroDepositoDerapataDerivareDerogaDescrittoDesertoDesiderioDesumereDetersivoDevotoDiametroDicembreDiedroDifesoDiffusoDigerireDigitaleDiluvioDinamicoDinnanziDipintoDiplomaDipoloDiradareDireDirottoDirupoDisagioDiscretoDisfareDisgeloDispostoDistanzaDisumanoDitoDivanoDiveltoDividereDivoratoDobloneDocenteDoganaleDogmaDolceDomatoDomenicaDominareDondoloDonoDormireDoteDottoreDovutoDozzinaDragoDruidoDubbioDubitareDucaleDunaDuomoDupliceDuraturoEbanoEccessoEccoEclissiEconomiaEderaEdicolaEdileEditoriaEducareEgemoniaEgliEgoismoEgregioElaboratoElargireEleganteElencatoElettoElevareElficoElicaElmoElsaElusoEmanatoEmblemaEmessoEmiroEmotivoEmozioneEmpiricoEmuloEndemicoEnduroEnergiaEnfasiEnotecaEntrareEnzimaEpatiteEpilogoEpisodioEpocaleEppureEquatoreErarioErbaErbosoEredeEremitaErigereErmeticoEroeErosivoErranteEsagonoEsameEsanimeEsaudireEscaEsempioEsercitoEsibitoEsigenteEsistereEsitoEsofagoEsortatoEsosoEspansoEspressoEssenzaEssoEstesoEstimareEstoniaEstrosoEsultareEtilicoEtnicoEtruscoEttoEuclideoEuropaEvasoEvidenzaEvitatoEvolutoEvvivaFabbricaFaccendaFachiroFalcoFamigliaFanaleFanfaraFangoFantasmaFareFarfallaFarinosoFarmacoFasciaFastosoFasulloFaticareFatoFavolosoFebbreFecolaFedeFegatoFelpaFeltroFemminaFendereFenomenoFermentoFerroFertileFessuraFestivoFettaFeudoFiabaFiduciaFifaFiguratoFiloFinanzaFinestraFinireFioreFiscaleFisicoFiumeFlaconeFlamencoFleboFlemmaFloridoFluenteFluoroFobicoFocacciaFocosoFoderatoFoglioFolataFolcloreFolgoreFondenteFoneticoFoniaFontanaForbitoForchettaForestaFormicaFornaioForoFortezzaForzareFosfatoFossoFracassoFranaFrassinoFratelloFreccettaFrenataFrescoFrigoFrollinoFrondeFrugaleFruttaFucilataFucsiaFuggenteFulmineFulvoFumanteFumettoFumosoFuneFunzioneFuocoFurboFurgoneFuroreFusoFutileGabbianoGaffeGalateoGallinaGaloppoGamberoGammaGaranziaGarboGarofanoGarzoneGasdottoGasolioGastricoGattoGaudioGazeboGazzellaGecoGelatinaGelsoGemelloGemmatoGeneGenitoreGennaioGenotipoGergoGhepardoGhiaccioGhisaGialloGildaGineproGiocareGioielloGiornoGioveGiratoGironeGittataGiudizioGiuratoGiustoGlobuloGlutineGnomoGobbaGolfGomitoGommoneGonfioGonnaGovernoGracileGradoGraficoGrammoGrandeGrattareGravosoGraziaGrecaGreggeGrifoneGrigioGrinzaGrottaGruppoGuadagnoGuaioGuantoGuardareGufoGuidareIbernatoIconaIdenticoIdillioIdoloIdraIdricoIdrogenoIgieneIgnaroIgnoratoIlareIllesoIllogicoIlludereImballoImbevutoImboccoImbutoImmaneImmersoImmolatoImpaccoImpetoImpiegoImportoImprontaInalareInarcareInattivoIncantoIncendioInchinoIncisivoInclusoIncontroIncrocioIncuboIndagineIndiaIndoleIneditoInfattiInfilareInflittoIngaggioIngegnoIngleseIngordoIngrossoInnescoInodoreInoltrareInondatoInsanoInsettoInsiemeInsonniaInsulinaIntasatoInteroIntonacoIntuitoInumidireInvalidoInveceInvitoIperboleIpnoticoIpotesiIppicaIrideIrlandaIronicoIrrigatoIrrorareIsolatoIsotopoIstericoIstitutoIstriceItaliaIterareLabbroLabirintoLaccaLaceratoLacrimaLacunaLaddoveLagoLampoLancettaLanternaLardosoLargaLaringeLastraLatenzaLatinoLattugaLavagnaLavoroLegaleLeggeroLemboLentezzaLenzaLeoneLepreLesivoLessatoLestoLetteraleLevaLevigatoLiberoLidoLievitoLillaLimaturaLimitareLimpidoLineareLinguaLiquidoLiraLiricaLiscaLiteLitigioLivreaLocandaLodeLogicaLombareLondraLongevoLoquaceLorenzoLotoLotteriaLuceLucidatoLumacaLuminosoLungoLupoLuppoloLusingaLussoLuttoMacabroMacchinaMaceroMacinatoMadamaMagicoMagliaMagneteMagroMaiolicaMalafedeMalgradoMalintesoMalsanoMaltoMalumoreManaManciaMandorlaMangiareManifestoMannaroManovraMansardaMantideManubrioMappaMaratonaMarcireMarettaMarmoMarsupioMascheraMassaiaMastinoMaterassoMatricolaMattoneMaturoMazurcaMeandroMeccanicoMecenateMedesimoMeditareMegaMelassaMelisMelodiaMeningeMenoMensolaMercurioMerendaMerloMeschinoMeseMessereMestoloMetalloMetodoMettereMiagolareMicaMicelioMicheleMicroboMidolloMieleMiglioreMilanoMiliteMimosaMineraleMiniMinoreMirinoMirtilloMiscelaMissivaMistoMisurareMitezzaMitigareMitraMittenteMnemonicoModelloModificaModuloMoganoMogioMoleMolossoMonasteroMoncoMondinaMonetarioMonileMonotonoMonsoneMontatoMonvisoMoraMordereMorsicatoMostroMotivatoMotosegaMottoMovenzaMovimentoMozzoMuccaMucosaMuffaMughettoMugnaioMulattoMulinelloMultiploMummiaMuntoMuovereMuraleMusaMuscoloMusicaMutevoleMutoNababboNaftaNanometroNarcisoNariceNarratoNascereNastrareNaturaleNauticaNaviglioNebulosaNecrosiNegativoNegozioNemmenoNeofitaNerettoNervoNessunoNettunoNeutraleNeveNevroticoNicchiaNinfaNitidoNobileNocivoNodoNomeNominaNordicoNormaleNorvegeseNostranoNotareNotiziaNotturnoNovellaNucleoNullaNumeroNuovoNutrireNuvolaNuzialeOasiObbedireObbligoObeliscoOblioOboloObsoletoOccasioneOcchioOccidenteOccorrereOccultareOcraOculatoOdiernoOdorareOffertaOffrireOffuscatoOggettoOggiOgnunoOlandeseOlfattoOliatoOlivaOlogrammaOltreOmaggioOmbelicoOmbraOmegaOmissioneOndosoOnereOniceOnnivoroOnorevoleOntaOperatoOpinioneOppostoOracoloOrafoOrdineOrecchinoOreficeOrfanoOrganicoOrigineOrizzonteOrmaOrmeggioOrnativoOrologioOrrendoOrribileOrtensiaOrticaOrzataOrzoOsareOscurareOsmosiOspedaleOspiteOssaOssidareOstacoloOsteOtiteOtreOttagonoOttimoOttobreOvaleOvestOvinoOviparoOvocitoOvunqueOvviareOzioPacchettoPacePacificoPadellaPadronePaesePagaPaginaPalazzinaPalesarePallidoPaloPaludePandoroPannelloPaoloPaonazzoPapricaParabolaParcellaParerePargoloPariParlatoParolaPartireParvenzaParzialePassivoPasticcaPataccaPatologiaPattumePavonePeccatoPedalarePedonalePeggioPelosoPenarePendicePenisolaPennutoPenombraPensarePentolaPepePepitaPerbenePercorsoPerdonatoPerforarePergamenaPeriodoPermessoPernoPerplessoPersuasoPertugioPervasoPesatorePesistaPesoPestiferoPetaloPettinePetulantePezzoPiacerePiantaPiattinoPiccinoPicozzaPiegaPietraPifferoPigiamaPigolioPigroPilaPiliferoPillolaPilotaPimpantePinetaPinnaPinoloPioggiaPiomboPiramidePireticoPiritePirolisiPitonePizzicoPlaceboPlanarePlasmaPlatanoPlenarioPochezzaPoderosoPodismoPoesiaPoggiarePolentaPoligonoPollicePolmonitePolpettaPolsoPoltronaPolverePomicePomodoroPontePopolosoPorfidoPorosoPorporaPorrePortataPosaPositivoPossessoPostulatoPotassioPoterePranzoPrassiPraticaPreclusoPredicaPrefissoPregiatoPrelievoPremerePrenotarePreparatoPresenzaPretestoPrevalsoPrimaPrincipePrivatoProblemaProcuraProdurreProfumoProgettoProlungaPromessaPronomePropostaProrogaProtesoProvaPrudentePrugnaPruritoPsichePubblicoPudicaPugilatoPugnoPulcePulitoPulsantePuntarePupazzoPupillaPuroQuadroQualcosaQuasiQuerelaQuotaRaccoltoRaddoppioRadicaleRadunatoRafficaRagazzoRagioneRagnoRamarroRamingoRamoRandagioRantolareRapatoRapinaRappresoRasaturaRaschiatoRasenteRassegnaRastrelloRataRavvedutoRealeRecepireRecintoReclutaReconditoRecuperoRedditoRedimereRegalatoRegistroRegolaRegressoRelazioneRemareRemotoRennaReplicaReprimereReputareResaResidenteResponsoRestauroReteRetinaRetoricaRettificaRevocatoRiassuntoRibadireRibelleRibrezzoRicaricaRiccoRicevereRiciclatoRicordoRicredutoRidicoloRidurreRifasareRiflessoRiformaRifugioRigareRigettatoRighelloRilassatoRilevatoRimanereRimbalzoRimedioRimorchioRinascitaRincaroRinforzoRinnovoRinomatoRinsavitoRintoccoRinunciaRinvenireRiparatoRipetutoRipienoRiportareRipresaRipulireRisataRischioRiservaRisibileRisoRispettoRistoroRisultatoRisvoltoRitardoRitegnoRitmicoRitrovoRiunioneRivaRiversoRivincitaRivoltoRizomaRobaRoboticoRobustoRocciaRocoRodaggioRodereRoditoreRogitoRollioRomanticoRompereRonzioRosolareRospoRotanteRotondoRotulaRovescioRubizzoRubricaRugaRullinoRumineRumorosoRuoloRupeRussareRusticoSabatoSabbiareSabotatoSagomaSalassoSaldaturaSalgemmaSalivareSalmoneSaloneSaltareSalutoSalvoSapereSapidoSaporitoSaracenoSarcasmoSartoSassosoSatelliteSatiraSatolloSaturnoSavanaSavioSaziatoSbadiglioSbalzoSbancatoSbarraSbattereSbavareSbendareSbirciareSbloccatoSbocciatoSbrinareSbruffoneSbuffareScabrosoScadenzaScalaScambiareScandaloScapolaScarsoScatenareScavatoSceltoScenicoScettroSchedaSchienaSciarpaScienzaScindereScippoSciroppoScivoloSclerareScodellaScolpitoScompartoSconfortoScoprireScortaScossoneScozzeseScribaScrollareScrutinioScuderiaScultoreScuolaScuroScusareSdebitareSdoganareSeccaturaSecondoSedanoSeggiolaSegnalatoSegregatoSeguitoSelciatoSelettivoSellaSelvaggioSemaforoSembrareSemeSeminatoSempreSensoSentireSepoltoSequenzaSerataSerbatoSerenoSerioSerpenteSerraglioServireSestinaSetolaSettimanaSfaceloSfaldareSfamatoSfarzosoSfaticatoSferaSfidaSfilatoSfingeSfocatoSfoderareSfogoSfoltireSforzatoSfrattoSfruttatoSfuggitoSfumareSfusoSgabelloSgarbatoSgonfiareSgorbioSgrassatoSguardoSibiloSiccomeSierraSiglaSignoreSilenzioSillabaSimboloSimpaticoSimulatoSinfoniaSingoloSinistroSinoSintesiSinusoideSiparioSismaSistoleSituatoSlittaSlogaturaSlovenoSmarritoSmemoratoSmentitoSmeraldoSmilzoSmontareSmottatoSmussatoSnellireSnervatoSnodoSobbalzoSobrioSoccorsoSocialeSodaleSoffittoSognoSoldatoSolenneSolidoSollazzoSoloSolubileSolventeSomaticoSommaSondaSonettoSonniferoSopireSoppesoSopraSorgereSorpassoSorrisoSorsoSorteggioSorvolatoSospiroSostaSottileSpadaSpallaSpargereSpatolaSpaventoSpazzolaSpecieSpedireSpegnereSpelaturaSperanzaSpessoreSpettraleSpezzatoSpiaSpigolosoSpillatoSpinosoSpiraleSplendidoSportivoSposoSprangaSprecareSpronatoSpruzzoSpuntinoSquilloSradicareSrotolatoStabileStaccoStaffaStagnareStampatoStantioStarnutoStaseraStatutoSteloSteppaSterzoStilettoStimaStirpeStivaleStizzosoStonatoStoricoStrappoStregatoStriduloStrozzareStruttoStuccareStufoStupendoSubentroSuccosoSudoreSuggeritoSugoSultanoSuonareSuperboSupportoSurgelatoSurrogatoSussurroSuturaSvagareSvedeseSveglioSvelareSvenutoSveziaSviluppoSvistaSvizzeraSvoltaSvuotareTabaccoTabulatoTacciareTaciturnoTaleTalismanoTamponeTanninoTaraTardivoTargatoTariffaTarpareTartarugaTastoTatticoTavernaTavolataTazzaTecaTecnicoTelefonoTemerarioTempoTemutoTendoneTeneroTensioneTentacoloTeoremaTermeTerrazzoTerzettoTesiTesseratoTestatoTetroTettoiaTifareTigellaTimbroTintoTipicoTipografoTiraggioTiroTitanioTitoloTitubanteTizioTizzoneToccareTollerareToltoTombolaTomoTonfoTonsillaTopazioTopologiaToppaTorbaTornareTorroneTortoraToscanoTossireTostaturaTotanoTraboccoTracheaTrafilaTragediaTralcioTramontoTransitoTrapanoTrarreTraslocoTrattatoTraveTrecciaTremolioTrespoloTributoTrichecoTrifoglioTrilloTrinceaTrioTristezzaTrituratoTrivellaTrombaTronoTroppoTrottolaTrovareTruccatoTubaturaTuffatoTulipanoTumultoTunisiaTurbareTurchinoTutaTutelaUbicatoUccelloUccisoreUdireUditivoUffaUfficioUgualeUlisseUltimatoUmanoUmileUmorismoUncinettoUngereUnghereseUnicornoUnificatoUnisonoUnitarioUnteUovoUpupaUraganoUrgenzaUrloUsanzaUsatoUscitoUsignoloUsuraioUtensileUtilizzoUtopiaVacanteVaccinatoVagabondoVagliatoValangaValgoValicoVallettaValorosoValutareValvolaVampataVangareVanitosoVanoVantaggioVanveraVaporeVaranoVarcatoVarianteVascaVedettaVedovaVedutoVegetaleVeicoloVelcroVelinaVellutoVeloceVenatoVendemmiaVentoVeraceVerbaleVergognaVerificaVeroVerrucaVerticaleVescicaVessilloVestaleVeteranoVetrinaVetustoViandanteVibranteVicendaVichingoVicinanzaVidimareVigiliaVignetoVigoreVileVillanoViminiVincitoreViolaViperaVirgolaVirologoVirulentoViscosoVisioneVispoVissutoVisuraVitaVitelloVittimaVivandaVividoViziareVoceVogaVolatileVolereVolpeVoragineVulcanoZampognaZannaZappatoZatteraZavorraZefiroZelanteZeloZenzeroZerbinoZibettoZincoZirconeZittoZollaZoticoZuccheroZufoloZuluZuppa";
    var wordlist = null;
    function loadWords(lang) {
        if (wordlist != null) {
            return;
        }
        wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
        // Verify the computed list matches the official list
        /* istanbul ignore if */
        if (wordlist_1.Wordlist.check(lang) !== "0x5c1362d88fd4cf614a96f3234941d29f7d37c08c5292fde03bf62c2db6ff7620") {
            wordlist = null;
            throw new Error("BIP39 Wordlist for it (Italian) FAILED");
        }
    }
    var LangIt = /** @class */ (function (_super) {
        __extends(LangIt, _super);
        function LangIt() {
            return _super.call(this, "it") || this;
        }
        LangIt.prototype.getWord = function (index) {
            loadWords(this);
            return wordlist[index];
        };
        LangIt.prototype.getWordIndex = function (word) {
            loadWords(this);
            return wordlist.indexOf(word);
        };
        return LangIt;
    }(wordlist_1.Wordlist));
    var langIt = new LangIt();
    exports.langIt = langIt;
    wordlist_1.Wordlist.register(langIt);
    
    },{"./wordlist":120}],117:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.langJa = void 0;
    var bytes_1 = require("@ethersproject/bytes");
    var strings_1 = require("@ethersproject/strings");
    var wordlist_1 = require("./wordlist");
    var data = [
        // 4-kana words
        "AQRASRAGBAGUAIRAHBAghAURAdBAdcAnoAMEAFBAFCBKFBQRBSFBCXBCDBCHBGFBEQBpBBpQBIkBHNBeOBgFBVCBhBBhNBmOBmRBiHBiFBUFBZDBvFBsXBkFBlcBjYBwDBMBBTBBTRBWBBWXXaQXaRXQWXSRXCFXYBXpHXOQXHRXhRXuRXmXXbRXlXXwDXTRXrCXWQXWGaBWaKcaYgasFadQalmaMBacAKaRKKBKKXKKjKQRKDRKCYKCRKIDKeVKHcKlXKjHKrYNAHNBWNaRNKcNIBNIONmXNsXNdXNnBNMBNRBNrXNWDNWMNFOQABQAHQBrQXBQXFQaRQKXQKDQKOQKFQNBQNDQQgQCXQCDQGBQGDQGdQYXQpBQpQQpHQLXQHuQgBQhBQhCQuFQmXQiDQUFQZDQsFQdRQkHQbRQlOQlmQPDQjDQwXQMBQMDQcFQTBQTHQrDDXQDNFDGBDGQDGRDpFDhFDmXDZXDbRDMYDRdDTRDrXSAhSBCSBrSGQSEQSHBSVRShYShkSyQSuFSiBSdcSoESocSlmSMBSFBSFKSFNSFdSFcCByCaRCKcCSBCSRCCrCGbCEHCYXCpBCpQCIBCIHCeNCgBCgFCVECVcCmkCmwCZXCZFCdRClOClmClFCjDCjdCnXCwBCwXCcRCFQCFjGXhGNhGDEGDMGCDGCHGIFGgBGVXGVEGVRGmXGsXGdYGoSGbRGnXGwXGwDGWRGFNGFLGFOGFdGFkEABEBDEBFEXOEaBEKSENBENDEYXEIgEIkEgBEgQEgHEhFEudEuFEiBEiHEiFEZDEvBEsXEsFEdXEdREkFEbBEbRElFEPCEfkEFNYAEYAhYBNYQdYDXYSRYCEYYoYgQYgRYuRYmCYZTYdBYbEYlXYjQYRbYWRpKXpQopQnpSFpCXpIBpISphNpdBpdRpbRpcZpFBpFNpFDpFopFrLADLBuLXQLXcLaFLCXLEhLpBLpFLHXLeVLhILdHLdRLoDLbRLrXIABIBQIBCIBsIBoIBMIBRIXaIaRIKYIKRINBINuICDIGBIIDIIkIgRIxFIyQIiHIdRIbYIbRIlHIwRIMYIcRIRVITRIFBIFNIFQOABOAFOBQOaFONBONMOQFOSFOCDOGBOEQOpBOLXOIBOIFOgQOgFOyQOycOmXOsXOdIOkHOMEOMkOWWHBNHXNHXWHNXHDuHDRHSuHSRHHoHhkHmRHdRHkQHlcHlRHwBHWcgAEgAggAkgBNgBQgBEgXOgYcgLXgHjgyQgiBgsFgdagMYgWSgFQgFEVBTVXEVKBVKNVKDVKYVKRVNBVNYVDBVDxVSBVSRVCjVGNVLXVIFVhBVhcVsXVdRVbRVlRhBYhKYhDYhGShxWhmNhdahdkhbRhjohMXhTRxAXxXSxKBxNBxEQxeNxeQxhXxsFxdbxlHxjcxFBxFNxFQxFOxFoyNYyYoybcyMYuBQuBRuBruDMuCouHBudQukkuoBulVuMXuFEmCYmCRmpRmeDmiMmjdmTFmFQiADiBOiaRiKRiNBiNRiSFiGkiGFiERipRiLFiIFihYibHijBijEiMXiWBiFBiFCUBQUXFUaRUNDUNcUNRUNFUDBUSHUCDUGBUGFUEqULNULoUIRUeEUeYUgBUhFUuRUiFUsXUdFUkHUbBUjSUjYUwXUMDUcHURdUTBUrBUrXUrQZAFZXZZaRZKFZNBZQFZCXZGBZYdZpBZLDZIFZHXZHNZeQZVRZVFZmXZiBZvFZdFZkFZbHZbFZwXZcCZcRZRBvBQvBGvBLvBWvCovMYsAFsBDsaRsKFsNFsDrsSHsSFsCXsCRsEBsEHsEfspBsLBsLDsIgsIRseGsbRsFBsFQsFSdNBdSRdCVdGHdYDdHcdVbdySduDdsXdlRdwXdWYdWcdWRkBMkXOkaRkNIkNFkSFkCFkYBkpRkeNkgBkhVkmXksFklVkMBkWDkFNoBNoaQoaFoNBoNXoNaoNEoSRoEroYXoYCoYbopRopFomXojkowXorFbBEbEIbdBbjYlaRlDElMXlFDjKjjSRjGBjYBjYkjpRjLXjIBjOFjeVjbRjwBnXQnSHnpFnLXnINnMBnTRwXBwXNwXYwNFwQFwSBwGFwLXwLDweNwgBwuHwjDwnXMBXMpFMIBMeNMTHcaQcNBcDHcSFcCXcpBcLXcLDcgFcuFcnXcwXccDcTQcrFTQErXNrCHrpFrgFrbFrTHrFcWNYWNbWEHWMXWTR",
        // 5-kana words
        "ABGHABIJAEAVAYJQALZJAIaRAHNXAHdcAHbRAZJMAZJRAZTRAdVJAklmAbcNAjdRAMnRAMWYAWpRAWgRAFgBAFhBAFdcBNJBBNJDBQKBBQhcBQlmBDEJBYJkBYJTBpNBBpJFBIJBBIJDBIcABOKXBOEJBOVJBOiJBOZJBepBBeLXBeIFBegBBgGJBVJXBuocBiJRBUJQBlXVBlITBwNFBMYVBcqXBTlmBWNFBWiJBWnRBFGHBFwXXKGJXNJBXNZJXDTTXSHSXSVRXSlHXCJDXGQJXEhXXYQJXYbRXOfXXeNcXVJFXhQJXhEJXdTRXjdXXMhBXcQTXRGBXTEBXTnQXFCXXFOFXFgFaBaFaBNJaBCJaBpBaBwXaNJKaNJDaQIBaDpRaEPDaHMFamDJalEJaMZJaFaFaFNBaFQJaFLDaFVHKBCYKBEBKBHDKXaFKXGdKXEJKXpHKXIBKXZDKXwXKKwLKNacKNYJKNJoKNWcKDGdKDTRKChXKGaRKGhBKGbRKEBTKEaRKEPTKLMDKLWRKOHDKVJcKdBcKlIBKlOPKFSBKFEPKFpFNBNJNJBQNBGHNBEPNBHXNBgFNBVXNBZDNBsXNBwXNNaRNNJDNNJENNJkNDCJNDVDNGJRNJiDNZJNNsCJNJFNNFSBNFCXNFEPNFLXNFIFQJBFQCaRQJEQQLJDQLJFQIaRQOqXQHaFQHHQQVJXQVJDQhNJQmEIQZJFQsJXQJrFQWbRDJABDBYJDXNFDXCXDXLXDXZDDXsJDQqXDSJFDJCXDEPkDEqXDYmQDpSJDOCkDOGQDHEIDVJDDuDuDWEBDJFgSBNDSBSFSBGHSBIBSBTQSKVYSJQNSJQiSJCXSEqXSJYVSIiJSOMYSHAHSHaQSeCFSepQSegBSHdHSHrFShSJSJuHSJUFSkNRSrSrSWEBSFaHSJFQSFCXSFGDSFYXSFODSFgBSFVXSFhBSFxFSFkFSFbBSFMFCADdCJXBCXaFCXKFCXNFCXCXCXGBCXEJCXYBCXLDCXIBCXOPCXHXCXgBCXhBCXiBCXlDCXcHCJNBCJNFCDCJCDGBCDVXCDhBCDiDCDJdCCmNCpJFCIaRCOqXCHCHCHZJCViJCuCuCmddCJiFCdNBCdHhClEJCnUJCreSCWlgCWTRCFBFCFNBCFYBCFVFCFhFCFdSCFTBCFWDGBNBGBQFGJBCGBEqGBpBGBgQGNBEGNJYGNkOGNJRGDUFGJpQGHaBGJeNGJeEGVBlGVKjGiJDGvJHGsVJGkEBGMIJGWjNGFBFGFCXGFGBGFYXGFpBGFMFEASJEAWpEJNFECJVEIXSEIQJEOqXEOcFEeNcEHEJEHlFEJgFEhlmEmDJEmZJEiMBEUqXEoSREPBFEPXFEPKFEPSFEPEFEPpFEPLXEPIBEJPdEPcFEPTBEJnXEqlHEMpREFCXEFODEFcFYASJYJAFYBaBYBVXYXpFYDhBYCJBYJGFYYbRYeNcYJeVYiIJYZJcYvJgYvJRYJsXYsJFYMYMYreVpBNHpBEJpBwXpQxFpYEJpeNDpJeDpeSFpeCHpHUJpHbBpHcHpmUJpiiJpUJrpsJuplITpFaBpFQqpFGBpFEfpFYBpFpBpFLJpFIDpFgBpFVXpFyQpFuFpFlFpFjDpFnXpFwXpJFMpFTBLXCJLXEFLXhFLXUJLXbFLalmLNJBLSJQLCLCLGJBLLDJLHaFLeNFLeSHLeCXLepFLhaRLZsJLsJDLsJrLocaLlLlLMdbLFNBLFSBLFEHLFkFIBBFIBXFIBaQIBKXIBSFIBpHIBLXIBgBIBhBIBuHIBmXIBiFIBZXIBvFIBbFIBjQIBwXIBWFIKTRIQUJIDGFICjQIYSRIINXIJeCIVaRImEkIZJFIvJRIsJXIdCJIJoRIbBQIjYBIcqXITFVIreVIFKFIFSFIFCJIFGFIFLDIFIBIJFOIFgBIFVXIJFhIFxFIFmXIFdHIFbBIJFrIJFWOBGBOQfXOOKjOUqXOfXBOqXEOcqXORVJOFIBOFlDHBIOHXiFHNTRHCJXHIaRHHJDHHEJHVbRHZJYHbIBHRsJHRkDHWlmgBKFgBSBgBCDgBGHgBpBgBIBgBVJgBuBgBvFgKDTgQVXgDUJgGSJgOqXgmUMgZIJgTUJgWIEgFBFgFNBgFDJgFSFgFGBgFYXgJFOgFgQgFVXgFhBgFbHgJFWVJABVQKcVDgFVOfXVeDFVhaRVmGdViJYVMaRVFNHhBNDhBCXhBEqhBpFhBLXhNJBhSJRheVXhhKEhxlmhZIJhdBQhkIJhbMNhMUJhMZJxNJgxQUJxDEkxDdFxSJRxplmxeSBxeCXxeGFxeYXxepQxegBxWVcxFEQxFLXxFIBxFgBxFxDxFZtxFdcxFbBxFwXyDJXyDlcuASJuDJpuDIBuCpJuGSJuIJFueEFuZIJusJXudWEuoIBuWGJuFBcuFKEuFNFuFQFuFDJuFGJuFVJuFUtuFdHuFTBmBYJmNJYmQhkmLJDmLJomIdXmiJYmvJRmsJRmklmmMBymMuCmclmmcnQiJABiJBNiJBDiBSFiBCJiBEFiBYBiBpFiBLXiBTHiJNciDEfiCZJiECJiJEqiOkHiHKFieNDiHJQieQcieDHieSFieCXieGFieEFieIHiegFihUJixNoioNXiFaBiFKFiFNDiFEPiFYXitFOitFHiFgBiFVEiFmXiFitiFbBiFMFiFrFUCXQUIoQUIJcUHQJUeCEUHwXUUJDUUqXUdWcUcqXUrnQUFNDUFSHUFCFUFEfUFLXUtFOZBXOZXSBZXpFZXVXZEQJZEJkZpDJZOqXZeNHZeCDZUqXZFBQZFEHZFLXvBAFvBKFvBCXvBEPvBpHvBIDvBgFvBuHvQNJvFNFvFGBvFIBvJFcsXCDsXLXsXsXsXlFsXcHsQqXsJQFsEqXseIFsFEHsFjDdBxOdNpRdNJRdEJbdpJRdhZJdnSJdrjNdFNJdFQHdFhNkNJDkYaRkHNRkHSRkVbRkuMRkjSJkcqDoSJFoEiJoYZJoOfXohEBoMGQocqXbBAFbBXFbBaFbBNDbBGBbBLXbBTBbBWDbGJYbIJHbFQqbFpQlDgQlOrFlVJRjGEBjZJRnXvJnXbBnEfHnOPDngJRnxfXnUJWwXEJwNpJwDpBwEfXwrEBMDCJMDGHMDIJMLJDcQGDcQpHcqXccqNFcqCXcFCJRBSBRBGBRBEJRBpQTBNFTBQJTBpBTBVXTFABTFSBTFCFTFGBTFMDrXCJrXLDrDNJrEfHrFQJrFitWNjdWNTR",
        // 6-kana words
        "AKLJMANOPFASNJIAEJWXAYJNRAIIbRAIcdaAeEfDAgidRAdjNYAMYEJAMIbRAFNJBAFpJFBBIJYBDZJFBSiJhBGdEBBEJfXBEJqXBEJWRBpaUJBLXrXBIYJMBOcfXBeEfFBestXBjNJRBcDJOBFEqXXNvJRXDMBhXCJNYXOAWpXONJWXHDEBXeIaRXhYJDXZJSJXMDJOXcASJXFVJXaBQqXaBZJFasXdQaFSJQaFEfXaFpJHaFOqXKBNSRKXvJBKQJhXKEJQJKEJGFKINJBKIJjNKgJNSKVElmKVhEBKiJGFKlBgJKjnUJKwsJYKMFIJKFNJDKFIJFKFOfXNJBSFNJBCXNBpJFNJBvQNJBMBNJLJXNJOqXNJeCXNJeGFNdsJCNbTKFNwXUJQNFEPQDiJcQDMSJQSFpBQGMQJQJeOcQyCJEQUJEBQJFBrQFEJqDXDJFDJXpBDJXIMDGiJhDIJGRDJeYcDHrDJDVXgFDkAWpDkIgRDjDEqDMvJRDJFNFDJFIBSKclmSJQOFSJQVHSJQjDSJGJBSJGJFSECJoSHEJqSJHTBSJVJDSViJYSZJNBSJsJDSFSJFSFEfXSJFLXCBUJVCJXSBCJXpBCXVJXCJXsXCJXdFCJNJHCLIJgCHiJFCVNJMChCJhCUHEJCsJTRCJdYcCoQJCCFEfXCFIJgCFUJxCFstFGJBaQGJBIDGQJqXGYJNRGJHKFGeQqDGHEJFGJeLXGHIiJGHdBlGUJEBGkIJTGFQPDGJFEqEAGegEJIJBEJVJXEhQJTEiJNcEJZJFEJoEqEjDEqEPDsXEPGJBEPOqXEPeQFEfDiDEJfEFEfepQEfMiJEqXNBEqDIDEqeSFEqVJXEMvJRYXNJDYXEJHYKVJcYYJEBYJeEcYJUqXYFpJFYFstXpAZJMpBSJFpNBNFpeQPDpHLJDpHIJFpHgJFpeitFpHZJFpJFADpFSJFpJFCJpFOqXpFitBpJFZJLXIJFLIJgRLVNJWLVHJMLwNpJLFGJBLFLJDLFOqXLJFUJIBDJXIBGJBIJBYQIJBIBIBOqXIBcqDIEGJFILNJTIIJEBIOiJhIJeNBIJeIBIhiJIIWoTRIJFAHIJFpBIJFuHIFUtFIJFTHOSBYJOEcqXOHEJqOvBpFOkVJrObBVJOncqDOcNJkHhNJRHuHJuHdMhBgBUqXgBsJXgONJBgHNJDgHHJQgJeitgHsJXgJyNagyDJBgZJDrgsVJQgkEJNgkjSJgJFAHgFCJDgFZtMVJXNFVXQfXVJXDJVXoQJVQVJQVDEfXVDvJHVEqNFVeQfXVHpJFVHxfXVVJSRVVmaRVlIJOhCXVJhHjYkhxCJVhWVUJhWiJcxBNJIxeEqDxfXBFxcFEPxFSJFxFYJXyBDQJydaUJyFOPDuYCJYuLvJRuHLJXuZJLDuFOPDuFZJHuFcqXmKHJdmCQJcmOsVJiJAGFitLCFieOfXiestXiZJMEikNJQirXzFiFQqXiFIJFiFZJFiFvtFUHpJFUteIcUteOcUVCJkUhdHcUbEJEUJqXQUMNJhURjYkUFitFZDGJHZJIxDZJVJXZJFDJZJFpQvBNJBvBSJFvJxBrseQqDsVFVJdFLJDkEJNBkmNJYkFLJDoQJOPoGsJRoEAHBoEJfFbBQqDbBZJHbFVJXlFIJBjYIrXjeitcjjCEBjWMNBwXQfXwXOaFwDsJXwCJTRwrCZJMDNJQcDDJFcqDOPRYiJFTBsJXTQIJBTFEfXTFLJDrXEJFrEJXMrFZJFWEJdEWYTlm",
        // 7-kana words
        "ABCDEFACNJTRAMBDJdAcNJVXBLNJEBXSIdWRXErNJkXYDJMBXZJCJaXMNJaYKKVJKcKDEJqXKDcNJhKVJrNYKbgJVXKFVJSBNBYBwDNJeQfXNJeEqXNhGJWENJFiJRQlIJbEQJfXxDQqXcfXQFNDEJQFwXUJDYcnUJDJIBgQDIUJTRDJFEqDSJQSJFSJQIJFSOPeZtSJFZJHCJXQfXCTDEqFGJBSJFGJBOfXGJBcqXGJHNJDGJRLiJEJfXEqEJFEJPEFpBEJYJBZJFYBwXUJYiJMEBYJZJyTYTONJXpQMFXFpeGIDdpJFstXpJFcPDLBVSJRLHQJqXLJFZJFIJBNJDIJBUqXIBkFDJIJEJPTIYJGWRIJeQPDIJeEfHIJFsJXOqGDSFHXEJqXgJCsJCgGQJqXgdQYJEgFMFNBgJFcqDVJwXUJVJFZJchIgJCCxOEJqXxOwXUJyDJBVRuscisciJBiJBieUtqXiJFDJkiFsJXQUGEZJcUJFsJXZtXIrXZDZJDrZJFNJDZJFstXvJFQqXvJFCJEsJXQJqkhkNGBbDJdTRbYJMEBlDwXUJMEFiJFcfXNJDRcNJWMTBLJXC",
        // 8-kana words
        "BraFUtHBFSJFdbNBLJXVJQoYJNEBSJBEJfHSJHwXUJCJdAZJMGjaFVJXEJPNJBlEJfFiJFpFbFEJqIJBVJCrIBdHiJhOPFChvJVJZJNJWxGFNIFLueIBQJqUHEJfUFstOZJDrlXEASJRlXVJXSFwVJNJWD",
        // 9-kana words
        "QJEJNNJDQJEJIBSFQJEJxegBQJEJfHEPSJBmXEJFSJCDEJqXLXNJFQqXIcQsFNJFIFEJqXUJgFsJXIJBUJEJfHNFvJxEqXNJnXUJFQqD",
        // 10-kana words
        "IJBEJqXZJ"
    ];
    // Maps each character into its kana value (the index)
    var mapping = "~~AzB~X~a~KN~Q~D~S~C~G~E~Y~p~L~I~O~eH~g~V~hxyumi~~U~~Z~~v~~s~~dkoblPjfnqwMcRTr~W~~~F~~~~~Jt";
    var wordlist = null;
    function hex(word) {
        return (0, bytes_1.hexlify)((0, strings_1.toUtf8Bytes)(word));
    }
    var KiYoKu = "0xe3818de38284e3818f";
    var KyoKu = "0xe3818de38283e3818f";
    function loadWords(lang) {
        if (wordlist !== null) {
            return;
        }
        wordlist = [];
        // Transforms for normalizing (sort is a not quite UTF-8)
        var transform = {};
        // Delete the diacritic marks
        transform[(0, strings_1.toUtf8String)([227, 130, 154])] = false;
        transform[(0, strings_1.toUtf8String)([227, 130, 153])] = false;
        // Some simple transforms that sort out most of the order
        transform[(0, strings_1.toUtf8String)([227, 130, 133])] = (0, strings_1.toUtf8String)([227, 130, 134]);
        transform[(0, strings_1.toUtf8String)([227, 129, 163])] = (0, strings_1.toUtf8String)([227, 129, 164]);
        transform[(0, strings_1.toUtf8String)([227, 130, 131])] = (0, strings_1.toUtf8String)([227, 130, 132]);
        transform[(0, strings_1.toUtf8String)([227, 130, 135])] = (0, strings_1.toUtf8String)([227, 130, 136]);
        // Normalize words using the transform
        function normalize(word) {
            var result = "";
            for (var i = 0; i < word.length; i++) {
                var kana = word[i];
                var target = transform[kana];
                if (target === false) {
                    continue;
                }
                if (target) {
                    kana = target;
                }
                result += kana;
            }
            return result;
        }
        // Sort how the Japanese list is sorted
        function sortJapanese(a, b) {
            a = normalize(a);
            b = normalize(b);
            if (a < b) {
                return -1;
            }
            if (a > b) {
                return 1;
            }
            return 0;
        }
        // Load all the words
        for (var length_1 = 3; length_1 <= 9; length_1++) {
            var d = data[length_1 - 3];
            for (var offset = 0; offset < d.length; offset += length_1) {
                var word = [];
                for (var i = 0; i < length_1; i++) {
                    var k = mapping.indexOf(d[offset + i]);
                    word.push(227);
                    word.push((k & 0x40) ? 130 : 129);
                    word.push((k & 0x3f) + 128);
                }
                wordlist.push((0, strings_1.toUtf8String)(word));
            }
        }
        wordlist.sort(sortJapanese);
        // For some reason kyoku and kiyoku are flipped in node (!!).
        // The order SHOULD be:
        //   - kyoku
        //   - kiyoku
        // This should ignore "if", but that doesn't work here??
        /* istanbul ignore next */
        if (hex(wordlist[442]) === KiYoKu && hex(wordlist[443]) === KyoKu) {
            var tmp = wordlist[442];
            wordlist[442] = wordlist[443];
            wordlist[443] = tmp;
        }
        // Verify the computed list matches the official list
        /* istanbul ignore if */
        if (wordlist_1.Wordlist.check(lang) !== "0xcb36b09e6baa935787fd762ce65e80b0c6a8dabdfbc3a7f86ac0e2c4fd111600") {
            wordlist = null;
            throw new Error("BIP39 Wordlist for ja (Japanese) FAILED");
        }
    }
    var LangJa = /** @class */ (function (_super) {
        __extends(LangJa, _super);
        function LangJa() {
            return _super.call(this, "ja") || this;
        }
        LangJa.prototype.getWord = function (index) {
            loadWords(this);
            return wordlist[index];
        };
        LangJa.prototype.getWordIndex = function (word) {
            loadWords(this);
            return wordlist.indexOf(word);
        };
        LangJa.prototype.split = function (mnemonic) {
            wordlist_1.logger.checkNormalize();
            return mnemonic.split(/(?:\u3000| )+/g);
        };
        LangJa.prototype.join = function (words) {
            return words.join("\u3000");
        };
        return LangJa;
    }(wordlist_1.Wordlist));
    var langJa = new LangJa();
    exports.langJa = langJa;
    wordlist_1.Wordlist.register(langJa);
    
    },{"./wordlist":120,"@ethersproject/bytes":31,"@ethersproject/strings":99}],118:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.langKo = void 0;
    var strings_1 = require("@ethersproject/strings");
    var wordlist_1 = require("./wordlist");
    var data = [
        "OYAa",
        "ATAZoATBl3ATCTrATCl8ATDloATGg3ATHT8ATJT8ATJl3ATLlvATLn4ATMT8ATMX8ATMboATMgoAToLbAToMTATrHgATvHnAT3AnAT3JbAT3MTAT8DbAT8JTAT8LmAT8MYAT8MbAT#LnAUHT8AUHZvAUJXrAUJX8AULnrAXJnvAXLUoAXLgvAXMn6AXRg3AXrMbAX3JTAX3QbAYLn3AZLgvAZrSUAZvAcAZ8AaAZ8AbAZ8AnAZ8HnAZ8LgAZ8MYAZ8MgAZ8OnAaAboAaDTrAaFTrAaJTrAaJboAaLVoAaMXvAaOl8AaSeoAbAUoAbAg8AbAl4AbGnrAbMT8AbMXrAbMn4AbQb8AbSV8AbvRlAb8AUAb8AnAb8HgAb8JTAb8NTAb8RbAcGboAcLnvAcMT8AcMX8AcSToAcrAaAcrFnAc8AbAc8MgAfGgrAfHboAfJnvAfLV8AfLkoAfMT8AfMnoAfQb8AfScrAfSgrAgAZ8AgFl3AgGX8AgHZvAgHgrAgJXoAgJX8AgJboAgLZoAgLn4AgOX8AgoATAgoAnAgoCUAgoJgAgoLXAgoMYAgoSeAgrDUAgrJTAhrFnAhrLjAhrQgAjAgoAjJnrAkMX8AkOnoAlCTvAlCV8AlClvAlFg4AlFl6AlFn3AloSnAlrAXAlrAfAlrFUAlrFbAlrGgAlrOXAlvKnAlvMTAl3AbAl3MnAnATrAnAcrAnCZ3AnCl8AnDg8AnFboAnFl3AnHX4AnHbrAnHgrAnIl3AnJgvAnLXoAnLX4AnLbrAnLgrAnLhrAnMXoAnMgrAnOn3AnSbrAnSeoAnvLnAn3OnCTGgvCTSlvCTvAUCTvKnCTvNTCT3CZCT3GUCT3MTCT8HnCUCZrCULf8CULnvCU3HnCU3JUCY6NUCbDb8CbFZoCbLnrCboOTCboScCbrFnCbvLnCb8AgCb8HgCb$LnCkLfoClBn3CloDUDTHT8DTLl3DTSU8DTrAaDTrLXDTrLjDTrOYDTrOgDTvFXDTvFnDT3HUDT3LfDUCT9DUDT4DUFVoDUFV8DUFkoDUGgrDUJnrDULl8DUMT8DUMXrDUMX4DUMg8DUOUoDUOgvDUOg8DUSToDUSZ8DbDXoDbDgoDbGT8DbJn3DbLg3DbLn4DbMXrDbMg8DbOToDboJXGTClvGTDT8GTFZrGTLVoGTLlvGTLl3GTMg8GTOTvGTSlrGToCUGTrDgGTrJYGTrScGTtLnGTvAnGTvQgGUCZrGUDTvGUFZoGUHXrGULnvGUMT8GUoMgGXoLnGXrMXGXrMnGXvFnGYLnvGZOnvGZvOnGZ8LaGZ8LmGbAl3GbDYvGbDlrGbHX3GbJl4GbLV8GbLn3GbMn4GboJTGboRfGbvFUGb3GUGb4JnGgDX3GgFl$GgJlrGgLX6GgLZoGgLf8GgOXoGgrAgGgrJXGgrMYGgrScGgvATGgvOYGnAgoGnJgvGnLZoGnLg3GnLnrGnQn8GnSbrGnrMgHTClvHTDToHTFT3HTQT8HToJTHToJgHTrDUHTrMnHTvFYHTvRfHT8MnHT8SUHUAZ8HUBb4HUDTvHUoMYHXFl6HXJX6HXQlrHXrAUHXrMnHXrSbHXvFYHXvKXHX3LjHX3MeHYvQlHZrScHZvDbHbAcrHbFT3HbFl3HbJT8HbLTrHbMT8HbMXrHbMbrHbQb8HbSX3HboDbHboJTHbrFUHbrHgHbrJTHb8JTHb8MnHb8QgHgAlrHgDT3HgGgrHgHgrHgJTrHgJT8HgLX@HgLnrHgMT8HgMX8HgMboHgOnrHgQToHgRg3HgoHgHgrCbHgrFnHgrLVHgvAcHgvAfHnAloHnCTrHnCnvHnGTrHnGZ8HnGnvHnJT8HnLf8HnLkvHnMg8HnRTrITvFUITvFnJTAXrJTCV8JTFT3JTFT8JTFn4JTGgvJTHT8JTJT8JTJXvJTJl3JTJnvJTLX4JTLf8JTLhvJTMT8JTMXrJTMnrJTObrJTQT8JTSlvJT8DUJT8FkJT8MTJT8OXJT8OgJT8QUJT8RfJUHZoJXFT4JXFlrJXGZ8JXGnrJXLV8JXLgvJXMXoJXMX3JXNboJXPlvJXoJTJXoLkJXrAXJXrHUJXrJgJXvJTJXvOnJX4KnJYAl3JYJT8JYLhvJYQToJYrQXJY6NUJbAl3JbCZrJbDloJbGT8JbGgrJbJXvJbJboJbLf8JbLhrJbLl3JbMnvJbRg8JbSZ8JboDbJbrCZJbrSUJb3KnJb8LnJfRn8JgAXrJgCZrJgDTrJgGZrJgGZ8JgHToJgJT8JgJXoJgJgvJgLX4JgLZ3JgLZ8JgLn4JgMgrJgMn4JgOgvJgPX6JgRnvJgSToJgoCZJgoJbJgoMYJgrJXJgrJgJgrLjJg6MTJlCn3JlGgvJlJl8Jl4AnJl8FnJl8HgJnAToJnATrJnAbvJnDUoJnGnrJnJXrJnJXvJnLhvJnLnrJnLnvJnMToJnMT8JnMXvJnMX3JnMg8JnMlrJnMn4JnOX8JnST4JnSX3JnoAgJnoAnJnoJTJnoObJnrAbJnrAkJnrHnJnrJTJnrJYJnrOYJnrScJnvCUJnvFaJnvJgJnvJnJnvOYJnvQUJnvRUJn3FnJn3JTKnFl3KnLT6LTDlvLTMnoLTOn3LTRl3LTSb4LTSlrLToAnLToJgLTrAULTrAcLTrCULTrHgLTrMgLT3JnLULnrLUMX8LUoJgLVATrLVDTrLVLb8LVoJgLV8MgLV8RTLXDg3LXFlrLXrCnLXrLXLX3GTLX4GgLX4OYLZAXrLZAcrLZAgrLZAhrLZDXyLZDlrLZFbrLZFl3LZJX6LZJX8LZLc8LZLnrLZSU8LZoJTLZoJnLZrAgLZrAnLZrJYLZrLULZrMgLZrSkLZvAnLZvGULZvJeLZvOTLZ3FZLZ4JXLZ8STLZ8ScLaAT3LaAl3LaHT8LaJTrLaJT8LaJXrLaJgvLaJl4LaLVoLaMXrLaMXvLaMX8LbClvLbFToLbHlrLbJn4LbLZ3LbLhvLbMXrLbMnoLbvSULcLnrLc8HnLc8MTLdrMnLeAgoLeOgvLeOn3LfAl3LfLnvLfMl3LfOX8Lf8AnLf8JXLf8LXLgJTrLgJXrLgJl8LgMX8LgRZrLhCToLhrAbLhrFULhrJXLhvJYLjHTrLjHX4LjJX8LjLhrLjSX3LjSZ4LkFX4LkGZ8LkGgvLkJTrLkMXoLkSToLkSU8LkSZ8LkoOYLl3FfLl3MgLmAZrLmCbrLmGgrLmHboLmJnoLmJn3LmLfoLmLhrLmSToLnAX6LnAb6LnCZ3LnCb3LnDTvLnDb8LnFl3LnGnrLnHZvLnHgvLnITvLnJT8LnJX8LnJlvLnLf8LnLg6LnLhvLnLnoLnMXrLnMg8LnQlvLnSbrLnrAgLnrAnLnrDbLnrFkLnrJdLnrMULnrOYLnrSTLnvAnLnvDULnvHgLnvOYLnvOnLn3GgLn4DULn4JTLn4JnMTAZoMTAloMTDb8MTFT8MTJnoMTJnrMTLZrMTLhrMTLkvMTMX8MTRTrMToATMTrDnMTrOnMT3JnMT4MnMT8FUMT8FaMT8FlMT8GTMT8GbMT8GnMT8HnMT8JTMT8JbMT8OTMUCl8MUJTrMUJU8MUMX8MURTrMUSToMXAX6MXAb6MXCZoMXFXrMXHXrMXLgvMXOgoMXrAUMXrAnMXrHgMXrJYMXrJnMXrMTMXrMgMXrOYMXrSZMXrSgMXvDUMXvOTMX3JgMX3OTMX4JnMX8DbMX8FnMX8HbMX8HgMX8HnMX8LbMX8MnMX8OnMYAb8MYGboMYHTvMYHX4MYLTrMYLnvMYMToMYOgvMYRg3MYSTrMbAToMbAXrMbAl3MbAn8MbGZ8MbJT8MbJXrMbMXvMbMX8MbMnoMbrMUMb8AfMb8FbMb8FkMcJXoMeLnrMgFl3MgGTvMgGXoMgGgrMgGnrMgHT8MgHZrMgJnoMgLnrMgLnvMgMT8MgQUoMgrHnMgvAnMg8HgMg8JYMg8LfMloJnMl8ATMl8AXMl8JYMnAToMnAT4MnAZ8MnAl3MnAl4MnCl8MnHT8MnHg8MnJnoMnLZoMnLhrMnMXoMnMX3MnMnrMnOgvMnrFbMnrFfMnrFnMnrNTMnvJXNTMl8OTCT3OTFV8OTFn3OTHZvOTJXrOTOl3OT3ATOT3JUOT3LZOT3LeOT3MbOT8ATOT8AbOT8AgOT8MbOUCXvOUMX3OXHXvOXLl3OXrMUOXvDbOX6NUOX8JbOYFZoOYLbrOYLkoOYMg8OYSX3ObHTrObHT4ObJgrObLhrObMX3ObOX8Ob8FnOeAlrOeJT8OeJXrOeJnrOeLToOeMb8OgJXoOgLXoOgMnrOgOXrOgOloOgoAgOgoJbOgoMYOgoSTOg8AbOjLX4OjMnoOjSV8OnLVoOnrAgOn3DUPXQlrPXvFXPbvFTPdAT3PlFn3PnvFbQTLn4QToAgQToMTQULV8QURg8QUoJnQXCXvQbFbrQb8AaQb8AcQb8FbQb8MYQb8ScQeAlrQeLhrQjAn3QlFXoQloJgQloSnRTLnvRTrGURTrJTRUJZrRUoJlRUrQnRZrLmRZrMnRZrSnRZ8ATRZ8JbRZ8ScRbMT8RbST3RfGZrRfMX8RfMgrRfSZrRnAbrRnGT8RnvJgRnvLfRnvMTRn8AaSTClvSTJgrSTOXrSTRg3STRnvSToAcSToAfSToAnSToHnSToLjSToMTSTrAaSTrEUST3BYST8AgST8LmSUAZvSUAgrSUDT4SUDT8SUGgvSUJXoSUJXvSULTrSU8JTSU8LjSV8AnSV8JgSXFToSXLf8SYvAnSZrDUSZrMUSZrMnSZ8HgSZ8JTSZ8JgSZ8MYSZ8QUSaQUoSbCT3SbHToSbQYvSbSl4SboJnSbvFbSb8HbSb8JgSb8OTScGZrScHgrScJTvScMT8ScSToScoHbScrMTScvAnSeAZrSeAcrSeHboSeJUoSeLhrSeMT8SeMXrSe6JgSgHTrSkJnoSkLnvSk8CUSlFl3SlrSnSl8GnSmAboSmGT8SmJU8",
        "ATLnDlATrAZoATrJX4ATrMT8ATrMX4ATrRTrATvDl8ATvJUoATvMl8AT3AToAT3MX8AT8CT3AT8DT8AT8HZrAT8HgoAUAgFnAUCTFnAXoMX8AXrAT8AXrGgvAXrJXvAXrOgoAXvLl3AZvAgoAZvFbrAZvJXoAZvJl8AZvJn3AZvMX8AZvSbrAZ8FZoAZ8LZ8AZ8MU8AZ8OTvAZ8SV8AZ8SX3AbAgFZAboJnoAbvGboAb8ATrAb8AZoAb8AgrAb8Al4Ab8Db8Ab8JnoAb8LX4Ab8LZrAb8LhrAb8MT8Ab8OUoAb8Qb8Ab8ST8AcrAUoAcrAc8AcrCZ3AcrFT3AcrFZrAcrJl4AcrJn3AcrMX3AcrOTvAc8AZ8Ac8MT8AfAcJXAgoFn4AgoGgvAgoGnrAgoLc8AgoMXoAgrLnrAkrSZ8AlFXCTAloHboAlrHbrAlrLhrAlrLkoAl3CZrAl3LUoAl3LZrAnrAl4AnrMT8An3HT4BT3IToBX4MnvBb!Ln$CTGXMnCToLZ4CTrHT8CT3JTrCT3RZrCT#GTvCU6GgvCU8Db8CU8GZrCU8HT8CboLl3CbrGgrCbrMU8Cb8DT3Cb8GnrCb8LX4Cb8MT8Cb8ObrCgrGgvCgrKX4Cl8FZoDTrAbvDTrDboDTrGT6DTrJgrDTrMX3DTrRZrDTrRg8DTvAVvDTvFZoDT3DT8DT3Ln3DT4HZrDT4MT8DT8AlrDT8MT8DUAkGbDUDbJnDYLnQlDbDUOYDbMTAnDbMXSnDboAT3DboFn4DboLnvDj6JTrGTCgFTGTGgFnGTJTMnGTLnPlGToJT8GTrCT3GTrLVoGTrLnvGTrMX3GTrMboGTvKl3GZClFnGZrDT3GZ8DTrGZ8FZ8GZ8MXvGZ8On8GZ8ST3GbCnQXGbMbFnGboFboGboJg3GboMXoGb3JTvGb3JboGb3Mn6Gb3Qb8GgDXLjGgMnAUGgrDloGgrHX4GgrSToGgvAXrGgvAZvGgvFbrGgvLl3GgvMnvGnDnLXGnrATrGnrMboGnuLl3HTATMnHTAgCnHTCTCTHTrGTvHTrHTvHTrJX8HTrLl8HTrMT8HTrMgoHTrOTrHTuOn3HTvAZrHTvDTvHTvGboHTvJU8HTvLl3HTvMXrHTvQb4HT4GT6HT4JT8HT4Jb#HT8Al3HT8GZrHT8GgrHT8HX4HT8Jb8HT8JnoHT8LTrHT8LgvHT8SToHT8SV8HUoJUoHUoJX8HUoLnrHXrLZoHXvAl3HX3LnrHX4FkvHX4LhrHX4MXoHX4OnoHZrAZ8HZrDb8HZrGZ8HZrJnrHZvGZ8HZvLnvHZ8JnvHZ8LhrHbCXJlHbMTAnHboJl4HbpLl3HbrJX8HbrLnrHbrMnvHbvRYrHgoSTrHgrFV8HgrGZ8HgrJXoHgrRnvHgvBb!HgvGTrHgvHX4HgvHn!HgvLTrHgvSU8HnDnLbHnFbJbHnvDn8Hn6GgvHn!BTvJTCTLnJTQgFnJTrAnvJTrLX4JTrOUoJTvFn3JTvLnrJTvNToJT3AgoJT3Jn4JT3LhvJT3ObrJT8AcrJT8Al3JT8JT8JT8JnoJT8LX4JT8LnrJT8MX3JT8Rg3JT8Sc8JUoBTvJU8AToJU8GZ8JU8GgvJU8JTrJU8JXrJU8JnrJU8LnvJU8ScvJXHnJlJXrGgvJXrJU8JXrLhrJXrMT8JXrMXrJXrQUoJXvCTvJXvGZ8JXvGgrJXvQT8JX8Ab8JX8DT8JX8GZ8JX8HZvJX8LnrJX8MT8JX8MXoJX8MnvJX8ST3JYGnCTJbAkGbJbCTAnJbLTAcJboDT3JboLb6JbrAnvJbrCn3JbrDl8JbrGboJbrIZoJbrJnvJbrMnvJbrQb4Jb8RZrJeAbAnJgJnFbJgScAnJgrATrJgvHZ8JgvMn4JlJlFbJlLiQXJlLjOnJlRbOlJlvNXoJlvRl3Jl4AcrJl8AUoJl8MnrJnFnMlJnHgGbJnoDT8JnoFV8JnoGgvJnoIT8JnoQToJnoRg3JnrCZ3JnrGgrJnrHTvJnrLf8JnrOX8JnvAT3JnvFZoJnvGT8JnvJl4JnvMT8JnvMX8JnvOXrJnvPX6JnvSX3JnvSZrJn3MT8Jn3MX8Jn3RTrLTATKnLTJnLTLTMXKnLTRTQlLToGb8LTrAZ8LTrCZ8LTrDb8LTrHT8LT3PX6LT4FZoLT$CTvLT$GgrLUvHX3LVoATrLVoAgoLVoJboLVoMX3LVoRg3LV8CZ3LV8FZoLV8GTvLXrDXoLXrFbrLXvAgvLXvFlrLXvLl3LXvRn6LX4Mb8LX8GT8LYCXMnLYrMnrLZoSTvLZrAZvLZrAloLZrFToLZrJXvLZrJboLZrJl4LZrLnrLZrMT8LZrOgvLZrRnvLZrST4LZvMX8LZvSlvLZ8AgoLZ8CT3LZ8JT8LZ8LV8LZ8LZoLZ8Lg8LZ8SV8LZ8SbrLZ$HT8LZ$Mn4La6CTvLbFbMnLbRYFTLbSnFZLboJT8LbrAT9LbrGb3LbrQb8LcrJX8LcrMXrLerHTvLerJbrLerNboLgrDb8LgrGZ8LgrHTrLgrMXrLgrSU8LgvJTrLgvLl3Lg6Ll3LhrLnrLhrMT8LhvAl4LiLnQXLkoAgrLkoJT8LkoJn4LlrSU8Ll3FZoLl3HTrLl3JX8Ll3JnoLl3LToLmLeFbLnDUFbLnLVAnLnrATrLnrAZoLnrAb8LnrAlrLnrGgvLnrJU8LnrLZrLnrLhrLnrMb8LnrOXrLnrSZ8LnvAb4LnvDTrLnvDl8LnvHTrLnvHbrLnvJT8LnvJU8LnvJbrLnvLhvLnvMX8LnvMb8LnvNnoLnvSU8Ln3Al3Ln4FZoLn4GT6Ln4JgvLn4LhrLn4MT8Ln4SToMToCZrMToJX8MToLX4MToLf8MToRg3MTrEloMTvGb6MT3BTrMT3Lb6MT8AcrMT8AgrMT8GZrMT8JnoMT8LnrMT8MX3MUOUAnMXAbFnMXoAloMXoJX8MXoLf8MXoLl8MXrAb8MXrDTvMXrGT8MXrGgrMXrHTrMXrLf8MXrMU8MXrOXvMXrQb8MXvGT8MXvHTrMXvLVoMX3AX3MX3Jn3MX3LhrMX3MX3MX4AlrMX4OboMX8GTvMX8GZrMX8GgrMX8JT8MX8JX8MX8LhrMX8MT8MYDUFbMYMgDbMbGnFfMbvLX4MbvLl3Mb8Mb8Mb8ST4MgGXCnMg8ATrMg8AgoMg8CZrMg8DTrMg8DboMg8HTrMg8JgrMg8LT8MloJXoMl8AhrMl8JT8MnLgAUMnoJXrMnoLX4MnoLhrMnoMT8MnrAl4MnrDb8MnrOTvMnrOgvMnrQb8MnrSU8MnvGgrMnvHZ8Mn3MToMn4DTrMn4LTrMn4Mg8NnBXAnOTFTFnOToAToOTrGgvOTrJX8OT3JXoOT6MTrOT8GgrOT8HTpOT8MToOUoHT8OUoJT8OUoLn3OXrAgoOXrDg8OXrMT8OXvSToOX6CTvOX8CZrOX8OgrOb6HgvOb8AToOb8MT8OcvLZ8OgvAlrOgvHTvOgvJTrOgvJnrOgvLZrOgvLn4OgvMT8OgvRTrOg8AZoOg8DbvOnrOXoOnvJn4OnvLhvOnvRTrOn3GgoOn3JnvOn6JbvOn8OTrPTGYFTPbBnFnPbGnDnPgDYQTPlrAnvPlrETvPlrLnvPlrMXvPlvFX4QTMTAnQTrJU8QYCnJlQYJlQlQbGTQbQb8JnrQb8LZoQb8LnvQb8MT8Qb8Ml8Qb8ST4QloAl4QloHZvQloJX8QloMn8QnJZOlRTrAZvRTrDTrRTvJn4RTvLhvRT4Jb8RZrAZrRZ8AkrRZ8JU8RZ8LV8RZ8LnvRbJlQXRg3GboRg3MnvRg8AZ8Rg8JboRg8Jl4RnLTCbRnvFl3RnvQb8SToAl4SToCZrSToFZoSToHXrSToJU8SToJgvSToJl4SToLhrSToMX3STrAlvSTrCT9STrCgrSTrGgrSTrHXrSTrHboSTrJnoSTrNboSTvLnrST4AZoST8Ab8ST8JT8SUoJn3SU6HZ#SU6JTvSU8Db8SU8HboSU8LgrSV8JT8SZrAcrSZrAl3SZrJT8SZrJnvSZrMT8SZvLUoSZ4FZoSZ8JnoSZ8RZrScoLnrScoMT8ScoMX8ScrAT4ScrAZ8ScrLZ8ScrLkvScvDb8ScvLf8ScvNToSgrFZrShvKnrSloHUoSloLnrSlrMXoSl8HgrSmrJUoSn3BX6",
        "ATFlOn3ATLgrDYAT4MTAnAT8LTMnAYJnRTrAbGgJnrAbLV8LnAbvNTAnAeFbLg3AgOYMXoAlQbFboAnDboAfAnJgoJTBToDgAnBUJbAl3BboDUAnCTDlvLnCTFTrSnCYoQTLnDTwAbAnDUDTrSnDUHgHgrDX8LXFnDbJXAcrETvLTLnGTFTQbrGTMnGToGT3DUFbGUJlPX3GbQg8LnGboJbFnGb3GgAYGgAg8ScGgMbAXrGgvAbAnGnJTLnvGnvATFgHTDT6ATHTrDlJnHYLnMn8HZrSbJTHZ8LTFnHbFTJUoHgSeMT8HgrLjAnHgvAbAnHlFUrDlHnDgvAnHnHTFT3HnQTGnrJTAaMXvJTGbCn3JTOgrAnJXvAXMnJbMg8SnJbMnRg3Jb8LTMnJnAl3OnJnGYrQlJnJlQY3LTDlCn3LTJjLg3LTLgvFXLTMg3GTLV8HUOgLXFZLg3LXNXrMnLX8QXFnLX9AlMYLYLXPXrLZAbJU8LZDUJU8LZMXrSnLZ$AgFnLaPXrDULbFYrMnLbMn8LXLboJgJgLeFbLg3LgLZrSnLgOYAgoLhrRnJlLkCTrSnLkOnLhrLnFX%AYLnFZoJXLnHTvJbLnLloAbMTATLf8MTHgJn3MTMXrAXMT3MTFnMUITvFnMXFX%AYMXMXvFbMXrFTDbMYAcMX3MbLf8SnMb8JbFnMgMXrMTMgvAXFnMgvGgCmMnAloSnMnFnJTrOXvMXSnOX8HTMnObJT8ScObLZFl3ObMXCZoPTLgrQXPUFnoQXPU3RXJlPX3RkQXPbrJXQlPlrJbFnQUAhrDbQXGnCXvQYLnHlvQbLfLnvRTOgvJbRXJYrQlRYLnrQlRbLnrQlRlFT8JlRlFnrQXSTClCn3STHTrAnSTLZQlrSTMnGTrSToHgGbSTrGTDnSTvGXCnST3HgFbSU3HXAXSbAnJn3SbFT8LnScLfLnv",
        "AT3JgJX8AT8FZoSnAT8JgFV8AT8LhrDbAZ8JT8DbAb8GgLhrAb8SkLnvAe8MT8SnAlMYJXLVAl3GYDTvAl3LfLnvBUDTvLl3CTOn3HTrCT3DUGgrCU8MT8AbCbFTrJUoCgrDb8MTDTLV8JX8DTLnLXQlDT8LZrSnDUQb8FZ8DUST4JnvDb8ScOUoDj6GbJl4GTLfCYMlGToAXvFnGboAXvLnGgAcrJn3GgvFnSToGnLf8JnvGn#HTDToHTLnFXJlHTvATFToHTvHTDToHTvMTAgoHT3STClvHT4AlFl6HT8HTDToHUoDgJTrHUoScMX3HbRZrMXoHboJg8LTHgDb8JTrHgMToLf8HgvLnLnoHnHn3HT4Hn6MgvAnJTJU8ScvJT3AaQT8JT8HTrAnJXrRg8AnJbAloMXoJbrATFToJbvMnoSnJgDb6GgvJgDb8MXoJgSX3JU8JguATFToJlPYLnQlJlQkDnLbJlQlFYJlJl8Lf8OTJnCTFnLbJnLTHXMnJnLXGXCnJnoFfRg3JnrMYRg3Jn3HgFl3KT8Dg8LnLTRlFnPTLTvPbLbvLVoSbrCZLXMY6HT3LXNU7DlrLXNXDTATLX8DX8LnLZDb8JU8LZMnoLhrLZSToJU8LZrLaLnrLZvJn3SnLZ8LhrSnLaJnoMT8LbFlrHTvLbrFTLnrLbvATLlvLb6OTFn3LcLnJZOlLeAT6Mn4LeJT3ObrLg6LXFlrLhrJg8LnLhvDlPX4LhvLfLnvLj6JTFT3LnFbrMXoLnQluCTvLnrQXCY6LnvLfLnvLnvMgLnvLnvSeLf8MTMbrJn3MT3JgST3MT8AnATrMT8LULnrMUMToCZrMUScvLf8MXoDT8SnMX6ATFToMX8AXMT8MX8FkMT8MX8HTrDUMX8ScoSnMYJT6CTvMgAcrMXoMg8SToAfMlvAXLg3MnFl3AnvOT3AnFl3OUoATHT8OU3RnLXrOXrOXrSnObPbvFn6Og8HgrSnOg8OX8DbPTvAgoJgPU3RYLnrPXrDnJZrPb8CTGgvPlrLTDlvPlvFUJnoQUvFXrQlQeMnoAl3QlrQlrSnRTFTrJUoSTDlLiLXSTFg6HT3STJgoMn4STrFTJTrSTrLZFl3ST4FnMXoSUrDlHUoScvHTvSnSfLkvMXo",
        "AUoAcrMXoAZ8HboAg8AbOg6ATFgAg8AloMXoAl3AT8JTrAl8MX8MXoCT3SToJU8Cl8Db8MXoDT8HgrATrDboOT8MXoGTOTrATMnGT8LhrAZ8GnvFnGnQXHToGgvAcrHTvAXvLl3HbrAZoMXoHgBlFXLg3HgMnFXrSnHgrSb8JUoHn6HT8LgvITvATrJUoJUoLZrRnvJU8HT8Jb8JXvFX8QT8JXvLToJTrJYrQnGnQXJgrJnoATrJnoJU8ScvJnvMnvMXoLTCTLgrJXLTJlRTvQlLbRnJlQYvLbrMb8LnvLbvFn3RnoLdCVSTGZrLeSTvGXCnLg3MnoLn3MToLlrETvMT8SToAl3MbrDU6GTvMb8LX4LhrPlrLXGXCnSToLf8Rg3STrDb8LTrSTvLTHXMnSb3RYLnMnSgOg6ATFg",
        "HUDlGnrQXrJTrHgLnrAcJYMb8DULc8LTvFgGnCk3Mg8JbAnLX4QYvFYHnMXrRUoJnGnvFnRlvFTJlQnoSTrBXHXrLYSUJgLfoMT8Se8DTrHbDb",
        "AbDl8SToJU8An3RbAb8ST8DUSTrGnrAgoLbFU6Db8LTrMg8AaHT8Jb8ObDl8SToJU8Pb3RlvFYoJl"
    ];
    var codes = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
    function getHangul(code) {
        if (code >= 40) {
            code = code + 168 - 40;
        }
        else if (code >= 19) {
            code = code + 97 - 19;
        }
        return (0, strings_1.toUtf8String)([225, (code >> 6) + 132, (code & 0x3f) + 128]);
    }
    var wordlist = null;
    function loadWords(lang) {
        if (wordlist != null) {
            return;
        }
        wordlist = [];
        data.forEach(function (data, length) {
            length += 4;
            for (var i = 0; i < data.length; i += length) {
                var word = "";
                for (var j = 0; j < length; j++) {
                    word += getHangul(codes.indexOf(data[i + j]));
                }
                wordlist.push(word);
            }
        });
        wordlist.sort();
        // Verify the computed list matches the official list
        /* istanbul ignore if */
        if (wordlist_1.Wordlist.check(lang) !== "0xf9eddeace9c5d3da9c93cf7d3cd38f6a13ed3affb933259ae865714e8a3ae71a") {
            wordlist = null;
            throw new Error("BIP39 Wordlist for ko (Korean) FAILED");
        }
    }
    var LangKo = /** @class */ (function (_super) {
        __extends(LangKo, _super);
        function LangKo() {
            return _super.call(this, "ko") || this;
        }
        LangKo.prototype.getWord = function (index) {
            loadWords(this);
            return wordlist[index];
        };
        LangKo.prototype.getWordIndex = function (word) {
            loadWords(this);
            return wordlist.indexOf(word);
        };
        return LangKo;
    }(wordlist_1.Wordlist));
    var langKo = new LangKo();
    exports.langKo = langKo;
    wordlist_1.Wordlist.register(langKo);
    
    },{"./wordlist":120,"@ethersproject/strings":99}],119:[function(require,module,exports){
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.langZhTw = exports.langZhCn = void 0;
    var strings_1 = require("@ethersproject/strings");
    var wordlist_1 = require("./wordlist");
    var data = "}aE#4A=Yv&co#4N#6G=cJ&SM#66|/Z#4t&kn~46#4K~4q%b9=IR#7l,mB#7W_X2*dl}Uo~7s}Uf&Iw#9c&cw~6O&H6&wx&IG%v5=IQ~8a&Pv#47$PR&50%Ko&QM&3l#5f,D9#4L|/H&tQ;v0~6n]nN<di,AM=W5%QO&ka&ua,hM^tm=zV=JA=wR&+X]7P&NB#4J#5L|/b[dA}tJ<Do&6m&u2[U1&Kb.HM&mC=w0&MW<rY,Hq#6M}QG,13&wP}Jp]Ow%ue&Kg<HP<D9~4k~9T&I2_c6$9T#9/[C5~7O~4a=cs&O7=KK=An&l9$6U$8A&uD&QI|/Y&bg}Ux&F2#6b}E2&JN&kW&kp=U/&bb=Xl<Cj}k+~5J#6L&5z&9i}b4&Fo,ho(X0_g3~4O$Fz&QE<HN=Ww]6/%GF-Vw=tj&/D&PN#9g=YO}cL&Of&PI~5I&Ip=vU=IW#9G;0o-wU}ss&QR<BT&R9=tk$PY_dh&Pq-yh]7T,nj.Xu=EP&76=cI&Fs*Xg}z7$Gb&+I=DF,AF=cA}rL#7j=Dz&3y<Aa$52=PQ}b0(iY$Fa}oL&xV#6U=ec=WZ,xh%RY<dp#9N&Fl&44=WH*A7=sh&TB&8P=07;u+&PK}uh}J5#72)V/=xC,AB$k0&f6;1E|+5=1B,3v]6n&wR%b+&xx]7f=Ol}fl;+D^wG]7E;nB;uh^Ir&l5=JL,nS=cf=g5;u6|/Q$Gc=MH%Hg#5d%M6^86=U+$Gz,l/,ir^5y&Ba&/F-IY&FI&be%IZ#77&PW_Nu$kE(Yf&NX]7Z,Jy&FJ(Xo&Nz#/d=y7&MX<Ag}Z+;nE]Dt(iG#4D=13&Pj~4c%v8&Zo%OL&/X#4W<HR&ie~6J_1O(Y2=y5=Ad*cv_eB#6k&PX:BU#7A;uk&Ft&Fx_dD=U2;vB=U5=4F}+O&GN.HH:9s=b0%NV(jO&IH=JT}Z9=VZ<Af,Kx^4m&uJ%c6,6r;9m#+L}cf%Kh&F3~4H=vP}bu,Hz|++,1w]nv}k6;uu$jw*Kl*WX&uM[x7&Fr[m7$NO&QN]hu=JN}nR^8g#/h(ps|KC;vd}xz=V0}p6&FD$G1#7K<bG_4p~8g&cf;u4=tl}+k%5/}fz;uw<cA=u1}gU}VM=LJ=eX&+L&Pr#4U}p2:nC,2K]7H:jF&9x}uX#9O=MB<fz~8X~5m&4D&kN&u5%E/(h7(ZF&VG<de(qM|/e-Wt=3x(a+,/R]f/&ND$Ro&nU}0g=KA%kH&NK$Ke<dS}cB&IX~5g$TN]6m=Uv,Is&Py=Ef%Kz#+/%bi&+A<F4$OG&4C&FL#9V<Zk=2I_eE&6c]nw&kq$HG}y+&A8$P3}OH=XP]70%IS(AJ_gH%GZ&tY&AZ=vb~6y&/r=VI=Wv<Zi=fl=xf&eL}c8}OL=MJ=g8$F7=YT}9u=0+^xC}JH&nL^N0~4T]K2,Cy%OC#6s;vG(AC^xe^cG&MF}Br#9P;wD-7h$O/&xA}Fn^PC]6i]7G&8V$Qs;vl(TB~73~4l<mW&6V=2y&uY&+3)aP}XF;LP&kx$wU=t7;uy<FN&lz)7E=Oo*Y+;wI}9q}le;J6&Ri&4t&Qr#8B=cb&vG=J5|Ql(h5<Yy~4+}QD,Lx=wn%K/&RK=dO&Pw,Q9=co%4u;9u}g0@6a^4I%b0=zo|/c&tX=dQ=OS#+b=yz_AB&wB&Pm=W9$HP_gR=62=AO=ti=hI,oA&jr&dH=tm&b6$P2(x8=zi;nG~7F;05]0n[Ix&3m}rg=Xp=cd&uz]7t;97=cN;vV<jf&FF&F1=6Q&Ik*Kk&P4,2z=fQ]7D&3u,H0=d/}Uw<ZN<7R}Kv;0f$H7,MD]7n$F0#88~9Z%da=by;+T#/u=VF&fO&kr^kf<AB]sU,I5$Ng&Pz;0i&QD&vM=Yl:BM;nJ_xJ]U7&Kf&30,3f|Z9*dC)je_jA&Q4&Kp$NH(Yz#6S&Id%Ib=KX,AD=KV%dP}tW&Pk^+E_Ni=cq,3R}VZ(Si=b+}rv;0j}rZ]uA,/w(Sx&Jv$w9&4d&wE,NJ$Gy=J/]Ls#7k<ZQ<Y/&uj]Ov$PM;v3,2F&+u:up=On&3e,Jv;90=J+&Qm]6q}bK#+d~8Y(h2]hA;99&AS=I/}qB&dQ}yJ-VM}Vl&ui,iB&G3|Dc]7d=eQ%dX%JC_1L~4d^NP;vJ&/1)ZI#7N]9X[bQ&PL=0L(UZ,Lm&kc&IR}n7(iR<AQ<dg=33=vN}ft}au]7I,Ba=x9=dR~6R&Tq=Xi,3d$Nr&Bc}DI&ku&vf]Dn,/F&iD,Ll&Nw=0y&I7=Ls=/A&tU=Qe}Ua&uk&+F=g4=gh=Vj#+1&Qn}Uy*44#5F,Pc&Rz*Xn=oh=5W;0n_Nf(iE<Y7=vr=Zu]oz#5Z%mI=kN=Bv_Jp(T2;vt_Ml<FS&uI=L/&6P]64$M7}86<bo%QX(SI%IY&VK=Al&Ux;vv;ut*E/%uh<ZE|O3,M2(yc]yu=Wk&tp:Ex}hr,Cl&WE)+Z=8U}I2_4Q,hA_si=iw=OM=tM=yZ%Ia=U7;wT}b+;uo=Za}yS!5x}HD}fb#5O_dA;Nv%uB(yB;01(Sf}Fk;v7}Pt#8v<mZ#7L,/r&Pl~4w&f5=Ph$Fw_LF&8m,bL=yJ&BH}p/*Jn}tU~5Q;wB(h6]Df]8p^+B;E4&Wc=d+;Ea&bw$8C&FN,DM=Yf}mP~5w=fT#6V=mC=Fi=AV}jB&AN}lW}aH#/D)dZ;hl;vE}/7,CJ;31&w8,hj%u9_Js=jJ&4M~8k=TN&eC}nL&uc-wi&lX}dj=Mv=e2#6u=cr$uq$6G]8W}Jb:nm=Yg<b3(UA;vX&6n&xF=KT,jC,De&R8&oY=Zv&oB]7/=Z2&Oa}bf,hh(4h^tZ&72&Nx;D2&xL~5h~40)ZG)h+=OJ&RA]Bv$yB=Oq=df,AQ%Jn}OJ;11,3z&Tl&tj;v+^Hv,Dh(id=s+]7N&N3)9Q~8f,S4=uW=w4&uX,LX&3d]CJ&yp&8x<b2_do&lP=y/<cy_dG=Oi=7R(VH(lt_1T,Iq_AA;12^6T%k6#8K[B1{oO<AU[Bt;1b$9S&Ps<8T=St{bY,jB(Zp&63&Uv$9V,PM]6v&Af}zW[bW_oq}sm}nB&Kq&gC&ff_eq_2m&5F&TI}rf}Gf;Zr_z9;ER&jk}iz_sn<BN~+n&vo=Vi%97|ZR=Wc,WE&6t]6z%85(ly#84=KY)6m_5/=aX,N3}Tm&he&6K]tR_B2-I3;u/&hU&lH<AP=iB&IA=XL;/5&Nh=wv<BH#79=vS=zl<AA=0X_RG}Bw&9p$NW,AX&kP_Lp&/Z(Tc]Mu}hs#6I}5B&cI<bq&H9#6m=K9}vH(Y1(Y0#4B&w6,/9&gG<bE,/O=zb}I4_l8<B/;wL%Qo<HO[Mq=XX}0v&BP&F4(mG}0i}nm,EC=9u{I3,xG&/9=JY*DK&hR)BX=EI=cx=b/{6k}yX%A+&wa}Xb=la;wi^lL;0t}jo&Qb=xg=XB}iO<qo{bR=NV&8f=a0&Jy;0v=uK)HK;vN#6h&jB(h/%ud&NI%wY.X7=Pt}Cu-uL&Gs_hl%mH,tm]78=Lb^Q0#7Y=1u<Bt&+Q=Co_RH,w3;1e}ux<aU;ui}U3&Q5%bt]63&UQ|0l&uL}O7&3o,AV&dm|Nj(Xt*5+(Uu&Hh(p7(UF=VR=Bp^Jl&Hd[ix)9/=Iq]C8<67]66}mB%6f}bb}JI]8T$HA}db=YM&pa=2J}tS&Y0=PS&y4=cX$6E,hX,XP&nR;04,FQ&l0&Vm_Dv#5Y~8Z=Bi%MA]6x=JO:+p,Az&9q,Hj~6/}SD=K1:EJ}nA;Qo#/E]9R,Ie&6X%W3]61&v4=xX_MC=0q;06(Xq=fs}IG}Dv=0l}o7$iZ;9v&LH&DP-7a&OY,SZ,Kz,Cv&dh=fx|Nh,F/~7q=XF&w+;9n&Gw;0h}Z7<7O&JK(S7&LS<AD<ac=wo<Dt&zw%4B=4v#8P;9o~6p*vV=Tm,Or&I6=1q}nY=P0=gq&Bl&Uu,Ch%yb}UY=zh}dh}rl(T4_xk(YA#8R*xH,IN}Jn]7V}C4&Ty}j3]7p=cL=3h&wW%Qv<Z3=f0&RI&+S(ic_zq}oN&/Y=z1;Td=LW=0e=OI(Vc,+b^ju(UL;0r:Za%8v=Rp=zw&58&73&wK}qX]6y&8E)a2}WR=wP^ur&nQ<cH}Re=Aq&wk}Q0&+q=PP,Gc|/d^k5,Fw]8Y}Pg]p3=ju=ed}r5_yf&Cs]7z$/G<Cm&Jp&54_1G_gP_Ll}JZ;0u]k8_7k(Sg]65{9i=LN&Sx&WK,iW&fD&Lk{9a}Em-9c#8N&io=sy]8d&nT&IK(lx#7/$lW(Td<s8~49,3o<7Y=MW(T+_Jr&Wd,iL}Ct=xh&5V;v4&8n%Kx=iF&l2_0B{B+,If(J0,Lv;u8=Kx-vB=HC&vS=Z6&fU&vE^xK;3D=4h=MR#45:Jw;0d}iw=LU}I5=I0]gB*im,K9}GU,1k_4U&Tt=Vs(iX&lU(TF#7y,ZO}oA&m5#5P}PN}Uz=hM<B1&FB<aG,e6~7T<tP(UQ_ZT=wu&F8)aQ]iN,1r_Lo&/g:CD}84{J1_Ki&Na&3n$jz&FE=dc;uv;va}in}ll=fv(h1&3h}fp=Cy}BM(+E~8m}lo%v7=hC(T6$cj=BQ=Bw(DR,2j=Ks,NS|F+;00=fU=70}Mb(YU;+G&m7&hr=Sk%Co]t+(X5_Jw}0r}gC(AS-IP&QK<Z2#8Q$WC]WX}T2&pG_Ka,HC=R4&/N;Z+;ch(C7,D4$3p_Mk&B2$8D=n9%Ky#5z(CT&QJ#7B]DC]gW}nf~5M;Iw#80}Tc_1F#4Z-aC}Hl=ph=fz,/3=aW}JM}nn;DG;vm}wn,4P}T3;wx&RG$u+}zK=0b;+J_Ek{re<aZ=AS}yY#5D]7q,Cp}xN=VP*2C}GZ}aG~+m_Cs=OY#6r]6g<GS}LC(UB=3A=Bo}Jy<c4}Is;1P<AG}Op<Z1}ld}nS=1Z,yM&95&98=CJ(4t:2L$Hk=Zo}Vc;+I}np&N1}9y=iv}CO*7p=jL)px]tb^zh&GS&Vl%v/;vR=14=zJ&49|/f]hF}WG;03=8P}o/&Gg&rp;DB,Kv}Ji&Pb;aA^ll(4j%yt}+K$Ht#4y&hY]7Y<F1,eN}bG(Uh%6Z]t5%G7;+F_RE;it}tL=LS&Da=Xx(S+(4f=8G=yI}cJ}WP=37=jS}pX}hd)fp<A8=Jt~+o$HJ=M6}iX=g9}CS=dv=Cj(mP%Kd,xq|+9&LD(4/=Xm&QP=Lc}LX&fL;+K=Op(lu=Qs.qC:+e&L+=Jj#8w;SL]7S(b+#4I=c1&nG_Lf&uH;+R)ZV<bV%B/,TE&0H&Jq&Ah%OF&Ss(p2,Wv&I3=Wl}Vq;1L&lJ#9b_1H=8r=b8=JH(SZ=hD=J2#7U,/U#/X~6P,FU<eL=jx,mG=hG=CE&PU=Se(qX&LY=X6=y4&tk&QQ&tf=4g&xI}W+&mZ=Dc#7w}Lg;DA;wQ_Kb(cJ=hR%yX&Yb,hw{bX_4X;EP;1W_2M}Uc=b5(YF,CM&Tp^OJ{DD]6s=vF=Yo~8q}XH}Fu%P5(SJ=Qt;MO]s8<F3&B3&8T(Ul-BS*dw&dR<87}/8]62$PZ]Lx<Au}9Q]7c=ja=KR,Go,Us&v6(qk}pG&G2=ev^GM%w4&H4]7F&dv]J6}Ew:9w=sj-ZL}Ym$+h(Ut(Um~4n=Xs(U7%eE=Qc_JR<CA#6t<Fv|/I,IS,EG<F2(Xy$/n<Fa(h9}+9_2o&N4#7X<Zq|+f_Dp=dt&na,Ca=NJ)jY=8C=YG=s6&Q+<DO}D3=xB&R1(lw;Qn<bF(Cu|/B}HV=SS&n7,10&u0]Dm%A6^4Q=WR(TD=Xo<GH,Rj(l8)bP&n/=LM&CF,F5&ml=PJ;0k=LG=tq,Rh,D6@4i=1p&+9=YC%er_Mh;nI;0q=Fw]80=xq=FM$Gv;v6&nc;wK%H2&Kj;vs,AA=YP,66}bI(qR~5U=6q~4b$Ni=K5.X3$So&Iu(p+]8G=Cf=RY(TS_O3(iH&57=fE=Dg_Do#9z#7H;FK{qd_2k%JR}en&gh_z8;Rx}9p<cN_Ne,DO;LN_7o~/p=NF=5Y}gN<ce<C1,QE]Wv=3u<BC}GK]yq}DY&u/_hj=II(pz&rC,jV&+Z}ut=NQ;Cg-SR_ZS,+o=u/;Oy_RK_QF(Fx&xP}Wr&TA,Uh&g1=yr{ax[VF$Pg(YB;Ox=Vy;+W(Sp}XV%dd&33(l/]l4#4Y}OE=6c=bw(A7&9t%wd&N/&mo,JH&Qe)fm=Ao}fu=tH";
    var deltaData = "FAZDC6BALcLZCA+GBARCW8wNCcDDZ8LVFBOqqDUiou+M42TFAyERXFb7EjhP+vmBFpFrUpfDV2F7eB+eCltCHJFWLFCED+pWTojEIHFXc3aFn4F68zqjEuKidS1QBVPDEhE7NA4mhMF7oThD49ot3FgtzHFCK0acW1x8DH1EmLoIlrWFBLE+y5+NA3Cx65wJHTaEZVaK1mWAmPGxgYCdxwOjTDIt/faOEhTl1vqNsKtJCOhJWuio2g07KLZEQsFBUpNtwEByBgxFslFheFbiEPvi61msDvApxCzB6rBCzox7joYA5UdDc+Cb4FSgIabpXFAj3bjkmFAxCZE+mD/SFf/0ELecYCt3nLoxC6WEZf2tKDB4oZvrEmqFkKk7BwILA7gtYBpsTq//D4jD0F0wEB9pyQ1BD5Ba0oYHDI+sbDFhvrHXdDHfgFEIJLi5r8qercNFBgFLC4bo5ERJtamWBDFy73KCEb6M8VpmEt330ygCTK58EIIFkYgF84gtGA9Uyh3m68iVrFbWFbcbqiCYHZ9J1jeRPbL8yswhMiDbhEhdNoSwFbZrLT740ABEqgCkO8J1BLd1VhKKR4sD1yUo0z+FF59Mvg71CFbyEhbHSFBKEIKyoQNgQppq9T0KAqePu0ZFGrXOHdKJqkoTFhYvpDNyuuznrN84thJbsCoO6Cu6Xlvntvy0QYuAExQEYtTUBf3CoCqwgGFZ4u1HJFzDVwEy3cjcpV4QvsPaBC3rCGyCF23o4K3pp2gberGgFEJEHo4nHICtyKH2ZqyxhN05KBBJIQlKh/Oujv/DH32VrlqFdIFC7Fz9Ct4kaqFME0UETLprnN9kfy+kFmtQBB0+5CFu0N9Ij8l/VvJDh2oq3hT6EzjTHKFN7ZjZwoTsAZ4Exsko6Fpa6WC+sduz8jyrLpegTv2h1EBeYpLpm2czQW0KoCcS0bCVXCmuWJDBjN1nQNLdF58SFJ0h7i3pC3oEOKy/FjBklL70XvBEEIWp2yZ04xObzAWDDJG7f+DbqBEA7LyiR95j7MDVdDViz2RE5vWlBMv5e4+VfhP3aXNPhvLSynb9O2x4uFBV+3jqu6d5pCG28/sETByvmu/+IJ0L3wb4rj9DNOLBF6XPIODr4L19U9RRofAG6Nxydi8Bki8BhGJbBAJKzbJxkZSlF9Q2Cu8oKqggB9hBArwLLqEBWEtFowy8XK8bEyw9snT+BeyFk1ZCSrdmgfEwFePTgCjELBEnIbjaDDPJm36rG9pztcEzT8dGk23SBhXBB1H4z+OWze0ooFzz8pDBYFvp9j9tvFByf9y4EFdVnz026CGR5qMr7fxMHN8UUdlyJAzlTBDRC28k+L4FB8078ljyD91tUj1ocnTs8vdEf7znbzm+GIjEZnoZE5rnLL700Xc7yHfz05nWxy03vBB9YGHYOWxgMQGBCR24CVYNE1hpfKxN0zKnfJDmmMgMmBWqNbjfSyFCBWSCGCgR8yFXiHyEj+VtD1FB3FpC1zI0kFbzifiKTLm9yq5zFmur+q8FHqjoOBWsBPiDbnCC2ErunV6cJ6TygXFYHYp7MKN9RUlSIS8/xBAGYLzeqUnBF4QbsTuUkUqGs6CaiDWKWjQK9EJkjpkTmNCPYXL";
    // @TODO: Load lazily
    var wordlist = {
        zh_cn: null,
        zh_tw: null
    };
    var Checks = {
        zh_cn: "0x17bcc4d8547e5a7135e365d1ab443aaae95e76d8230c2782c67305d4f21497a1",
        zh_tw: "0x51e720e90c7b87bec1d70eb6e74a21a449bd3ec9c020b01d3a40ed991b60ce5d"
    };
    var codes = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var style = "~!@#$%^&*_-=[]{}|;:,.()<>?";
    function loadWords(lang) {
        if (wordlist[lang.locale] !== null) {
            return;
        }
        wordlist[lang.locale] = [];
        var deltaOffset = 0;
        for (var i = 0; i < 2048; i++) {
            var s = style.indexOf(data[i * 3]);
            var bytes = [
                228 + (s >> 2),
                128 + codes.indexOf(data[i * 3 + 1]),
                128 + codes.indexOf(data[i * 3 + 2]),
            ];
            if (lang.locale === "zh_tw") {
                var common = s % 4;
                for (var i_1 = common; i_1 < 3; i_1++) {
                    bytes[i_1] = codes.indexOf(deltaData[deltaOffset++]) + ((i_1 == 0) ? 228 : 128);
                }
            }
            wordlist[lang.locale].push((0, strings_1.toUtf8String)(bytes));
        }
        // Verify the computed list matches the official list
        /* istanbul ignore if */
        if (wordlist_1.Wordlist.check(lang) !== Checks[lang.locale]) {
            wordlist[lang.locale] = null;
            throw new Error("BIP39 Wordlist for " + lang.locale + " (Chinese) FAILED");
        }
    }
    var LangZh = /** @class */ (function (_super) {
        __extends(LangZh, _super);
        function LangZh(country) {
            return _super.call(this, "zh_" + country) || this;
        }
        LangZh.prototype.getWord = function (index) {
            loadWords(this);
            return wordlist[this.locale][index];
        };
        LangZh.prototype.getWordIndex = function (word) {
            loadWords(this);
            return wordlist[this.locale].indexOf(word);
        };
        LangZh.prototype.split = function (mnemonic) {
            mnemonic = mnemonic.replace(/(?:\u3000| )+/g, "");
            return mnemonic.split("");
        };
        return LangZh;
    }(wordlist_1.Wordlist));
    var langZhCn = new LangZh("cn");
    exports.langZhCn = langZhCn;
    wordlist_1.Wordlist.register(langZhCn);
    wordlist_1.Wordlist.register(langZhCn, "zh");
    var langZhTw = new LangZh("tw");
    exports.langZhTw = langZhTw;
    wordlist_1.Wordlist.register(langZhTw);
    
    },{"./wordlist":120,"@ethersproject/strings":99}],120:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Wordlist = exports.logger = void 0;
    // This gets overridden by rollup
    var exportWordlist = false;
    var hash_1 = require("@ethersproject/hash");
    var properties_1 = require("@ethersproject/properties");
    var logger_1 = require("@ethersproject/logger");
    var _version_1 = require("./_version");
    exports.logger = new logger_1.Logger(_version_1.version);
    var Wordlist = /** @class */ (function () {
        function Wordlist(locale) {
            var _newTarget = this.constructor;
            exports.logger.checkAbstract(_newTarget, Wordlist);
            (0, properties_1.defineReadOnly)(this, "locale", locale);
        }
        // Subclasses may override this
        Wordlist.prototype.split = function (mnemonic) {
            return mnemonic.toLowerCase().split(/ +/g);
        };
        // Subclasses may override this
        Wordlist.prototype.join = function (words) {
            return words.join(" ");
        };
        Wordlist.check = function (wordlist) {
            var words = [];
            for (var i = 0; i < 2048; i++) {
                var word = wordlist.getWord(i);
                /* istanbul ignore if */
                if (i !== wordlist.getWordIndex(word)) {
                    return "0x";
                }
                words.push(word);
            }
            return (0, hash_1.id)(words.join("\n") + "\n");
        };
        Wordlist.register = function (lang, name) {
            if (!name) {
                name = lang.locale;
            }
            /* istanbul ignore if */
            if (exportWordlist) {
                try {
                    var anyGlobal = window;
                    if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {
                        if (!anyGlobal._ethers.wordlists[name]) {
                            (0, properties_1.defineReadOnly)(anyGlobal._ethers.wordlists, name, lang);
                        }
                    }
                }
                catch (error) { }
            }
        };
        return Wordlist;
    }());
    exports.Wordlist = Wordlist;
    
    },{"./_version":110,"@ethersproject/hash":41,"@ethersproject/logger":56,"@ethersproject/properties":62}],121:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wordlists = void 0;
    var lang_cz_1 = require("./lang-cz");
    var lang_en_1 = require("./lang-en");
    var lang_es_1 = require("./lang-es");
    var lang_fr_1 = require("./lang-fr");
    var lang_ja_1 = require("./lang-ja");
    var lang_ko_1 = require("./lang-ko");
    var lang_it_1 = require("./lang-it");
    var lang_zh_1 = require("./lang-zh");
    exports.wordlists = {
        cz: lang_cz_1.langCz,
        en: lang_en_1.langEn,
        es: lang_es_1.langEs,
        fr: lang_fr_1.langFr,
        it: lang_it_1.langIt,
        ja: lang_ja_1.langJa,
        ko: lang_ko_1.langKo,
        zh: lang_zh_1.langZhCn,
        zh_cn: lang_zh_1.langZhCn,
        zh_tw: lang_zh_1.langZhTw
    };
    
    },{"./lang-cz":112,"./lang-en":113,"./lang-es":114,"./lang-fr":115,"./lang-it":116,"./lang-ja":117,"./lang-ko":118,"./lang-zh":119}],122:[function(require,module,exports){
    'use strict'
    var ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'
    
    // pre-compute lookup table
    var ALPHABET_MAP = {}
    for (var z = 0; z < ALPHABET.length; z++) {
      var x = ALPHABET.charAt(z)
    
      if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')
      ALPHABET_MAP[x] = z
    }
    
    function polymodStep (pre) {
      var b = pre >> 25
      return ((pre & 0x1FFFFFF) << 5) ^
        (-((b >> 0) & 1) & 0x3b6a57b2) ^
        (-((b >> 1) & 1) & 0x26508e6d) ^
        (-((b >> 2) & 1) & 0x1ea119fa) ^
        (-((b >> 3) & 1) & 0x3d4233dd) ^
        (-((b >> 4) & 1) & 0x2a1462b3)
    }
    
    function prefixChk (prefix) {
      var chk = 1
      for (var i = 0; i < prefix.length; ++i) {
        var c = prefix.charCodeAt(i)
        if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'
    
        chk = polymodStep(chk) ^ (c >> 5)
      }
      chk = polymodStep(chk)
    
      for (i = 0; i < prefix.length; ++i) {
        var v = prefix.charCodeAt(i)
        chk = polymodStep(chk) ^ (v & 0x1f)
      }
      return chk
    }
    
    function encode (prefix, words, LIMIT) {
      LIMIT = LIMIT || 90
      if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')
    
      prefix = prefix.toLowerCase()
    
      // determine chk mod
      var chk = prefixChk(prefix)
      if (typeof chk === 'string') throw new Error(chk)
    
      var result = prefix + '1'
      for (var i = 0; i < words.length; ++i) {
        var x = words[i]
        if ((x >> 5) !== 0) throw new Error('Non 5-bit word')
    
        chk = polymodStep(chk) ^ x
        result += ALPHABET.charAt(x)
      }
    
      for (i = 0; i < 6; ++i) {
        chk = polymodStep(chk)
      }
      chk ^= 1
    
      for (i = 0; i < 6; ++i) {
        var v = (chk >> ((5 - i) * 5)) & 0x1f
        result += ALPHABET.charAt(v)
      }
    
      return result
    }
    
    function __decode (str, LIMIT) {
      LIMIT = LIMIT || 90
      if (str.length < 8) return str + ' too short'
      if (str.length > LIMIT) return 'Exceeds length limit'
    
      // don't allow mixed case
      var lowered = str.toLowerCase()
      var uppered = str.toUpperCase()
      if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str
      str = lowered
    
      var split = str.lastIndexOf('1')
      if (split === -1) return 'No separator character for ' + str
      if (split === 0) return 'Missing prefix for ' + str
    
      var prefix = str.slice(0, split)
      var wordChars = str.slice(split + 1)
      if (wordChars.length < 6) return 'Data too short'
    
      var chk = prefixChk(prefix)
      if (typeof chk === 'string') return chk
    
      var words = []
      for (var i = 0; i < wordChars.length; ++i) {
        var c = wordChars.charAt(i)
        var v = ALPHABET_MAP[c]
        if (v === undefined) return 'Unknown character ' + c
        chk = polymodStep(chk) ^ v
    
        // not in the checksum?
        if (i + 6 >= wordChars.length) continue
        words.push(v)
      }
    
      if (chk !== 1) return 'Invalid checksum for ' + str
      return { prefix: prefix, words: words }
    }
    
    function decodeUnsafe () {
      var res = __decode.apply(null, arguments)
      if (typeof res === 'object') return res
    }
    
    function decode (str) {
      var res = __decode.apply(null, arguments)
      if (typeof res === 'object') return res
    
      throw new Error(res)
    }
    
    function convert (data, inBits, outBits, pad) {
      var value = 0
      var bits = 0
      var maxV = (1 << outBits) - 1
    
      var result = []
      for (var i = 0; i < data.length; ++i) {
        value = (value << inBits) | data[i]
        bits += inBits
    
        while (bits >= outBits) {
          bits -= outBits
          result.push((value >> bits) & maxV)
        }
      }
    
      if (pad) {
        if (bits > 0) {
          result.push((value << (outBits - bits)) & maxV)
        }
      } else {
        if (bits >= inBits) return 'Excess padding'
        if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'
      }
    
      return result
    }
    
    function toWordsUnsafe (bytes) {
      var res = convert(bytes, 8, 5, true)
      if (Array.isArray(res)) return res
    }
    
    function toWords (bytes) {
      var res = convert(bytes, 8, 5, true)
      if (Array.isArray(res)) return res
    
      throw new Error(res)
    }
    
    function fromWordsUnsafe (words) {
      var res = convert(words, 5, 8, false)
      if (Array.isArray(res)) return res
    }
    
    function fromWords (words) {
      var res = convert(words, 5, 8, false)
      if (Array.isArray(res)) return res
    
      throw new Error(res)
    }
    
    module.exports = {
      decodeUnsafe: decodeUnsafe,
      decode: decode,
      encode: encode,
      toWordsUnsafe: toWordsUnsafe,
      toWords: toWords,
      fromWordsUnsafe: fromWordsUnsafe,
      fromWords: fromWords
    }
    
    },{}],123:[function(require,module,exports){
    (function (module, exports) {
      'use strict';
    
      // Utils
      function assert (val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }
    
      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits (ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    
      // BN
    
      function BN (number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
    
        this.negative = 0;
        this.words = null;
        this.length = 0;
    
        // Reduction context
        this.red = null;
    
        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }
    
          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }
    
      BN.BN = BN;
      BN.wordSize = 26;
    
      var Buffer;
      try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
          Buffer = window.Buffer;
        } else {
          Buffer = require('buffer').Buffer;
        }
      } catch (e) {
      }
    
      BN.isBN = function isBN (num) {
        if (num instanceof BN) {
          return true;
        }
    
        return num !== null && typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
    
      BN.max = function max (left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
    
      BN.min = function min (left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
    
      BN.prototype._init = function init (number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }
    
        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }
    
        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
    
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
          this.negative = 1;
        }
    
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === 'le') {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
    
      BN.prototype._initNumber = function _initNumber (number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [ number & 0x3ffffff ];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff
          ];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff,
            1
          ];
          this.length = 3;
        }
    
        if (endian !== 'le') return;
    
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };
    
      BN.prototype._initArray = function _initArray (number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [ 0 ];
          this.length = 1;
          return this;
        }
    
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
    
        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
    
      function parseHex4Bits (string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) {
          return c - 55;
        // 'a' - 'f'
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        // '0' - '9'
        } else {
          return (c - 48) & 0xf;
        }
      }
    
      function parseHexByte (string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
    
      BN.prototype._parseHex = function _parseHex (number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
    
        // 24-bits chunks
        var off = 0;
        var j = 0;
    
        var w;
        if (endian === 'be') {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
    
        this.strip();
      };
    
      function parseBase (str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
    
          r *= mul;
    
          // 'a'
          if (c >= 49) {
            r += c - 49 + 0xa;
    
          // 'A'
          } else if (c >= 17) {
            r += c - 17 + 0xa;
    
          // '0' - '9'
          } else {
            r += c;
          }
        }
        return r;
      }
    
      BN.prototype._parseBase = function _parseBase (number, base, start) {
        // Initialize as zero
        this.words = [ 0 ];
        this.length = 1;
    
        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;
    
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
    
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
    
          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
    
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
    
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
    
          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
    
        this.strip();
      };
    
      BN.prototype.copy = function copy (dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
    
      BN.prototype.clone = function clone () {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
    
      BN.prototype._expand = function _expand (size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
    
      // Remove leading `0` from `this`
      BN.prototype.strip = function strip () {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
    
      BN.prototype._normSign = function _normSign () {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
    
      BN.prototype.inspect = function inspect () {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      };
    
      /*
    
      var zeros = [];
      var groupSizes = [];
      var groupBases = [];
    
      var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }
    
      */
    
      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
      ];
    
      var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
      ];
    
      var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
      ];
    
      BN.prototype.toString = function toString (base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
    
        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 0xffffff).toString(16);
            carry = (w >>> (24 - off)) & 0xffffff;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }
    
        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
    
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }
    
        assert(false, 'Base should be between 2 and 36');
      };
    
      BN.prototype.toNumber = function toNumber () {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
      };
    
      BN.prototype.toJSON = function toJSON () {
        return this.toString(16);
      };
    
      BN.prototype.toBuffer = function toBuffer (endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
      };
    
      BN.prototype.toArray = function toArray (endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
    
      BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
    
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
    
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          // Assume big-endian
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
    
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);
    
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);
    
            res[i] = b;
          }
    
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
    
        return res;
      };
    
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits (w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits (w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
    
      BN.prototype._zeroBits = function _zeroBits (w) {
        // Short-cut
        if (w === 0) return 26;
    
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };
    
      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength () {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
    
      function toBitArray (num) {
        var w = new Array(num.bitLength());
    
        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;
    
          w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
        }
    
        return w;
      }
    
      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits () {
        if (this.isZero()) return 0;
    
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };
    
      BN.prototype.byteLength = function byteLength () {
        return Math.ceil(this.bitLength() / 8);
      };
    
      BN.prototype.toTwos = function toTwos (width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
    
      BN.prototype.fromTwos = function fromTwos (width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
    
      BN.prototype.isNeg = function isNeg () {
        return this.negative !== 0;
      };
    
      // Return negative clone of `this`
      BN.prototype.neg = function neg () {
        return this.clone().ineg();
      };
    
      BN.prototype.ineg = function ineg () {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
    
        return this;
      };
    
      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor (num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
    
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
    
        return this.strip();
      };
    
      BN.prototype.ior = function ior (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
    
      // Or `num` with `this`
      BN.prototype.or = function or (num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
    
      BN.prototype.uor = function uor (num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
    
      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand (num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
    
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
    
        this.length = b.length;
    
        return this.strip();
      };
    
      BN.prototype.iand = function iand (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
    
      // And `num` with `this`
      BN.prototype.and = function and (num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
    
      BN.prototype.uand = function uand (num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
    
      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor (num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
    
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
    
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
    
        this.length = a.length;
    
        return this.strip();
      };
    
      BN.prototype.ixor = function ixor (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
    
      // Xor `num` with `this`
      BN.prototype.xor = function xor (num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
    
      BN.prototype.uxor = function uxor (num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
    
      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn (width) {
        assert(typeof width === 'number' && width >= 0);
    
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
    
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
    
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
    
        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }
    
        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }
    
        // And remove leading zeroes
        return this.strip();
      };
    
      BN.prototype.notn = function notn (width) {
        return this.clone().inotn(width);
      };
    
      // Set `bit` of `this`
      BN.prototype.setn = function setn (bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
    
        var off = (bit / 26) | 0;
        var wbit = bit % 26;
    
        this._expand(off + 1);
    
        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
    
        return this.strip();
      };
    
      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd (num) {
        var r;
    
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
    
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
    
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
    
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
    
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
    
        return this;
      };
    
      // Add `num` to `this`
      BN.prototype.add = function add (num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
    
        if (this.length > num.length) return this.clone().iadd(num);
    
        return num.clone().iadd(this);
      };
    
      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub (num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
    
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
    
        // At this point both numbers are positive
        var cmp = this.cmp(num);
    
        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
    
        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
    
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
    
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
    
        this.length = Math.max(this.length, i);
    
        if (a !== this) {
          this.negative = 1;
        }
    
        return this.strip();
      };
    
      // Subtract `num` from `this`
      BN.prototype.sub = function sub (num) {
        return this.clone().isub(num);
      };
    
      function smallMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;
    
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
    
        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;
    
        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 0x4000000) | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
    
        return out.strip();
      }
    
      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo (self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
    
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
    
      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
    
      function bigMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
    
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
    
            var lo = r & 0x3ffffff;
            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 0x3ffffff;
            ncarry = (ncarry + (lo >>> 26)) | 0;
    
            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
    
        return out.strip();
      }
    
      function jumboMulTo (self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
      }
    
      BN.prototype.mulTo = function mulTo (num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
    
        return res;
      };
    
      // Cooley-Tukey algorithm for FFT
      // slightly revisited to rely on looping instead of recursion
    
      function FFTM (x, y) {
        this.x = x;
        this.y = y;
      }
    
      FFTM.prototype.makeRBT = function makeRBT (N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
    
        return t;
      };
    
      // Returns binary-reversed representation of `x`
      FFTM.prototype.revBin = function revBin (x, l, N) {
        if (x === 0 || x === N - 1) return x;
    
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << (l - i - 1);
          x >>= 1;
        }
    
        return rb;
      };
    
      // Performs "tweedling" phase, therefore 'emulating'
      // behaviour of the recursive algorithm
      FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
    
      FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
    
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
    
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
    
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
    
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
    
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
    
              var rx = rtwdf_ * ro - itwdf_ * io;
    
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
    
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
    
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
    
              /* jshint maxdepth : false */
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
    
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
    
      FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
    
        return 1 << i + 1 + odd;
      };
    
      FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
        if (N <= 1) return;
    
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
    
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
    
          t = iws[i];
    
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
    
      FFTM.prototype.normalize13b = function normalize13b (ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
            Math.round(ws[2 * i] / N) +
            carry;
    
          ws[i] = w & 0x3ffffff;
    
          if (w < 0x4000000) {
            carry = 0;
          } else {
            carry = w / 0x4000000 | 0;
          }
        }
    
        return ws;
      };
    
      FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
    
          rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
          rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
        }
    
        // Pad with zeroes
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
    
        assert(carry === 0);
        assert((carry & ~0x1fff) === 0);
      };
    
      FFTM.prototype.stub = function stub (N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
    
        return ph;
      };
    
      FFTM.prototype.mulp = function mulp (x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
    
        var rbt = this.makeRBT(N);
    
        var _ = this.stub(N);
    
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
    
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
    
        var rmws = out.words;
        rmws.length = N;
    
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
    
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
    
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
    
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
    
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
    
      // Multiply `this` by `num`
      BN.prototype.mul = function mul (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
    
      // Multiply employing FFT
      BN.prototype.mulf = function mulf (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
    
      // In-place Multiplication
      BN.prototype.imul = function imul (num) {
        return this.clone().mulTo(num, this);
      };
    
      BN.prototype.imuln = function imuln (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
    
        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += (w / 0x4000000) | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }
    
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
    
        return this;
      };
    
      BN.prototype.muln = function muln (num) {
        return this.clone().imuln(num);
      };
    
      // `this` * `this`
      BN.prototype.sqr = function sqr () {
        return this.mul(this);
      };
    
      // `this` * `this` in-place
      BN.prototype.isqr = function isqr () {
        return this.imul(this.clone());
      };
    
      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow (num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
    
        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }
    
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
    
            res = res.mul(q);
          }
        }
    
        return res;
      };
    
      // Shift-left in-place
      BN.prototype.iushln = function iushln (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;
    
        if (r !== 0) {
          var carry = 0;
    
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }
    
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
    
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
    
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
    
          this.length += s;
        }
    
        return this.strip();
      };
    
      BN.prototype.ishln = function ishln (bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };
    
      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn (bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }
    
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;
    
        h -= s;
        h = Math.max(0, h);
    
        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
    
        if (s === 0) {
          // No-op, we should not move anything at all
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
    
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }
    
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
    
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
    
        return this.strip();
      };
    
      BN.prototype.ishrn = function ishrn (bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
    
      // Shift-left
      BN.prototype.shln = function shln (bits) {
        return this.clone().ishln(bits);
      };
    
      BN.prototype.ushln = function ushln (bits) {
        return this.clone().iushln(bits);
      };
    
      // Shift-right
      BN.prototype.shrn = function shrn (bits) {
        return this.clone().ishrn(bits);
      };
    
      BN.prototype.ushrn = function ushrn (bits) {
        return this.clone().iushrn(bits);
      };
    
      // Test if n bit is set
      BN.prototype.testn = function testn (bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
    
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
    
        // Check bit and return
        var w = this.words[s];
    
        return !!(w & q);
      };
    
      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
    
        assert(this.negative === 0, 'imaskn works only with positive numbers');
    
        if (this.length <= s) {
          return this;
        }
    
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
    
        if (r !== 0) {
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          this.words[this.length - 1] &= mask;
        }
    
        return this.strip();
      };
    
      // Return only lowers bits of number
      BN.prototype.maskn = function maskn (bits) {
        return this.clone().imaskn(bits);
      };
    
      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
    
        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
    
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
    
        // Add without checks
        return this._iaddn(num);
      };
    
      BN.prototype._iaddn = function _iaddn (num) {
        this.words[0] += num;
    
        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
    
        return this;
      };
    
      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
    
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
    
        this.words[0] -= num;
    
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }
    
        return this.strip();
      };
    
      BN.prototype.addn = function addn (num) {
        return this.clone().iaddn(num);
      };
    
      BN.prototype.subn = function subn (num) {
        return this.clone().isubn(num);
      };
    
      BN.prototype.iabs = function iabs () {
        this.negative = 0;
    
        return this;
      };
    
      BN.prototype.abs = function abs () {
        return this.clone().iabs();
      };
    
      BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
        var len = num.length + shift;
        var i;
    
        this._expand(len);
    
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - ((right / 0x4000000) | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }
    
        if (carry === 0) return this.strip();
    
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
    
        return this.strip();
      };
    
      BN.prototype._wordDiv = function _wordDiv (num, mode) {
        var shift = this.length - num.length;
    
        var a = this.clone();
        var b = num;
    
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
    
        // Initialize quotient
        var m = a.length - b.length;
        var q;
    
        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
    
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
    
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 +
            (a.words[b.length + j - 1] | 0);
    
          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min((qj / bhi) | 0, 0x3ffffff);
    
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
    
        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }
    
        return {
          div: q || null,
          mod: a
        };
      };
    
      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod (num, mode, positive) {
        assert(!num.isZero());
    
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
    
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
    
          if (mode !== 'mod') {
            div = res.div.neg();
          }
    
          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
    
          return {
            div: div,
            mod: mod
          };
        }
    
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
    
          if (mode !== 'mod') {
            div = res.div.neg();
          }
    
          return {
            div: div,
            mod: res.mod
          };
        }
    
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
    
          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
    
          return {
            div: res.div,
            mod: mod
          };
        }
    
        // Both numbers are positive at this point
    
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
    
        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
    
          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }
    
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
    
        return this._wordDiv(num, mode);
      };
    
      // Find `this` / `num`
      BN.prototype.div = function div (num) {
        return this.divmod(num, 'div', false).div;
      };
    
      // Find `this` % `num`
      BN.prototype.mod = function mod (num) {
        return this.divmod(num, 'mod', false).mod;
      };
    
      BN.prototype.umod = function umod (num) {
        return this.divmod(num, 'mod', true).mod;
      };
    
      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound (num) {
        var dm = this.divmod(num);
    
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
    
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
    
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
    
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
    
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
    
      BN.prototype.modn = function modn (num) {
        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;
    
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
    
        return acc;
      };
    
      // In-place division by number
      BN.prototype.idivn = function idivn (num) {
        assert(num <= 0x3ffffff);
    
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }
    
        return this.strip();
      };
    
      BN.prototype.divn = function divn (num) {
        return this.clone().idivn(num);
      };
    
      BN.prototype.egcd = function egcd (p) {
        assert(p.negative === 0);
        assert(!p.isZero());
    
        var x = this;
        var y = p.clone();
    
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
    
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
    
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
    
        var g = 0;
    
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
    
        var yp = y.clone();
        var xp = x.clone();
    
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
    
              A.iushrn(1);
              B.iushrn(1);
            }
          }
    
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
    
              C.iushrn(1);
              D.iushrn(1);
            }
          }
    
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
    
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
    
      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp (p) {
        assert(p.negative === 0);
        assert(!p.isZero());
    
        var a = this;
        var b = p.clone();
    
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
    
        var x1 = new BN(1);
        var x2 = new BN(0);
    
        var delta = b.clone();
    
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
    
              x1.iushrn(1);
            }
          }
    
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
    
              x2.iushrn(1);
            }
          }
    
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
    
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
    
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
    
        return res;
      };
    
      BN.prototype.gcd = function gcd (num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
    
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
    
        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
    
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
    
          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
    
          a.isub(b);
        } while (true);
    
        return b.iushln(shift);
      };
    
      // Invert number in the field F(num)
      BN.prototype.invm = function invm (num) {
        return this.egcd(num).a.umod(num);
      };
    
      BN.prototype.isEven = function isEven () {
        return (this.words[0] & 1) === 0;
      };
    
      BN.prototype.isOdd = function isOdd () {
        return (this.words[0] & 1) === 1;
      };
    
      // And first word and num
      BN.prototype.andln = function andln (num) {
        return this.words[0] & num;
      };
    
      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn (bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
    
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
    
        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
    
      BN.prototype.isZero = function isZero () {
        return this.length === 1 && this.words[0] === 0;
      };
    
      BN.prototype.cmpn = function cmpn (num) {
        var negative = num < 0;
    
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
    
        this.strip();
    
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
    
          assert(num <= 0x3ffffff, 'Number is too big');
    
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
    
      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp (num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
    
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
    
      // Unsigned comparison
      BN.prototype.ucmp = function ucmp (num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
    
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
    
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
    
      BN.prototype.gtn = function gtn (num) {
        return this.cmpn(num) === 1;
      };
    
      BN.prototype.gt = function gt (num) {
        return this.cmp(num) === 1;
      };
    
      BN.prototype.gten = function gten (num) {
        return this.cmpn(num) >= 0;
      };
    
      BN.prototype.gte = function gte (num) {
        return this.cmp(num) >= 0;
      };
    
      BN.prototype.ltn = function ltn (num) {
        return this.cmpn(num) === -1;
      };
    
      BN.prototype.lt = function lt (num) {
        return this.cmp(num) === -1;
      };
    
      BN.prototype.lten = function lten (num) {
        return this.cmpn(num) <= 0;
      };
    
      BN.prototype.lte = function lte (num) {
        return this.cmp(num) <= 0;
      };
    
      BN.prototype.eqn = function eqn (num) {
        return this.cmpn(num) === 0;
      };
    
      BN.prototype.eq = function eq (num) {
        return this.cmp(num) === 0;
      };
    
      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red (num) {
        return new Red(num);
      };
    
      BN.prototype.toRed = function toRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };
    
      BN.prototype.fromRed = function fromRed () {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };
    
      BN.prototype._forceRed = function _forceRed (ctx) {
        this.red = ctx;
        return this;
      };
    
      BN.prototype.forceRed = function forceRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };
    
      BN.prototype.redAdd = function redAdd (num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };
    
      BN.prototype.redIAdd = function redIAdd (num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };
    
      BN.prototype.redSub = function redSub (num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };
    
      BN.prototype.redISub = function redISub (num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };
    
      BN.prototype.redShl = function redShl (num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };
    
      BN.prototype.redMul = function redMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
    
      BN.prototype.redIMul = function redIMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
    
      BN.prototype.redSqr = function redSqr () {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };
    
      BN.prototype.redISqr = function redISqr () {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };
    
      // Square root over p
      BN.prototype.redSqrt = function redSqrt () {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
    
      BN.prototype.redInvm = function redInvm () {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };
    
      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg () {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };
    
      BN.prototype.redPow = function redPow (num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
    
      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
    
      // Pseudo-Mersenne prime
      function MPrime (name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
    
        this.tmp = this._tmp();
      }
    
      MPrime.prototype._tmp = function _tmp () {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
    
      MPrime.prototype.ireduce = function ireduce (num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
    
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
    
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is BN v4 instance
            r.strip();
          } else {
            // r is BN v5 instance
            r._strip();
          }
        }
    
        return r;
      };
    
      MPrime.prototype.split = function split (input, out) {
        input.iushrn(this.n, 0, out);
      };
    
      MPrime.prototype.imulK = function imulK (num) {
        return num.imul(this.k);
      };
    
      function K256 () {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);
    
      K256.prototype.split = function split (input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
    
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
    
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
    
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
    
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
    
      K256.prototype.imulK = function imulK (num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
    
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }
    
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
    
      function P224 () {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);
    
      function P192 () {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);
    
      function P25519 () {
        // 2 ^ 255 - 19
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);
    
      P25519.prototype.imulK = function imulK (num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;
    
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
    
      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime (name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
    
        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;
    
        return prime;
      };
    
      //
      // Base reduction engine
      //
      function Red (m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }
    
      Red.prototype._verify1 = function _verify1 (a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };
    
      Red.prototype._verify2 = function _verify2 (a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red,
          'red works only with red numbers');
      };
    
      Red.prototype.imod = function imod (a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
    
      Red.prototype.neg = function neg (a) {
        if (a.isZero()) {
          return a.clone();
        }
    
        return this.m.sub(a)._forceRed(this);
      };
    
      Red.prototype.add = function add (a, b) {
        this._verify2(a, b);
    
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
    
      Red.prototype.iadd = function iadd (a, b) {
        this._verify2(a, b);
    
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
    
      Red.prototype.sub = function sub (a, b) {
        this._verify2(a, b);
    
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
    
      Red.prototype.isub = function isub (a, b) {
        this._verify2(a, b);
    
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
    
      Red.prototype.shl = function shl (a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
    
      Red.prototype.imul = function imul (a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
    
      Red.prototype.mul = function mul (a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
    
      Red.prototype.isqr = function isqr (a) {
        return this.imul(a, a.clone());
      };
    
      Red.prototype.sqr = function sqr (a) {
        return this.mul(a, a);
      };
    
      Red.prototype.sqrt = function sqrt (a) {
        if (a.isZero()) return a.clone();
    
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
    
        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
    
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
    
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
    
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
    
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
    
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
    
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
    
        return r;
      };
    
      Red.prototype.invm = function invm (a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
    
      Red.prototype.pow = function pow (a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
    
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
    
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
    
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
    
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
    
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
    
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
    
        return res;
      };
    
      Red.prototype.convertTo = function convertTo (num) {
        var r = num.umod(this.m);
    
        return r === num ? r.clone() : r;
      };
    
      Red.prototype.convertFrom = function convertFrom (num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
    
      //
      // Montgomery method engine
      //
    
      BN.mont = function mont (num) {
        return new Mont(num);
      };
    
      function Mont (m) {
        Red.call(this, m);
    
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }
    
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
    
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
    
      Mont.prototype.convertTo = function convertTo (num) {
        return this.imod(num.ushln(this.shift));
      };
    
      Mont.prototype.convertFrom = function convertFrom (num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
    
      Mont.prototype.imul = function imul (a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
    
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
    
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
    
        return res._forceRed(this);
      };
    
      Mont.prototype.mul = function mul (a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
    
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
    
        return res._forceRed(this);
      };
    
      Mont.prototype.invm = function invm (a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === 'undefined' || module, this);
    
    },{"buffer":257}],124:[function(require,module,exports){
    var r;
    
    module.exports = function rand(len) {
      if (!r)
        r = new Rand(null);
    
      return r.generate(len);
    };
    
    function Rand(rand) {
      this.rand = rand;
    }
    module.exports.Rand = Rand;
    
    Rand.prototype.generate = function generate(len) {
      return this._rand(len);
    };
    
    // Emulate crypto API using randy
    Rand.prototype._rand = function _rand(n) {
      if (this.rand.getBytes)
        return this.rand.getBytes(n);
    
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };
    
    if (typeof self === 'object') {
      if (self.crypto && self.crypto.getRandomValues) {
        // Modern browsers
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.crypto.getRandomValues(arr);
          return arr;
        };
      } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        // IE
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.msCrypto.getRandomValues(arr);
          return arr;
        };
    
      // Safari's WebWorkers do not have `crypto`
      } else if (typeof window === 'object') {
        // Old junk
        Rand.prototype._rand = function() {
          throw new Error('Not implemented yet');
        };
      }
    } else {
      // Node.js or Web worker with no crypto support
      try {
        var crypto = require('crypto');
        if (typeof crypto.randomBytes !== 'function')
          throw new Error('Not supported');
    
        Rand.prototype._rand = function _rand(n) {
          return crypto.randomBytes(n);
        };
      } catch (e) {
      }
    }
    
    },{"crypto":257}],125:[function(require,module,exports){
    var Buffer = require('safe-buffer').Buffer
    var Transform = require('stream').Transform
    var StringDecoder = require('string_decoder').StringDecoder
    var inherits = require('inherits')
    
    function CipherBase (hashMode) {
      Transform.call(this)
      this.hashMode = typeof hashMode === 'string'
      if (this.hashMode) {
        this[hashMode] = this._finalOrDigest
      } else {
        this.final = this._finalOrDigest
      }
      if (this._final) {
        this.__final = this._final
        this._final = null
      }
      this._decoder = null
      this._encoding = null
    }
    inherits(CipherBase, Transform)
    
    CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
      if (typeof data === 'string') {
        data = Buffer.from(data, inputEnc)
      }
    
      var outData = this._update(data)
      if (this.hashMode) return this
    
      if (outputEnc) {
        outData = this._toString(outData, outputEnc)
      }
    
      return outData
    }
    
    CipherBase.prototype.setAutoPadding = function () {}
    CipherBase.prototype.getAuthTag = function () {
      throw new Error('trying to get auth tag in unsupported state')
    }
    
    CipherBase.prototype.setAuthTag = function () {
      throw new Error('trying to set auth tag in unsupported state')
    }
    
    CipherBase.prototype.setAAD = function () {
      throw new Error('trying to set aad in unsupported state')
    }
    
    CipherBase.prototype._transform = function (data, _, next) {
      var err
      try {
        if (this.hashMode) {
          this._update(data)
        } else {
          this.push(this._update(data))
        }
      } catch (e) {
        err = e
      } finally {
        next(err)
      }
    }
    CipherBase.prototype._flush = function (done) {
      var err
      try {
        this.push(this.__final())
      } catch (e) {
        err = e
      }
    
      done(err)
    }
    CipherBase.prototype._finalOrDigest = function (outputEnc) {
      var outData = this.__final() || Buffer.alloc(0)
      if (outputEnc) {
        outData = this._toString(outData, outputEnc, true)
      }
      return outData
    }
    
    CipherBase.prototype._toString = function (value, enc, fin) {
      if (!this._decoder) {
        this._decoder = new StringDecoder(enc)
        this._encoding = enc
      }
    
      if (this._encoding !== enc) throw new Error('can\'t switch encodings')
    
      var out = this._decoder.write(value)
      if (fin) {
        out += this._decoder.end()
      }
    
      return out
    }
    
    module.exports = CipherBase
    
    },{"inherits":184,"safe-buffer":216,"stream":409,"string_decoder":424}],126:[function(require,module,exports){
    'use strict'
    var inherits = require('inherits')
    var MD5 = require('md5.js')
    var RIPEMD160 = require('ripemd160')
    var sha = require('sha.js')
    var Base = require('cipher-base')
    
    function Hash (hash) {
      Base.call(this, 'digest')
    
      this._hash = hash
    }
    
    inherits(Hash, Base)
    
    Hash.prototype._update = function (data) {
      this._hash.update(data)
    }
    
    Hash.prototype._final = function () {
      return this._hash.digest()
    }
    
    module.exports = function createHash (alg) {
      alg = alg.toLowerCase()
      if (alg === 'md5') return new MD5()
      if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()
    
      return new Hash(sha(alg))
    }
    
    },{"cipher-base":125,"inherits":184,"md5.js":194,"ripemd160":213,"sha.js":222}],127:[function(require,module,exports){
    'use strict';
    
    var elliptic = exports;
    
    elliptic.version = require('../package.json').version;
    elliptic.utils = require('./elliptic/utils');
    elliptic.rand = require('brorand');
    elliptic.curve = require('./elliptic/curve');
    elliptic.curves = require('./elliptic/curves');
    
    // Protocols
    elliptic.ec = require('./elliptic/ec');
    elliptic.eddsa = require('./elliptic/eddsa');
    
    },{"../package.json":142,"./elliptic/curve":130,"./elliptic/curves":133,"./elliptic/ec":134,"./elliptic/eddsa":137,"./elliptic/utils":141,"brorand":124}],128:[function(require,module,exports){
    'use strict';
    
    var BN = require('bn.js');
    var utils = require('../utils');
    var getNAF = utils.getNAF;
    var getJSF = utils.getJSF;
    var assert = utils.assert;
    
    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new BN(conf.p, 16);
    
      // Use Montgomery, when there is no fast reduction for the prime
      this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
    
      // Useful for many curves
      this.zero = new BN(0).toRed(this.red);
      this.one = new BN(1).toRed(this.red);
      this.two = new BN(2).toRed(this.red);
    
      // Curve configuration, optional
      this.n = conf.n && new BN(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    
      // Temporary arrays
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);
    
      this._bitLength = this.n ? this.n.bitLength() : 0;
    
      // Generalized Greg Maxwell's trick
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    module.exports = BaseCurve;
    
    BaseCurve.prototype.point = function point() {
      throw new Error('Not implemented');
    };
    
    BaseCurve.prototype.validate = function validate() {
      throw new Error('Not implemented');
    };
    
    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert(p.precomputed);
      var doubles = p._getDoubles();
    
      var naf = getNAF(k, 1, this._bitLength);
      var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;
    
      // Translate into more windowed form
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--)
          nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
      }
    
      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };
    
    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;
    
      // Precompute window
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;
    
      // Get NAF form
      var naf = getNAF(k, w, this._bitLength);
    
      // Add `this`*(N+1) for every w-NAF index
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        // Count zeroes
        for (var l = 0; i >= 0 && naf[i] === 0; i--)
          l++;
        if (i >= 0)
          l++;
        acc = acc.dblp(l);
    
        if (i < 0)
          break;
        var z = naf[i];
        assert(z !== 0);
        if (p.type === 'affine') {
          // J +- P
          if (z > 0)
            acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
          else
            acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
        } else {
          // J +- J
          if (z > 0)
            acc = acc.add(wnd[(z - 1) >> 1]);
          else
            acc = acc.add(wnd[(-z - 1) >> 1].neg());
        }
      }
      return p.type === 'affine' ? acc.toP() : acc;
    };
    
    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
      points,
      coeffs,
      len,
      jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
    
      // Fill all arrays
      var max = 0;
      var i;
      var j;
      var p;
      for (i = 0; i < len; i++) {
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }
    
      // Comb small window NAFs
      for (i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }
    
        var comb = [
          points[a], /* 1 */
          null, /* 3 */
          null, /* 5 */
          points[b], /* 7 */
        ];
    
        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
    
        var index = [
          -3, /* -1 -1 */
          -1, /* -1 0 */
          -5, /* -1 1 */
          -7, /* 0 -1 */
          0, /* 0 0 */
          7, /* 0 1 */
          5, /* 1 -1 */
          1, /* 1 0 */
          3,  /* 1 1 */
        ];
    
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;
    
          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }
    
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i = max; i >= 0; i--) {
        var k = 0;
    
        while (i >= 0) {
          var zero = true;
          for (j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i--;
        }
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
        if (i < 0)
          break;
    
        for (j = 0; j < len; j++) {
          var z = tmp[j];
          p;
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][(z - 1) >> 1];
          else if (z < 0)
            p = wnd[j][(-z - 1) >> 1].neg();
    
          if (p.type === 'affine')
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      // Zeroify references
      for (i = 0; i < len; i++)
        wnd[i] = null;
    
      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };
    
    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;
    
    BasePoint.prototype.eq = function eq(/*other*/) {
      throw new Error('Not implemented');
    };
    
    BasePoint.prototype.validate = function validate() {
      return this.curve.validate(this);
    };
    
    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils.toArray(bytes, enc);
    
      var len = this.p.byteLength();
    
      // uncompressed, hybrid-odd, hybrid-even
      if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
          bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06)
          assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07)
          assert(bytes[bytes.length - 1] % 2 === 1);
    
        var res =  this.point(bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len));
    
        return res;
      } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                  bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
      }
      throw new Error('Unknown point format');
    };
    
    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };
    
    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray('be', len);
    
      if (compact)
        return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);
    
      return [ 0x04 ].concat(x, this.getY().toArray('be', len));
    };
    
    BasePoint.prototype.encode = function encode(enc, compact) {
      return utils.encode(this._encode(compact), enc);
    };
    
    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;
    
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null,
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
    
      return this;
    };
    
    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed)
        return false;
    
      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;
    
      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };
    
    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
    
      var doubles = [ this ];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step: step,
        points: doubles,
      };
    };
    
    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
    
      var res = [ this ];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl);
      return {
        wnd: wnd,
        points: res,
      };
    };
    
    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };
    
    BasePoint.prototype.dblp = function dblp(k) {
      var r = this;
      for (var i = 0; i < k; i++)
        r = r.dbl();
      return r;
    };
    
    },{"../utils":141,"bn.js":123}],129:[function(require,module,exports){
    'use strict';
    
    var utils = require('../utils');
    var BN = require('bn.js');
    var inherits = require('inherits');
    var Base = require('./base');
    
    var assert = utils.assert;
    
    function EdwardsCurve(conf) {
      // NOTE: Important as we are creating point in Base.call()
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;
    
      Base.call(this, 'edwards', conf);
    
      this.a = new BN(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);
    
      assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits(EdwardsCurve, Base);
    module.exports = EdwardsCurve;
    
    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA)
        return num.redNeg();
      else
        return this.a.redMul(num);
    };
    
    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC)
        return num;
      else
        return this.c.redMul(num);
    };
    
    // Just for compatibility with Short curve
    EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
      return this.point(x, y, z, t);
    };
    
    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
    
      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    
      var y2 = rhs.redMul(lhs.redInvm());
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');
    
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
    
      return this.point(x, y);
    };
    
    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
      y = new BN(y, 16);
      if (!y.red)
        y = y.toRed(this.red);
    
      // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
      var y2 = y.redSqr();
      var lhs = y2.redSub(this.c2);
      var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x2 = lhs.redMul(rhs.redInvm());
    
      if (x2.cmp(this.zero) === 0) {
        if (odd)
          throw new Error('invalid point');
        else
          return this.point(this.zero, y);
      }
    
      var x = x2.redSqrt();
      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
        throw new Error('invalid point');
    
      if (x.fromRed().isOdd() !== odd)
        x = x.redNeg();
    
      return this.point(x, y);
    };
    
    EdwardsCurve.prototype.validate = function validate(point) {
      if (point.isInfinity())
        return true;
    
      // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
      point.normalize();
    
      var x2 = point.x.redSqr();
      var y2 = point.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    
      return lhs.cmp(rhs) === 0;
    };
    
    function Point(curve, x, y, z, t) {
      Base.BasePoint.call(this, curve, 'projective');
      if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red)
          this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
    
        // Use extended coordinates
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne)
            this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits(Point, Base.BasePoint);
    
    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    
    EdwardsCurve.prototype.point = function point(x, y, z, t) {
      return new Point(this, x, y, z, t);
    };
    
    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1], obj[2]);
    };
    
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' y: ' + this.y.fromRed().toString(16, 2) +
          ' z: ' + this.z.fromRed().toString(16, 2) + '>';
    };
    
    Point.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.x.cmpn(0) === 0 &&
        (this.y.cmp(this.z) === 0 ||
        (this.zOne && this.y.cmp(this.curve.c) === 0));
    };
    
    Point.prototype._extDbl = function _extDbl() {
      // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
      //     #doubling-dbl-2008-hwcd
      // 4M + 4S
    
      // A = X1^2
      var a = this.x.redSqr();
      // B = Y1^2
      var b = this.y.redSqr();
      // C = 2 * Z1^2
      var c = this.z.redSqr();
      c = c.redIAdd(c);
      // D = a * A
      var d = this.curve._mulA(a);
      // E = (X1 + Y1)^2 - A - B
      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
      // G = D + B
      var g = d.redAdd(b);
      // F = G - C
      var f = g.redSub(c);
      // H = D - B
      var h = d.redSub(b);
      // X3 = E * F
      var nx = e.redMul(f);
      // Y3 = G * H
      var ny = g.redMul(h);
      // T3 = E * H
      var nt = e.redMul(h);
      // Z3 = F * G
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    
    Point.prototype._projDbl = function _projDbl() {
      // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
      //     #doubling-dbl-2008-bbjlp
      //     #doubling-dbl-2007-bl
      // and others
      // Generally 3M + 4S or 2M + 4S
    
      // B = (X1 + Y1)^2
      var b = this.x.redAdd(this.y).redSqr();
      // C = X1^2
      var c = this.x.redSqr();
      // D = Y1^2
      var d = this.y.redSqr();
    
      var nx;
      var ny;
      var nz;
      var e;
      var h;
      var j;
      if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
          // X3 = (B - C - D) * (F - 2)
          nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
          // Y3 = F * (E - D)
          ny = f.redMul(e.redSub(d));
          // Z3 = F^2 - 2 * F
          nz = f.redSqr().redSub(f).redSub(f);
        } else {
          // H = Z1^2
          h = this.z.redSqr();
          // J = F - 2 * H
          j = f.redSub(h).redISub(h);
          // X3 = (B-C-D)*J
          nx = b.redSub(c).redISub(d).redMul(j);
          // Y3 = F * (E - D)
          ny = f.redMul(e.redSub(d));
          // Z3 = F * J
          nz = f.redMul(j);
        }
      } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
      }
      return this.curve.point(nx, ny, nz);
    };
    
    Point.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;
    
      // Double in extended coordinates
      if (this.curve.extended)
        return this._extDbl();
      else
        return this._projDbl();
    };
    
    Point.prototype._extAdd = function _extAdd(p) {
      // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
      //     #addition-add-2008-hwcd-3
      // 8M
    
      // A = (Y1 - X1) * (Y2 - X2)
      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
      // B = (Y1 + X1) * (Y2 + X2)
      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
      // C = T1 * k * T2
      var c = this.t.redMul(this.curve.dd).redMul(p.t);
      // D = Z1 * 2 * Z2
      var d = this.z.redMul(p.z.redAdd(p.z));
      // E = B - A
      var e = b.redSub(a);
      // F = D - C
      var f = d.redSub(c);
      // G = D + C
      var g = d.redAdd(c);
      // H = B + A
      var h = b.redAdd(a);
      // X3 = E * F
      var nx = e.redMul(f);
      // Y3 = G * H
      var ny = g.redMul(h);
      // T3 = E * H
      var nt = e.redMul(h);
      // Z3 = F * G
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    
    Point.prototype._projAdd = function _projAdd(p) {
      // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
      //     #addition-add-2008-bbjlp
      //     #addition-add-2007-bl
      // 10M + 1S
    
      // A = Z1 * Z2
      var a = this.z.redMul(p.z);
      // B = A^2
      var b = a.redSqr();
      // C = X1 * X2
      var c = this.x.redMul(p.x);
      // D = Y1 * Y2
      var d = this.y.redMul(p.y);
      // E = d * C * D
      var e = this.curve.d.redMul(c).redMul(d);
      // F = B - E
      var f = b.redSub(e);
      // G = B + E
      var g = b.redAdd(e);
      // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
      var nx = a.redMul(f).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
      } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
      }
      return this.curve.point(nx, ny, nz);
    };
    
    Point.prototype.add = function add(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;
    
      if (this.curve.extended)
        return this._extAdd(p);
      else
        return this._projAdd(p);
    };
    
    Point.prototype.mul = function mul(k) {
      if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else
        return this.curve._wnafMul(this, k);
    };
    
    Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
    };
    
    Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
    };
    
    Point.prototype.normalize = function normalize() {
      if (this.zOne)
        return this;
    
      // Normalize coordinates
      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      if (this.t)
        this.t = this.t.redMul(zi);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };
    
    Point.prototype.neg = function neg() {
      return this.curve.point(this.x.redNeg(),
        this.y,
        this.z,
        this.t && this.t.redNeg());
    };
    
    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
    
    Point.prototype.getY = function getY() {
      this.normalize();
      return this.y.fromRed();
    };
    
    Point.prototype.eq = function eq(other) {
      return this === other ||
             this.getX().cmp(other.getX()) === 0 &&
             this.getY().cmp(other.getY()) === 0;
    };
    
    Point.prototype.eqXToP = function eqXToP(x) {
      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0)
        return true;
    
      var xc = x.clone();
      var t = this.curve.redN.redMul(this.z);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
    
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    
    // Compatibility with BaseCurve
    Point.prototype.toP = Point.prototype.normalize;
    Point.prototype.mixedAdd = Point.prototype.add;
    
    },{"../utils":141,"./base":128,"bn.js":123,"inherits":184}],130:[function(require,module,exports){
    'use strict';
    
    var curve = exports;
    
    curve.base = require('./base');
    curve.short = require('./short');
    curve.mont = require('./mont');
    curve.edwards = require('./edwards');
    
    },{"./base":128,"./edwards":129,"./mont":131,"./short":132}],131:[function(require,module,exports){
    'use strict';
    
    var BN = require('bn.js');
    var inherits = require('inherits');
    var Base = require('./base');
    
    var utils = require('../utils');
    
    function MontCurve(conf) {
      Base.call(this, 'mont', conf);
    
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.i4 = new BN(4).toRed(this.red).redInvm();
      this.two = new BN(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits(MontCurve, Base);
    module.exports = MontCurve;
    
    MontCurve.prototype.validate = function validate(point) {
      var x = point.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y = rhs.redSqrt();
    
      return y.redSqr().cmp(rhs) === 0;
    };
    
    function Point(curve, x, z) {
      Base.BasePoint.call(this, curve, 'projective');
      if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits(Point, Base.BasePoint);
    
    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      return this.point(utils.toArray(bytes, enc), 1);
    };
    
    MontCurve.prototype.point = function point(x, z) {
      return new Point(this, x, z);
    };
    
    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    
    Point.prototype.precompute = function precompute() {
      // No-op
    };
    
    Point.prototype._encode = function _encode() {
      return this.getX().toArray('be', this.curve.p.byteLength());
    };
    
    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1] || curve.one);
    };
    
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' z: ' + this.z.fromRed().toString(16, 2) + '>';
    };
    
    Point.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };
    
    Point.prototype.dbl = function dbl() {
      // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
      // 2M + 2S + 4A
    
      // A = X1 + Z1
      var a = this.x.redAdd(this.z);
      // AA = A^2
      var aa = a.redSqr();
      // B = X1 - Z1
      var b = this.x.redSub(this.z);
      // BB = B^2
      var bb = b.redSqr();
      // C = AA - BB
      var c = aa.redSub(bb);
      // X3 = AA * BB
      var nx = aa.redMul(bb);
      // Z3 = C * (BB + A24 * C)
      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
      return this.curve.point(nx, nz);
    };
    
    Point.prototype.add = function add() {
      throw new Error('Not supported on Montgomery curve');
    };
    
    Point.prototype.diffAdd = function diffAdd(p, diff) {
      // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
      // 4M + 2S + 6A
    
      // A = X2 + Z2
      var a = this.x.redAdd(this.z);
      // B = X2 - Z2
      var b = this.x.redSub(this.z);
      // C = X3 + Z3
      var c = p.x.redAdd(p.z);
      // D = X3 - Z3
      var d = p.x.redSub(p.z);
      // DA = D * A
      var da = d.redMul(a);
      // CB = C * B
      var cb = c.redMul(b);
      // X5 = Z1 * (DA + CB)^2
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      // Z5 = X1 * (DA - CB)^2
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };
    
    Point.prototype.mul = function mul(k) {
      var t = k.clone();
      var a = this; // (N / 2) * Q + Q
      var b = this.curve.point(null, null); // (N / 2) * Q
      var c = this; // Q
    
      for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
        bits.push(t.andln(1));
    
      for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
          // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
          a = a.diffAdd(b, c);
          // N * Q = 2 * ((N / 2) * Q + Q))
          b = b.dbl();
        } else {
          // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
          b = a.diffAdd(b, c);
          // N * Q + Q = 2 * ((N / 2) * Q + Q)
          a = a.dbl();
        }
      }
      return b;
    };
    
    Point.prototype.mulAdd = function mulAdd() {
      throw new Error('Not supported on Montgomery curve');
    };
    
    Point.prototype.jumlAdd = function jumlAdd() {
      throw new Error('Not supported on Montgomery curve');
    };
    
    Point.prototype.eq = function eq(other) {
      return this.getX().cmp(other.getX()) === 0;
    };
    
    Point.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };
    
    Point.prototype.getX = function getX() {
      // Normalize coordinates
      this.normalize();
    
      return this.x.fromRed();
    };
    
    },{"../utils":141,"./base":128,"bn.js":123,"inherits":184}],132:[function(require,module,exports){
    'use strict';
    
    var utils = require('../utils');
    var BN = require('bn.js');
    var inherits = require('inherits');
    var Base = require('./base');
    
    var assert = utils.assert;
    
    function ShortCurve(conf) {
      Base.call(this, 'short', conf);
    
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();
    
      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    
      // If the curve is endomorphic, precalculate beta and lambda
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits(ShortCurve, Base);
    module.exports = ShortCurve;
    
    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      // No efficient endomorphism
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;
    
      // Compute beta and lambda, that lambda * P = (beta * Px; Py)
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new BN(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new BN(conf.lambda, 16);
      } else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }
    
      // Get basis vectors, used for balanced length-two representation
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16),
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }
    
      return {
        beta: beta,
        lambda: lambda,
        basis: basis,
      };
    };
    
    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      // Find roots of for x^2 + x + 1 in F
      // Root = (-1 +- Sqrt(-3)) / 2
      //
      var red = num === this.p ? this.red : BN.mont(num);
      var tinv = new BN(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
    
      var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    
      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [ l1, l2 ];
    };
    
    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      // aprxSqrt >= sqrt(this.n)
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    
      // 3.74
      // Run EGCD, until r(L + 1) < aprxSqrt
      var u = lambda;
      var v = this.n.clone();
      var x1 = new BN(1);
      var y1 = new BN(0);
      var x2 = new BN(0);
      var y2 = new BN(1);
    
      // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
      var a0;
      var b0;
      // First vector
      var a1;
      var b1;
      // Second vector
      var a2;
      var b2;
    
      var prevR;
      var i = 0;
      var r;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
    
        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r;
    
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;
    
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }
    
      // Normalize signs
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }
    
      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 },
      ];
    };
    
    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];
    
      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);
    
      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);
    
      // Calculate answer
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1: k1, k2: k2 };
    };
    
    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
    
      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');
    
      // XXX Is there any way to tell if the number is odd without converting it
      // to non-red form?
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
    
      return this.point(x, y);
    };
    
    ShortCurve.prototype.validate = function validate(point) {
      if (point.inf)
        return true;
    
      var x = point.x;
      var y = point.y;
    
      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };
    
    ShortCurve.prototype._endoWnafMulAdd =
        function _endoWnafMulAdd(points, coeffs, jacobianResult) {
          var npoints = this._endoWnafT1;
          var ncoeffs = this._endoWnafT2;
          for (var i = 0; i < points.length; i++) {
            var split = this._endoSplit(coeffs[i]);
            var p = points[i];
            var beta = p._getBeta();
    
            if (split.k1.negative) {
              split.k1.ineg();
              p = p.neg(true);
            }
            if (split.k2.negative) {
              split.k2.ineg();
              beta = beta.neg(true);
            }
    
            npoints[i * 2] = p;
            npoints[i * 2 + 1] = beta;
            ncoeffs[i * 2] = split.k1;
            ncoeffs[i * 2 + 1] = split.k2;
          }
          var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
    
          // Clean-up references to points and coefficients
          for (var j = 0; j < i * 2; j++) {
            npoints[j] = null;
            ncoeffs[j] = null;
          }
          return res;
        };
    
    function Point(curve, x, y, isRed) {
      Base.BasePoint.call(this, curve, 'affine');
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits(Point, Base.BasePoint);
    
    ShortCurve.prototype.point = function point(x, y, isRed) {
      return new Point(this, x, y, isRed);
    };
    
    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };
    
    Point.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo)
        return;
    
      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;
    
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul),
          },
        };
      }
      return beta;
    };
    
    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [ this.x, this.y ];
    
      return [ this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1),
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1),
        },
      } ];
    };
    
    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === 'string')
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;
    
      function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
      }
    
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [ res ].concat(pre.doubles.points.map(obj2point)),
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [ res ].concat(pre.naf.points.map(obj2point)),
        },
      };
      return res;
    };
    
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' y: ' + this.y.fromRed().toString(16, 2) + '>';
    };
    
    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };
    
    Point.prototype.add = function add(p) {
      // O + P = P
      if (this.inf)
        return p;
    
      // P + O = P
      if (p.inf)
        return this;
    
      // P + P = 2P
      if (this.eq(p))
        return this.dbl();
    
      // P + (-P) = O
      if (this.neg().eq(p))
        return this.curve.point(null, null);
    
      // P + Q = O
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);
    
      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    
    Point.prototype.dbl = function dbl() {
      if (this.inf)
        return this;
    
      // 2P = O
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);
    
      var a = this.curve.a;
    
      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    
      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    
    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };
    
    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };
    
    Point.prototype.mul = function mul(k) {
      k = new BN(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([ this ], [ k ]);
      else
        return this.curve._wnafMul(this, k);
    };
    
    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };
    
    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };
    
    Point.prototype.eq = function eq(p) {
      return this === p ||
             this.inf === p.inf &&
                 (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };
    
    Point.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;
    
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate),
          },
        };
      }
      return res;
    };
    
    Point.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);
    
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };
    
    function JPoint(curve, x, y, z) {
      Base.BasePoint.call(this, curve, 'jacobian');
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
    
      this.zOne = this.z === this.curve.one;
    }
    inherits(JPoint, Base.BasePoint);
    
    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };
    
    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);
    
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
    
      return this.curve.point(ax, ay);
    };
    
    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    
    JPoint.prototype.add = function add(p) {
      // O + P = P
      if (this.isInfinity())
        return p;
    
      // P + O = P
      if (p.isInfinity())
        return this;
    
      // 12M + 4S + 7A
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));
    
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
    
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
    
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);
    
      return this.curve.jpoint(nx, ny, nz);
    };
    
    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      // O + P = P
      if (this.isInfinity())
        return p.toJ();
    
      // P + O = P
      if (p.isInfinity())
        return this;
    
      // 8M + 3S + 7A
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);
    
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
    
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
    
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);
    
      return this.curve.jpoint(nx, ny, nz);
    };
    
    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();
    
      var i;
      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (i = 0; i < pow; i++)
          r = r.dbl();
        return r;
      }
    
      // 1M + 2S + 1A + N * (4S + 5M + 8A)
      // N = 1 => 6M + 6S + 9A
      var a = this.curve.a;
      var tinv = this.curve.tinv;
    
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
    
      // Reuse results
      var jyd = jy.redAdd(jy);
      for (i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
          jz4 = jz4.redMul(jyd4);
    
        jx = nx;
        jz = nz;
        jyd = dny;
      }
    
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };
    
    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;
    
      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };
    
    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A
    
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);
    
        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
    
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A
    
        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();
    
        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
    
        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
    
      return this.curve.jpoint(nx, ny, nz);
    };
    
    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A
    
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S
    
        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
    
      return this.curve.jpoint(nx, ny, nz);
    };
    
    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;
    
      // 4M + 6S + 10A
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
    
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
    
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
    
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
    
      return this.curve.jpoint(nx, ny, nz);
    };
    
    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
    
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
      // 5M + 10S + ...
    
      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // ZZ = Z1^2
      var zz = this.z.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // M = 3 * XX + a * ZZ2; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // MM = M^2
      var mm = m.redSqr();
      // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      // EE = E^2
      var ee = e.redSqr();
      // T = 16*YYYY
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      // U = (M + E)^2 - MM - EE - T
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      // X3 = 4 * (X1 * EE - 4 * YY * U)
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      // Z3 = (Z1 + E)^2 - ZZ - EE
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    
      return this.curve.jpoint(nx, ny, nz);
    };
    
    JPoint.prototype.mul = function mul(k, kbase) {
      k = new BN(k, kbase);
    
      return this.curve._wnafMul(this, k);
    };
    
    JPoint.prototype.eq = function eq(p) {
      if (p.type === 'affine')
        return this.eq(p.toJ());
    
      if (this === p)
        return true;
    
      // x1 * z2^2 == x2 * z1^2
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;
    
      // y1 * z2^3 == y2 * z1^3
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };
    
    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;
    
      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
    
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    
    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC JPoint Infinity>';
      return '<EC JPoint x: ' + this.x.toString(16, 2) +
          ' y: ' + this.y.toString(16, 2) +
          ' z: ' + this.z.toString(16, 2) + '>';
    };
    
    JPoint.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };
    
    },{"../utils":141,"./base":128,"bn.js":123,"inherits":184}],133:[function(require,module,exports){
    'use strict';
    
    var curves = exports;
    
    var hash = require('hash.js');
    var curve = require('./curve');
    var utils = require('./utils');
    
    var assert = utils.assert;
    
    function PresetCurve(options) {
      if (options.type === 'short')
        this.curve = new curve.short(options);
      else if (options.type === 'edwards')
        this.curve = new curve.edwards(options);
      else
        this.curve = new curve.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
    
      assert(this.g.validate(), 'Invalid curve');
      assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
    }
    curves.PresetCurve = PresetCurve;
    
    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve,
          });
          return curve;
        },
      });
    }
    
    defineCurve('p192', {
      type: 'short',
      prime: 'p192',
      p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
      b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
      n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
      hash: hash.sha256,
      gRed: false,
      g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
      ],
    });
    
    defineCurve('p224', {
      type: 'short',
      prime: 'p224',
      p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
      b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
      n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
      hash: hash.sha256,
      gRed: false,
      g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
      ],
    });
    
    defineCurve('p256', {
      type: 'short',
      prime: null,
      p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
      a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
      b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
      n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
      hash: hash.sha256,
      gRed: false,
      g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
      ],
    });
    
    defineCurve('p384', {
      type: 'short',
      prime: null,
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'fffffffe ffffffff 00000000 00000000 ffffffff',
      a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'fffffffe ffffffff 00000000 00000000 fffffffc',
      b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
         '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
      n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
         'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
      hash: hash.sha384,
      gRed: false,
      g: [
        'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
        '5502f25d bf55296c 3a545e38 72760ab7',
        '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
        '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
      ],
    });
    
    defineCurve('p521', {
      type: 'short',
      prime: null,
      p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff',
      a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff fffffffc',
      b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
         '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
         '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
      n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
         'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
      hash: hash.sha512,
      gRed: false,
      g: [
        '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
        '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
        'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
        '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
        '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
        '3fad0761 353c7086 a272c240 88be9476 9fd16650',
      ],
    });
    
    defineCurve('curve25519', {
      type: 'mont',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '76d06',
      b: '1',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash.sha256,
      gRed: false,
      g: [
        '9',
      ],
    });
    
    defineCurve('ed25519', {
      type: 'edwards',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '-1',
      c: '1',
      // -121665 * (121666^(-1)) (mod P)
      d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash.sha256,
      gRed: false,
      g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
    
        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658',
      ],
    });
    
    var pre;
    try {
      pre = require('./precomputed/secp256k1');
    } catch (e) {
      pre = undefined;
    }
    
    defineCurve('secp256k1', {
      type: 'short',
      prime: 'k256',
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
      a: '0',
      b: '7',
      n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
      h: '1',
      hash: hash.sha256,
    
      // Precomputed endomorphism
      beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
      lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
      basis: [
        {
          a: '3086d221a7d46bcde86c90e49284eb15',
          b: '-e4437ed6010e88286f547fa90abfe4c3',
        },
        {
          a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
          b: '3086d221a7d46bcde86c90e49284eb15',
        },
      ],
    
      gRed: false,
      g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        pre,
      ],
    });
    
    },{"./curve":130,"./precomputed/secp256k1":140,"./utils":141,"hash.js":171}],134:[function(require,module,exports){
    'use strict';
    
    var BN = require('bn.js');
    var HmacDRBG = require('hmac-drbg');
    var utils = require('../utils');
    var curves = require('../curves');
    var rand = require('brorand');
    var assert = utils.assert;
    
    var KeyPair = require('./key');
    var Signature = require('./signature');
    
    function EC(options) {
      if (!(this instanceof EC))
        return new EC(options);
    
      // Shortcut `elliptic.ec(curve-name)`
      if (typeof options === 'string') {
        assert(Object.prototype.hasOwnProperty.call(curves, options),
          'Unknown curve ' + options);
    
        options = curves[options];
      }
    
      // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
      if (options instanceof curves.PresetCurve)
        options = { curve: options };
    
      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;
    
      // Point on curve
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);
    
      // Hash for function for DRBG
      this.hash = options.hash || options.curve.hash;
    }
    module.exports = EC;
    
    EC.prototype.keyPair = function keyPair(options) {
      return new KeyPair(this, options);
    };
    
    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return KeyPair.fromPrivate(this, priv, enc);
    };
    
    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return KeyPair.fromPublic(this, pub, enc);
    };
    
    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};
    
      // Instantiate Hmac_DRBG
      var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray(),
      });
    
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new BN(2));
      for (;;) {
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;
    
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };
    
    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };
    
    EC.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === 'object') {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};
    
      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new BN(msg, 16));
    
      // Zero-extend key to provide enough entropy
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray('be', bytes);
    
      // Zero-extend nonce to have the same byte size as N
      var nonce = msg.toArray('be', bytes);
    
      // Instantiate Hmac_DRBG
      var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
      });
    
      // Number of bytes to generate
      var ns1 = this.n.sub(new BN(1));
    
      for (var iter = 0; ; iter++) {
        var k = options.k ?
          options.k(iter) :
          new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;
    
        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;
    
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0)
          continue;
    
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;
    
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                            (kpX.cmp(r) !== 0 ? 2 : 0);
    
        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }
    
        return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
      }
    };
    
    EC.prototype.verify = function verify(msg, signature, key, enc) {
      msg = this._truncateToN(new BN(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature = new Signature(signature, 'hex');
    
      // Perform primitive values validation
      var r = signature.r;
      var s = signature.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;
    
      // Validate signature
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
      var p;
    
      if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity())
          return false;
    
        return p.getX().umod(this.n).cmp(r) === 0;
      }
    
      // NOTE: Greg Maxwell's trick, inspired by:
      // https://git.io/vad3K
    
      p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;
    
      // Compare `p.x` of Jacobian point with `r`,
      // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
      // inverse of `p.z^2`
      return p.eqXToP(r);
    };
    
    EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
      assert((3 & j) === j, 'The recovery param is more than two bits');
      signature = new Signature(signature, enc);
    
      var n = this.n;
      var e = new BN(msg);
      var r = signature.r;
      var s = signature.s;
    
      // A set LSB signifies that the y-coordinate is odd
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error('Unable to find sencond key candinate');
    
      // 1.1. Let x = r + jn.
      if (isSecondKey)
        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
      else
        r = this.curve.pointFromX(r, isYOdd);
    
      var rInv = signature.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);
    
      // 1.6.1 Compute Q = r^-1 (sR -  eG)
      //               Q = r^-1 (sR + -eG)
      return this.g.mulAdd(s1, r, s2);
    };
    
    EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
      signature = new Signature(signature, enc);
      if (signature.recoveryParam !== null)
        return signature.recoveryParam;
    
      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
          continue;
        }
    
        if (Qprime.eq(Q))
          return i;
      }
      throw new Error('Unable to find valid recovery factor');
    };
    
    },{"../curves":133,"../utils":141,"./key":135,"./signature":136,"bn.js":123,"brorand":124,"hmac-drbg":183}],135:[function(require,module,exports){
    'use strict';
    
    var BN = require('bn.js');
    var utils = require('../utils');
    var assert = utils.assert;
    
    function KeyPair(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null;
    
      // KeyPair(ec, { priv: ..., pub: ... })
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    module.exports = KeyPair;
    
    KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair)
        return pub;
    
      return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc,
      });
    };
    
    KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair)
        return priv;
    
      return new KeyPair(ec, {
        priv: priv,
        privEnc: enc,
      });
    };
    
    KeyPair.prototype.validate = function validate() {
      var pub = this.getPublic();
    
      if (pub.isInfinity())
        return { result: false, reason: 'Invalid public key' };
      if (!pub.validate())
        return { result: false, reason: 'Public key is not a point' };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: 'Public key * N != O' };
    
      return { result: true, reason: null };
    };
    
    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      // compact is optional argument
      if (typeof compact === 'string') {
        enc = compact;
        compact = null;
      }
    
      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);
    
      if (!enc)
        return this.pub;
    
      return this.pub.encode(enc, compact);
    };
    
    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === 'hex')
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };
    
    KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new BN(key, enc || 16);
    
      // Ensure that the priv won't be bigger than n, otherwise we may fail
      // in fixed multiplication method
      this.priv = this.priv.umod(this.ec.curve.n);
    };
    
    KeyPair.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') {
          assert(key.x, 'Need x coordinate');
        } else if (this.ec.curve.type === 'short' ||
                   this.ec.curve.type === 'edwards') {
          assert(key.x && key.y, 'Need both x and y coordinate');
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };
    
    // ECDH
    KeyPair.prototype.derive = function derive(pub) {
      if(!pub.validate()) {
        assert(pub.validate(), 'public point not validated');
      }
      return pub.mul(this.priv).getX();
    };
    
    // ECDSA
    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };
    
    KeyPair.prototype.verify = function verify(msg, signature) {
      return this.ec.verify(msg, signature, this);
    };
    
    KeyPair.prototype.inspect = function inspect() {
      return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
             ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
    };
    
    },{"../utils":141,"bn.js":123}],136:[function(require,module,exports){
    'use strict';
    
    var BN = require('bn.js');
    
    var utils = require('../utils');
    var assert = utils.assert;
    
    function Signature(options, enc) {
      if (options instanceof Signature)
        return options;
    
      if (this._importDER(options, enc))
        return;
    
      assert(options.r && options.s, 'Signature without r or s');
      this.r = new BN(options.r, 16);
      this.s = new BN(options.s, 16);
      if (options.recoveryParam === undefined)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    module.exports = Signature;
    
    function Position() {
      this.place = 0;
    }
    
    function getLength(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 0x80)) {
        return initial;
      }
      var octetLen = initial & 0xf;
    
      // Indefinite length or overflow
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }
    
      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }
    
      // Leading zeroes
      if (val <= 0x7f) {
        return false;
      }
    
      p.place = off;
      return val;
    }
    
    function rmPadding(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
        i++;
      }
      if (i === 0) {
        return buf;
      }
      return buf.slice(i);
    }
    
    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 0x30) {
        return false;
      }
      var len = getLength(data, p);
      if (len === false) {
        return false;
      }
      if ((len + p.place) !== data.length) {
        return false;
      }
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var rlen = getLength(data, p);
      if (rlen === false) {
        return false;
      }
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var slen = getLength(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0) {
        if (r[1] & 0x80) {
          r = r.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 0x80) {
          s = s.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }
    
      this.r = new BN(r);
      this.s = new BN(s);
      this.recoveryParam = null;
    
      return true;
    };
    
    function constructLength(arr, len) {
      if (len < 0x80) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 0x80);
      while (--octets) {
        arr.push((len >>> (octets << 3)) & 0xff);
      }
      arr.push(len);
    }
    
    Signature.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();
    
      // Pad values
      if (r[0] & 0x80)
        r = [ 0 ].concat(r);
      // Pad values
      if (s[0] & 0x80)
        s = [ 0 ].concat(s);
    
      r = rmPadding(r);
      s = rmPadding(s);
    
      while (!s[0] && !(s[1] & 0x80)) {
        s = s.slice(1);
      }
      var arr = [ 0x02 ];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(0x02);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [ 0x30 ];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils.encode(res, enc);
    };
    
    },{"../utils":141,"bn.js":123}],137:[function(require,module,exports){
    'use strict';
    
    var hash = require('hash.js');
    var curves = require('../curves');
    var utils = require('../utils');
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var KeyPair = require('./key');
    var Signature = require('./signature');
    
    function EDDSA(curve) {
      assert(curve === 'ed25519', 'only tested with ed25519 so far');
    
      if (!(this instanceof EDDSA))
        return new EDDSA(curve);
    
      curve = curves[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);
    
      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash.sha512;
    }
    
    module.exports = EDDSA;
    
    /**
    * @param {Array|String} message - message bytes
    * @param {Array|String|KeyPair} secret - secret bytes or a keypair
    * @returns {Signature} - signature
    */
    EDDSA.prototype.sign = function sign(message, secret) {
      message = parseBytes(message);
      var key = this.keyFromSecret(secret);
      var r = this.hashInt(key.messagePrefix(), message);
      var R = this.g.mul(r);
      var Rencoded = this.encodePoint(R);
      var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
        .mul(key.priv());
      var S = r.add(s_).umod(this.curve.n);
      return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
    };
    
    /**
    * @param {Array} message - message bytes
    * @param {Array|String|Signature} sig - sig bytes
    * @param {Array|String|Point|KeyPair} pub - public key
    * @returns {Boolean} - true if public key matches sig of message
    */
    EDDSA.prototype.verify = function verify(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      var key = this.keyFromPublic(pub);
      var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key.pub().mul(h));
      return RplusAh.eq(SG);
    };
    
    EDDSA.prototype.hashInt = function hashInt() {
      var hash = this.hash();
      for (var i = 0; i < arguments.length; i++)
        hash.update(arguments[i]);
      return utils.intFromLE(hash.digest()).umod(this.curve.n);
    };
    
    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
      return KeyPair.fromPublic(this, pub);
    };
    
    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return KeyPair.fromSecret(this, secret);
    };
    
    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof Signature)
        return sig;
      return new Signature(this, sig);
    };
    
    /**
    * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
    *
    * EDDSA defines methods for encoding and decoding points and integers. These are
    * helper convenience methods, that pass along to utility functions implied
    * parameters.
    *
    */
    EDDSA.prototype.encodePoint = function encodePoint(point) {
      var enc = point.getY().toArray('le', this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
      return enc;
    };
    
    EDDSA.prototype.decodePoint = function decodePoint(bytes) {
      bytes = utils.parseBytes(bytes);
    
      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
      var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
    
      var y = utils.intFromLE(normed);
      return this.curve.pointFromY(y, xIsOdd);
    };
    
    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray('le', this.encodingLength);
    };
    
    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils.intFromLE(bytes);
    };
    
    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };
    
    },{"../curves":133,"../utils":141,"./key":138,"./signature":139,"hash.js":171}],138:[function(require,module,exports){
    'use strict';
    
    var utils = require('../utils');
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var cachedProperty = utils.cachedProperty;
    
    /**
    * @param {EDDSA} eddsa - instance
    * @param {Object} params - public/private key parameters
    *
    * @param {Array<Byte>} [params.secret] - secret seed bytes
    * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
    * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
    *
    */
    function KeyPair(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes(params.secret);
      if (eddsa.isPoint(params.pub))
        this._pub = params.pub;
      else
        this._pubBytes = parseBytes(params.pub);
    }
    
    KeyPair.fromPublic = function fromPublic(eddsa, pub) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(eddsa, { pub: pub });
    };
    
    KeyPair.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair)
        return secret;
      return new KeyPair(eddsa, { secret: secret });
    };
    
    KeyPair.prototype.secret = function secret() {
      return this._secret;
    };
    
    cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });
    
    cachedProperty(KeyPair, 'pub', function pub() {
      if (this._pubBytes)
        return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });
    
    cachedProperty(KeyPair, 'privBytes', function privBytes() {
      var eddsa = this.eddsa;
      var hash = this.hash();
      var lastIx = eddsa.encodingLength - 1;
    
      var a = hash.slice(0, eddsa.encodingLength);
      a[0] &= 248;
      a[lastIx] &= 127;
      a[lastIx] |= 64;
    
      return a;
    });
    
    cachedProperty(KeyPair, 'priv', function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });
    
    cachedProperty(KeyPair, 'hash', function hash() {
      return this.eddsa.hash().update(this.secret()).digest();
    });
    
    cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
      return this.hash().slice(this.eddsa.encodingLength);
    });
    
    KeyPair.prototype.sign = function sign(message) {
      assert(this._secret, 'KeyPair can only verify');
      return this.eddsa.sign(message, this);
    };
    
    KeyPair.prototype.verify = function verify(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };
    
    KeyPair.prototype.getSecret = function getSecret(enc) {
      assert(this._secret, 'KeyPair is public only');
      return utils.encode(this.secret(), enc);
    };
    
    KeyPair.prototype.getPublic = function getPublic(enc) {
      return utils.encode(this.pubBytes(), enc);
    };
    
    module.exports = KeyPair;
    
    },{"../utils":141}],139:[function(require,module,exports){
    'use strict';
    
    var BN = require('bn.js');
    var utils = require('../utils');
    var assert = utils.assert;
    var cachedProperty = utils.cachedProperty;
    var parseBytes = utils.parseBytes;
    
    /**
    * @param {EDDSA} eddsa - eddsa instance
    * @param {Array<Bytes>|Object} sig -
    * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
    * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
    * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
    * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
    */
    function Signature(eddsa, sig) {
      this.eddsa = eddsa;
    
      if (typeof sig !== 'object')
        sig = parseBytes(sig);
    
      if (Array.isArray(sig)) {
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength),
        };
      }
    
      assert(sig.R && sig.S, 'Signature without R or S');
    
      if (eddsa.isPoint(sig.R))
        this._R = sig.R;
      if (sig.S instanceof BN)
        this._S = sig.S;
    
      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }
    
    cachedProperty(Signature, 'S', function S() {
      return this.eddsa.decodeInt(this.Sencoded());
    });
    
    cachedProperty(Signature, 'R', function R() {
      return this.eddsa.decodePoint(this.Rencoded());
    });
    
    cachedProperty(Signature, 'Rencoded', function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });
    
    cachedProperty(Signature, 'Sencoded', function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });
    
    Signature.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };
    
    Signature.prototype.toHex = function toHex() {
      return utils.encode(this.toBytes(), 'hex').toUpperCase();
    };
    
    module.exports = Signature;
    
    },{"../utils":141,"bn.js":123}],140:[function(require,module,exports){
    module.exports = {
      doubles: {
        step: 4,
        points: [
          [
            'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
            'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
          ],
          [
            '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
            '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
          ],
          [
            '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
            'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
          ],
          [
            '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
            '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
          ],
          [
            '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
            '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
          ],
          [
            '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
            '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
          ],
          [
            'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
            '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
          ],
          [
            '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
            'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
          ],
          [
            'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
            '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
          ],
          [
            'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
            'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
          ],
          [
            'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
            '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
          ],
          [
            '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
            '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
          ],
          [
            '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
            '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
          ],
          [
            '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
            '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
          ],
          [
            '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
            '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
          ],
          [
            '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
            '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
          ],
          [
            '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
            '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
          ],
          [
            '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
            '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
          ],
          [
            '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
            'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
          ],
          [
            'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
            '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
          ],
          [
            'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
            '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
          ],
          [
            '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
            '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
          ],
          [
            '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
            '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
          ],
          [
            'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
            '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
          ],
          [
            '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
            'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
          ],
          [
            'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
            '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
          ],
          [
            'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
            'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
          ],
          [
            'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
            '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
          ],
          [
            'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
            'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
          ],
          [
            'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
            '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
          ],
          [
            '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
            'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
          ],
          [
            '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
            '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
          ],
          [
            'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
            '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
          ],
          [
            '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
            'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
          ],
          [
            'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
            '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
          ],
          [
            'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
            '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
          ],
          [
            'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
            'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
          ],
          [
            '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
            '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
          ],
          [
            '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
            '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
          ],
          [
            '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
            'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
          ],
          [
            '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
            '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
          ],
          [
            'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
            '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
          ],
          [
            '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
            '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
          ],
          [
            '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
            'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
          ],
          [
            '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
            '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
          ],
          [
            'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
            '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
          ],
          [
            '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
            'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
          ],
          [
            'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
            'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
          ],
          [
            'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
            '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
          ],
          [
            '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
            'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
          ],
          [
            '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
            'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
          ],
          [
            'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
            '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
          ],
          [
            'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
            '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
          ],
          [
            'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
            '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
          ],
          [
            '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
            'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
          ],
          [
            '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
            '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
          ],
          [
            'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
            'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
          ],
          [
            '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
            'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
          ],
          [
            '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
            '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
          ],
          [
            '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
            '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
          ],
          [
            'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
            'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
          ],
          [
            '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
            '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
          ],
          [
            '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
            '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
          ],
          [
            'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
            '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
          ],
          [
            'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
            'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
          ],
        ],
      },
      naf: {
        wnd: 7,
        points: [
          [
            'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
            '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
          ],
          [
            '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
            'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
          ],
          [
            '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
            '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
          ],
          [
            'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
            'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
          ],
          [
            '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
            'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
          ],
          [
            'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
            'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
          ],
          [
            'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
            '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
          ],
          [
            'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
            '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
          ],
          [
            '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
            '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
          ],
          [
            '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
            '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
          ],
          [
            '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
            '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
          ],
          [
            '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
            '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
          ],
          [
            'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
            'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
          ],
          [
            'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
            '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
          ],
          [
            '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
            'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
          ],
          [
            '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
            'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
          ],
          [
            '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
            '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
          ],
          [
            '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
            '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
          ],
          [
            '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
            '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
          ],
          [
            '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
            'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
          ],
          [
            'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
            'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
          ],
          [
            '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
            '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
          ],
          [
            '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
            '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
          ],
          [
            'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
            'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
          ],
          [
            '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
            '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
          ],
          [
            'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
            'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
          ],
          [
            'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
            'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
          ],
          [
            '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
            '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
          ],
          [
            '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
            '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
          ],
          [
            '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
            '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
          ],
          [
            'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
            '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
          ],
          [
            '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
            '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
          ],
          [
            'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
            '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
          ],
          [
            '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
            'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
          ],
          [
            '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
            'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
          ],
          [
            'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
            'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
          ],
          [
            '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
            '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
          ],
          [
            '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
            'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
          ],
          [
            'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
            'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
          ],
          [
            '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
            '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
          ],
          [
            '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
            'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
          ],
          [
            '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
            '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
          ],
          [
            '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
            'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
          ],
          [
            'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
            '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
          ],
          [
            '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
            '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
          ],
          [
            '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
            'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
          ],
          [
            '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
            'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
          ],
          [
            'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
            'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
          ],
          [
            'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
            'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
          ],
          [
            '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
            '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
          ],
          [
            '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
            '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
          ],
          [
            'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
            '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
          ],
          [
            'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
            'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
          ],
          [
            '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
            '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
          ],
          [
            '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
            '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
          ],
          [
            'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
            '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
          ],
          [
            '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
            '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
          ],
          [
            'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
            'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
          ],
          [
            '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
            'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
          ],
          [
            '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
            '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
          ],
          [
            'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
            '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
          ],
          [
            'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
            '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
          ],
          [
            '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
            '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
          ],
          [
            '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
            '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
          ],
          [
            '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
            'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
          ],
          [
            '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
            'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
          ],
          [
            '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
            '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
          ],
          [
            '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
            '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
          ],
          [
            '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
            '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
          ],
          [
            '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
            'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
          ],
          [
            'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
            'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
          ],
          [
            '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
            'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
          ],
          [
            'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
            '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
          ],
          [
            'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
            '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
          ],
          [
            'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
            '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
          ],
          [
            'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
            '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
          ],
          [
            '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
            'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
          ],
          [
            '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
            '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
          ],
          [
            '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
            'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
          ],
          [
            'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
            'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
          ],
          [
            'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
            '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
          ],
          [
            'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
            'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
          ],
          [
            'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
            '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
          ],
          [
            '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
            '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
          ],
          [
            'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
            '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
          ],
          [
            'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
            '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
          ],
          [
            '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
            '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
          ],
          [
            '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
            'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
          ],
          [
            'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
            '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
          ],
          [
            'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
            '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
          ],
          [
            'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
            '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
          ],
          [
            '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
            '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
          ],
          [
            'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
            'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
          ],
          [
            '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
            'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
          ],
          [
            'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
            'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
          ],
          [
            'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
            '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
          ],
          [
            '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
            'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
          ],
          [
            'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
            '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
          ],
          [
            'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
            '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
          ],
          [
            'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
            '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
          ],
          [
            '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
            'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
          ],
          [
            '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
            'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
          ],
          [
            'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
            '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
          ],
          [
            '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
            'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
          ],
          [
            '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
            '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
          ],
          [
            '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
            'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
          ],
          [
            'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
            'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
          ],
          [
            '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
            'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
          ],
          [
            '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
            '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
          ],
          [
            '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
            'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
          ],
          [
            '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
            '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
          ],
          [
            'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
            'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
          ],
          [
            '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
            '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
          ],
          [
            'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
            '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
          ],
          [
            '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
            '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
          ],
          [
            'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
            'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
          ],
          [
            'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
            '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
          ],
          [
            'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
            'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
          ],
          [
            '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
            'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
          ],
          [
            '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
            '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
          ],
          [
            '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
            'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
          ],
          [
            '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
            '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
          ],
          [
            '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
            '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
          ],
          [
            '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
            'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
          ],
          [
            '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
            '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
          ],
          [
            '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
            '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
          ],
          [
            '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
            '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
          ],
        ],
      },
    };
    
    },{}],141:[function(require,module,exports){
    'use strict';
    
    var utils = exports;
    var BN = require('bn.js');
    var minAssert = require('minimalistic-assert');
    var minUtils = require('minimalistic-crypto-utils');
    
    utils.assert = minAssert;
    utils.toArray = minUtils.toArray;
    utils.zero2 = minUtils.zero2;
    utils.toHex = minUtils.toHex;
    utils.encode = minUtils.encode;
    
    // Represent num in a w-NAF form
    function getNAF(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      naf.fill(0);
    
      var ws = 1 << (w + 1);
      var k = num.clone();
    
      for (var i = 0; i < naf.length; i++) {
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z = (ws >> 1) - mod;
          else
            z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }
    
        naf[i] = z;
        k.iushrn(1);
      }
    
      return naf;
    }
    utils.getNAF = getNAF;
    
    // Represent k1, k2 in a Joint Sparse Form
    function getJSF(k1, k2) {
      var jsf = [
        [],
        [],
      ];
    
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        // First phase
        var m14 = (k1.andln(3) + d1) & 3;
        var m24 = (k2.andln(3) + d2) & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = (k1.andln(7) + d1) & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);
    
        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = (k2.andln(7) + d2) & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);
    
        // Second phase
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }
    
      return jsf;
    }
    utils.getJSF = getJSF;
    
    function cachedProperty(obj, name, computer) {
      var key = '_' + name;
      obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] :
          this[key] = computer.call(this);
      };
    }
    utils.cachedProperty = cachedProperty;
    
    function parseBytes(bytes) {
      return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
        bytes;
    }
    utils.parseBytes = parseBytes;
    
    function intFromLE(bytes) {
      return new BN(bytes, 'hex', 'le');
    }
    utils.intFromLE = intFromLE;
    
    
    },{"bn.js":123,"minimalistic-assert":195,"minimalistic-crypto-utils":196}],142:[function(require,module,exports){
    module.exports={
      "name": "elliptic",
      "version": "6.5.4",
      "description": "EC cryptography",
      "main": "lib/elliptic.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "lint": "eslint lib test",
        "lint:fix": "npm run lint -- --fix",
        "unit": "istanbul test _mocha --reporter=spec test/index.js",
        "test": "npm run lint && npm run unit",
        "version": "grunt dist && git add dist/"
      },
      "repository": {
        "type": "git",
        "url": "git@github.com:indutny/elliptic"
      },
      "keywords": [
        "EC",
        "Elliptic",
        "curve",
        "Cryptography"
      ],
      "author": "Fedor Indutny <fedor@indutny.com>",
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/indutny/elliptic/issues"
      },
      "homepage": "https://github.com/indutny/elliptic",
      "devDependencies": {
        "brfs": "^2.0.2",
        "coveralls": "^3.1.0",
        "eslint": "^7.6.0",
        "grunt": "^1.2.1",
        "grunt-browserify": "^5.3.0",
        "grunt-cli": "^1.3.2",
        "grunt-contrib-connect": "^3.0.0",
        "grunt-contrib-copy": "^1.0.0",
        "grunt-contrib-uglify": "^5.0.0",
        "grunt-mocha-istanbul": "^5.0.2",
        "grunt-saucelabs": "^9.0.1",
        "istanbul": "^0.4.5",
        "mocha": "^8.0.1"
      },
      "dependencies": {
        "bn.js": "^4.11.9",
        "brorand": "^1.1.0",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.1",
        "inherits": "^2.0.4",
        "minimalistic-assert": "^1.0.1",
        "minimalistic-crypto-utils": "^1.0.1"
      }
    }
    
    },{}],143:[function(require,module,exports){
    /**
     * ECIES encrypt/decrypt with Ethereum keys
     * Modified from https://github.com/vhpoet/simple-ecies/blob/master/index.js
     */
    "use strict"
    
    const Crypto = require("crypto");
    const EC = require("elliptic").ec;
    const ec = new EC("secp256k1");
    const Buffer = require('safe-buffer').Buffer
    
    /**
     * AES-256 CBC encrypt
     * @param {Buffer} iv
     * @param {Buffer} key
     * @param {Buffer} plaintext
     * @returns {Buffer} ciphertext
     */
    const AES256CbcEncrypt = (iv, key, plaintext) => {
      const cipher = Crypto.createCipheriv("aes-256-cbc", key, iv);
      const firstChunk = cipher.update(plaintext);
      const secondChunk = cipher.final();
      return Buffer.concat([firstChunk, secondChunk]);
    }
    
    /**
     * AES-256 CBC decrypt
     * @param {Buffer} iv
     * @param {Buffer} key
     * @param {Buffer} ciphertext
     * @returns {Buffer} plaintext
     */
    const AES256CbcDecrypt = (iv, key, ciphertext) => {
      const cipher = Crypto.createDecipheriv("aes-256-cbc", key, iv);
      const firstChunk = cipher.update(ciphertext);
      const secondChunk = cipher.final();
      return Buffer.concat([firstChunk, secondChunk]);
    }
    
    /**
     * Compares if two buffers are equal
     * @param {Buffer} b1
     * @param {Buffer} b2
     * @returns {boolean} true if the buffers are equal
     */
    const BufferEqual = (b1, b2) => {
      if (b1.length !== b2.length) {
        return false;
      }
      let res = 0;
      for (let i = 0; i < b1.length; i++) {
        res |= b1[i] ^ b2[i];
      }
      return res === 0;
    }
    
    /**
     * ECIES encrypt
     * @param {Buffer} pubKeyTo Ethereum pub key, 64 bytes
     * @param {Buffer} plaintext Plaintext to be encrypted
     * @param {?{?iv: Buffer, ?ephemPrivKey: Buffer}} opts
     * optional iv (16 bytes) and ephem key (32 bytes)
     * @returns {Buffer} Encrypted message, serialized, 113+ bytes
     */
    const Encrypt = (pubKeyTo, plaintext, opts) => {
      opts = opts || {};
      const ephemPrivKey = ec.keyFromPrivate(
        opts.ephemPrivKey || Crypto.randomBytes(32));
      const ephemPubKey = ephemPrivKey.getPublic();
      const ephemPubKeyEncoded = Buffer.from(ephemPubKey.encode());
      // Every EC public key begins with the 0x04 prefix before giving
      // the location of the two point on the curve
      const px = ephemPrivKey.derive(ec.keyFromPublic(
        Buffer.concat([Buffer.from([0x04]), pubKeyTo])).getPublic());
      const hash = Crypto.createHash("sha512").update(px.toArrayLike(Buffer)).digest();
      const iv = opts.iv || Crypto.randomBytes(16);
      const encryptionKey = hash.slice(0, 32);
      const macKey = hash.slice(32);
      const ciphertext = AES256CbcEncrypt(iv, encryptionKey, plaintext);
      const dataToMac = Buffer.concat([iv, ephemPubKeyEncoded, ciphertext]);
      const mac = Crypto.createHmac("sha256", macKey).update(dataToMac).digest();
      const serializedCiphertext = Buffer.concat([
        iv, // 16 bytes
        ephemPubKeyEncoded, // 65 bytes
        mac, // 32 bytes
        ciphertext,
      ])
      return serializedCiphertext;
    }
    
    /**
     * ECIES decrypt
     * @param {Buffer} privKey Ethereum private key, 32 bytes
     * @param {Buffer} encrypted Encrypted message, serialized, 113+ bytes
     * @returns {Buffer} plaintext
     */
    const Decrypt = (privKey, encrypted) => {
      // read iv, ephemPubKey, mac, ciphertext from encrypted message
      const iv = encrypted.slice(0, 16)
      const ephemPubKeyEncoded = encrypted.slice(16, 81);
      const mac = encrypted.slice(81, 113);
      const ciphertext = encrypted.slice(113);
      const ephemPubKey = ec.keyFromPublic(ephemPubKeyEncoded).getPublic();
    
      const px = ec.keyFromPrivate(privKey).derive(ephemPubKey);
      const hash = Crypto.createHash("sha512").update(px.toArrayLike(Buffer)).digest();
      const encryptionKey = hash.slice(0, 32);
      const macKey = hash.slice(32);
      const dataToMac = Buffer.concat([iv, ephemPubKeyEncoded, ciphertext]);
      const computedMac = Crypto.createHmac("sha256", macKey).update(dataToMac).digest();
      // verify mac
      if (!BufferEqual(computedMac, mac)) {
        throw new Error("MAC mismatch");
      }
      const plaintext = AES256CbcDecrypt(iv, encryptionKey, ciphertext);
      return plaintext;
    }
    
    module.exports = {
      encrypt: Encrypt,
      decrypt: Decrypt,
    };
    
    },{"crypto":309,"elliptic":127,"safe-buffer":216}],144:[function(require,module,exports){
    (function (Buffer){(function (){
    "use strict";
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.recoverTypedSignature_v4 = exports.recoverTypedSignature = exports.signTypedData_v4 = exports.signTypedData = exports.recoverTypedMessage = exports.signTypedMessage = exports.getEncryptionPublicKey = exports.decryptSafely = exports.decrypt = exports.encryptSafely = exports.encrypt = exports.recoverTypedSignatureLegacy = exports.signTypedDataLegacy = exports.typedSignatureHash = exports.extractPublicKey = exports.recoverPersonalSignature = exports.personalSign = exports.normalize = exports.concatSig = exports.TypedDataUtils = exports.TYPED_MESSAGE_SCHEMA = void 0;
    const ethUtil = __importStar(require("ethereumjs-util"));
    const ethAbi = __importStar(require("ethereumjs-abi"));
    const nacl = __importStar(require("tweetnacl"));
    const naclUtil = __importStar(require("tweetnacl-util"));
    const TYPED_MESSAGE_SCHEMA = {
        type: 'object',
        properties: {
            types: {
                type: 'object',
                additionalProperties: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            name: { type: 'string' },
                            type: { type: 'string' },
                        },
                        required: ['name', 'type'],
                    },
                },
            },
            primaryType: { type: 'string' },
            domain: { type: 'object' },
            message: { type: 'object' },
        },
        required: ['types', 'primaryType', 'domain', 'message'],
    };
    exports.TYPED_MESSAGE_SCHEMA = TYPED_MESSAGE_SCHEMA;
    /**
     * A collection of utility functions used for signing typed data
     */
    const TypedDataUtils = {
        /**
         * Encodes an object by encoding and concatenating each of its members
         *
         * @param {string} primaryType - Root type
         * @param {Object} data - Object to encode
         * @param {Object} types - Type definitions
         * @returns {Buffer} - Encoded representation of an object
         */
        encodeData(primaryType, data, types, useV4 = true) {
            const encodedTypes = ['bytes32'];
            const encodedValues = [this.hashType(primaryType, types)];
            if (useV4) {
                const encodeField = (name, type, value) => {
                    if (types[type] !== undefined) {
                        return [
                            'bytes32',
                            value == null // eslint-disable-line no-eq-null
                                ? '0x0000000000000000000000000000000000000000000000000000000000000000'
                                : ethUtil.keccak(this.encodeData(type, value, types, useV4)),
                        ];
                    }
                    if (value === undefined) {
                        throw new Error(`missing value for field ${name} of type ${type}`);
                    }
                    if (type === 'bytes') {
                        return ['bytes32', ethUtil.keccak(value)];
                    }
                    if (type === 'string') {
                        // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex
                        if (typeof value === 'string') {
                            value = Buffer.from(value, 'utf8');
                        }
                        return ['bytes32', ethUtil.keccak(value)];
                    }
                    if (type.lastIndexOf(']') === type.length - 1) {
                        const parsedType = type.slice(0, type.lastIndexOf('['));
                        const typeValuePairs = value.map((item) => encodeField(name, parsedType, item));
                        return [
                            'bytes32',
                            ethUtil.keccak(ethAbi.rawEncode(typeValuePairs.map(([t]) => t), typeValuePairs.map(([, v]) => v))),
                        ];
                    }
                    return [type, value];
                };
                for (const field of types[primaryType]) {
                    const [type, value] = encodeField(field.name, field.type, data[field.name]);
                    encodedTypes.push(type);
                    encodedValues.push(value);
                }
            }
            else {
                for (const field of types[primaryType]) {
                    let value = data[field.name];
                    if (value !== undefined) {
                        if (field.type === 'bytes') {
                            encodedTypes.push('bytes32');
                            value = ethUtil.keccak(value);
                            encodedValues.push(value);
                        }
                        else if (field.type === 'string') {
                            encodedTypes.push('bytes32');
                            // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex
                            if (typeof value === 'string') {
                                value = Buffer.from(value, 'utf8');
                            }
                            value = ethUtil.keccak(value);
                            encodedValues.push(value);
                        }
                        else if (types[field.type] !== undefined) {
                            encodedTypes.push('bytes32');
                            value = ethUtil.keccak(this.encodeData(field.type, value, types, useV4));
                            encodedValues.push(value);
                        }
                        else if (field.type.lastIndexOf(']') === field.type.length - 1) {
                            throw new Error('Arrays are unimplemented in encodeData; use V4 extension');
                        }
                        else {
                            encodedTypes.push(field.type);
                            encodedValues.push(value);
                        }
                    }
                }
            }
            return ethAbi.rawEncode(encodedTypes, encodedValues);
        },
        /**
         * Encodes the type of an object by encoding a comma delimited list of its members
         *
         * @param {string} primaryType - Root type to encode
         * @param {Object} types - Type definitions
         * @returns {string} - Encoded representation of the type of an object
         */
        encodeType(primaryType, types) {
            let result = '';
            let deps = this.findTypeDependencies(primaryType, types).filter((dep) => dep !== primaryType);
            deps = [primaryType].concat(deps.sort());
            for (const type of deps) {
                const children = types[type];
                if (!children) {
                    throw new Error(`No type definition specified: ${type}`);
                }
                result += `${type}(${types[type]
                    .map(({ name, type: t }) => `${t} ${name}`)
                    .join(',')})`;
            }
            return result;
        },
        /**
         * Finds all types within a type definition object
         *
         * @param {string} primaryType - Root type
         * @param {Object} types - Type definitions
         * @param {Array} results - current set of accumulated types
         * @returns {Array} - Set of all types found in the type definition
         */
        findTypeDependencies(primaryType, types, results = []) {
            [primaryType] = primaryType.match(/^\w*/u);
            if (results.includes(primaryType) || types[primaryType] === undefined) {
                return results;
            }
            results.push(primaryType);
            for (const field of types[primaryType]) {
                for (const dep of this.findTypeDependencies(field.type, types, results)) {
                    !results.includes(dep) && results.push(dep);
                }
            }
            return results;
        },
        /**
         * Hashes an object
         *
         * @param {string} primaryType - Root type
         * @param {Object} data - Object to hash
         * @param {Object} types - Type definitions
         * @returns {Buffer} - Hash of an object
         */
        hashStruct(primaryType, data, types, useV4 = true) {
            return ethUtil.keccak(this.encodeData(primaryType, data, types, useV4));
        },
        /**
         * Hashes the type of an object
         *
         * @param {string} primaryType - Root type to hash
         * @param {Object} types - Type definitions
         * @returns {Buffer} - Hash of an object
         */
        hashType(primaryType, types) {
            return ethUtil.keccak(this.encodeType(primaryType, types));
        },
        /**
         * Removes properties from a message object that are not defined per EIP-712
         *
         * @param {Object} data - typed message object
         * @returns {Object} - typed message object with only allowed fields
         */
        sanitizeData(data) {
            const sanitizedData = {};
            for (const key in TYPED_MESSAGE_SCHEMA.properties) {
                if (data[key]) {
                    sanitizedData[key] = data[key];
                }
            }
            if ('types' in sanitizedData) {
                sanitizedData.types = Object.assign({ EIP712Domain: [] }, sanitizedData.types);
            }
            return sanitizedData;
        },
        /**
         * Signs a typed message as per EIP-712 and returns its keccak hash
         *
         * @param {Object} typedData - Types message data to sign
         * @returns {Buffer} - keccak hash of the resulting signed message
         */
        sign(typedData, useV4 = true) {
            const sanitizedData = this.sanitizeData(typedData);
            const parts = [Buffer.from('1901', 'hex')];
            parts.push(this.hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, useV4));
            if (sanitizedData.primaryType !== 'EIP712Domain') {
                parts.push(this.hashStruct(sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, useV4));
            }
            return ethUtil.keccak(Buffer.concat(parts));
        },
    };
    exports.TypedDataUtils = TypedDataUtils;
    function concatSig(v, r, s) {
        const rSig = ethUtil.fromSigned(r);
        const sSig = ethUtil.fromSigned(s);
        const vSig = ethUtil.bufferToInt(v);
        const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64);
        const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64);
        const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig));
        return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex');
    }
    exports.concatSig = concatSig;
    function normalize(input) {
        if (!input) {
            return undefined;
        }
        if (typeof input === 'number') {
            const buffer = ethUtil.toBuffer(input);
            input = ethUtil.bufferToHex(buffer);
        }
        if (typeof input !== 'string') {
            let msg = 'eth-sig-util.normalize() requires hex string or integer input.';
            msg += ` received ${typeof input}: ${input}`;
            throw new Error(msg);
        }
        return ethUtil.addHexPrefix(input.toLowerCase());
    }
    exports.normalize = normalize;
    function personalSign(privateKey, msgParams) {
        const message = ethUtil.toBuffer(msgParams.data);
        const msgHash = ethUtil.hashPersonalMessage(message);
        const sig = ethUtil.ecsign(msgHash, privateKey);
        const serialized = ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));
        return serialized;
    }
    exports.personalSign = personalSign;
    function recoverPersonalSignature(msgParams) {
        const publicKey = getPublicKeyFor(msgParams);
        const sender = ethUtil.publicToAddress(publicKey);
        const senderHex = ethUtil.bufferToHex(sender);
        return senderHex;
    }
    exports.recoverPersonalSignature = recoverPersonalSignature;
    function extractPublicKey(msgParams) {
        const publicKey = getPublicKeyFor(msgParams);
        return `0x${publicKey.toString('hex')}`;
    }
    exports.extractPublicKey = extractPublicKey;
    function externalTypedSignatureHash(typedData) {
        const hashBuffer = typedSignatureHash(typedData);
        return ethUtil.bufferToHex(hashBuffer);
    }
    exports.typedSignatureHash = externalTypedSignatureHash;
    function signTypedDataLegacy(privateKey, msgParams) {
        const msgHash = typedSignatureHash(msgParams.data);
        const sig = ethUtil.ecsign(msgHash, privateKey);
        return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));
    }
    exports.signTypedDataLegacy = signTypedDataLegacy;
    function recoverTypedSignatureLegacy(msgParams) {
        const msgHash = typedSignatureHash(msgParams.data);
        const publicKey = recoverPublicKey(msgHash, msgParams.sig);
        const sender = ethUtil.publicToAddress(publicKey);
        return ethUtil.bufferToHex(sender);
    }
    exports.recoverTypedSignatureLegacy = recoverTypedSignatureLegacy;
    function encrypt(receiverPublicKey, msgParams, version) {
        switch (version) {
            case 'x25519-xsalsa20-poly1305': {
                if (typeof msgParams.data !== 'string') {
                    throw new Error('Cannot detect secret message, message params should be of the form {data: "secret message"} ');
                }
                // generate ephemeral keypair
                const ephemeralKeyPair = nacl.box.keyPair();
                // assemble encryption parameters - from string to UInt8
                let pubKeyUInt8Array;
                try {
                    pubKeyUInt8Array = naclUtil.decodeBase64(receiverPublicKey);
                }
                catch (err) {
                    throw new Error('Bad public key');
                }
                const msgParamsUInt8Array = naclUtil.decodeUTF8(msgParams.data);
                const nonce = nacl.randomBytes(nacl.box.nonceLength);
                // encrypt
                const encryptedMessage = nacl.box(msgParamsUInt8Array, nonce, pubKeyUInt8Array, ephemeralKeyPair.secretKey);
                // handle encrypted data
                const output = {
                    version: 'x25519-xsalsa20-poly1305',
                    nonce: naclUtil.encodeBase64(nonce),
                    ephemPublicKey: naclUtil.encodeBase64(ephemeralKeyPair.publicKey),
                    ciphertext: naclUtil.encodeBase64(encryptedMessage),
                };
                // return encrypted msg data
                return output;
            }
            default:
                throw new Error('Encryption type/version not supported');
        }
    }
    exports.encrypt = encrypt;
    function encryptSafely(receiverPublicKey, msgParams, version) {
        const DEFAULT_PADDING_LENGTH = 2 ** 11;
        const NACL_EXTRA_BYTES = 16;
        const { data } = msgParams;
        if (!data) {
            throw new Error('Cannot encrypt empty msg.data');
        }
        if (typeof data === 'object' && 'toJSON' in data) {
            // remove toJSON attack vector
            // TODO, check all possible children
            throw new Error('Cannot encrypt with toJSON property.  Please remove toJSON property');
        }
        // add padding
        const dataWithPadding = {
            data,
            padding: '',
        };
        // calculate padding
        const dataLength = Buffer.byteLength(JSON.stringify(dataWithPadding), 'utf-8');
        const modVal = dataLength % DEFAULT_PADDING_LENGTH;
        let padLength = 0;
        // Only pad if necessary
        if (modVal > 0) {
            padLength = DEFAULT_PADDING_LENGTH - modVal - NACL_EXTRA_BYTES; // nacl extra bytes
        }
        dataWithPadding.padding = '0'.repeat(padLength);
        const paddedMsgParams = { data: JSON.stringify(dataWithPadding) };
        return encrypt(receiverPublicKey, paddedMsgParams, version);
    }
    exports.encryptSafely = encryptSafely;
    function decrypt(encryptedData, receiverPrivateKey) {
        switch (encryptedData.version) {
            case 'x25519-xsalsa20-poly1305': {
                // string to buffer to UInt8Array
                const recieverPrivateKeyUint8Array = nacl_decodeHex(receiverPrivateKey);
                const recieverEncryptionPrivateKey = nacl.box.keyPair.fromSecretKey(recieverPrivateKeyUint8Array).secretKey;
                // assemble decryption parameters
                const nonce = naclUtil.decodeBase64(encryptedData.nonce);
                const ciphertext = naclUtil.decodeBase64(encryptedData.ciphertext);
                const ephemPublicKey = naclUtil.decodeBase64(encryptedData.ephemPublicKey);
                // decrypt
                const decryptedMessage = nacl.box.open(ciphertext, nonce, ephemPublicKey, recieverEncryptionPrivateKey);
                // return decrypted msg data
                let output;
                try {
                    output = naclUtil.encodeUTF8(decryptedMessage);
                }
                catch (err) {
                    throw new Error('Decryption failed.');
                }
                if (output) {
                    return output;
                }
                throw new Error('Decryption failed.');
            }
            default:
                throw new Error('Encryption type/version not supported.');
        }
    }
    exports.decrypt = decrypt;
    function decryptSafely(encryptedData, receiverPrivateKey) {
        const dataWithPadding = JSON.parse(decrypt(encryptedData, receiverPrivateKey));
        return dataWithPadding.data;
    }
    exports.decryptSafely = decryptSafely;
    function getEncryptionPublicKey(privateKey) {
        const privateKeyUint8Array = nacl_decodeHex(privateKey);
        const encryptionPublicKey = nacl.box.keyPair.fromSecretKey(privateKeyUint8Array).publicKey;
        return naclUtil.encodeBase64(encryptionPublicKey);
    }
    exports.getEncryptionPublicKey = getEncryptionPublicKey;
    /**
     * A generic entry point for all typed data methods to be passed, includes a version parameter.
     */
    function signTypedMessage(privateKey, msgParams, version = 'V4') {
        switch (version) {
            case 'V1':
                return signTypedDataLegacy(privateKey, msgParams);
            case 'V3':
                return signTypedData(privateKey, msgParams);
            case 'V4':
            default:
                return signTypedData_v4(privateKey, msgParams);
        }
    }
    exports.signTypedMessage = signTypedMessage;
    function recoverTypedMessage(msgParams, version = 'V4') {
        switch (version) {
            case 'V1':
                return recoverTypedSignatureLegacy(msgParams);
            case 'V3':
                return recoverTypedSignature(msgParams);
            case 'V4':
            default:
                return recoverTypedSignature_v4(msgParams);
        }
    }
    exports.recoverTypedMessage = recoverTypedMessage;
    function signTypedData(privateKey, msgParams) {
        const message = TypedDataUtils.sign(msgParams.data, false);
        const sig = ethUtil.ecsign(message, privateKey);
        return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));
    }
    exports.signTypedData = signTypedData;
    function signTypedData_v4(privateKey, msgParams) {
        const message = TypedDataUtils.sign(msgParams.data);
        const sig = ethUtil.ecsign(message, privateKey);
        return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));
    }
    exports.signTypedData_v4 = signTypedData_v4;
    function recoverTypedSignature(msgParams) {
        const message = TypedDataUtils.sign(msgParams.data, false);
        const publicKey = recoverPublicKey(message, msgParams.sig);
        const sender = ethUtil.publicToAddress(publicKey);
        return ethUtil.bufferToHex(sender);
    }
    exports.recoverTypedSignature = recoverTypedSignature;
    function recoverTypedSignature_v4(msgParams) {
        const message = TypedDataUtils.sign(msgParams.data);
        const publicKey = recoverPublicKey(message, msgParams.sig);
        const sender = ethUtil.publicToAddress(publicKey);
        return ethUtil.bufferToHex(sender);
    }
    exports.recoverTypedSignature_v4 = recoverTypedSignature_v4;
    /**
     * @param typedData - Array of data along with types, as per EIP712.
     * @returns Buffer
     */
    function typedSignatureHash(typedData) {
        const error = new Error('Expect argument to be non-empty array');
        if (typeof typedData !== 'object' ||
            !('length' in typedData) ||
            !typedData.length) {
            throw error;
        }
        const data = typedData.map(function (e) {
            return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value;
        });
        const types = typedData.map(function (e) {
            return e.type;
        });
        const schema = typedData.map(function (e) {
            if (!e.name) {
                throw error;
            }
            return `${e.type} ${e.name}`;
        });
        return ethAbi.soliditySHA3(['bytes32', 'bytes32'], [
            ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema),
            ethAbi.soliditySHA3(types, data),
        ]);
    }
    function recoverPublicKey(hash, sig) {
        const signature = ethUtil.toBuffer(sig);
        const sigParams = ethUtil.fromRpcSig(signature);
        return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s);
    }
    function getPublicKeyFor(msgParams) {
        const message = ethUtil.toBuffer(msgParams.data);
        const msgHash = ethUtil.hashPersonalMessage(message);
        return recoverPublicKey(msgHash, msgParams.sig);
    }
    function padWithZeroes(number, length) {
        let myString = `${number}`;
        while (myString.length < length) {
            myString = `0${myString}`;
        }
        return myString;
    }
    // converts hex strings to the Uint8Array format used by nacl
    function nacl_decodeHex(msgHex) {
        const msgBase64 = Buffer.from(msgHex, 'hex').toString('base64');
        return naclUtil.decodeBase64(msgBase64);
    }
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"buffer":301,"ethereumjs-abi":153,"ethereumjs-util":145,"tweetnacl":232,"tweetnacl-util":231}],145:[function(require,module,exports){
    'use strict';
    
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
    
    var _require = require('ethereum-cryptography/keccak'),
        keccak224 = _require.keccak224,
        keccak384 = _require.keccak384,
        k256 = _require.keccak256,
        keccak512 = _require.keccak512;
    
    var secp256k1 = require('./secp256k1-adapter');
    var assert = require('assert');
    var rlp = require('rlp');
    var BN = require('bn.js');
    var createHash = require('create-hash');
    var Buffer = require('safe-buffer').Buffer;
    Object.assign(exports, require('ethjs-util'));
    
    /**
     * the max integer that this VM can handle (a ```BN```)
     * @var {BN} MAX_INTEGER
     */
    exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
    
    /**
     * 2^256 (a ```BN```)
     * @var {BN} TWO_POW256
     */
    exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);
    
    /**
     * Keccak-256 hash of null (a ```String```)
     * @var {String} KECCAK256_NULL_S
     */
    exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
    exports.SHA3_NULL_S = exports.KECCAK256_NULL_S;
    
    /**
     * Keccak-256 hash of null (a ```Buffer```)
     * @var {Buffer} KECCAK256_NULL
     */
    exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
    exports.SHA3_NULL = exports.KECCAK256_NULL;
    
    /**
     * Keccak-256 of an RLP of an empty array (a ```String```)
     * @var {String} KECCAK256_RLP_ARRAY_S
     */
    exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
    exports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;
    
    /**
     * Keccak-256 of an RLP of an empty array (a ```Buffer```)
     * @var {Buffer} KECCAK256_RLP_ARRAY
     */
    exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
    exports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;
    
    /**
     * Keccak-256 hash of the RLP of null  (a ```String```)
     * @var {String} KECCAK256_RLP_S
     */
    exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
    exports.SHA3_RLP_S = exports.KECCAK256_RLP_S;
    
    /**
     * Keccak-256 hash of the RLP of null (a ```Buffer```)
     * @var {Buffer} KECCAK256_RLP
     */
    exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');
    exports.SHA3_RLP = exports.KECCAK256_RLP;
    
    /**
     * [`BN`](https://github.com/indutny/bn.js)
     * @var {Function}
     */
    exports.BN = BN;
    
    /**
     * [`rlp`](https://github.com/ethereumjs/rlp)
     * @var {Function}
     */
    exports.rlp = rlp;
    
    /**
     * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)
     * @var {Object}
     */
    exports.secp256k1 = secp256k1;
    
    /**
     * Returns a buffer filled with 0s
     * @method zeros
     * @param {Number} bytes  the number of bytes the buffer should be
     * @return {Buffer}
     */
    exports.zeros = function (bytes) {
      return Buffer.allocUnsafe(bytes).fill(0);
    };
    
    /**
      * Returns a zero address
      * @method zeroAddress
      * @return {String}
      */
    exports.zeroAddress = function () {
      var addressLength = 20;
      var zeroAddress = exports.zeros(addressLength);
      return exports.bufferToHex(zeroAddress);
    };
    
    /**
     * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
     * Or it truncates the beginning if it exceeds.
     * @method lsetLength
     * @param {Buffer|Array} msg the value to pad
     * @param {Number} length the number of bytes the output should be
     * @param {Boolean} [right=false] whether to start padding form the left or right
     * @return {Buffer|Array}
     */
    exports.setLengthLeft = exports.setLength = function (msg, length, right) {
      var buf = exports.zeros(length);
      msg = exports.toBuffer(msg);
      if (right) {
        if (msg.length < length) {
          msg.copy(buf);
          return buf;
        }
        return msg.slice(0, length);
      } else {
        if (msg.length < length) {
          msg.copy(buf, length - msg.length);
          return buf;
        }
        return msg.slice(-length);
      }
    };
    
    /**
     * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
     * Or it truncates the beginning if it exceeds.
     * @param {Buffer|Array} msg the value to pad
     * @param {Number} length the number of bytes the output should be
     * @return {Buffer|Array}
     */
    exports.setLengthRight = function (msg, length) {
      return exports.setLength(msg, length, true);
    };
    
    /**
     * Trims leading zeros from a `Buffer` or an `Array`
     * @param {Buffer|Array|String} a
     * @return {Buffer|Array|String}
     */
    exports.unpad = exports.stripZeros = function (a) {
      a = exports.stripHexPrefix(a);
      var first = a[0];
      while (a.length > 0 && first.toString() === '0') {
        a = a.slice(1);
        first = a[0];
      }
      return a;
    };
    /**
     * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
     * @param {*} v the value
     */
    exports.toBuffer = function (v) {
      if (!Buffer.isBuffer(v)) {
        if (Array.isArray(v)) {
          v = Buffer.from(v);
        } else if (typeof v === 'string') {
          if (exports.isHexString(v)) {
            v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex');
          } else {
            v = Buffer.from(v);
          }
        } else if (typeof v === 'number') {
          v = exports.intToBuffer(v);
        } else if (v === null || v === undefined) {
          v = Buffer.allocUnsafe(0);
        } else if (BN.isBN(v)) {
          v = v.toArrayLike(Buffer);
        } else if (v.toArray) {
          // converts a BN to a Buffer
          v = Buffer.from(v.toArray());
        } else {
          throw new Error('invalid type');
        }
      }
      return v;
    };
    
    /**
     * Converts a `Buffer` to a `Number`
     * @param {Buffer} buf
     * @return {Number}
     * @throws If the input number exceeds 53 bits.
     */
    exports.bufferToInt = function (buf) {
      return new BN(exports.toBuffer(buf)).toNumber();
    };
    
    /**
     * Converts a `Buffer` into a hex `String`
     * @param {Buffer} buf
     * @return {String}
     */
    exports.bufferToHex = function (buf) {
      buf = exports.toBuffer(buf);
      return '0x' + buf.toString('hex');
    };
    
    /**
     * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
     * @param {Buffer} num
     * @return {BN}
     */
    exports.fromSigned = function (num) {
      return new BN(num).fromTwos(256);
    };
    
    /**
     * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
     * @param {BN} num
     * @return {Buffer}
     */
    exports.toUnsigned = function (num) {
      return Buffer.from(num.toTwos(256).toArray());
    };
    
    /**
     * Creates Keccak hash of the input
     * @param {Buffer|Array|String|Number} a the input data
     * @param {Number} [bits=256] the Keccak width
     * @return {Buffer}
     */
    exports.keccak = function (a, bits) {
      a = exports.toBuffer(a);
      if (!bits) bits = 256;
    
      switch (bits) {
        case 224:
          {
            return keccak224(a);
          }
        case 256:
          {
            return k256(a);
          }
        case 384:
          {
            return keccak384(a);
          }
        case 512:
          {
            return keccak512(a);
          }
        default:
          {
            throw new Error('Invald algorithm: keccak' + bits);
          }
      }
    };
    
    /**
     * Creates Keccak-256 hash of the input, alias for keccak(a, 256)
     * @param {Buffer|Array|String|Number} a the input data
     * @return {Buffer}
     */
    exports.keccak256 = function (a) {
      return exports.keccak(a);
    };
    
    /**
     * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]
     * @param {Buffer|Array|String|Number} a the input data
     * @param {Number} [bits=256] the SHA-3 width
     * @return {Buffer}
     */
    exports.sha3 = exports.keccak;
    
    /**
     * Creates SHA256 hash of the input
     * @param {Buffer|Array|String|Number} a the input data
     * @return {Buffer}
     */
    exports.sha256 = function (a) {
      a = exports.toBuffer(a);
      return createHash('sha256').update(a).digest();
    };
    
    /**
     * Creates RIPEMD160 hash of the input
     * @param {Buffer|Array|String|Number} a the input data
     * @param {Boolean} padded whether it should be padded to 256 bits or not
     * @return {Buffer}
     */
    exports.ripemd160 = function (a, padded) {
      a = exports.toBuffer(a);
      var hash = createHash('rmd160').update(a).digest();
      if (padded === true) {
        return exports.setLength(hash, 32);
      } else {
        return hash;
      }
    };
    
    /**
     * Creates SHA-3 hash of the RLP encoded version of the input
     * @param {Buffer|Array|String|Number} a the input data
     * @return {Buffer}
     */
    exports.rlphash = function (a) {
      return exports.keccak(rlp.encode(a));
    };
    
    /**
     * Checks if the private key satisfies the rules of the curve secp256k1.
     * @param {Buffer} privateKey
     * @return {Boolean}
     */
    exports.isValidPrivate = function (privateKey) {
      return secp256k1.privateKeyVerify(privateKey);
    };
    
    /**
     * Checks if the public key satisfies the rules of the curve secp256k1
     * and the requirements of Ethereum.
     * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled
     * @param {Boolean} [sanitize=false] Accept public keys in other formats
     * @return {Boolean}
     */
    exports.isValidPublic = function (publicKey, sanitize) {
      if (publicKey.length === 64) {
        // Convert to SEC1 for secp256k1
        return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
      }
    
      if (!sanitize) {
        return false;
      }
    
      return secp256k1.publicKeyVerify(publicKey);
    };
    
    /**
     * Returns the ethereum address of a given public key.
     * Accepts "Ethereum public keys" and SEC1 encoded keys.
     * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
     * @param {Boolean} [sanitize=false] Accept public keys in other formats
     * @return {Buffer}
     */
    exports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {
      pubKey = exports.toBuffer(pubKey);
      if (sanitize && pubKey.length !== 64) {
        pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
      }
      assert(pubKey.length === 64);
      // Only take the lower 160bits of the hash
      return exports.keccak(pubKey).slice(-20);
    };
    
    /**
     * Returns the ethereum public key of a given private key
     * @param {Buffer} privateKey A private key must be 256 bits wide
     * @return {Buffer}
     */
    var privateToPublic = exports.privateToPublic = function (privateKey) {
      privateKey = exports.toBuffer(privateKey);
      // skip the type flag and use the X, Y points
      return secp256k1.publicKeyCreate(privateKey, false).slice(1);
    };
    
    /**
     * Converts a public key to the Ethereum format.
     * @param {Buffer} publicKey
     * @return {Buffer}
     */
    exports.importPublic = function (publicKey) {
      publicKey = exports.toBuffer(publicKey);
      if (publicKey.length !== 64) {
        publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
      }
      return publicKey;
    };
    
    /**
     * ECDSA sign
     * @param {Buffer} msgHash
     * @param {Buffer} privateKey
     * @return {Object}
     */
    exports.ecsign = function (msgHash, privateKey) {
      var sig = secp256k1.sign(msgHash, privateKey);
    
      var ret = {};
      ret.r = sig.signature.slice(0, 32);
      ret.s = sig.signature.slice(32, 64);
      ret.v = sig.recovery + 27;
      return ret;
    };
    
    /**
     * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
     * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
     * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
     * used to produce the signature.
     * @param message
     * @returns {Buffer} hash
     */
    exports.hashPersonalMessage = function (message) {
      var prefix = exports.toBuffer('\x19Ethereum Signed Message:\n' + message.length.toString());
      return exports.keccak(Buffer.concat([prefix, message]));
    };
    
    /**
     * ECDSA public key recovery from signature
     * @param {Buffer} msgHash
     * @param {Number} v
     * @param {Buffer} r
     * @param {Buffer} s
     * @return {Buffer} publicKey
     */
    exports.ecrecover = function (msgHash, v, r, s) {
      var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);
      var recovery = v - 27;
      if (recovery !== 0 && recovery !== 1) {
        throw new Error('Invalid signature v value');
      }
      var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
      return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
    };
    
    /**
     * Convert signature parameters into the format of `eth_sign` RPC method
     * @param {Number} v
     * @param {Buffer} r
     * @param {Buffer} s
     * @return {String} sig
     */
    exports.toRpcSig = function (v, r, s) {
      // NOTE: with potential introduction of chainId this might need to be updated
      if (v !== 27 && v !== 28) {
        throw new Error('Invalid recovery id');
      }
    
      // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
      // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053
      return exports.bufferToHex(Buffer.concat([exports.setLengthLeft(r, 32), exports.setLengthLeft(s, 32), exports.toBuffer(v - 27)]));
    };
    
    /**
     * Convert signature format of the `eth_sign` RPC method to signature parameters
     * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
     * @param {String} sig
     * @return {Object}
     */
    exports.fromRpcSig = function (sig) {
      sig = exports.toBuffer(sig);
    
      // NOTE: with potential introduction of chainId this might need to be updated
      if (sig.length !== 65) {
        throw new Error('Invalid signature length');
      }
    
      var v = sig[64];
      // support both versions of `eth_sign` responses
      if (v < 27) {
        v += 27;
      }
    
      return {
        v: v,
        r: sig.slice(0, 32),
        s: sig.slice(32, 64)
      };
    };
    
    /**
     * Returns the ethereum address of a given private key
     * @param {Buffer} privateKey A private key must be 256 bits wide
     * @return {Buffer}
     */
    exports.privateToAddress = function (privateKey) {
      return exports.publicToAddress(privateToPublic(privateKey));
    };
    
    /**
     * Checks if the address is a valid. Accepts checksummed addresses too
     * @param {String} address
     * @return {Boolean}
     */
    exports.isValidAddress = function (address) {
      return (/^0x[0-9a-fA-F]{40}$/.test(address)
      );
    };
    
    /**
      * Checks if a given address is a zero address
      * @method isZeroAddress
      * @param {String} address
      * @return {Boolean}
      */
    exports.isZeroAddress = function (address) {
      var zeroAddress = exports.zeroAddress();
      return zeroAddress === exports.addHexPrefix(address);
    };
    
    /**
     * Returns a checksummed address
     * @param {String} address
     * @return {String}
     */
    exports.toChecksumAddress = function (address) {
      address = exports.stripHexPrefix(address).toLowerCase();
      var hash = exports.keccak(address).toString('hex');
      var ret = '0x';
    
      for (var i = 0; i < address.length; i++) {
        if (parseInt(hash[i], 16) >= 8) {
          ret += address[i].toUpperCase();
        } else {
          ret += address[i];
        }
      }
    
      return ret;
    };
    
    /**
     * Checks if the address is a valid checksummed address
     * @param {Buffer} address
     * @return {Boolean}
     */
    exports.isValidChecksumAddress = function (address) {
      return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;
    };
    
    /**
     * Generates an address of a newly created contract
     * @param {Buffer} from the address which is creating this new address
     * @param {Buffer} nonce the nonce of the from account
     * @return {Buffer}
     */
    exports.generateAddress = function (from, nonce) {
      from = exports.toBuffer(from);
      nonce = new BN(nonce);
    
      if (nonce.isZero()) {
        // in RLP we want to encode null in the case of zero nonce
        // read the RLP documentation for an answer if you dare
        nonce = null;
      } else {
        nonce = Buffer.from(nonce.toArray());
      }
    
      // Only take the lower 160bits of the hash
      return exports.rlphash([from, nonce]).slice(-20);
    };
    
    /**
     * Returns true if the supplied address belongs to a precompiled account (Byzantium)
     * @param {Buffer|String} address
     * @return {Boolean}
     */
    exports.isPrecompiled = function (address) {
      var a = exports.unpad(address);
      return a.length === 1 && a[0] >= 1 && a[0] <= 8;
    };
    
    /**
     * Adds "0x" to a given `String` if it does not already start with "0x"
     * @param {String} str
     * @return {String}
     */
    exports.addHexPrefix = function (str) {
      if (typeof str !== 'string') {
        return str;
      }
    
      return exports.isHexPrefixed(str) ? str : '0x' + str;
    };
    
    /**
     * Validate ECDSA signature
     * @method isValidSignature
     * @param {Buffer} v
     * @param {Buffer} r
     * @param {Buffer} s
     * @param {Boolean} [homestead=true]
     * @return {Boolean}
     */
    
    exports.isValidSignature = function (v, r, s, homestead) {
      var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
      var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
    
      if (r.length !== 32 || s.length !== 32) {
        return false;
      }
    
      if (v !== 27 && v !== 28) {
        return false;
      }
    
      r = new BN(r);
      s = new BN(s);
    
      if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {
        return false;
      }
    
      if (homestead === false && new BN(s).cmp(SECP256K1_N_DIV_2) === 1) {
        return false;
      }
    
      return true;
    };
    
    /**
     * Converts a `Buffer` or `Array` to JSON
     * @param {Buffer|Array} ba
     * @return {Array|String|null}
     */
    exports.baToJSON = function (ba) {
      if (Buffer.isBuffer(ba)) {
        return '0x' + ba.toString('hex');
      } else if (ba instanceof Array) {
        var array = [];
        for (var i = 0; i < ba.length; i++) {
          array.push(exports.baToJSON(ba[i]));
        }
        return array;
      }
    };
    
    /**
     * Defines properties on a `Object`. It make the assumption that underlying data is binary.
     * @param {Object} self the `Object` to define properties on
     * @param {Array} fields an array fields to define. Fields can contain:
     * * `name` - the name of the properties
     * * `length` - the number of bytes the field can have
     * * `allowLess` - if the field can be less than the length
     * * `allowEmpty`
     * @param {*} data data to be validated against the definitions
     */
    exports.defineProperties = function (self, fields, data) {
      self.raw = [];
      self._fields = [];
    
      // attach the `toJSON`
      self.toJSON = function (label) {
        if (label) {
          var obj = {};
          self._fields.forEach(function (field) {
            obj[field] = '0x' + self[field].toString('hex');
          });
          return obj;
        }
        return exports.baToJSON(this.raw);
      };
    
      self.serialize = function serialize() {
        return rlp.encode(self.raw);
      };
    
      fields.forEach(function (field, i) {
        self._fields.push(field.name);
        function getter() {
          return self.raw[i];
        }
        function setter(v) {
          v = exports.toBuffer(v);
    
          if (v.toString('hex') === '00' && !field.allowZero) {
            v = Buffer.allocUnsafe(0);
          }
    
          if (field.allowLess && field.length) {
            v = exports.stripZeros(v);
            assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');
          } else if (!(field.allowZero && v.length === 0) && field.length) {
            assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);
          }
    
          self.raw[i] = v;
        }
    
        Object.defineProperty(self, field.name, {
          enumerable: true,
          configurable: true,
          get: getter,
          set: setter
        });
    
        if (field.default) {
          self[field.name] = field.default;
        }
    
        // attach alias
        if (field.alias) {
          Object.defineProperty(self, field.alias, {
            enumerable: false,
            configurable: true,
            set: setter,
            get: getter
          });
        }
      });
    
      // if the constuctor is passed data
      if (data) {
        if (typeof data === 'string') {
          data = Buffer.from(exports.stripHexPrefix(data), 'hex');
        }
    
        if (Buffer.isBuffer(data)) {
          data = rlp.decode(data);
        }
    
        if (Array.isArray(data)) {
          if (data.length > self._fields.length) {
            throw new Error('wrong number of fields in data');
          }
    
          // make sure all the items are buffers
          data.forEach(function (d, i) {
            self[self._fields[i]] = exports.toBuffer(d);
          });
        } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
          var keys = Object.keys(data);
          fields.forEach(function (field) {
            if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];
            if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];
          });
        } else {
          throw new Error('invalid data');
        }
      }
    };
    },{"./secp256k1-adapter":146,"assert":250,"bn.js":123,"create-hash":126,"ethereum-cryptography/keccak":150,"ethjs-util":169,"rlp":214,"safe-buffer":216}],146:[function(require,module,exports){
    (function (Buffer){(function (){
    'use strict';
    
    var secp256k1 = require('ethereum-cryptography/secp256k1');
    
    var secp256k1v3 = require('./secp256k1-lib/index');
    var der = require('./secp256k1-lib/der');
    
    /**
     * Verify an ECDSA privateKey
     * @method privateKeyVerify
     * @param {Buffer} privateKey
     * @return {boolean}
     */
    var privateKeyVerify = function privateKeyVerify(privateKey) {
      // secp256k1 v4 version throws when privateKey length is not 32
      if (privateKey.length !== 32) {
        return false;
      }
    
      return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));
    };
    
    /**
     * Export a privateKey in DER format
     * @method privateKeyExport
     * @param {Buffer} privateKey
     * @param {boolean} compressed
     * @return {boolean}
     */
    var privateKeyExport = function privateKeyExport(privateKey, compressed) {
      // privateKeyExport method is not part of secp256k1 v4 package
      // this implementation is based on v3
      if (privateKey.length !== 32) {
        throw new RangeError('private key length is invalid');
      }
    
      var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);
    
      return der.privateKeyExport(privateKey, publicKey, compressed);
    };
    
    /**
     * Import a privateKey in DER format
     * @method privateKeyImport
     * @param {Buffer} privateKey
     * @return {Buffer}
     */
    
    var privateKeyImport = function privateKeyImport(privateKey) {
      // privateKeyImport method is not part of secp256k1 v4 package
      // this implementation is based on v3
      privateKey = der.privateKeyImport(privateKey);
      if (privateKey !== null && privateKey.length === 32 && privateKeyVerify(privateKey)) {
        return privateKey;
      }
    
      throw new Error("couldn't import from DER format");
    };
    
    /**
     * Negate a privateKey by subtracting it from the order of the curve's base point
     * @method privateKeyNegate
     * @param {Buffer} privateKey
     * @return {Buffer}
     */
    var privateKeyNegate = function privateKeyNegate(privateKey) {
      return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));
    };
    
    /**
     * Compute the inverse of a privateKey (modulo the order of the curve's base point).
     * @method privateKeyModInverse
     * @param {Buffer} privateKey
     * @return {Buffer}
     */
    var privateKeyModInverse = function privateKeyModInverse(privateKey) {
      if (privateKey.length !== 32) {
        throw new Error('private key length is invalid');
      }
    
      return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
    };
    
    /**
     * Tweak a privateKey by adding tweak to it.
     * @method privateKeyTweakAdd
     * @param {Buffer} privateKey
     * @param {Buffer} tweak
     * @return {Buffer}
     */
    var privateKeyTweakAdd = function privateKeyTweakAdd(privateKey, tweak) {
      return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
    };
    
    /**
     * Tweak a privateKey by multiplying it by a tweak.
     * @method privateKeyTweakMul
     * @param {Buffer} privateKey
     * @param {Buffer} tweak
     * @return {Buffer}
     */
    var privateKeyTweakMul = function privateKeyTweakMul(privateKey, tweak) {
      return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
    };
    
    /**
     * Compute the public key for a privateKey.
     * @method publicKeyCreate
     * @param {Buffer} privateKey
     * @param {boolean} compressed
     * @return {Buffer}
     */
    var publicKeyCreate = function publicKeyCreate(privateKey, compressed) {
      return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
    };
    
    /**
     * Convert a publicKey to compressed or uncompressed form.
     * @method publicKeyConvert
     * @param {Buffer} publicKey
     * @param {boolean} compressed
     * @return {Buffer}
     */
    var publicKeyConvert = function publicKeyConvert(publicKey, compressed) {
      return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
    };
    
    /**
     * Verify an ECDSA publicKey.
     * @method publicKeyVerify
     * @param {Buffer} publicKey
     * @return {boolean}
     */
    var publicKeyVerify = function publicKeyVerify(publicKey) {
      // secp256k1 v4 version throws when publicKey length is not 33 or 65
      if (publicKey.length !== 33 && publicKey.length !== 65) {
        return false;
      }
    
      return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));
    };
    
    /**
     * Tweak a publicKey by adding tweak times the generator to it.
     * @method publicKeyTweakAdd
     * @param {Buffer} publicKey
     * @param {Buffer} tweak
     * @param {boolean} compressed
     * @return {Buffer}
     */
    var publicKeyTweakAdd = function publicKeyTweakAdd(publicKey, tweak, compressed) {
      return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
    };
    
    /**
     * Tweak a publicKey by multiplying it by a tweak value
     * @method publicKeyTweakMul
     * @param {Buffer} publicKey
     * @param {Buffer} tweak
     * @param {boolean} compressed
     * @return {Buffer}
     */
    var publicKeyTweakMul = function publicKeyTweakMul(publicKey, tweak, compressed) {
      return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
    };
    
    /**
     * Add a given publicKeys together.
     * @method publicKeyCombine
     * @param {Array<Buffer>} publicKeys
     * @param {boolean} compressed
     * @return {Buffer}
     */
    var publicKeyCombine = function publicKeyCombine(publicKeys, compressed) {
      var keys = [];
      publicKeys.forEach(function (publicKey) {
        keys.push(Uint8Array.from(publicKey));
      });
    
      return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));
    };
    
    /**
     * Convert a signature to a normalized lower-S form.
     * @method signatureNormalize
     * @param {Buffer} signature
     * @return {Buffer}
     */
    var signatureNormalize = function signatureNormalize(signature) {
      return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));
    };
    
    /**
     * Serialize an ECDSA signature in DER format.
     * @method signatureExport
     * @param {Buffer} signature
     * @return {Buffer}
     */
    var signatureExport = function signatureExport(signature) {
      return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));
    };
    
    /**
     * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
     * @method signatureImport
     * @param {Buffer} signature
     * @return {Buffer}
     */
    var signatureImport = function signatureImport(signature) {
      return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));
    };
    
    /**
     * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
     * @method signatureImportLax
     * @param {Buffer} signature
     * @return {Buffer}
     */
    var signatureImportLax = function signatureImportLax(signature) {
      // signatureImportLax method is not part of secp256k1 v4 package
      // this implementation is based on v3
      // ensure that signature is greater than 0
      if (signature.length === 0) {
        throw new RangeError('signature length is invalid');
      }
    
      var sigObj = der.signatureImportLax(signature);
      if (sigObj === null) {
        throw new Error("couldn't parse DER signature");
      }
    
      return secp256k1v3.signatureImport(sigObj);
    };
    
    /**
     * Create an ECDSA signature. Always return low-S signature.
     * @method sign
     * @param {Buffer} message
     * @param {Buffer} privateKey
     * @param {Object} options
     * @return {Buffer}
     */
    var sign = function sign(message, privateKey, options) {
      if (options === null) {
        throw new TypeError('options should be an Object');
      }
    
      var signOptions = void 0;
    
      if (options) {
        signOptions = {};
    
        if (options.data === null) {
          throw new TypeError('options.data should be a Buffer');
        }
    
        if (options.data) {
          // validate option.data length
          if (options.data.length !== 32) {
            throw new RangeError('options.data length is invalid');
          }
    
          signOptions.data = new Uint8Array(options.data);
        }
    
        if (options.noncefn === null) {
          throw new TypeError('options.noncefn should be a Function');
        }
    
        if (options.noncefn) {
          //  convert option.noncefn function signature
          signOptions.noncefn = function (message, privateKey, algo, data, attempt) {
            var bufferAlgo = algo != null ? Buffer.from(algo) : null;
            var bufferData = data != null ? Buffer.from(data) : null;
    
            var buffer = Buffer.from('');
    
            if (options.noncefn) {
              buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);
            }
    
            return Uint8Array.from(buffer);
          };
        }
      }
    
      var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);
    
      return {
        signature: Buffer.from(sig.signature),
        recovery: sig.recid
      };
    };
    
    /**
     * Verify an ECDSA signature.
     * @method verify
     * @param {Buffer} message
     * @param {Buffer} signature
     * @param {Buffer} publicKey
     * @return {boolean}
     */
    var verify = function verify(message, signature, publicKey) {
      // note: secp256k1 v4 verify method has a different argument order
      return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
    };
    
    /**
     * Recover an ECDSA public key from a signature.
     * @method recover
     * @param {Buffer} message
     * @param {Buffer} signature
     * @param {Number} recid
     * @param {boolean} compressed
     * @return {Buffer}
     */
    var recover = function recover(message, signature, recid, compressed) {
      // note: secp256k1 v4 recover method has a different argument order
      return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
    };
    
    /**
     * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.
     * @method ecdh
     * @param {Buffer} publicKey
     * @param {Buffer} privateKey
     * @return {Buffer}
     */
    var ecdh = function ecdh(publicKey, privateKey) {
      // note: secp256k1 v3 doesn't allow optional parameter
      return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
    };
    
    /**
     * Compute an EC Diffie-Hellman secret and return public key as result
     * @method ecdhUnsafe
     * @param {Buffer} publicKey
     * @param {Buffer} privateKey
     * @param {boolean} compressed
     * @return {Buffer}
     */
    var ecdhUnsafe = function ecdhUnsafe(publicKey, privateKey, compressed) {
      // ecdhUnsafe method is not part of secp256k1 v4 package
      // this implementation is based on v3
      // ensure valid publicKey length
      if (publicKey.length !== 33 && publicKey.length !== 65) {
        throw new RangeError('public key length is invalid');
      }
    
      // ensure valid privateKey length
      if (privateKey.length !== 32) {
        throw new RangeError('private key length is invalid');
      }
    
      return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
    };
    
    module.exports = {
      privateKeyVerify: privateKeyVerify,
      privateKeyExport: privateKeyExport,
      privateKeyImport: privateKeyImport,
      privateKeyNegate: privateKeyNegate,
      privateKeyModInverse: privateKeyModInverse,
      privateKeyTweakAdd: privateKeyTweakAdd,
      privateKeyTweakMul: privateKeyTweakMul,
    
      publicKeyCreate: publicKeyCreate,
      publicKeyConvert: publicKeyConvert,
      publicKeyVerify: publicKeyVerify,
      publicKeyTweakAdd: publicKeyTweakAdd,
      publicKeyTweakMul: publicKeyTweakMul,
      publicKeyCombine: publicKeyCombine,
    
      signatureNormalize: signatureNormalize,
      signatureExport: signatureExport,
      signatureImport: signatureImport,
      signatureImportLax: signatureImportLax,
    
      sign: sign,
      verify: verify,
      recover: recover,
    
      ecdh: ecdh,
      ecdhUnsafe: ecdhUnsafe
    };
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"./secp256k1-lib/der":147,"./secp256k1-lib/index":148,"buffer":301,"ethereum-cryptography/secp256k1":152}],147:[function(require,module,exports){
    (function (Buffer){(function (){
    "use strict";
    
    // This file is imported from secp256k1 v3
    // https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
    
    var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
    // begin
    0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,
    // private key
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // middle
    0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x21, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,
    // public key
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
    
    var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
    // begin
    0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,
    // private key
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // middle
    0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x41, 0x04, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0e, 0x11, 0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10, 0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,
    // public key
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
    
    exports.privateKeyExport = function (privateKey, publicKey, compressed) {
      var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
      privateKey.copy(result, compressed ? 8 : 9);
      publicKey.copy(result, compressed ? 181 : 214);
      return result;
    };
    
    exports.privateKeyImport = function (privateKey) {
      var length = privateKey.length;
    
      // sequence header
      var index = 0;
      if (length < index + 1 || privateKey[index] !== 0x30) return null;
      index += 1;
    
      // sequence length constructor
      if (length < index + 1 || !(privateKey[index] & 0x80)) return null;
    
      var lenb = privateKey[index] & 0x7f;
      index += 1;
      if (lenb < 1 || lenb > 2) return null;
      if (length < index + lenb) return null;
    
      // sequence length
      var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
      index += lenb;
      if (length < index + len) return null;
    
      // sequence element 0: version number (=1)
      if (length < index + 3 || privateKey[index] !== 0x02 || privateKey[index + 1] !== 0x01 || privateKey[index + 2] !== 0x01) {
        return null;
      }
      index += 3;
    
      // sequence element 1: octet string, up to 32 bytes
      if (length < index + 2 || privateKey[index] !== 0x04 || privateKey[index + 1] > 0x20 || length < index + 2 + privateKey[index + 1]) {
        return null;
      }
    
      return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
    };
    
    exports.signatureImportLax = function (signature) {
      var r = Buffer.alloc(32, 0);
      var s = Buffer.alloc(32, 0);
    
      var length = signature.length;
      var index = 0;
    
      // sequence tag byte
      if (signature[index++] !== 0x30) {
        return null;
      }
    
      // sequence length byte
      var lenbyte = signature[index++];
      if (lenbyte & 0x80) {
        index += lenbyte - 0x80;
        if (index > length) {
          return null;
        }
      }
    
      // sequence tag byte for r
      if (signature[index++] !== 0x02) {
        return null;
      }
    
      // length for r
      var rlen = signature[index++];
      if (rlen & 0x80) {
        lenbyte = rlen - 0x80;
        if (index + lenbyte > length) {
          return null;
        }
        for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) {}
        for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
          rlen = (rlen << 8) + signature[index];
        }
      }
      if (rlen > length - index) {
        return null;
      }
      var rindex = index;
      index += rlen;
    
      // sequence tag byte for s
      if (signature[index++] !== 0x02) {
        return null;
      }
    
      // length for s
      var slen = signature[index++];
      if (slen & 0x80) {
        lenbyte = slen - 0x80;
        if (index + lenbyte > length) {
          return null;
        }
        for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) {}
        for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
          slen = (slen << 8) + signature[index];
        }
      }
      if (slen > length - index) {
        return null;
      }
      var sindex = index;
      index += slen;
    
      // ignore leading zeros in r
      for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1) {}
      // copy r value
      if (rlen > 32) {
        return null;
      }
      var rvalue = signature.slice(rindex, rindex + rlen);
      rvalue.copy(r, 32 - rvalue.length);
    
      // ignore leading zeros in s
      for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1) {}
      // copy s value
      if (slen > 32) {
        return null;
      }
      var svalue = signature.slice(sindex, sindex + slen);
      svalue.copy(s, 32 - svalue.length);
    
      return { r: r, s: s };
    };
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"buffer":301}],148:[function(require,module,exports){
    (function (Buffer){(function (){
    'use strict';
    
    // This file is imported from secp256k1 v3
    // https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
    
    var BN = require('bn.js');
    var EC = require('elliptic').ec;
    
    var ec = new EC('secp256k1');
    var ecparams = ec.curve;
    
    exports.privateKeyExport = function (privateKey, compressed) {
      var d = new BN(privateKey);
      if (d.ucmp(ecparams.n) >= 0) {
        throw new Error('couldn\'t export to DER format');
      }
    
      var point = ec.g.mul(d);
      return toPublicKey(point.getX(), point.getY(), compressed);
    };
    
    exports.privateKeyModInverse = function (privateKey) {
      var bn = new BN(privateKey);
      if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {
        throw new Error('private key range is invalid');
      }
    
      return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);
    };
    
    exports.signatureImport = function (sigObj) {
      var r = new BN(sigObj.r);
      if (r.ucmp(ecparams.n) >= 0) {
        r = new BN(0);
      }
    
      var s = new BN(sigObj.s);
      if (s.ucmp(ecparams.n) >= 0) {
        s = new BN(0);
      }
    
      return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);
    };
    
    exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
      var point = ec.keyFromPublic(publicKey);
    
      var scalar = new BN(privateKey);
      if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {
        throw new Error('scalar was invalid (zero or overflow)');
      }
    
      var shared = point.pub.mul(scalar);
      return toPublicKey(shared.getX(), shared.getY(), compressed);
    };
    
    var toPublicKey = function toPublicKey(x, y, compressed) {
      var publicKey = void 0;
    
      if (compressed) {
        publicKey = Buffer.alloc(33);
        publicKey[0] = y.isOdd() ? 0x03 : 0x02;
        x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
      } else {
        publicKey = Buffer.alloc(65);
        publicKey[0] = 0x04;
        x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
        y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);
      }
    
      return publicKey;
    };
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"bn.js":123,"buffer":301,"elliptic":127}],149:[function(require,module,exports){
    (function (Buffer){(function (){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function createHashFunction(hashConstructor) {
        return function (msg) {
            var hash = hashConstructor();
            hash.update(msg);
            return Buffer.from(hash.digest());
        };
    }
    exports.createHashFunction = createHashFunction;
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"buffer":301}],150:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var hash_utils_1 = require("./hash-utils");
    var createKeccakHash = require("keccak");
    exports.keccak224 = hash_utils_1.createHashFunction(function () {
        return createKeccakHash("keccak224");
    });
    exports.keccak256 = hash_utils_1.createHashFunction(function () {
        return createKeccakHash("keccak256");
    });
    exports.keccak384 = hash_utils_1.createHashFunction(function () {
        return createKeccakHash("keccak384");
    });
    exports.keccak512 = hash_utils_1.createHashFunction(function () {
        return createKeccakHash("keccak512");
    });
    
    },{"./hash-utils":149,"keccak":188}],151:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var randombytes = require("randombytes");
    function getRandomBytes(bytes) {
        return new Promise(function (resolve, reject) {
            randombytes(bytes, function (err, resp) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    exports.getRandomBytes = getRandomBytes;
    function getRandomBytesSync(bytes) {
        return randombytes(bytes);
    }
    exports.getRandomBytesSync = getRandomBytesSync;
    
    },{"randombytes":197}],152:[function(require,module,exports){
    "use strict";
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    var secp256k1_1 = require("secp256k1");
    var random_1 = require("./random");
    var SECP256K1_PRIVATE_KEY_SIZE = 32;
    function createPrivateKey() {
        return __awaiter(this, void 0, void 0, function () {
            var pk;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!true) return [3 /*break*/, 2];
                        return [4 /*yield*/, random_1.getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE)];
                    case 1:
                        pk = _a.sent();
                        if (secp256k1_1.privateKeyVerify(pk)) {
                            return [2 /*return*/, pk];
                        }
                        return [3 /*break*/, 0];
                    case 2: return [2 /*return*/];
                }
            });
        });
    }
    exports.createPrivateKey = createPrivateKey;
    function createPrivateKeySync() {
        while (true) {
            var pk = random_1.getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);
            if (secp256k1_1.privateKeyVerify(pk)) {
                return pk;
            }
        }
    }
    exports.createPrivateKeySync = createPrivateKeySync;
    __export(require("secp256k1"));
    
    },{"./random":151,"secp256k1":218}],153:[function(require,module,exports){
    module.exports = require('./lib/index.js')
    
    },{"./lib/index.js":154}],154:[function(require,module,exports){
    (function (Buffer){(function (){
    /* eslint-disable no-useless-escape */
    const utils = require('ethereumjs-util')
    const BN = require('bn.js')
    
    var ABI = function () {
    }
    
    // Convert from short to canonical names
    // FIXME: optimise or make this nicer?
    function elementaryName (name) {
      if (name.startsWith('int[')) {
        return 'int256' + name.slice(3)
      } else if (name === 'int') {
        return 'int256'
      } else if (name.startsWith('uint[')) {
        return 'uint256' + name.slice(4)
      } else if (name === 'uint') {
        return 'uint256'
      } else if (name.startsWith('fixed[')) {
        return 'fixed128x128' + name.slice(5)
      } else if (name === 'fixed') {
        return 'fixed128x128'
      } else if (name.startsWith('ufixed[')) {
        return 'ufixed128x128' + name.slice(6)
      } else if (name === 'ufixed') {
        return 'ufixed128x128'
      }
      return name
    }
    
    ABI.eventID = function (name, types) {
      // FIXME: use node.js util.format?
      var sig = name + '(' + types.map(elementaryName).join(',') + ')'
      return utils.keccak256(Buffer.from(sig))
    }
    
    ABI.methodID = function (name, types) {
      return ABI.eventID(name, types).slice(0, 4)
    }
    
    // Parse N from type<N>
    function parseTypeN (type) {
      return parseInt(/^\D+(\d+)$/.exec(type)[1], 10)
    }
    
    // Parse N,M from type<N>x<M>
    function parseTypeNxM (type) {
      var tmp = /^\D+(\d+)x(\d+)$/.exec(type)
      return [ parseInt(tmp[1], 10), parseInt(tmp[2], 10) ]
    }
    
    // Parse N in type[<N>] where "type" can itself be an array type.
    function parseTypeArray (type) {
      var tmp = type.match(/(.*)\[(.*?)\]$/)
      if (tmp) {
        return tmp[2] === '' ? 'dynamic' : parseInt(tmp[2], 10)
      }
      return null
    }
    
    function parseNumber (arg) {
      var type = typeof arg
      if (type === 'string') {
        if (utils.isHexPrefixed(arg)) {
          return new BN(utils.stripHexPrefix(arg), 16)
        } else {
          return new BN(arg, 10)
        }
      } else if (type === 'number') {
        return new BN(arg)
      } else if (arg.toArray) {
        // assume this is a BN for the moment, replace with BN.isBN soon
        return arg
      } else {
        throw new Error('Argument is not a number')
      }
    }
    
    // someMethod(bytes,uint)
    // someMethod(bytes,uint):(boolean)
    function parseSignature (sig) {
      var tmp = /^(\w+)\((.*)\)$/.exec(sig)
    
      if (tmp.length !== 3) {
        throw new Error('Invalid method signature')
      }
    
      var args = /^(.+)\):\((.+)$/.exec(tmp[2])
    
      if (args !== null && args.length === 3) {
        return {
          method: tmp[1],
          args: args[1].split(','),
          retargs: args[2].split(',')
        }
      } else {
        var params = tmp[2].split(',')
        if (params.length === 1 && params[0] === '') {
          // Special-case (possibly naive) fixup for functions that take no arguments.
          // TODO: special cases are always bad, but this makes the function return
          // match what the calling functions expect
          params = []
        }
        return {
          method: tmp[1],
          args: params
        }
      }
    }
    
    // Encodes a single item (can be dynamic array)
    // @returns: Buffer
    function encodeSingle (type, arg) {
      var size, num, ret, i
    
      if (type === 'address') {
        return encodeSingle('uint160', parseNumber(arg))
      } else if (type === 'bool') {
        return encodeSingle('uint8', arg ? 1 : 0)
      } else if (type === 'string') {
        return encodeSingle('bytes', Buffer.from(arg, 'utf8'))
      } else if (isArray(type)) {
        // this part handles fixed-length ([2]) and variable length ([]) arrays
        // NOTE: we catch here all calls to arrays, that simplifies the rest
        if (typeof arg.length === 'undefined') {
          throw new Error('Not an array?')
        }
        size = parseTypeArray(type)
        if (size !== 'dynamic' && size !== 0 && arg.length > size) {
          throw new Error('Elements exceed array size: ' + size)
        }
        ret = []
        type = type.slice(0, type.lastIndexOf('['))
        if (typeof arg === 'string') {
          arg = JSON.parse(arg)
        }
        for (i in arg) {
          ret.push(encodeSingle(type, arg[i]))
        }
        if (size === 'dynamic') {
          var length = encodeSingle('uint256', arg.length)
          ret.unshift(length)
        }
        return Buffer.concat(ret)
      } else if (type === 'bytes') {
        arg = Buffer.from(arg)
    
        ret = Buffer.concat([ encodeSingle('uint256', arg.length), arg ])
    
        if ((arg.length % 32) !== 0) {
          ret = Buffer.concat([ ret, utils.zeros(32 - (arg.length % 32)) ])
        }
    
        return ret
      } else if (type.startsWith('bytes')) {
        size = parseTypeN(type)
        if (size < 1 || size > 32) {
          throw new Error('Invalid bytes<N> width: ' + size)
        }
    
        return utils.setLengthRight(arg, 32)
      } else if (type.startsWith('uint')) {
        size = parseTypeN(type)
        if ((size % 8) || (size < 8) || (size > 256)) {
          throw new Error('Invalid uint<N> width: ' + size)
        }
    
        num = parseNumber(arg)
        if (num.bitLength() > size) {
          throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength())
        }
    
        if (num < 0) {
          throw new Error('Supplied uint is negative')
        }
    
        return num.toArrayLike(Buffer, 'be', 32)
      } else if (type.startsWith('int')) {
        size = parseTypeN(type)
        if ((size % 8) || (size < 8) || (size > 256)) {
          throw new Error('Invalid int<N> width: ' + size)
        }
    
        num = parseNumber(arg)
        if (num.bitLength() > size) {
          throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength())
        }
    
        return num.toTwos(256).toArrayLike(Buffer, 'be', 32)
      } else if (type.startsWith('ufixed')) {
        size = parseTypeNxM(type)
    
        num = parseNumber(arg)
    
        if (num < 0) {
          throw new Error('Supplied ufixed is negative')
        }
    
        return encodeSingle('uint256', num.mul(new BN(2).pow(new BN(size[1]))))
      } else if (type.startsWith('fixed')) {
        size = parseTypeNxM(type)
    
        return encodeSingle('int256', parseNumber(arg).mul(new BN(2).pow(new BN(size[1]))))
      }
    
      throw new Error('Unsupported or invalid type: ' + type)
    }
    
    // Decodes a single item (can be dynamic array)
    // @returns: array
    // FIXME: this method will need a lot of attention at checking limits and validation
    function decodeSingle (parsedType, data, offset) {
      if (typeof parsedType === 'string') {
        parsedType = parseType(parsedType)
      }
      var size, num, ret, i
    
      if (parsedType.name === 'address') {
        return decodeSingle(parsedType.rawType, data, offset).toArrayLike(Buffer, 'be', 20).toString('hex')
      } else if (parsedType.name === 'bool') {
        return decodeSingle(parsedType.rawType, data, offset).toString() === new BN(1).toString()
      } else if (parsedType.name === 'string') {
        var bytes = decodeSingle(parsedType.rawType, data, offset)
        return Buffer.from(bytes, 'utf8').toString()
      } else if (parsedType.isArray) {
        // this part handles fixed-length arrays ([2]) and variable length ([]) arrays
        // NOTE: we catch here all calls to arrays, that simplifies the rest
        ret = []
        size = parsedType.size
    
        if (parsedType.size === 'dynamic') {
          offset = decodeSingle('uint256', data, offset).toNumber()
          size = decodeSingle('uint256', data, offset).toNumber()
          offset = offset + 32
        }
        for (i = 0; i < size; i++) {
          var decoded = decodeSingle(parsedType.subArray, data, offset)
          ret.push(decoded)
          offset += parsedType.subArray.memoryUsage
        }
        return ret
      } else if (parsedType.name === 'bytes') {
        offset = decodeSingle('uint256', data, offset).toNumber()
        size = decodeSingle('uint256', data, offset).toNumber()
        return data.slice(offset + 32, offset + 32 + size)
      } else if (parsedType.name.startsWith('bytes')) {
        return data.slice(offset, offset + parsedType.size)
      } else if (parsedType.name.startsWith('uint')) {
        num = new BN(data.slice(offset, offset + 32), 16, 'be')
        if (num.bitLength() > parsedType.size) {
          throw new Error('Decoded int exceeds width: ' + parsedType.size + ' vs ' + num.bitLength())
        }
        return num
      } else if (parsedType.name.startsWith('int')) {
        num = new BN(data.slice(offset, offset + 32), 16, 'be').fromTwos(256)
        if (num.bitLength() > parsedType.size) {
          throw new Error('Decoded uint exceeds width: ' + parsedType.size + ' vs ' + num.bitLength())
        }
    
        return num
      } else if (parsedType.name.startsWith('ufixed')) {
        size = new BN(2).pow(new BN(parsedType.size[1]))
        num = decodeSingle('uint256', data, offset)
        if (!num.mod(size).isZero()) {
          throw new Error('Decimals not supported yet')
        }
        return num.div(size)
      } else if (parsedType.name.startsWith('fixed')) {
        size = new BN(2).pow(new BN(parsedType.size[1]))
        num = decodeSingle('int256', data, offset)
        if (!num.mod(size).isZero()) {
          throw new Error('Decimals not supported yet')
        }
        return num.div(size)
      }
      throw new Error('Unsupported or invalid type: ' + parsedType.name)
    }
    
    // Parse the given type
    // @returns: {} containing the type itself, memory usage and (including size and subArray if applicable)
    function parseType (type) {
      var size
      var ret
      if (isArray(type)) {
        size = parseTypeArray(type)
        var subArray = type.slice(0, type.lastIndexOf('['))
        subArray = parseType(subArray)
        ret = {
          isArray: true,
          name: type,
          size: size,
          memoryUsage: size === 'dynamic' ? 32 : subArray.memoryUsage * size,
          subArray: subArray
        }
        return ret
      } else {
        var rawType
        switch (type) {
          case 'address':
            rawType = 'uint160'
            break
          case 'bool':
            rawType = 'uint8'
            break
          case 'string':
            rawType = 'bytes'
            break
        }
        ret = {
          rawType: rawType,
          name: type,
          memoryUsage: 32
        }
    
        if ((type.startsWith('bytes') && type !== 'bytes') || type.startsWith('uint') || type.startsWith('int')) {
          ret.size = parseTypeN(type)
        } else if (type.startsWith('ufixed') || type.startsWith('fixed')) {
          ret.size = parseTypeNxM(type)
        }
    
        if (type.startsWith('bytes') && type !== 'bytes' && (ret.size < 1 || ret.size > 32)) {
          throw new Error('Invalid bytes<N> width: ' + ret.size)
        }
        if ((type.startsWith('uint') || type.startsWith('int')) && (ret.size % 8 || ret.size < 8 || ret.size > 256)) {
          throw new Error('Invalid int/uint<N> width: ' + ret.size)
        }
        return ret
      }
    }
    
    // Is a type dynamic?
    function isDynamic (type) {
      // FIXME: handle all types? I don't think anything is missing now
      return (type === 'string') || (type === 'bytes') || (parseTypeArray(type) === 'dynamic')
    }
    
    // Is a type an array?
    function isArray (type) {
      return type.lastIndexOf(']') === type.length - 1
    }
    
    // Encode a method/event with arguments
    // @types an array of string type names
    // @args  an array of the appropriate values
    ABI.rawEncode = function (types, values) {
      var output = []
      var data = []
    
      var headLength = 0
    
      types.forEach(function (type) {
        if (isArray(type)) {
          var size = parseTypeArray(type)
    
          if (size !== 'dynamic') {
            headLength += 32 * size
          } else {
            headLength += 32
          }
        } else {
          headLength += 32
        }
      })
    
      for (var i = 0; i < types.length; i++) {
        var type = elementaryName(types[i])
        var value = values[i]
        var cur = encodeSingle(type, value)
    
        // Use the head/tail method for storing dynamic data
        if (isDynamic(type)) {
          output.push(encodeSingle('uint256', headLength))
          data.push(cur)
          headLength += cur.length
        } else {
          output.push(cur)
        }
      }
    
      return Buffer.concat(output.concat(data))
    }
    
    ABI.rawDecode = function (types, data) {
      var ret = []
      data = Buffer.from(data)
      var offset = 0
      for (var i = 0; i < types.length; i++) {
        var type = elementaryName(types[i])
        var parsed = parseType(type, data, offset)
        var decoded = decodeSingle(parsed, data, offset)
        offset += parsed.memoryUsage
        ret.push(decoded)
      }
      return ret
    }
    
    ABI.simpleEncode = function (method) {
      var args = Array.prototype.slice.call(arguments).slice(1)
      var sig = parseSignature(method)
    
      // FIXME: validate/convert arguments
      if (args.length !== sig.args.length) {
        throw new Error('Argument count mismatch')
      }
    
      return Buffer.concat([ ABI.methodID(sig.method, sig.args), ABI.rawEncode(sig.args, args) ])
    }
    
    ABI.simpleDecode = function (method, data) {
      var sig = parseSignature(method)
    
      // FIXME: validate/convert arguments
      if (!sig.retargs) {
        throw new Error('No return values in method')
      }
    
      return ABI.rawDecode(sig.retargs, data)
    }
    
    function stringify (type, value) {
      if (type.startsWith('address') || type.startsWith('bytes')) {
        return '0x' + value.toString('hex')
      } else {
        return value.toString()
      }
    }
    
    ABI.stringify = function (types, values) {
      var ret = []
    
      for (var i in types) {
        var type = types[i]
        var value = values[i]
    
        // if it is an array type, concat the items
        if (/^[^\[]+\[.*\]$/.test(type)) {
          value = value.map(function (item) {
            return stringify(type, item)
          }).join(', ')
        } else {
          value = stringify(type, value)
        }
    
        ret.push(value)
      }
    
      return ret
    }
    
    ABI.solidityHexValue = function (type, value, bitsize) {
      // pass in bitsize = null if use default bitsize
      var size, num
      if (isArray(type)) {
        var subType = type.replace(/\[.*?\]/, '')
        if (!isArray(subType)) {
          var arraySize = parseTypeArray(type)
          if (arraySize !== 'dynamic' && arraySize !== 0 && value.length > arraySize) {
            throw new Error('Elements exceed array size: ' + arraySize)
          }
        }
        var arrayValues = value.map(function (v) {
          return ABI.solidityHexValue(subType, v, 256)
        })
        return Buffer.concat(arrayValues)
      } else if (type === 'bytes') {
        return value
      } else if (type === 'string') {
        return Buffer.from(value, 'utf8')
      } else if (type === 'bool') {
        bitsize = bitsize || 8
        var padding = Array((bitsize) / 4).join('0')
        return Buffer.from(value ? padding + '1' : padding + '0', 'hex')
      } else if (type === 'address') {
        var bytesize = 20
        if (bitsize) {
          bytesize = bitsize / 8
        }
        return utils.setLengthLeft(value, bytesize)
      } else if (type.startsWith('bytes')) {
        size = parseTypeN(type)
        if (size < 1 || size > 32) {
          throw new Error('Invalid bytes<N> width: ' + size)
        }
    
        return utils.setLengthRight(value, size)
      } else if (type.startsWith('uint')) {
        size = parseTypeN(type)
        if ((size % 8) || (size < 8) || (size > 256)) {
          throw new Error('Invalid uint<N> width: ' + size)
        }
    
        num = parseNumber(value)
        if (num.bitLength() > size) {
          throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength())
        }
    
        bitsize = bitsize || size
        return num.toArrayLike(Buffer, 'be', bitsize / 8)
      } else if (type.startsWith('int')) {
        size = parseTypeN(type)
        if ((size % 8) || (size < 8) || (size > 256)) {
          throw new Error('Invalid int<N> width: ' + size)
        }
    
        num = parseNumber(value)
        if (num.bitLength() > size) {
          throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength())
        }
    
        bitsize = bitsize || size
        return num.toTwos(size).toArrayLike(Buffer, 'be', bitsize / 8)
      } else {
        // FIXME: support all other types
        throw new Error('Unsupported or invalid type: ' + type)
      }
    }
    
    ABI.solidityPack = function (types, values) {
      if (types.length !== values.length) {
        throw new Error('Number of types are not matching the values')
      }
    
      var ret = []
    
      for (var i = 0; i < types.length; i++) {
        var type = elementaryName(types[i])
        var value = values[i]
        ret.push(ABI.solidityHexValue(type, value, null))
      }
    
      return Buffer.concat(ret)
    }
    
    ABI.soliditySHA3 = function (types, values) {
      return utils.keccak256(ABI.solidityPack(types, values))
    }
    
    ABI.soliditySHA256 = function (types, values) {
      return utils.sha256(ABI.solidityPack(types, values))
    }
    
    ABI.solidityRIPEMD160 = function (types, values) {
      return utils.ripemd160(ABI.solidityPack(types, values), true)
    }
    
    // Serpent's users are familiar with this encoding
    // - s: string
    // - b: bytes
    // - b<N>: bytes<N>
    // - i: int256
    // - a: int256[]
    
    function isNumeric (c) {
      // FIXME: is this correct? Seems to work
      return (c >= '0') && (c <= '9')
    }
    
    // For a "documentation" refer to https://github.com/ethereum/serpent/blob/develop/preprocess.cpp
    ABI.fromSerpent = function (sig) {
      var ret = []
      for (var i = 0; i < sig.length; i++) {
        var type = sig[i]
        if (type === 's') {
          ret.push('bytes')
        } else if (type === 'b') {
          var tmp = 'bytes'
          var j = i + 1
          while ((j < sig.length) && isNumeric(sig[j])) {
            tmp += sig[j] - '0'
            j++
          }
          i = j - 1
          ret.push(tmp)
        } else if (type === 'i') {
          ret.push('int256')
        } else if (type === 'a') {
          ret.push('int256[]')
        } else {
          throw new Error('Unsupported or invalid type: ' + type)
        }
      }
      return ret
    }
    
    ABI.toSerpent = function (types) {
      var ret = []
      for (var i = 0; i < types.length; i++) {
        var type = types[i]
        if (type === 'bytes') {
          ret.push('s')
        } else if (type.startsWith('bytes')) {
          ret.push('b' + parseTypeN(type))
        } else if (type === 'int256') {
          ret.push('i')
        } else if (type === 'int256[]') {
          ret.push('a')
        } else {
          throw new Error('Unsupported or invalid type: ' + type)
        }
      }
      return ret.join('')
    }
    
    module.exports = ABI
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"bn.js":123,"buffer":301,"ethereumjs-util":159}],155:[function(require,module,exports){
    (function (Buffer){(function (){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.importPublic = exports.privateToPublic = exports.privateToAddress = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.isPrecompiled = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isZeroAddress = exports.isValidAddress = exports.zeroAddress = void 0;
    var assert = require('assert');
    var ethjsUtil = require('ethjs-util');
    var secp256k1 = require('./secp256k1v3-adapter');
    var BN = require("bn.js");
    var bytes_1 = require("./bytes");
    var hash_1 = require("./hash");
    /**
     * Returns a zero address.
     */
    exports.zeroAddress = function () {
        var addressLength = 20;
        var addr = bytes_1.zeros(addressLength);
        return bytes_1.bufferToHex(addr);
    };
    /**
     * Checks if the address is a valid. Accepts checksummed addresses too.
     */
    exports.isValidAddress = function (address) {
        return /^0x[0-9a-fA-F]{40}$/.test(address);
    };
    /**
     * Checks if a given address is a zero address.
     */
    exports.isZeroAddress = function (address) {
        var zeroAddr = exports.zeroAddress();
        return zeroAddr === bytes_1.addHexPrefix(address);
    };
    /**
     * Returns a checksummed address.
     *
     * If a eip1191ChainId is provided, the chainId will be included in the checksum calculation. This
     * has the effect of checksummed addresses for one chain having invalid checksums for others.
     * For more details, consult EIP-1191.
     *
     * WARNING: Checksums with and without the chainId will differ. As of 2019-06-26, the most commonly
     * used variation in Ethereum was without the chainId. This may change in the future.
     */
    exports.toChecksumAddress = function (address, eip1191ChainId) {
        address = ethjsUtil.stripHexPrefix(address).toLowerCase();
        var prefix = eip1191ChainId !== undefined ? eip1191ChainId.toString() + '0x' : '';
        var hash = hash_1.keccak(prefix + address).toString('hex');
        var ret = '0x';
        for (var i = 0; i < address.length; i++) {
            if (parseInt(hash[i], 16) >= 8) {
                ret += address[i].toUpperCase();
            }
            else {
                ret += address[i];
            }
        }
        return ret;
    };
    /**
     * Checks if the address is a valid checksummed address.
     *
     * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.
     */
    exports.isValidChecksumAddress = function (address, eip1191ChainId) {
        return exports.isValidAddress(address) && exports.toChecksumAddress(address, eip1191ChainId) === address;
    };
    /**
     * Generates an address of a newly created contract.
     * @param from The address which is creating this new address
     * @param nonce The nonce of the from account
     */
    exports.generateAddress = function (from, nonce) {
        from = bytes_1.toBuffer(from);
        var nonceBN = new BN(nonce);
        if (nonceBN.isZero()) {
            // in RLP we want to encode null in the case of zero nonce
            // read the RLP documentation for an answer if you dare
            return hash_1.rlphash([from, null]).slice(-20);
        }
        // Only take the lower 160bits of the hash
        return hash_1.rlphash([from, Buffer.from(nonceBN.toArray())]).slice(-20);
    };
    /**
     * Generates an address for a contract created using CREATE2.
     * @param from The address which is creating this new address
     * @param salt A salt
     * @param initCode The init code of the contract being created
     */
    exports.generateAddress2 = function (from, salt, initCode) {
        var fromBuf = bytes_1.toBuffer(from);
        var saltBuf = bytes_1.toBuffer(salt);
        var initCodeBuf = bytes_1.toBuffer(initCode);
        assert(fromBuf.length === 20);
        assert(saltBuf.length === 32);
        var address = hash_1.keccak256(Buffer.concat([Buffer.from('ff', 'hex'), fromBuf, saltBuf, hash_1.keccak256(initCodeBuf)]));
        return address.slice(-20);
    };
    /**
     * Returns true if the supplied address belongs to a precompiled account (Byzantium).
     */
    exports.isPrecompiled = function (address) {
        var a = bytes_1.unpad(address);
        return a.length === 1 && a[0] >= 1 && a[0] <= 8;
    };
    /**
     * Checks if the private key satisfies the rules of the curve secp256k1.
     */
    exports.isValidPrivate = function (privateKey) {
        return secp256k1.privateKeyVerify(privateKey);
    };
    /**
     * Checks if the public key satisfies the rules of the curve secp256k1
     * and the requirements of Ethereum.
     * @param publicKey The two points of an uncompressed key, unless sanitize is enabled
     * @param sanitize Accept public keys in other formats
     */
    exports.isValidPublic = function (publicKey, sanitize) {
        if (sanitize === void 0) { sanitize = false; }
        if (publicKey.length === 64) {
            // Convert to SEC1 for secp256k1
            return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
        }
        if (!sanitize) {
            return false;
        }
        return secp256k1.publicKeyVerify(publicKey);
    };
    /**
     * Returns the ethereum address of a given public key.
     * Accepts "Ethereum public keys" and SEC1 encoded keys.
     * @param pubKey The two points of an uncompressed key, unless sanitize is enabled
     * @param sanitize Accept public keys in other formats
     */
    exports.pubToAddress = function (pubKey, sanitize) {
        if (sanitize === void 0) { sanitize = false; }
        pubKey = bytes_1.toBuffer(pubKey);
        if (sanitize && pubKey.length !== 64) {
            pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
        }
        assert(pubKey.length === 64);
        // Only take the lower 160bits of the hash
        return hash_1.keccak(pubKey).slice(-20);
    };
    exports.publicToAddress = exports.pubToAddress;
    /**
     * Returns the ethereum address of a given private key.
     * @param privateKey A private key must be 256 bits wide
     */
    exports.privateToAddress = function (privateKey) {
        return exports.publicToAddress(exports.privateToPublic(privateKey));
    };
    /**
     * Returns the ethereum public key of a given private key.
     * @param privateKey A private key must be 256 bits wide
     */
    exports.privateToPublic = function (privateKey) {
        privateKey = bytes_1.toBuffer(privateKey);
        // skip the type flag and use the X, Y points
        return secp256k1.publicKeyCreate(privateKey, false).slice(1);
    };
    /**
     * Converts a public key to the Ethereum format.
     */
    exports.importPublic = function (publicKey) {
        publicKey = bytes_1.toBuffer(publicKey);
        if (publicKey.length !== 64) {
            publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
        }
        return publicKey;
    };
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"./bytes":156,"./hash":158,"./secp256k1v3-adapter":161,"assert":250,"bn.js":123,"buffer":301,"ethjs-util":169}],156:[function(require,module,exports){
    (function (Buffer){(function (){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.stripZeros = exports.unpad = exports.setLengthRight = exports.setLength = exports.setLengthLeft = exports.zeros = void 0;
    var ethjsUtil = require('ethjs-util');
    var BN = require("bn.js");
    /**
     * Returns a buffer filled with 0s.
     * @param bytes the number of bytes the buffer should be
     */
    exports.zeros = function (bytes) {
        return Buffer.allocUnsafe(bytes).fill(0);
    };
    /**
     * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
     * Or it truncates the beginning if it exceeds.
     * @param msg the value to pad (Buffer|Array)
     * @param length the number of bytes the output should be
     * @param right whether to start padding form the left or right
     * @return (Buffer|Array)
     */
    exports.setLengthLeft = function (msg, length, right) {
        if (right === void 0) { right = false; }
        var buf = exports.zeros(length);
        msg = exports.toBuffer(msg);
        if (right) {
            if (msg.length < length) {
                msg.copy(buf);
                return buf;
            }
            return msg.slice(0, length);
        }
        else {
            if (msg.length < length) {
                msg.copy(buf, length - msg.length);
                return buf;
            }
            return msg.slice(-length);
        }
    };
    exports.setLength = exports.setLengthLeft;
    /**
     * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
     * Or it truncates the beginning if it exceeds.
     * @param msg the value to pad (Buffer|Array)
     * @param length the number of bytes the output should be
     * @return (Buffer|Array)
     */
    exports.setLengthRight = function (msg, length) {
        return exports.setLength(msg, length, true);
    };
    /**
     * Trims leading zeros from a `Buffer` or an `Array`.
     * @param a (Buffer|Array|String)
     * @return (Buffer|Array|String)
     */
    exports.unpad = function (a) {
        a = ethjsUtil.stripHexPrefix(a);
        var first = a[0];
        while (a.length > 0 && first.toString() === '0') {
            a = a.slice(1);
            first = a[0];
        }
        return a;
    };
    exports.stripZeros = exports.unpad;
    /**
     * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
     * @param v the value
     */
    exports.toBuffer = function (v) {
        if (!Buffer.isBuffer(v)) {
            if (Array.isArray(v)) {
                v = Buffer.from(v);
            }
            else if (typeof v === 'string') {
                if (ethjsUtil.isHexString(v)) {
                    v = Buffer.from(ethjsUtil.padToEven(ethjsUtil.stripHexPrefix(v)), 'hex');
                }
                else {
                    throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: " + v);
                }
            }
            else if (typeof v === 'number') {
                v = ethjsUtil.intToBuffer(v);
            }
            else if (v === null || v === undefined) {
                v = Buffer.allocUnsafe(0);
            }
            else if (BN.isBN(v)) {
                v = v.toArrayLike(Buffer);
            }
            else if (v.toArray) {
                // converts a BN to a Buffer
                v = Buffer.from(v.toArray());
            }
            else {
                throw new Error('invalid type');
            }
        }
        return v;
    };
    /**
     * Converts a `Buffer` to a `Number`.
     * @param buf `Buffer` object to convert
     * @throws If the input number exceeds 53 bits.
     */
    exports.bufferToInt = function (buf) {
        return new BN(exports.toBuffer(buf)).toNumber();
    };
    /**
     * Converts a `Buffer` into a `0x`-prefixed hex `String`.
     * @param buf `Buffer` object to convert
     */
    exports.bufferToHex = function (buf) {
        buf = exports.toBuffer(buf);
        return '0x' + buf.toString('hex');
    };
    /**
     * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
     * @param num Signed integer value
     */
    exports.fromSigned = function (num) {
        return new BN(num).fromTwos(256);
    };
    /**
     * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
     * @param num
     */
    exports.toUnsigned = function (num) {
        return Buffer.from(num.toTwos(256).toArray());
    };
    /**
     * Adds "0x" to a given `String` if it does not already start with "0x".
     */
    exports.addHexPrefix = function (str) {
        if (typeof str !== 'string') {
            return str;
        }
        return ethjsUtil.isHexPrefixed(str) ? str : '0x' + str;
    };
    /**
     * Converts a `Buffer` or `Array` to JSON.
     * @param ba (Buffer|Array)
     * @return (Array|String|null)
     */
    exports.baToJSON = function (ba) {
        if (Buffer.isBuffer(ba)) {
            return "0x" + ba.toString('hex');
        }
        else if (ba instanceof Array) {
            var array = [];
            for (var i = 0; i < ba.length; i++) {
                array.push(exports.baToJSON(ba[i]));
            }
            return array;
        }
    };
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"bn.js":123,"buffer":301,"ethjs-util":169}],157:[function(require,module,exports){
    (function (Buffer){(function (){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = void 0;
    var BN = require("bn.js");
    /**
     * The max integer that this VM can handle
     */
    exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
    /**
     * 2^256
     */
    exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);
    /**
     * Keccak-256 hash of null
     */
    exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
    /**
     * Keccak-256 hash of null
     */
    exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
    /**
     * Keccak-256 of an RLP of an empty array
     */
    exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
    /**
     * Keccak-256 of an RLP of an empty array
     */
    exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
    /**
     * Keccak-256 hash of the RLP of null
     */
    exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
    /**
     * Keccak-256 hash of the RLP of null
     */
    exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"bn.js":123,"buffer":301}],158:[function(require,module,exports){
    (function (Buffer){(function (){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.rlphash = exports.ripemd160 = exports.sha256 = exports.keccak256 = exports.keccak = void 0;
    var _a = require('ethereum-cryptography/keccak'), keccak224 = _a.keccak224, keccak384 = _a.keccak384, k256 = _a.keccak256, keccak512 = _a.keccak512;
    var createHash = require('create-hash');
    var ethjsUtil = require('ethjs-util');
    var rlp = require("rlp");
    var bytes_1 = require("./bytes");
    /**
     * Creates Keccak hash of the input
     * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value
     * it's interpreted as hexadecimal, otherwise as utf8.
     * @param bits The Keccak width
     */
    exports.keccak = function (a, bits) {
        if (bits === void 0) { bits = 256; }
        if (typeof a === 'string' && !ethjsUtil.isHexString(a)) {
            a = Buffer.from(a, 'utf8');
        }
        else {
            a = bytes_1.toBuffer(a);
        }
        if (!bits)
            bits = 256;
        switch (bits) {
            case 224: {
                return keccak224(a);
            }
            case 256: {
                return k256(a);
            }
            case 384: {
                return keccak384(a);
            }
            case 512: {
                return keccak512(a);
            }
            default: {
                throw new Error("Invald algorithm: keccak" + bits);
            }
        }
    };
    /**
     * Creates Keccak-256 hash of the input, alias for keccak(a, 256).
     * @param a The input data (Buffer|Array|String|Number)
     */
    exports.keccak256 = function (a) {
        return exports.keccak(a);
    };
    /**
     * Creates SHA256 hash of the input.
     * @param a The input data (Buffer|Array|String|Number)
     */
    exports.sha256 = function (a) {
        a = bytes_1.toBuffer(a);
        return createHash('sha256')
            .update(a)
            .digest();
    };
    /**
     * Creates RIPEMD160 hash of the input.
     * @param a The input data (Buffer|Array|String|Number)
     * @param padded Whether it should be padded to 256 bits or not
     */
    exports.ripemd160 = function (a, padded) {
        a = bytes_1.toBuffer(a);
        var hash = createHash('rmd160')
            .update(a)
            .digest();
        if (padded === true) {
            return bytes_1.setLength(hash, 32);
        }
        else {
            return hash;
        }
    };
    /**
     * Creates SHA-3 hash of the RLP encoded version of the input.
     * @param a The input data
     */
    exports.rlphash = function (a) {
        return exports.keccak(rlp.encode(a));
    };
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"./bytes":156,"buffer":301,"create-hash":126,"ethereum-cryptography/keccak":150,"ethjs-util":169,"rlp":214}],159:[function(require,module,exports){
    "use strict";
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __exportStar = (this && this.__exportStar) || function(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.secp256k1 = exports.rlp = exports.BN = void 0;
    var secp256k1 = require('./secp256k1v3-adapter');
    exports.secp256k1 = secp256k1;
    var ethjsUtil = require('ethjs-util');
    var BN = require("bn.js");
    exports.BN = BN;
    var rlp = require("rlp");
    exports.rlp = rlp;
    Object.assign(exports, ethjsUtil);
    /**
     * Constants
     */
    __exportStar(require("./constants"), exports);
    /**
     * Public-key cryptography (secp256k1) and addresses
     */
    __exportStar(require("./account"), exports);
    /**
     * Hash functions
     */
    __exportStar(require("./hash"), exports);
    /**
     * ECDSA signature
     */
    __exportStar(require("./signature"), exports);
    /**
     * Utilities for manipulating Buffers, byte arrays, etc.
     */
    __exportStar(require("./bytes"), exports);
    /**
     * Function for definining properties on an object
     */
    __exportStar(require("./object"), exports);
    
    },{"./account":155,"./bytes":156,"./constants":157,"./hash":158,"./object":160,"./secp256k1v3-adapter":161,"./signature":164,"bn.js":123,"ethjs-util":169,"rlp":214}],160:[function(require,module,exports){
    (function (Buffer){(function (){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defineProperties = void 0;
    var assert = require('assert');
    var ethjsUtil = require('ethjs-util');
    var rlp = require("rlp");
    var bytes_1 = require("./bytes");
    /**
     * Defines properties on a `Object`. It make the assumption that underlying data is binary.
     * @param self the `Object` to define properties on
     * @param fields an array fields to define. Fields can contain:
     * * `name` - the name of the properties
     * * `length` - the number of bytes the field can have
     * * `allowLess` - if the field can be less than the length
     * * `allowEmpty`
     * @param data data to be validated against the definitions
     * @deprecated
     */
    exports.defineProperties = function (self, fields, data) {
        self.raw = [];
        self._fields = [];
        // attach the `toJSON`
        self.toJSON = function (label) {
            if (label === void 0) { label = false; }
            if (label) {
                var obj_1 = {};
                self._fields.forEach(function (field) {
                    obj_1[field] = "0x" + self[field].toString('hex');
                });
                return obj_1;
            }
            return bytes_1.baToJSON(self.raw);
        };
        self.serialize = function serialize() {
            return rlp.encode(self.raw);
        };
        fields.forEach(function (field, i) {
            self._fields.push(field.name);
            function getter() {
                return self.raw[i];
            }
            function setter(v) {
                v = bytes_1.toBuffer(v);
                if (v.toString('hex') === '00' && !field.allowZero) {
                    v = Buffer.allocUnsafe(0);
                }
                if (field.allowLess && field.length) {
                    v = bytes_1.stripZeros(v);
                    assert(field.length >= v.length, "The field " + field.name + " must not have more " + field.length + " bytes");
                }
                else if (!(field.allowZero && v.length === 0) && field.length) {
                    assert(field.length === v.length, "The field " + field.name + " must have byte length of " + field.length);
                }
                self.raw[i] = v;
            }
            Object.defineProperty(self, field.name, {
                enumerable: true,
                configurable: true,
                get: getter,
                set: setter,
            });
            if (field.default) {
                self[field.name] = field.default;
            }
            // attach alias
            if (field.alias) {
                Object.defineProperty(self, field.alias, {
                    enumerable: false,
                    configurable: true,
                    set: setter,
                    get: getter,
                });
            }
        });
        // if the constuctor is passed data
        if (data) {
            if (typeof data === 'string') {
                data = Buffer.from(ethjsUtil.stripHexPrefix(data), 'hex');
            }
            if (Buffer.isBuffer(data)) {
                data = rlp.decode(data);
            }
            if (Array.isArray(data)) {
                if (data.length > self._fields.length) {
                    throw new Error('wrong number of fields in data');
                }
                // make sure all the items are buffers
                data.forEach(function (d, i) {
                    self[self._fields[i]] = bytes_1.toBuffer(d);
                });
            }
            else if (typeof data === 'object') {
                var keys_1 = Object.keys(data);
                fields.forEach(function (field) {
                    if (keys_1.indexOf(field.name) !== -1)
                        self[field.name] = data[field.name];
                    if (keys_1.indexOf(field.alias) !== -1)
                        self[field.alias] = data[field.alias];
                });
            }
            else {
                throw new Error('invalid data');
            }
        }
    };
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"./bytes":156,"assert":250,"buffer":301,"ethjs-util":169,"rlp":214}],161:[function(require,module,exports){
    (function (Buffer){(function (){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ecdhUnsafe = exports.ecdh = exports.recover = exports.verify = exports.sign = exports.signatureImportLax = exports.signatureImport = exports.signatureExport = exports.signatureNormalize = exports.publicKeyCombine = exports.publicKeyTweakMul = exports.publicKeyTweakAdd = exports.publicKeyVerify = exports.publicKeyConvert = exports.publicKeyCreate = exports.privateKeyTweakMul = exports.privateKeyTweakAdd = exports.privateKeyModInverse = exports.privateKeyNegate = exports.privateKeyImport = exports.privateKeyExport = exports.privateKeyVerify = void 0;
    var secp256k1 = require('ethereum-cryptography/secp256k1');
    var secp256k1v3 = require('./secp256k1v3-lib/index');
    var der = require('./secp256k1v3-lib/der');
    /**
     * Verify an ECDSA privateKey
     * @method privateKeyVerify
     * @param {Buffer} privateKey
     * @return {boolean}
     */
    exports.privateKeyVerify = function (privateKey) {
        // secp256k1 v4 version throws when privateKey length is not 32
        if (privateKey.length !== 32) {
            return false;
        }
        return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));
    };
    /**
     * Export a privateKey in DER format
     * @method privateKeyExport
     * @param {Buffer} privateKey
     * @param {boolean} compressed
     * @return {boolean}
     */
    exports.privateKeyExport = function (privateKey, compressed) {
        // secp256k1 v4 version throws when privateKey length is not 32
        if (privateKey.length !== 32) {
            throw new RangeError('private key length is invalid');
        }
        var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);
        return der.privateKeyExport(privateKey, publicKey, compressed);
    };
    /**
     * Import a privateKey in DER format
     * @method privateKeyImport
     * @param {Buffer} privateKey
     * @return {Buffer}
     */
    exports.privateKeyImport = function (privateKey) {
        // privateKeyImport method is not part of secp256k1 v4 package
        // this implementation is based on v3
        privateKey = der.privateKeyImport(privateKey);
        if (privateKey !== null && privateKey.length === 32 && exports.privateKeyVerify(privateKey)) {
            return privateKey;
        }
        throw new Error("couldn't import from DER format");
    };
    /**
     * Negate a privateKey by subtracting it from the order of the curve's base point
     * @method privateKeyNegate
     * @param {Buffer} privateKey
     * @return {Buffer}
     */
    exports.privateKeyNegate = function (privateKey) {
        return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));
    };
    /**
     * Compute the inverse of a privateKey (modulo the order of the curve's base point).
     * @method privateKeyModInverse
     * @param {Buffer} privateKey
     * @return {Buffer}
     */
    exports.privateKeyModInverse = function (privateKey) {
        if (privateKey.length !== 32) {
            throw new Error('private key length is invalid');
        }
        return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
    };
    /**
     * Tweak a privateKey by adding tweak to it.
     * @method privateKeyTweakAdd
     * @param {Buffer} privateKey
     * @param {Buffer} tweak
     * @return {Buffer}
     */
    exports.privateKeyTweakAdd = function (privateKey, tweak) {
        return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
    };
    /**
     * Tweak a privateKey by multiplying it by a tweak.
     * @method privateKeyTweakMul
     * @param {Buffer} privateKey
     * @param {Buffer} tweak
     * @return {Buffer}
     */
    exports.privateKeyTweakMul = function (privateKey, tweak) {
        return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
    };
    /**
     * Compute the public key for a privateKey.
     * @method publicKeyCreate
     * @param {Buffer} privateKey
     * @param {boolean} compressed
     * @return {Buffer}
     */
    exports.publicKeyCreate = function (privateKey, compressed) {
        return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
    };
    /**
     * Convert a publicKey to compressed or uncompressed form.
     * @method publicKeyConvert
     * @param {Buffer} publicKey
     * @param {boolean} compressed
     * @return {Buffer}
     */
    exports.publicKeyConvert = function (publicKey, compressed) {
        return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
    };
    /**
     * Verify an ECDSA publicKey.
     * @method publicKeyVerify
     * @param {Buffer} publicKey
     * @return {boolean}
     */
    exports.publicKeyVerify = function (publicKey) {
        // secp256k1 v4 version throws when publicKey length is not 33 or 65
        if (publicKey.length !== 33 && publicKey.length !== 65) {
            return false;
        }
        return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));
    };
    /**
     * Tweak a publicKey by adding tweak times the generator to it.
     * @method publicKeyTweakAdd
     * @param {Buffer} publicKey
     * @param {Buffer} tweak
     * @param {boolean} compressed
     * @return {Buffer}
     */
    exports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {
        return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
    };
    /**
     * Tweak a publicKey by multiplying it by a tweak value
     * @method publicKeyTweakMul
     * @param {Buffer} publicKey
     * @param {Buffer} tweak
     * @param {boolean} compressed
     * @return {Buffer}
     */
    exports.publicKeyTweakMul = function (publicKey, tweak, compressed) {
        return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
    };
    /**
     * Add a given publicKeys together.
     * @method publicKeyCombine
     * @param {Array<Buffer>} publicKeys
     * @param {boolean} compressed
     * @return {Buffer}
     */
    exports.publicKeyCombine = function (publicKeys, compressed) {
        var keys = [];
        publicKeys.forEach(function (publicKey) {
            keys.push(Uint8Array.from(publicKey));
        });
        return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));
    };
    /**
     * Convert a signature to a normalized lower-S form.
     * @method signatureNormalize
     * @param {Buffer} signature
     * @return {Buffer}
     */
    exports.signatureNormalize = function (signature) {
        return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));
    };
    /**
     * Serialize an ECDSA signature in DER format.
     * @method signatureExport
     * @param {Buffer} signature
     * @return {Buffer}
     */
    exports.signatureExport = function (signature) {
        return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));
    };
    /**
     * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
     * @method signatureImport
     * @param {Buffer} signature
     * @return {Buffer}
     */
    exports.signatureImport = function (signature) {
        return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));
    };
    /**
     * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
     * @method signatureImportLax
     * @param {Buffer} signature
     * @return {Buffer}
     */
    exports.signatureImportLax = function (signature) {
        // signatureImportLax method is not part of secp256k1 v4 package
        // this implementation is based on v3
        // ensure that signature is greater than 0
        if (signature.length === 0) {
            throw new RangeError('signature length is invalid');
        }
        var sigObj = der.signatureImportLax(signature);
        if (sigObj === null) {
            throw new Error("couldn't parse DER signature");
        }
        return secp256k1v3.signatureImport(sigObj);
    };
    /**
     * Create an ECDSA signature. Always return low-S signature.
     * @method sign
     * @param {Buffer} message
     * @param {Buffer} privateKey
     * @param {Object} options
     * @return {Buffer}
     */
    exports.sign = function (message, privateKey, options) {
        if (options === null) {
            throw new TypeError('options should be an Object');
        }
        var signOptions = undefined;
        if (options) {
            signOptions = {};
            if (options.data === null) {
                // validate option.data length
                throw new TypeError('options.data should be a Buffer');
            }
            if (options.data) {
                if (options.data.length != 32) {
                    throw new RangeError('options.data length is invalid');
                }
                signOptions.data = new Uint8Array(options.data);
            }
            if (options.noncefn === null) {
                throw new TypeError('options.noncefn should be a Function');
            }
            if (options.noncefn) {
                // convert option.noncefn function signature
                signOptions.noncefn = function (message, privateKey, algo, data, attempt) {
                    var bufferAlgo = algo != null ? Buffer.from(algo) : null;
                    var bufferData = data != null ? Buffer.from(data) : null;
                    var buffer = Buffer.from('');
                    if (options.noncefn) {
                        buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);
                    }
                    return new Uint8Array(buffer);
                };
            }
        }
        var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);
        return {
            signature: Buffer.from(sig.signature),
            recovery: sig.recid,
        };
    };
    /**
     * Verify an ECDSA signature.
     * @method verify
     * @param {Buffer} message
     * @param {Buffer} signature
     * @param {Buffer} publicKey
     * @return {boolean}
     */
    exports.verify = function (message, signature, publicKey) {
        return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
    };
    /**
     * Recover an ECDSA public key from a signature.
     * @method recover
     * @param {Buffer} message
     * @param {Buffer} signature
     * @param {Number} recid
     * @param {boolean} compressed
     * @return {Buffer}
     */
    exports.recover = function (message, signature, recid, compressed) {
        return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
    };
    /**
     * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.
     * @method ecdh
     * @param {Buffer} publicKey
     * @param {Buffer} privateKey
     * @return {Buffer}
     */
    exports.ecdh = function (publicKey, privateKey) {
        // note: secp256k1 v3 doesn't allow optional parameter
        return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
    };
    exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
        // ecdhUnsafe method is not part of secp256k1 v4 package
        // this implementation is based on v3
        // ensure valid publicKey length
        if (publicKey.length !== 33 && publicKey.length !== 65) {
            throw new RangeError('public key length is invalid');
        }
        // ensure valid privateKey length
        if (privateKey.length !== 32) {
            throw new RangeError('private key length is invalid');
        }
        return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
    };
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"./secp256k1v3-lib/der":162,"./secp256k1v3-lib/index":163,"buffer":301,"ethereum-cryptography/secp256k1":152}],162:[function(require,module,exports){
    (function (Buffer){(function (){
    "use strict";
    // This file is imported from secp256k1 v3
    // https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
    Object.defineProperty(exports, "__esModule", { value: true });
    var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
        // begin
        0x30,
        0x81,
        0xd3,
        0x02,
        0x01,
        0x01,
        0x04,
        0x20,
        // private key
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        // middle
        0xa0,
        0x81,
        0x85,
        0x30,
        0x81,
        0x82,
        0x02,
        0x01,
        0x01,
        0x30,
        0x2c,
        0x06,
        0x07,
        0x2a,
        0x86,
        0x48,
        0xce,
        0x3d,
        0x01,
        0x01,
        0x02,
        0x21,
        0x00,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xfe,
        0xff,
        0xff,
        0xfc,
        0x2f,
        0x30,
        0x06,
        0x04,
        0x01,
        0x00,
        0x04,
        0x01,
        0x07,
        0x04,
        0x21,
        0x02,
        0x79,
        0xbe,
        0x66,
        0x7e,
        0xf9,
        0xdc,
        0xbb,
        0xac,
        0x55,
        0xa0,
        0x62,
        0x95,
        0xce,
        0x87,
        0x0b,
        0x07,
        0x02,
        0x9b,
        0xfc,
        0xdb,
        0x2d,
        0xce,
        0x28,
        0xd9,
        0x59,
        0xf2,
        0x81,
        0x5b,
        0x16,
        0xf8,
        0x17,
        0x98,
        0x02,
        0x21,
        0x00,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xfe,
        0xba,
        0xae,
        0xdc,
        0xe6,
        0xaf,
        0x48,
        0xa0,
        0x3b,
        0xbf,
        0xd2,
        0x5e,
        0x8c,
        0xd0,
        0x36,
        0x41,
        0x41,
        0x02,
        0x01,
        0x01,
        0xa1,
        0x24,
        0x03,
        0x22,
        0x00,
        // public key
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
    ]);
    var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
        // begin
        0x30,
        0x82,
        0x01,
        0x13,
        0x02,
        0x01,
        0x01,
        0x04,
        0x20,
        // private key
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        // middle
        0xa0,
        0x81,
        0xa5,
        0x30,
        0x81,
        0xa2,
        0x02,
        0x01,
        0x01,
        0x30,
        0x2c,
        0x06,
        0x07,
        0x2a,
        0x86,
        0x48,
        0xce,
        0x3d,
        0x01,
        0x01,
        0x02,
        0x21,
        0x00,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xfe,
        0xff,
        0xff,
        0xfc,
        0x2f,
        0x30,
        0x06,
        0x04,
        0x01,
        0x00,
        0x04,
        0x01,
        0x07,
        0x04,
        0x41,
        0x04,
        0x79,
        0xbe,
        0x66,
        0x7e,
        0xf9,
        0xdc,
        0xbb,
        0xac,
        0x55,
        0xa0,
        0x62,
        0x95,
        0xce,
        0x87,
        0x0b,
        0x07,
        0x02,
        0x9b,
        0xfc,
        0xdb,
        0x2d,
        0xce,
        0x28,
        0xd9,
        0x59,
        0xf2,
        0x81,
        0x5b,
        0x16,
        0xf8,
        0x17,
        0x98,
        0x48,
        0x3a,
        0xda,
        0x77,
        0x26,
        0xa3,
        0xc4,
        0x65,
        0x5d,
        0xa4,
        0xfb,
        0xfc,
        0x0e,
        0x11,
        0x08,
        0xa8,
        0xfd,
        0x17,
        0xb4,
        0x48,
        0xa6,
        0x85,
        0x54,
        0x19,
        0x9c,
        0x47,
        0xd0,
        0x8f,
        0xfb,
        0x10,
        0xd4,
        0xb8,
        0x02,
        0x21,
        0x00,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xfe,
        0xba,
        0xae,
        0xdc,
        0xe6,
        0xaf,
        0x48,
        0xa0,
        0x3b,
        0xbf,
        0xd2,
        0x5e,
        0x8c,
        0xd0,
        0x36,
        0x41,
        0x41,
        0x02,
        0x01,
        0x01,
        0xa1,
        0x44,
        0x03,
        0x42,
        0x00,
        // public key
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
    ]);
    exports.privateKeyExport = function (privateKey, publicKey, compressed) {
        if (compressed === void 0) { compressed = true; }
        var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
        privateKey.copy(result, compressed ? 8 : 9);
        publicKey.copy(result, compressed ? 181 : 214);
        return result;
    };
    exports.privateKeyImport = function (privateKey) {
        var length = privateKey.length;
        // sequence header
        var index = 0;
        if (length < index + 1 || privateKey[index] !== 0x30)
            return null;
        index += 1;
        // sequence length constructor
        if (length < index + 1 || !(privateKey[index] & 0x80))
            return null;
        var lenb = privateKey[index] & 0x7f;
        index += 1;
        if (lenb < 1 || lenb > 2)
            return null;
        if (length < index + lenb)
            return null;
        // sequence length
        var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
        index += lenb;
        if (length < index + len)
            return null;
        // sequence element 0: version number (=1)
        if (length < index + 3 ||
            privateKey[index] !== 0x02 ||
            privateKey[index + 1] !== 0x01 ||
            privateKey[index + 2] !== 0x01) {
            return null;
        }
        index += 3;
        // sequence element 1: octet string, up to 32 bytes
        if (length < index + 2 ||
            privateKey[index] !== 0x04 ||
            privateKey[index + 1] > 0x20 ||
            length < index + 2 + privateKey[index + 1]) {
            return null;
        }
        return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
    };
    exports.signatureImportLax = function (signature) {
        var r = Buffer.alloc(32, 0);
        var s = Buffer.alloc(32, 0);
        var length = signature.length;
        var index = 0;
        // sequence tag byte
        if (signature[index++] !== 0x30) {
            return null;
        }
        // sequence length byte
        var lenbyte = signature[index++];
        if (lenbyte & 0x80) {
            index += lenbyte - 0x80;
            if (index > length) {
                return null;
            }
        }
        // sequence tag byte for r
        if (signature[index++] !== 0x02) {
            return null;
        }
        // length for r
        var rlen = signature[index++];
        if (rlen & 0x80) {
            lenbyte = rlen - 0x80;
            if (index + lenbyte > length) {
                return null;
            }
            for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1)
                ;
            for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1)
                rlen = (rlen << 8) + signature[index];
        }
        if (rlen > length - index) {
            return null;
        }
        var rindex = index;
        index += rlen;
        // sequence tag byte for s
        if (signature[index++] !== 0x02) {
            return null;
        }
        // length for s
        var slen = signature[index++];
        if (slen & 0x80) {
            lenbyte = slen - 0x80;
            if (index + lenbyte > length) {
                return null;
            }
            for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1)
                ;
            for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1)
                slen = (slen << 8) + signature[index];
        }
        if (slen > length - index) {
            return null;
        }
        var sindex = index;
        index += slen;
        // ignore leading zeros in r
        for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1)
            ;
        // copy r value
        if (rlen > 32) {
            return null;
        }
        var rvalue = signature.slice(rindex, rindex + rlen);
        rvalue.copy(r, 32 - rvalue.length);
        // ignore leading zeros in s
        for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1)
            ;
        // copy s value
        if (slen > 32) {
            return null;
        }
        var svalue = signature.slice(sindex, sindex + slen);
        svalue.copy(s, 32 - svalue.length);
        return { r: r, s: s };
    };
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"buffer":301}],163:[function(require,module,exports){
    (function (Buffer){(function (){
    "use strict";
    // This file is imported from secp256k1 v3
    // https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
    Object.defineProperty(exports, "__esModule", { value: true });
    var BN = require("bn.js");
    var EC = require('elliptic').ec;
    var ec = new EC('secp256k1');
    var ecparams = ec.curve;
    exports.privateKeyExport = function (privateKey, compressed) {
        if (compressed === void 0) { compressed = true; }
        var d = new BN(privateKey);
        if (d.ucmp(ecparams.n) >= 0) {
            throw new Error("couldn't export to DER format");
        }
        var point = ec.g.mul(d);
        return toPublicKey(point.getX(), point.getY(), compressed);
    };
    exports.privateKeyModInverse = function (privateKey) {
        var bn = new BN(privateKey);
        if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {
            throw new Error('private key range is invalid');
        }
        return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);
    };
    exports.signatureImport = function (sigObj) {
        var r = new BN(sigObj.r);
        if (r.ucmp(ecparams.n) >= 0) {
            r = new BN(0);
        }
        var s = new BN(sigObj.s);
        if (s.ucmp(ecparams.n) >= 0) {
            s = new BN(0);
        }
        return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);
    };
    exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
        if (compressed === void 0) { compressed = true; }
        var point = ec.keyFromPublic(publicKey);
        var scalar = new BN(privateKey);
        if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {
            throw new Error('scalar was invalid (zero or overflow)');
        }
        var shared = point.pub.mul(scalar);
        return toPublicKey(shared.getX(), shared.getY(), compressed);
    };
    var toPublicKey = function (x, y, compressed) {
        var publicKey;
        if (compressed) {
            publicKey = Buffer.alloc(33);
            publicKey[0] = y.isOdd() ? 0x03 : 0x02;
            x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
        }
        else {
            publicKey = Buffer.alloc(65);
            publicKey[0] = 0x04;
            x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
            y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);
        }
        return publicKey;
    };
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"bn.js":123,"buffer":301,"elliptic":127}],164:[function(require,module,exports){
    (function (Buffer){(function (){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;
    var secp256k1 = require('./secp256k1v3-adapter');
    var BN = require("bn.js");
    var bytes_1 = require("./bytes");
    var hash_1 = require("./hash");
    /**
     * Returns the ECDSA signature of a message hash.
     */
    exports.ecsign = function (msgHash, privateKey, chainId) {
        var sig = secp256k1.sign(msgHash, privateKey);
        var recovery = sig.recovery;
        var ret = {
            r: sig.signature.slice(0, 32),
            s: sig.signature.slice(32, 64),
            v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27,
        };
        return ret;
    };
    /**
     * ECDSA public key recovery from signature.
     * @returns Recovered public key
     */
    exports.ecrecover = function (msgHash, v, r, s, chainId) {
        var signature = Buffer.concat([bytes_1.setLength(r, 32), bytes_1.setLength(s, 32)], 64);
        var recovery = calculateSigRecovery(v, chainId);
        if (!isValidSigRecovery(recovery)) {
            throw new Error('Invalid signature v value');
        }
        var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
        return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
    };
    /**
     * Convert signature parameters into the format of `eth_sign` RPC method.
     * @returns Signature
     */
    exports.toRpcSig = function (v, r, s, chainId) {
        var recovery = calculateSigRecovery(v, chainId);
        if (!isValidSigRecovery(recovery)) {
            throw new Error('Invalid signature v value');
        }
        // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
        return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));
    };
    /**
     * Convert signature format of the `eth_sign` RPC method to signature parameters
     * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
     */
    exports.fromRpcSig = function (sig) {
        var buf = bytes_1.toBuffer(sig);
        // NOTE: with potential introduction of chainId this might need to be updated
        if (buf.length !== 65) {
            throw new Error('Invalid signature length');
        }
        var v = buf[64];
        // support both versions of `eth_sign` responses
        if (v < 27) {
            v += 27;
        }
        return {
            v: v,
            r: buf.slice(0, 32),
            s: buf.slice(32, 64),
        };
    };
    /**
     * Validate a ECDSA signature.
     * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one
     */
    exports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {
        if (homesteadOrLater === void 0) { homesteadOrLater = true; }
        var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
        var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
        if (r.length !== 32 || s.length !== 32) {
            return false;
        }
        if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
            return false;
        }
        var rBN = new BN(r);
        var sBN = new BN(s);
        if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
            return false;
        }
        if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
            return false;
        }
        return true;
    };
    /**
     * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
     * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
     * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
     * used to produce the signature.
     */
    exports.hashPersonalMessage = function (message) {
        var prefix = Buffer.from("\u0019Ethereum Signed Message:\n" + message.length.toString(), 'utf-8');
        return hash_1.keccak(Buffer.concat([prefix, message]));
    };
    function calculateSigRecovery(v, chainId) {
        return chainId ? v - (2 * chainId + 35) : v - 27;
    }
    function isValidSigRecovery(recovery) {
        return recovery === 0 || recovery === 1;
    }
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"./bytes":156,"./hash":158,"./secp256k1v3-adapter":161,"bn.js":123,"buffer":301}],165:[function(require,module,exports){
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "ethers/5.5.4";
    
    },{}],166:[function(require,module,exports){
    "use strict";
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Wordlist = exports.version = exports.wordlists = exports.utils = exports.logger = exports.errors = exports.constants = exports.FixedNumber = exports.BigNumber = exports.ContractFactory = exports.Contract = exports.BaseContract = exports.providers = exports.getDefaultProvider = exports.VoidSigner = exports.Wallet = exports.Signer = void 0;
    var contracts_1 = require("@ethersproject/contracts");
    Object.defineProperty(exports, "BaseContract", { enumerable: true, get: function () { return contracts_1.BaseContract; } });
    Object.defineProperty(exports, "Contract", { enumerable: true, get: function () { return contracts_1.Contract; } });
    Object.defineProperty(exports, "ContractFactory", { enumerable: true, get: function () { return contracts_1.ContractFactory; } });
    var bignumber_1 = require("@ethersproject/bignumber");
    Object.defineProperty(exports, "BigNumber", { enumerable: true, get: function () { return bignumber_1.BigNumber; } });
    Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function () { return bignumber_1.FixedNumber; } });
    var abstract_signer_1 = require("@ethersproject/abstract-signer");
    Object.defineProperty(exports, "Signer", { enumerable: true, get: function () { return abstract_signer_1.Signer; } });
    Object.defineProperty(exports, "VoidSigner", { enumerable: true, get: function () { return abstract_signer_1.VoidSigner; } });
    var wallet_1 = require("@ethersproject/wallet");
    Object.defineProperty(exports, "Wallet", { enumerable: true, get: function () { return wallet_1.Wallet; } });
    var constants = __importStar(require("@ethersproject/constants"));
    exports.constants = constants;
    var providers = __importStar(require("@ethersproject/providers"));
    exports.providers = providers;
    var providers_1 = require("@ethersproject/providers");
    Object.defineProperty(exports, "getDefaultProvider", { enumerable: true, get: function () { return providers_1.getDefaultProvider; } });
    var wordlists_1 = require("@ethersproject/wordlists");
    Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function () { return wordlists_1.Wordlist; } });
    Object.defineProperty(exports, "wordlists", { enumerable: true, get: function () { return wordlists_1.wordlists; } });
    var utils = __importStar(require("./utils"));
    exports.utils = utils;
    var logger_1 = require("@ethersproject/logger");
    Object.defineProperty(exports, "errors", { enumerable: true, get: function () { return logger_1.ErrorCode; } });
    ////////////////////////
    // Compile-Time Constants
    // This is generated by "npm run dist"
    var _version_1 = require("./_version");
    Object.defineProperty(exports, "version", { enumerable: true, get: function () { return _version_1.version; } });
    var logger = new logger_1.Logger(_version_1.version);
    exports.logger = logger;
    
    },{"./_version":165,"./utils":168,"@ethersproject/abstract-signer":20,"@ethersproject/bignumber":29,"@ethersproject/constants":35,"@ethersproject/contracts":38,"@ethersproject/logger":56,"@ethersproject/providers":72,"@ethersproject/wallet":106,"@ethersproject/wordlists":111}],167:[function(require,module,exports){
    "use strict";
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Wordlist = exports.version = exports.wordlists = exports.utils = exports.logger = exports.errors = exports.constants = exports.FixedNumber = exports.BigNumber = exports.ContractFactory = exports.Contract = exports.BaseContract = exports.providers = exports.getDefaultProvider = exports.VoidSigner = exports.Wallet = exports.Signer = exports.ethers = void 0;
    // To modify this file, you must update ./misc/admin/lib/cmds/update-exports.js
    var ethers = __importStar(require("./ethers"));
    exports.ethers = ethers;
    try {
        var anyGlobal = window;
        if (anyGlobal._ethers == null) {
            anyGlobal._ethers = ethers;
        }
    }
    catch (error) { }
    var ethers_1 = require("./ethers");
    Object.defineProperty(exports, "Signer", { enumerable: true, get: function () { return ethers_1.Signer; } });
    Object.defineProperty(exports, "Wallet", { enumerable: true, get: function () { return ethers_1.Wallet; } });
    Object.defineProperty(exports, "VoidSigner", { enumerable: true, get: function () { return ethers_1.VoidSigner; } });
    Object.defineProperty(exports, "getDefaultProvider", { enumerable: true, get: function () { return ethers_1.getDefaultProvider; } });
    Object.defineProperty(exports, "providers", { enumerable: true, get: function () { return ethers_1.providers; } });
    Object.defineProperty(exports, "BaseContract", { enumerable: true, get: function () { return ethers_1.BaseContract; } });
    Object.defineProperty(exports, "Contract", { enumerable: true, get: function () { return ethers_1.Contract; } });
    Object.defineProperty(exports, "ContractFactory", { enumerable: true, get: function () { return ethers_1.ContractFactory; } });
    Object.defineProperty(exports, "BigNumber", { enumerable: true, get: function () { return ethers_1.BigNumber; } });
    Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function () { return ethers_1.FixedNumber; } });
    Object.defineProperty(exports, "constants", { enumerable: true, get: function () { return ethers_1.constants; } });
    Object.defineProperty(exports, "errors", { enumerable: true, get: function () { return ethers_1.errors; } });
    Object.defineProperty(exports, "logger", { enumerable: true, get: function () { return ethers_1.logger; } });
    Object.defineProperty(exports, "utils", { enumerable: true, get: function () { return ethers_1.utils; } });
    Object.defineProperty(exports, "wordlists", { enumerable: true, get: function () { return ethers_1.wordlists; } });
    ////////////////////////
    // Compile-Time Constants
    Object.defineProperty(exports, "version", { enumerable: true, get: function () { return ethers_1.version; } });
    Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function () { return ethers_1.Wordlist; } });
    
    },{"./ethers":166}],168:[function(require,module,exports){
    "use strict";
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatBytes32String = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports._toEscapedUtf8String = exports.nameprep = exports.hexDataSlice = exports.hexDataLength = exports.hexZeroPad = exports.hexValue = exports.hexStripZeros = exports.hexConcat = exports.isHexString = exports.hexlify = exports.base64 = exports.base58 = exports.TransactionDescription = exports.LogDescription = exports.Interface = exports.SigningKey = exports.HDNode = exports.defaultPath = exports.isBytesLike = exports.isBytes = exports.zeroPad = exports.stripZeros = exports.concat = exports.arrayify = exports.shallowCopy = exports.resolveProperties = exports.getStatic = exports.defineReadOnly = exports.deepCopy = exports.checkProperties = exports.poll = exports.fetchJson = exports._fetchData = exports.RLP = exports.Logger = exports.checkResultErrors = exports.FormatTypes = exports.ParamType = exports.FunctionFragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.Fragment = exports.defaultAbiCoder = exports.AbiCoder = void 0;
    exports.Indexed = exports.Utf8ErrorReason = exports.UnicodeNormalizationForm = exports.SupportedAlgorithm = exports.mnemonicToSeed = exports.isValidMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.getAccountPath = exports.verifyTypedData = exports.verifyMessage = exports.recoverPublicKey = exports.computePublicKey = exports.recoverAddress = exports.computeAddress = exports.getJsonWalletAddress = exports.TransactionTypes = exports.serializeTransaction = exports.parseTransaction = exports.accessListify = exports.joinSignature = exports.splitSignature = exports.soliditySha256 = exports.solidityKeccak256 = exports.solidityPack = exports.shuffled = exports.randomBytes = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.keccak256 = exports.computeHmac = exports.commify = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.isAddress = exports.getCreate2Address = exports.getContractAddress = exports.getIcapAddress = exports.getAddress = exports._TypedDataEncoder = exports.id = exports.isValidName = exports.namehash = exports.hashMessage = exports.parseBytes32String = void 0;
    var abi_1 = require("@ethersproject/abi");
    Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function () { return abi_1.AbiCoder; } });
    Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function () { return abi_1.checkResultErrors; } });
    Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function () { return abi_1.ConstructorFragment; } });
    Object.defineProperty(exports, "defaultAbiCoder", { enumerable: true, get: function () { return abi_1.defaultAbiCoder; } });
    Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function () { return abi_1.ErrorFragment; } });
    Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function () { return abi_1.EventFragment; } });
    Object.defineProperty(exports, "FormatTypes", { enumerable: true, get: function () { return abi_1.FormatTypes; } });
    Object.defineProperty(exports, "Fragment", { enumerable: true, get: function () { return abi_1.Fragment; } });
    Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function () { return abi_1.FunctionFragment; } });
    Object.defineProperty(exports, "Indexed", { enumerable: true, get: function () { return abi_1.Indexed; } });
    Object.defineProperty(exports, "Interface", { enumerable: true, get: function () { return abi_1.Interface; } });
    Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function () { return abi_1.LogDescription; } });
    Object.defineProperty(exports, "ParamType", { enumerable: true, get: function () { return abi_1.ParamType; } });
    Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function () { return abi_1.TransactionDescription; } });
    var address_1 = require("@ethersproject/address");
    Object.defineProperty(exports, "getAddress", { enumerable: true, get: function () { return address_1.getAddress; } });
    Object.defineProperty(exports, "getCreate2Address", { enumerable: true, get: function () { return address_1.getCreate2Address; } });
    Object.defineProperty(exports, "getContractAddress", { enumerable: true, get: function () { return address_1.getContractAddress; } });
    Object.defineProperty(exports, "getIcapAddress", { enumerable: true, get: function () { return address_1.getIcapAddress; } });
    Object.defineProperty(exports, "isAddress", { enumerable: true, get: function () { return address_1.isAddress; } });
    var base64 = __importStar(require("@ethersproject/base64"));
    exports.base64 = base64;
    var basex_1 = require("@ethersproject/basex");
    Object.defineProperty(exports, "base58", { enumerable: true, get: function () { return basex_1.Base58; } });
    var bytes_1 = require("@ethersproject/bytes");
    Object.defineProperty(exports, "arrayify", { enumerable: true, get: function () { return bytes_1.arrayify; } });
    Object.defineProperty(exports, "concat", { enumerable: true, get: function () { return bytes_1.concat; } });
    Object.defineProperty(exports, "hexConcat", { enumerable: true, get: function () { return bytes_1.hexConcat; } });
    Object.defineProperty(exports, "hexDataSlice", { enumerable: true, get: function () { return bytes_1.hexDataSlice; } });
    Object.defineProperty(exports, "hexDataLength", { enumerable: true, get: function () { return bytes_1.hexDataLength; } });
    Object.defineProperty(exports, "hexlify", { enumerable: true, get: function () { return bytes_1.hexlify; } });
    Object.defineProperty(exports, "hexStripZeros", { enumerable: true, get: function () { return bytes_1.hexStripZeros; } });
    Object.defineProperty(exports, "hexValue", { enumerable: true, get: function () { return bytes_1.hexValue; } });
    Object.defineProperty(exports, "hexZeroPad", { enumerable: true, get: function () { return bytes_1.hexZeroPad; } });
    Object.defineProperty(exports, "isBytes", { enumerable: true, get: function () { return bytes_1.isBytes; } });
    Object.defineProperty(exports, "isBytesLike", { enumerable: true, get: function () { return bytes_1.isBytesLike; } });
    Object.defineProperty(exports, "isHexString", { enumerable: true, get: function () { return bytes_1.isHexString; } });
    Object.defineProperty(exports, "joinSignature", { enumerable: true, get: function () { return bytes_1.joinSignature; } });
    Object.defineProperty(exports, "zeroPad", { enumerable: true, get: function () { return bytes_1.zeroPad; } });
    Object.defineProperty(exports, "splitSignature", { enumerable: true, get: function () { return bytes_1.splitSignature; } });
    Object.defineProperty(exports, "stripZeros", { enumerable: true, get: function () { return bytes_1.stripZeros; } });
    var hash_1 = require("@ethersproject/hash");
    Object.defineProperty(exports, "_TypedDataEncoder", { enumerable: true, get: function () { return hash_1._TypedDataEncoder; } });
    Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function () { return hash_1.hashMessage; } });
    Object.defineProperty(exports, "id", { enumerable: true, get: function () { return hash_1.id; } });
    Object.defineProperty(exports, "isValidName", { enumerable: true, get: function () { return hash_1.isValidName; } });
    Object.defineProperty(exports, "namehash", { enumerable: true, get: function () { return hash_1.namehash; } });
    var hdnode_1 = require("@ethersproject/hdnode");
    Object.defineProperty(exports, "defaultPath", { enumerable: true, get: function () { return hdnode_1.defaultPath; } });
    Object.defineProperty(exports, "entropyToMnemonic", { enumerable: true, get: function () { return hdnode_1.entropyToMnemonic; } });
    Object.defineProperty(exports, "getAccountPath", { enumerable: true, get: function () { return hdnode_1.getAccountPath; } });
    Object.defineProperty(exports, "HDNode", { enumerable: true, get: function () { return hdnode_1.HDNode; } });
    Object.defineProperty(exports, "isValidMnemonic", { enumerable: true, get: function () { return hdnode_1.isValidMnemonic; } });
    Object.defineProperty(exports, "mnemonicToEntropy", { enumerable: true, get: function () { return hdnode_1.mnemonicToEntropy; } });
    Object.defineProperty(exports, "mnemonicToSeed", { enumerable: true, get: function () { return hdnode_1.mnemonicToSeed; } });
    var json_wallets_1 = require("@ethersproject/json-wallets");
    Object.defineProperty(exports, "getJsonWalletAddress", { enumerable: true, get: function () { return json_wallets_1.getJsonWalletAddress; } });
    var keccak256_1 = require("@ethersproject/keccak256");
    Object.defineProperty(exports, "keccak256", { enumerable: true, get: function () { return keccak256_1.keccak256; } });
    var logger_1 = require("@ethersproject/logger");
    Object.defineProperty(exports, "Logger", { enumerable: true, get: function () { return logger_1.Logger; } });
    var sha2_1 = require("@ethersproject/sha2");
    Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function () { return sha2_1.computeHmac; } });
    Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function () { return sha2_1.ripemd160; } });
    Object.defineProperty(exports, "sha256", { enumerable: true, get: function () { return sha2_1.sha256; } });
    Object.defineProperty(exports, "sha512", { enumerable: true, get: function () { return sha2_1.sha512; } });
    var solidity_1 = require("@ethersproject/solidity");
    Object.defineProperty(exports, "solidityKeccak256", { enumerable: true, get: function () { return solidity_1.keccak256; } });
    Object.defineProperty(exports, "solidityPack", { enumerable: true, get: function () { return solidity_1.pack; } });
    Object.defineProperty(exports, "soliditySha256", { enumerable: true, get: function () { return solidity_1.sha256; } });
    var random_1 = require("@ethersproject/random");
    Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function () { return random_1.randomBytes; } });
    Object.defineProperty(exports, "shuffled", { enumerable: true, get: function () { return random_1.shuffled; } });
    var properties_1 = require("@ethersproject/properties");
    Object.defineProperty(exports, "checkProperties", { enumerable: true, get: function () { return properties_1.checkProperties; } });
    Object.defineProperty(exports, "deepCopy", { enumerable: true, get: function () { return properties_1.deepCopy; } });
    Object.defineProperty(exports, "defineReadOnly", { enumerable: true, get: function () { return properties_1.defineReadOnly; } });
    Object.defineProperty(exports, "getStatic", { enumerable: true, get: function () { return properties_1.getStatic; } });
    Object.defineProperty(exports, "resolveProperties", { enumerable: true, get: function () { return properties_1.resolveProperties; } });
    Object.defineProperty(exports, "shallowCopy", { enumerable: true, get: function () { return properties_1.shallowCopy; } });
    var RLP = __importStar(require("@ethersproject/rlp"));
    exports.RLP = RLP;
    var signing_key_1 = require("@ethersproject/signing-key");
    Object.defineProperty(exports, "computePublicKey", { enumerable: true, get: function () { return signing_key_1.computePublicKey; } });
    Object.defineProperty(exports, "recoverPublicKey", { enumerable: true, get: function () { return signing_key_1.recoverPublicKey; } });
    Object.defineProperty(exports, "SigningKey", { enumerable: true, get: function () { return signing_key_1.SigningKey; } });
    var strings_1 = require("@ethersproject/strings");
    Object.defineProperty(exports, "formatBytes32String", { enumerable: true, get: function () { return strings_1.formatBytes32String; } });
    Object.defineProperty(exports, "nameprep", { enumerable: true, get: function () { return strings_1.nameprep; } });
    Object.defineProperty(exports, "parseBytes32String", { enumerable: true, get: function () { return strings_1.parseBytes32String; } });
    Object.defineProperty(exports, "_toEscapedUtf8String", { enumerable: true, get: function () { return strings_1._toEscapedUtf8String; } });
    Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function () { return strings_1.toUtf8Bytes; } });
    Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function () { return strings_1.toUtf8CodePoints; } });
    Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function () { return strings_1.toUtf8String; } });
    Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function () { return strings_1.Utf8ErrorFuncs; } });
    var transactions_1 = require("@ethersproject/transactions");
    Object.defineProperty(exports, "accessListify", { enumerable: true, get: function () { return transactions_1.accessListify; } });
    Object.defineProperty(exports, "computeAddress", { enumerable: true, get: function () { return transactions_1.computeAddress; } });
    Object.defineProperty(exports, "parseTransaction", { enumerable: true, get: function () { return transactions_1.parse; } });
    Object.defineProperty(exports, "recoverAddress", { enumerable: true, get: function () { return transactions_1.recoverAddress; } });
    Object.defineProperty(exports, "serializeTransaction", { enumerable: true, get: function () { return transactions_1.serialize; } });
    Object.defineProperty(exports, "TransactionTypes", { enumerable: true, get: function () { return transactions_1.TransactionTypes; } });
    var units_1 = require("@ethersproject/units");
    Object.defineProperty(exports, "commify", { enumerable: true, get: function () { return units_1.commify; } });
    Object.defineProperty(exports, "formatEther", { enumerable: true, get: function () { return units_1.formatEther; } });
    Object.defineProperty(exports, "parseEther", { enumerable: true, get: function () { return units_1.parseEther; } });
    Object.defineProperty(exports, "formatUnits", { enumerable: true, get: function () { return units_1.formatUnits; } });
    Object.defineProperty(exports, "parseUnits", { enumerable: true, get: function () { return units_1.parseUnits; } });
    var wallet_1 = require("@ethersproject/wallet");
    Object.defineProperty(exports, "verifyMessage", { enumerable: true, get: function () { return wallet_1.verifyMessage; } });
    Object.defineProperty(exports, "verifyTypedData", { enumerable: true, get: function () { return wallet_1.verifyTypedData; } });
    var web_1 = require("@ethersproject/web");
    Object.defineProperty(exports, "_fetchData", { enumerable: true, get: function () { return web_1._fetchData; } });
    Object.defineProperty(exports, "fetchJson", { enumerable: true, get: function () { return web_1.fetchJson; } });
    Object.defineProperty(exports, "poll", { enumerable: true, get: function () { return web_1.poll; } });
    ////////////////////////
    // Enums
    var sha2_2 = require("@ethersproject/sha2");
    Object.defineProperty(exports, "SupportedAlgorithm", { enumerable: true, get: function () { return sha2_2.SupportedAlgorithm; } });
    var strings_2 = require("@ethersproject/strings");
    Object.defineProperty(exports, "UnicodeNormalizationForm", { enumerable: true, get: function () { return strings_2.UnicodeNormalizationForm; } });
    Object.defineProperty(exports, "Utf8ErrorReason", { enumerable: true, get: function () { return strings_2.Utf8ErrorReason; } });
    
    },{"@ethersproject/abi":15,"@ethersproject/address":22,"@ethersproject/base64":24,"@ethersproject/basex":25,"@ethersproject/bytes":31,"@ethersproject/hash":41,"@ethersproject/hdnode":46,"@ethersproject/json-wallets":49,"@ethersproject/keccak256":54,"@ethersproject/logger":56,"@ethersproject/properties":62,"@ethersproject/random":83,"@ethersproject/rlp":86,"@ethersproject/sha2":89,"@ethersproject/signing-key":93,"@ethersproject/solidity":95,"@ethersproject/strings":99,"@ethersproject/transactions":102,"@ethersproject/units":104,"@ethersproject/wallet":106,"@ethersproject/web":109}],169:[function(require,module,exports){
    (function (Buffer){(function (){
    'use strict';
    
    var isHexPrefixed = require('is-hex-prefixed');
    var stripHexPrefix = require('strip-hex-prefix');
    
    /**
     * Pads a `String` to have an even length
     * @param {String} value
     * @return {String} output
     */
    function padToEven(value) {
      var a = value; // eslint-disable-line
    
      if (typeof a !== 'string') {
        throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');
      }
    
      if (a.length % 2) {
        a = '0' + a;
      }
    
      return a;
    }
    
    /**
     * Converts a `Number` into a hex `String`
     * @param {Number} i
     * @return {String}
     */
    function intToHex(i) {
      var hex = i.toString(16); // eslint-disable-line
    
      return '0x' + hex;
    }
    
    /**
     * Converts an `Number` to a `Buffer`
     * @param {Number} i
     * @return {Buffer}
     */
    function intToBuffer(i) {
      var hex = intToHex(i);
    
      return new Buffer(padToEven(hex.slice(2)), 'hex');
    }
    
    /**
     * Get the binary size of a string
     * @param {String} str
     * @return {Number}
     */
    function getBinarySize(str) {
      if (typeof str !== 'string') {
        throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \'str\' to be type String, got \'' + typeof str + '\'.');
      }
    
      return Buffer.byteLength(str, 'utf8');
    }
    
    /**
     * Returns TRUE if the first specified array contains all elements
     * from the second one. FALSE otherwise.
     *
     * @param {array} superset
     * @param {array} subset
     *
     * @returns {boolean}
     */
    function arrayContainsArray(superset, subset, some) {
      if (Array.isArray(superset) !== true) {
        throw new Error('[ethjs-util] method arrayContainsArray requires input \'superset\' to be an array got type \'' + typeof superset + '\'');
      }
      if (Array.isArray(subset) !== true) {
        throw new Error('[ethjs-util] method arrayContainsArray requires input \'subset\' to be an array got type \'' + typeof subset + '\'');
      }
    
      return subset[Boolean(some) && 'some' || 'every'](function (value) {
        return superset.indexOf(value) >= 0;
      });
    }
    
    /**
     * Should be called to get utf8 from it's hex representation
     *
     * @method toUtf8
     * @param {String} string in hex
     * @returns {String} ascii string representation of hex value
     */
    function toUtf8(hex) {
      var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');
    
      return bufferValue.toString('utf8');
    }
    
    /**
     * Should be called to get ascii from it's hex representation
     *
     * @method toAscii
     * @param {String} string in hex
     * @returns {String} ascii string representation of hex value
     */
    function toAscii(hex) {
      var str = ''; // eslint-disable-line
      var i = 0,
          l = hex.length; // eslint-disable-line
    
      if (hex.substring(0, 2) === '0x') {
        i = 2;
      }
    
      for (; i < l; i += 2) {
        var code = parseInt(hex.substr(i, 2), 16);
        str += String.fromCharCode(code);
      }
    
      return str;
    }
    
    /**
     * Should be called to get hex representation (prefixed by 0x) of utf8 string
     *
     * @method fromUtf8
     * @param {String} string
     * @param {Number} optional padding
     * @returns {String} hex representation of input string
     */
    function fromUtf8(stringValue) {
      var str = new Buffer(stringValue, 'utf8');
    
      return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');
    }
    
    /**
     * Should be called to get hex representation (prefixed by 0x) of ascii string
     *
     * @method fromAscii
     * @param {String} string
     * @param {Number} optional padding
     * @returns {String} hex representation of input string
     */
    function fromAscii(stringValue) {
      var hex = ''; // eslint-disable-line
      for (var i = 0; i < stringValue.length; i++) {
        // eslint-disable-line
        var code = stringValue.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? '0' + n : n;
      }
    
      return '0x' + hex;
    }
    
    /**
     * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]
     *
     * @method getKeys get specific key from inner object array of objects
     * @param {String} params
     * @param {String} key
     * @param {Boolean} allowEmpty
     * @returns {Array} output just a simple array of output keys
     */
    function getKeys(params, key, allowEmpty) {
      if (!Array.isArray(params)) {
        throw new Error('[ethjs-util] method getKeys expecting type Array as \'params\' input, got \'' + typeof params + '\'');
      }
      if (typeof key !== 'string') {
        throw new Error('[ethjs-util] method getKeys expecting type String for input \'key\' got \'' + typeof key + '\'.');
      }
    
      var result = []; // eslint-disable-line
    
      for (var i = 0; i < params.length; i++) {
        // eslint-disable-line
        var value = params[i][key]; // eslint-disable-line
        if (allowEmpty && !value) {
          value = '';
        } else if (typeof value !== 'string') {
          throw new Error('invalid abi');
        }
        result.push(value);
      }
    
      return result;
    }
    
    /**
     * Is the string a hex string.
     *
     * @method check if string is hex string of specific length
     * @param {String} value
     * @param {Number} length
     * @returns {Boolean} output the string is a hex string
     */
    function isHexString(value, length) {
      if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
        return false;
      }
    
      if (length && value.length !== 2 + 2 * length) {
        return false;
      }
    
      return true;
    }
    
    module.exports = {
      arrayContainsArray: arrayContainsArray,
      intToBuffer: intToBuffer,
      getBinarySize: getBinarySize,
      isHexPrefixed: isHexPrefixed,
      stripHexPrefix: stripHexPrefix,
      padToEven: padToEven,
      intToHex: intToHex,
      fromAscii: fromAscii,
      fromUtf8: fromUtf8,
      toAscii: toAscii,
      toUtf8: toUtf8,
      getKeys: getKeys,
      isHexString: isHexString
    };
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"buffer":301,"is-hex-prefixed":185,"strip-hex-prefix":230}],170:[function(require,module,exports){
    'use strict'
    var Buffer = require('safe-buffer').Buffer
    var Transform = require('readable-stream').Transform
    var inherits = require('inherits')
    
    function throwIfNotStringOrBuffer (val, prefix) {
      if (!Buffer.isBuffer(val) && typeof val !== 'string') {
        throw new TypeError(prefix + ' must be a string or a buffer')
      }
    }
    
    function HashBase (blockSize) {
      Transform.call(this)
    
      this._block = Buffer.allocUnsafe(blockSize)
      this._blockSize = blockSize
      this._blockOffset = 0
      this._length = [0, 0, 0, 0]
    
      this._finalized = false
    }
    
    inherits(HashBase, Transform)
    
    HashBase.prototype._transform = function (chunk, encoding, callback) {
      var error = null
      try {
        this.update(chunk, encoding)
      } catch (err) {
        error = err
      }
    
      callback(error)
    }
    
    HashBase.prototype._flush = function (callback) {
      var error = null
      try {
        this.push(this.digest())
      } catch (err) {
        error = err
      }
    
      callback(error)
    }
    
    HashBase.prototype.update = function (data, encoding) {
      throwIfNotStringOrBuffer(data, 'Data')
      if (this._finalized) throw new Error('Digest already called')
      if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)
    
      // consume data
      var block = this._block
      var offset = 0
      while (this._blockOffset + data.length - offset >= this._blockSize) {
        for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
        this._update()
        this._blockOffset = 0
      }
      while (offset < data.length) block[this._blockOffset++] = data[offset++]
    
      // update length
      for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
        this._length[j] += carry
        carry = (this._length[j] / 0x0100000000) | 0
        if (carry > 0) this._length[j] -= 0x0100000000 * carry
      }
    
      return this
    }
    
    HashBase.prototype._update = function () {
      throw new Error('_update is not implemented')
    }
    
    HashBase.prototype.digest = function (encoding) {
      if (this._finalized) throw new Error('Digest already called')
      this._finalized = true
    
      var digest = this._digest()
      if (encoding !== undefined) digest = digest.toString(encoding)
    
      // reset state
      this._block.fill(0)
      this._blockOffset = 0
      for (var i = 0; i < 4; ++i) this._length[i] = 0
    
      return digest
    }
    
    HashBase.prototype._digest = function () {
      throw new Error('_digest is not implemented')
    }
    
    module.exports = HashBase
    
    },{"inherits":184,"readable-stream":212,"safe-buffer":216}],171:[function(require,module,exports){
    var hash = exports;
    
    hash.utils = require('./hash/utils');
    hash.common = require('./hash/common');
    hash.sha = require('./hash/sha');
    hash.ripemd = require('./hash/ripemd');
    hash.hmac = require('./hash/hmac');
    
    // Proxy hash functions to the main object
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
    
    },{"./hash/common":172,"./hash/hmac":173,"./hash/ripemd":174,"./hash/sha":175,"./hash/utils":182}],172:[function(require,module,exports){
    'use strict';
    
    var utils = require('./utils');
    var assert = require('minimalistic-assert');
    
    function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = 'big';
    
      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    exports.BlockHash = BlockHash;
    
    BlockHash.prototype.update = function update(msg, enc) {
      // Convert message to array, pad it, and join into 32bit blocks
      msg = utils.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;
    
      // Enough data, try updating
      if (this.pending.length >= this._delta8) {
        msg = this.pending;
    
        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0)
          this.pending = null;
    
        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32)
          this._update(msg, i, i + this._delta32);
      }
    
      return this;
    };
    
    BlockHash.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert(this.pending === null);
    
      return this._digest(enc);
    };
    
    BlockHash.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - ((len + this.padLength) % bytes);
      var res = new Array(k + this.padLength);
      res[0] = 0x80;
      for (var i = 1; i < k; i++)
        res[i] = 0;
    
      // Append length
      len <<= 3;
      if (this.endian === 'big') {
        for (var t = 8; t < this.padLength; t++)
          res[i++] = 0;
    
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = len & 0xff;
      } else {
        res[i++] = len & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
    
        for (t = 8; t < this.padLength; t++)
          res[i++] = 0;
      }
    
      return res;
    };
    
    },{"./utils":182,"minimalistic-assert":195}],173:[function(require,module,exports){
    'use strict';
    
    var utils = require('./utils');
    var assert = require('minimalistic-assert');
    
    function Hmac(hash, key, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;
    
      this._init(utils.toArray(key, enc));
    }
    module.exports = Hmac;
    
    Hmac.prototype._init = function init(key) {
      // Shorten key, if needed
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      assert(key.length <= this.blockSize);
    
      // Add padding to key
      for (var i = key.length; i < this.blockSize; i++)
        key.push(0);
    
      for (i = 0; i < key.length; i++)
        key[i] ^= 0x36;
      this.inner = new this.Hash().update(key);
    
      // 0x36 ^ 0x5c = 0x6a
      for (i = 0; i < key.length; i++)
        key[i] ^= 0x6a;
      this.outer = new this.Hash().update(key);
    };
    
    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };
    
    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };
    
    },{"./utils":182,"minimalistic-assert":195}],174:[function(require,module,exports){
    'use strict';
    
    var utils = require('./utils');
    var common = require('./common');
    
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_3 = utils.sum32_3;
    var sum32_4 = utils.sum32_4;
    var BlockHash = common.BlockHash;
    
    function RIPEMD160() {
      if (!(this instanceof RIPEMD160))
        return new RIPEMD160();
    
      BlockHash.call(this);
    
      this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
      this.endian = 'little';
    }
    utils.inherits(RIPEMD160, BlockHash);
    exports.ripemd160 = RIPEMD160;
    
    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;
    
    RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(
          rotl32(
            sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
            s[j]),
          E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(
          rotl32(
            sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
            sh[j]),
          Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };
    
    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils.toHex32(this.h, 'little');
      else
        return utils.split32(this.h, 'little');
    };
    
    function f(j, x, y, z) {
      if (j <= 15)
        return x ^ y ^ z;
      else if (j <= 31)
        return (x & y) | ((~x) & z);
      else if (j <= 47)
        return (x | (~y)) ^ z;
      else if (j <= 63)
        return (x & z) | (y & (~z));
      else
        return x ^ (y | (~z));
    }
    
    function K(j) {
      if (j <= 15)
        return 0x00000000;
      else if (j <= 31)
        return 0x5a827999;
      else if (j <= 47)
        return 0x6ed9eba1;
      else if (j <= 63)
        return 0x8f1bbcdc;
      else
        return 0xa953fd4e;
    }
    
    function Kh(j) {
      if (j <= 15)
        return 0x50a28be6;
      else if (j <= 31)
        return 0x5c4dd124;
      else if (j <= 47)
        return 0x6d703ef3;
      else if (j <= 63)
        return 0x7a6d76e9;
      else
        return 0x00000000;
    }
    
    var r = [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
      3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
      1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
      4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
    ];
    
    var rh = [
      5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
      6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
      15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
      8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
      12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
    ];
    
    var s = [
      11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
      7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
      11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
      11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
      9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
    ];
    
    var sh = [
      8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
      9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
      9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
      15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
      8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
    ];
    
    },{"./common":172,"./utils":182}],175:[function(require,module,exports){
    'use strict';
    
    exports.sha1 = require('./sha/1');
    exports.sha224 = require('./sha/224');
    exports.sha256 = require('./sha/256');
    exports.sha384 = require('./sha/384');
    exports.sha512 = require('./sha/512');
    
    },{"./sha/1":176,"./sha/224":177,"./sha/256":178,"./sha/384":179,"./sha/512":180}],176:[function(require,module,exports){
    'use strict';
    
    var utils = require('../utils');
    var common = require('../common');
    var shaCommon = require('./common');
    
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_5 = utils.sum32_5;
    var ft_1 = shaCommon.ft_1;
    var BlockHash = common.BlockHash;
    
    var sha1_K = [
      0x5A827999, 0x6ED9EBA1,
      0x8F1BBCDC, 0xCA62C1D6
    ];
    
    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();
    
      BlockHash.call(this);
      this.h = [
        0x67452301, 0xefcdab89, 0x98badcfe,
        0x10325476, 0xc3d2e1f0 ];
      this.W = new Array(80);
    }
    
    utils.inherits(SHA1, BlockHash);
    module.exports = SHA1;
    
    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;
    
    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;
    
      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
    
      for(; i < W.length; i++)
        W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
    
      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
      }
    
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
    };
    
    SHA1.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils.toHex32(this.h, 'big');
      else
        return utils.split32(this.h, 'big');
    };
    
    },{"../common":172,"../utils":182,"./common":181}],177:[function(require,module,exports){
    'use strict';
    
    var utils = require('../utils');
    var SHA256 = require('./256');
    
    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();
    
      SHA256.call(this);
      this.h = [
        0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
        0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
    }
    utils.inherits(SHA224, SHA256);
    module.exports = SHA224;
    
    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;
    
    SHA224.prototype._digest = function digest(enc) {
      // Just truncate output
      if (enc === 'hex')
        return utils.toHex32(this.h.slice(0, 7), 'big');
      else
        return utils.split32(this.h.slice(0, 7), 'big');
    };
    
    
    },{"../utils":182,"./256":178}],178:[function(require,module,exports){
    'use strict';
    
    var utils = require('../utils');
    var common = require('../common');
    var shaCommon = require('./common');
    var assert = require('minimalistic-assert');
    
    var sum32 = utils.sum32;
    var sum32_4 = utils.sum32_4;
    var sum32_5 = utils.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;
    
    var BlockHash = common.BlockHash;
    
    var sha256_K = [
      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
      0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
      0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
      0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
      0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
      0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
      0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
      0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
      0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
      0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
      0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
      0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
      0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
      0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
      0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
      0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ];
    
    function SHA256() {
      if (!(this instanceof SHA256))
        return new SHA256();
    
      BlockHash.call(this);
      this.h = [
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils.inherits(SHA256, BlockHash);
    module.exports = SHA256;
    
    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;
    
    SHA256.prototype._update = function _update(msg, start) {
      var W = this.W;
    
      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
    
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];
    
      assert(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
      }
    
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
      this.h[5] = sum32(this.h[5], f);
      this.h[6] = sum32(this.h[6], g);
      this.h[7] = sum32(this.h[7], h);
    };
    
    SHA256.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils.toHex32(this.h, 'big');
      else
        return utils.split32(this.h, 'big');
    };
    
    },{"../common":172,"../utils":182,"./common":181,"minimalistic-assert":195}],179:[function(require,module,exports){
    'use strict';
    
    var utils = require('../utils');
    
    var SHA512 = require('./512');
    
    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();
    
      SHA512.call(this);
      this.h = [
        0xcbbb9d5d, 0xc1059ed8,
        0x629a292a, 0x367cd507,
        0x9159015a, 0x3070dd17,
        0x152fecd8, 0xf70e5939,
        0x67332667, 0xffc00b31,
        0x8eb44a87, 0x68581511,
        0xdb0c2e0d, 0x64f98fa7,
        0x47b5481d, 0xbefa4fa4 ];
    }
    utils.inherits(SHA384, SHA512);
    module.exports = SHA384;
    
    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;
    
    SHA384.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils.toHex32(this.h.slice(0, 12), 'big');
      else
        return utils.split32(this.h.slice(0, 12), 'big');
    };
    
    },{"../utils":182,"./512":180}],180:[function(require,module,exports){
    'use strict';
    
    var utils = require('../utils');
    var common = require('../common');
    var assert = require('minimalistic-assert');
    
    var rotr64_hi = utils.rotr64_hi;
    var rotr64_lo = utils.rotr64_lo;
    var shr64_hi = utils.shr64_hi;
    var shr64_lo = utils.shr64_lo;
    var sum64 = utils.sum64;
    var sum64_hi = utils.sum64_hi;
    var sum64_lo = utils.sum64_lo;
    var sum64_4_hi = utils.sum64_4_hi;
    var sum64_4_lo = utils.sum64_4_lo;
    var sum64_5_hi = utils.sum64_5_hi;
    var sum64_5_lo = utils.sum64_5_lo;
    
    var BlockHash = common.BlockHash;
    
    var sha512_K = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ];
    
    function SHA512() {
      if (!(this instanceof SHA512))
        return new SHA512();
    
      BlockHash.call(this);
      this.h = [
        0x6a09e667, 0xf3bcc908,
        0xbb67ae85, 0x84caa73b,
        0x3c6ef372, 0xfe94f82b,
        0xa54ff53a, 0x5f1d36f1,
        0x510e527f, 0xade682d1,
        0x9b05688c, 0x2b3e6c1f,
        0x1f83d9ab, 0xfb41bd6b,
        0x5be0cd19, 0x137e2179 ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils.inherits(SHA512, BlockHash);
    module.exports = SHA512;
    
    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;
    
    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;
    
      // 32 x 32bit words
      for (var i = 0; i < 32; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];  // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];  // i - 16
        var c3_lo = W[i - 31];
    
        W[i] = sum64_4_hi(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
      }
    };
    
    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);
    
      var W = this.W;
    
      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];
    
      assert(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
    
        var T1_hi = sum64_5_hi(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);
    
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
    
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
    
        hh = gh;
        hl = gl;
    
        gh = fh;
        gl = fl;
    
        fh = eh;
        fl = el;
    
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
    
        dh = ch;
        dl = cl;
    
        ch = bh;
        cl = bl;
    
        bh = ah;
        bl = al;
    
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }
    
      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };
    
    SHA512.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils.toHex32(this.h, 'big');
      else
        return utils.split32(this.h, 'big');
    };
    
    function ch64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ ((~xh) & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ ((~xl) & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function maj64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);  // 34
      var c2_hi = rotr64_hi(xl, xh, 7);  // 39
    
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);  // 34
      var c2_lo = rotr64_lo(xl, xh, 7);  // 39
    
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);  // 41
    
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);  // 41
    
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);
    
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);
    
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);  // 61
      var c2_hi = shr64_hi(xh, xl, 6);
    
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);  // 61
      var c2_lo = shr64_lo(xh, xl, 6);
    
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }
    
    },{"../common":172,"../utils":182,"minimalistic-assert":195}],181:[function(require,module,exports){
    'use strict';
    
    var utils = require('../utils');
    var rotr32 = utils.rotr32;
    
    function ft_1(s, x, y, z) {
      if (s === 0)
        return ch32(x, y, z);
      if (s === 1 || s === 3)
        return p32(x, y, z);
      if (s === 2)
        return maj32(x, y, z);
    }
    exports.ft_1 = ft_1;
    
    function ch32(x, y, z) {
      return (x & y) ^ ((~x) & z);
    }
    exports.ch32 = ch32;
    
    function maj32(x, y, z) {
      return (x & y) ^ (x & z) ^ (y & z);
    }
    exports.maj32 = maj32;
    
    function p32(x, y, z) {
      return x ^ y ^ z;
    }
    exports.p32 = p32;
    
    function s0_256(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }
    exports.s0_256 = s0_256;
    
    function s1_256(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }
    exports.s1_256 = s1_256;
    
    function g0_256(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
    }
    exports.g0_256 = g0_256;
    
    function g1_256(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
    }
    exports.g1_256 = g1_256;
    
    },{"../utils":182}],182:[function(require,module,exports){
    'use strict';
    
    var assert = require('minimalistic-assert');
    var inherits = require('inherits');
    
    exports.inherits = inherits;
    
    function isSurrogatePair(msg, i) {
      if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
        return false;
      }
      if (i < 0 || i + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
    }
    
    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === 'string') {
        if (!enc) {
          // Inspired by stringToUtf8ByteArray() in closure-library by Google
          // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
          // Apache License 2.0
          // https://github.com/google/closure-library/blob/master/LICENSE
          var p = 0;
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = (c >> 6) | 192;
              res[p++] = (c & 63) | 128;
            } else if (isSurrogatePair(msg, i)) {
              c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
              res[p++] = (c >> 18) | 240;
              res[p++] = ((c >> 12) & 63) | 128;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            } else {
              res[p++] = (c >> 12) | 224;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            }
          }
        } else if (enc === 'hex') {
          msg = msg.replace(/[^a-z0-9]+/ig, '');
          if (msg.length % 2 !== 0)
            msg = '0' + msg;
          for (i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
      }
      return res;
    }
    exports.toArray = toArray;
    
    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    exports.toHex = toHex;
    
    function htonl(w) {
      var res = (w >>> 24) |
                ((w >>> 8) & 0xff00) |
                ((w << 8) & 0xff0000) |
                ((w & 0xff) << 24);
      return res >>> 0;
    }
    exports.htonl = htonl;
    
    function toHex32(msg, endian) {
      var res = '';
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === 'little')
          w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    exports.toHex32 = toHex32;
    
    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    exports.zero2 = zero2;
    
    function zero8(word) {
      if (word.length === 7)
        return '0' + word;
      else if (word.length === 6)
        return '00' + word;
      else if (word.length === 5)
        return '000' + word;
      else if (word.length === 4)
        return '0000' + word;
      else if (word.length === 3)
        return '00000' + word;
      else if (word.length === 2)
        return '000000' + word;
      else if (word.length === 1)
        return '0000000' + word;
      else
        return word;
    }
    exports.zero8 = zero8;
    
    function join32(msg, start, end, endian) {
      var len = end - start;
      assert(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === 'big')
          w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
        else
          w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    exports.join32 = join32;
    
    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === 'big') {
          res[k] = m >>> 24;
          res[k + 1] = (m >>> 16) & 0xff;
          res[k + 2] = (m >>> 8) & 0xff;
          res[k + 3] = m & 0xff;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = (m >>> 16) & 0xff;
          res[k + 1] = (m >>> 8) & 0xff;
          res[k] = m & 0xff;
        }
      }
      return res;
    }
    exports.split32 = split32;
    
    function rotr32(w, b) {
      return (w >>> b) | (w << (32 - b));
    }
    exports.rotr32 = rotr32;
    
    function rotl32(w, b) {
      return (w << b) | (w >>> (32 - b));
    }
    exports.rotl32 = rotl32;
    
    function sum32(a, b) {
      return (a + b) >>> 0;
    }
    exports.sum32 = sum32;
    
    function sum32_3(a, b, c) {
      return (a + b + c) >>> 0;
    }
    exports.sum32_3 = sum32_3;
    
    function sum32_4(a, b, c, d) {
      return (a + b + c + d) >>> 0;
    }
    exports.sum32_4 = sum32_4;
    
    function sum32_5(a, b, c, d, e) {
      return (a + b + c + d + e) >>> 0;
    }
    exports.sum32_5 = sum32_5;
    
    function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];
    
      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    exports.sum64 = sum64;
    
    function sum64_hi(ah, al, bh, bl) {
      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    exports.sum64_hi = sum64_hi;
    
    function sum64_lo(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    exports.sum64_lo = sum64_lo;
    
    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;
    
      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    exports.sum64_4_hi = sum64_4_hi;
    
    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    exports.sum64_4_lo = sum64_4_lo;
    
    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = (lo + el) >>> 0;
      carry += lo < el ? 1 : 0;
    
      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    exports.sum64_5_hi = sum64_5_hi;
    
    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;
    
      return lo >>> 0;
    }
    exports.sum64_5_lo = sum64_5_lo;
    
    function rotr64_hi(ah, al, num) {
      var r = (al << (32 - num)) | (ah >>> num);
      return r >>> 0;
    }
    exports.rotr64_hi = rotr64_hi;
    
    function rotr64_lo(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    exports.rotr64_lo = rotr64_lo;
    
    function shr64_hi(ah, al, num) {
      return ah >>> num;
    }
    exports.shr64_hi = shr64_hi;
    
    function shr64_lo(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    exports.shr64_lo = shr64_lo;
    
    },{"inherits":184,"minimalistic-assert":195}],183:[function(require,module,exports){
    'use strict';
    
    var hash = require('hash.js');
    var utils = require('minimalistic-crypto-utils');
    var assert = require('minimalistic-assert');
    
    function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG))
        return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;
    
      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    
      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;
    
      var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
      var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
      var pers = utils.toArray(options.pers, options.persEnc || 'hex');
      assert(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
      this._init(entropy, nonce, pers);
    }
    module.exports = HmacDRBG;
    
    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);
    
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0x00;
        this.V[i] = 0x01;
      }
    
      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 0x1000000000000;  // 2^48
    };
    
    HmacDRBG.prototype._hmac = function hmac() {
      return new hash.hmac(this.hash, this.K);
    };
    
    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac()
                     .update(this.V)
                     .update([ 0x00 ]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;
    
      this.K = this._hmac()
                   .update(this.V)
                   .update([ 0x01 ])
                   .update(seed)
                   .digest();
      this.V = this._hmac().update(this.V).digest();
    };
    
    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      // Optional entropy enc
      if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }
    
      entropy = utils.toArray(entropy, entropyEnc);
      add = utils.toArray(add, addEnc);
    
      assert(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    
      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };
    
    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error('Reseed is required');
    
      // Optional encoding
      if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
      }
    
      // Optional additional data
      if (add) {
        add = utils.toArray(add, addEnc || 'hex');
        this._update(add);
      }
    
      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }
    
      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils.encode(res, enc);
    };
    
    },{"hash.js":171,"minimalistic-assert":195,"minimalistic-crypto-utils":196}],184:[function(require,module,exports){
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          })
        }
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor
          var TempCtor = function () {}
          TempCtor.prototype = superCtor.prototype
          ctor.prototype = new TempCtor()
          ctor.prototype.constructor = ctor
        }
      }
    }
    
    },{}],185:[function(require,module,exports){
    /**
     * Returns a `Boolean` on whether or not the a `String` starts with '0x'
     * @param {String} str the string input value
     * @return {Boolean} a boolean if it is or is not hex prefixed
     * @throws if the str input is not a string
     */
    module.exports = function isHexPrefixed(str) {
      if (typeof str !== 'string') {
        throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + (typeof str) + ", while checking isHexPrefixed.");
      }
    
      return str.slice(0, 2) === '0x';
    }
    
    },{}],186:[function(require,module,exports){
    (function (process,global){(function (){
    /**
     * [js-sha3]{@link https://github.com/emn178/js-sha3}
     *
     * @version 0.8.0
     * @author Chen, Yi-Cyuan [emn178@gmail.com]
     * @copyright Chen, Yi-Cyuan 2015-2018
     * @license MIT
     */
    /*jslint bitwise: true */
    (function () {
      'use strict';
    
      var INPUT_ERROR = 'input is invalid type';
      var FINALIZE_ERROR = 'finalize already called';
      var WINDOW = typeof window === 'object';
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === 'object';
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
      if (NODE_JS) {
        root = global;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;
      var AMD = typeof define === 'function' && define.amd;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
      var HEX_CHARS = '0123456789abcdef'.split('');
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
        0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
        2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
        2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
        2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
      var CSHAKE_BYTEPAD = {
        '128': 168,
        '256': 136
      };
    
      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function (obj) {
          return Object.prototype.toString.call(obj) === '[object Array]';
        };
      }
    
      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function (obj) {
          return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
    
      var createOutputMethod = function (bits, padding, outputType) {
        return function (message) {
          return new Keccak(bits, padding, bits).update(message)[outputType]();
        };
      };
    
      var createShakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits) {
          return new Keccak(bits, padding, outputBits).update(message)[outputType]();
        };
      };
    
      var createCshakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits, n, s) {
          return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
        };
      };
    
      var createKmacOutputMethod = function (bits, padding, outputType) {
        return function (key, message, outputBits, s) {
          return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
        };
      };
    
      var createOutputMethods = function (method, createMethod, bits, padding) {
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createMethod(bits, padding, type);
        }
        return method;
      };
    
      var createMethod = function (bits, padding) {
        var method = createOutputMethod(bits, padding, 'hex');
        method.create = function () {
          return new Keccak(bits, padding, bits);
        };
        method.update = function (message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits, padding);
      };
    
      var createShakeMethod = function (bits, padding) {
        var method = createShakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits) {
          return new Keccak(bits, padding, outputBits);
        };
        method.update = function (message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits, padding);
      };
    
      var createCshakeMethod = function (bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createCshakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits, n, s) {
          if (!n && !s) {
            return methods['shake' + bits].create(outputBits);
          } else {
            return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
          }
        };
        method.update = function (message, outputBits, n, s) {
          return method.create(outputBits, n, s).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
      };
    
      var createKmacMethod = function (bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createKmacOutputMethod(bits, padding, 'hex');
        method.create = function (key, outputBits, s) {
          return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
        };
        method.update = function (key, message, outputBits, s) {
          return method.create(key, outputBits, s).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits, padding);
      };
    
      var algorithms = [
        { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
        { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
        { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];
    
      var methods = {}, methodNames = [];
    
      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name + '_' + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
          if (algorithm.name !== 'sha3') {
            var newMethodName = algorithm.name + bits[j];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }
    
      function Keccak(bits, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = (1600 - (bits << 1)) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
    
        for (var i = 0; i < 50; ++i) {
          this.s[i] = 0;
        }
      }
    
      Keccak.prototype.update = function (message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== 'string') {
          if (type === 'object') {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
          blockCount = this.blockCount, index = 0, s = this.s, i, code;
    
        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i = 1; i < blockCount + 1; ++i) {
              blocks[i] = 0;
            }
          }
          if (notString) {
            for (i = this.start; index < length && i < byteCount; ++index) {
              blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
            }
          } else {
            for (i = this.start; index < length && i < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 0x80) {
                blocks[i >> 2] |= code << SHIFT[i++ & 3];
              } else if (code < 0x800) {
                blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else if (code < 0xd800 || code >= 0xe000) {
                blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else {
                code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              }
            }
          }
          this.lastByteIndex = i;
          if (i >= byteCount) {
            this.start = i - byteCount;
            this.block = blocks[blockCount];
            for (i = 0; i < blockCount; ++i) {
              s[i] ^= blocks[i];
            }
            f(s);
            this.reset = true;
          } else {
            this.start = i;
          }
        }
        return this;
      };
    
      Keccak.prototype.encode = function (x, right) {
        var o = x & 255, n = 1;
        var bytes = [o];
        x = x >> 8;
        o = x & 255;
        while (o > 0) {
          bytes.unshift(o);
          x = x >> 8;
          o = x & 255;
          ++n;
        }
        if (right) {
          bytes.push(n);
        } else {
          bytes.unshift(n);
        }
        this.update(bytes);
        return bytes.length;
      };
    
      Keccak.prototype.encodeString = function (str) {
        var notString, type = typeof str;
        if (type !== 'string') {
          if (type === 'object') {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) {
          bytes = length;
        } else {
          for (var i = 0; i < str.length; ++i) {
            var code = str.charCodeAt(i);
            if (code < 0x80) {
              bytes += 1;
            } else if (code < 0x800) {
              bytes += 2;
            } else if (code < 0xd800 || code >= 0xe000) {
              bytes += 3;
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
      };
    
      Keccak.prototype.bytepad = function (strs, w) {
        var bytes = this.encode(w);
        for (var i = 0; i < strs.length; ++i) {
          bytes += this.encodeString(strs[i]);
        }
        var paddingBytes = w - bytes % w;
        var zeros = [];
        zeros.length = paddingBytes;
        this.update(zeros);
        return this;
      };
    
      Keccak.prototype.finalize = function () {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i >> 2] |= this.padding[i & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        blocks[blockCount - 1] |= 0x80000000;
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
      };
    
      Keccak.prototype.toString = Keccak.prototype.hex = function () {
        this.finalize();
    
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var hex = '', block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            block = s[i];
            hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
              HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
              HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
              HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
          }
          if (j % blockCount === 0) {
            f(s);
            i = 0;
          }
        }
        if (extraBytes) {
          block = s[i];
          hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
          if (extraBytes > 1) {
            hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
          }
        }
        return hex;
      };
    
      Keccak.prototype.arrayBuffer = function () {
        this.finalize();
    
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer((outputBlocks + 1) << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            array[j] = s[i];
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          array[i] = s[i];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };
    
      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
    
      Keccak.prototype.digest = Keccak.prototype.array = function () {
        this.finalize();
    
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var array = [], offset, block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            offset = j << 2;
            block = s[i];
            array[offset] = block & 0xFF;
            array[offset + 1] = (block >> 8) & 0xFF;
            array[offset + 2] = (block >> 16) & 0xFF;
            array[offset + 3] = (block >> 24) & 0xFF;
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          offset = j << 2;
          block = s[i];
          array[offset] = block & 0xFF;
          if (extraBytes > 1) {
            array[offset + 1] = (block >> 8) & 0xFF;
          }
          if (extraBytes > 2) {
            array[offset + 2] = (block >> 16) & 0xFF;
          }
        }
        return array;
      };
    
      function Kmac(bits, padding, outputBits) {
        Keccak.call(this, bits, padding, outputBits);
      }
    
      Kmac.prototype = new Keccak();
    
      Kmac.prototype.finalize = function () {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };
    
      var f = function (s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
          b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
          b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
          b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
    
          h = c8 ^ ((c2 << 1) | (c3 >>> 31));
          l = c9 ^ ((c3 << 1) | (c2 >>> 31));
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ ((c4 << 1) | (c5 >>> 31));
          l = c1 ^ ((c5 << 1) | (c4 >>> 31));
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ ((c6 << 1) | (c7 >>> 31));
          l = c3 ^ ((c7 << 1) | (c6 >>> 31));
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ ((c8 << 1) | (c9 >>> 31));
          l = c5 ^ ((c9 << 1) | (c8 >>> 31));
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ ((c0 << 1) | (c1 >>> 31));
          l = c7 ^ ((c1 << 1) | (c0 >>> 31));
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;
    
          b0 = s[0];
          b1 = s[1];
          b32 = (s[11] << 4) | (s[10] >>> 28);
          b33 = (s[10] << 4) | (s[11] >>> 28);
          b14 = (s[20] << 3) | (s[21] >>> 29);
          b15 = (s[21] << 3) | (s[20] >>> 29);
          b46 = (s[31] << 9) | (s[30] >>> 23);
          b47 = (s[30] << 9) | (s[31] >>> 23);
          b28 = (s[40] << 18) | (s[41] >>> 14);
          b29 = (s[41] << 18) | (s[40] >>> 14);
          b20 = (s[2] << 1) | (s[3] >>> 31);
          b21 = (s[3] << 1) | (s[2] >>> 31);
          b2 = (s[13] << 12) | (s[12] >>> 20);
          b3 = (s[12] << 12) | (s[13] >>> 20);
          b34 = (s[22] << 10) | (s[23] >>> 22);
          b35 = (s[23] << 10) | (s[22] >>> 22);
          b16 = (s[33] << 13) | (s[32] >>> 19);
          b17 = (s[32] << 13) | (s[33] >>> 19);
          b48 = (s[42] << 2) | (s[43] >>> 30);
          b49 = (s[43] << 2) | (s[42] >>> 30);
          b40 = (s[5] << 30) | (s[4] >>> 2);
          b41 = (s[4] << 30) | (s[5] >>> 2);
          b22 = (s[14] << 6) | (s[15] >>> 26);
          b23 = (s[15] << 6) | (s[14] >>> 26);
          b4 = (s[25] << 11) | (s[24] >>> 21);
          b5 = (s[24] << 11) | (s[25] >>> 21);
          b36 = (s[34] << 15) | (s[35] >>> 17);
          b37 = (s[35] << 15) | (s[34] >>> 17);
          b18 = (s[45] << 29) | (s[44] >>> 3);
          b19 = (s[44] << 29) | (s[45] >>> 3);
          b10 = (s[6] << 28) | (s[7] >>> 4);
          b11 = (s[7] << 28) | (s[6] >>> 4);
          b42 = (s[17] << 23) | (s[16] >>> 9);
          b43 = (s[16] << 23) | (s[17] >>> 9);
          b24 = (s[26] << 25) | (s[27] >>> 7);
          b25 = (s[27] << 25) | (s[26] >>> 7);
          b6 = (s[36] << 21) | (s[37] >>> 11);
          b7 = (s[37] << 21) | (s[36] >>> 11);
          b38 = (s[47] << 24) | (s[46] >>> 8);
          b39 = (s[46] << 24) | (s[47] >>> 8);
          b30 = (s[8] << 27) | (s[9] >>> 5);
          b31 = (s[9] << 27) | (s[8] >>> 5);
          b12 = (s[18] << 20) | (s[19] >>> 12);
          b13 = (s[19] << 20) | (s[18] >>> 12);
          b44 = (s[29] << 7) | (s[28] >>> 25);
          b45 = (s[28] << 7) | (s[29] >>> 25);
          b26 = (s[38] << 8) | (s[39] >>> 24);
          b27 = (s[39] << 8) | (s[38] >>> 24);
          b8 = (s[48] << 14) | (s[49] >>> 18);
          b9 = (s[49] << 14) | (s[48] >>> 18);
    
          s[0] = b0 ^ (~b2 & b4);
          s[1] = b1 ^ (~b3 & b5);
          s[10] = b10 ^ (~b12 & b14);
          s[11] = b11 ^ (~b13 & b15);
          s[20] = b20 ^ (~b22 & b24);
          s[21] = b21 ^ (~b23 & b25);
          s[30] = b30 ^ (~b32 & b34);
          s[31] = b31 ^ (~b33 & b35);
          s[40] = b40 ^ (~b42 & b44);
          s[41] = b41 ^ (~b43 & b45);
          s[2] = b2 ^ (~b4 & b6);
          s[3] = b3 ^ (~b5 & b7);
          s[12] = b12 ^ (~b14 & b16);
          s[13] = b13 ^ (~b15 & b17);
          s[22] = b22 ^ (~b24 & b26);
          s[23] = b23 ^ (~b25 & b27);
          s[32] = b32 ^ (~b34 & b36);
          s[33] = b33 ^ (~b35 & b37);
          s[42] = b42 ^ (~b44 & b46);
          s[43] = b43 ^ (~b45 & b47);
          s[4] = b4 ^ (~b6 & b8);
          s[5] = b5 ^ (~b7 & b9);
          s[14] = b14 ^ (~b16 & b18);
          s[15] = b15 ^ (~b17 & b19);
          s[24] = b24 ^ (~b26 & b28);
          s[25] = b25 ^ (~b27 & b29);
          s[34] = b34 ^ (~b36 & b38);
          s[35] = b35 ^ (~b37 & b39);
          s[44] = b44 ^ (~b46 & b48);
          s[45] = b45 ^ (~b47 & b49);
          s[6] = b6 ^ (~b8 & b0);
          s[7] = b7 ^ (~b9 & b1);
          s[16] = b16 ^ (~b18 & b10);
          s[17] = b17 ^ (~b19 & b11);
          s[26] = b26 ^ (~b28 & b20);
          s[27] = b27 ^ (~b29 & b21);
          s[36] = b36 ^ (~b38 & b30);
          s[37] = b37 ^ (~b39 & b31);
          s[46] = b46 ^ (~b48 & b40);
          s[47] = b47 ^ (~b49 & b41);
          s[8] = b8 ^ (~b0 & b2);
          s[9] = b9 ^ (~b1 & b3);
          s[18] = b18 ^ (~b10 & b12);
          s[19] = b19 ^ (~b11 & b13);
          s[28] = b28 ^ (~b20 & b22);
          s[29] = b29 ^ (~b21 & b23);
          s[38] = b38 ^ (~b30 & b32);
          s[39] = b39 ^ (~b31 & b33);
          s[48] = b48 ^ (~b40 & b42);
          s[49] = b49 ^ (~b41 & b43);
    
          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      };
    
      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
        if (AMD) {
          define(function () {
            return methods;
          });
        }
      }
    })();
    
    }).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"_process":388}],187:[function(require,module,exports){
    (function (Buffer){(function (){
    
    var navigator = {};
    navigator.userAgent = false;
    
    var window = {};
    /*
     * jsrsasign(all) 10.5.1 (2021-12-01) (c) 2010-2021 Kenji Urushima | kjur.github.io/jsrsasign/license
     */
    
    /*! CryptoJS v3.1.2 core-fix.js
     * code.google.com/p/crypto-js
     * (c) 2009-2013 by Jeff Mott. All rights reserved.
     * code.google.com/p/crypto-js/wiki/License
     * THIS IS FIX of 'core.js' to fix Hmac issue.
     * https://code.google.com/p/crypto-js/issues/detail?id=84
     * https://crypto-js.googlecode.com/svn-history/r667/branches/3.x/src/core.js
     */
    var CryptoJS=CryptoJS||(function(e,g){var a={};var b=a.lib={};var j=b.Base=(function(){function n(){}return{extend:function(p){n.prototype=this;var o=new n();if(p){o.mixIn(p)}if(!o.hasOwnProperty("init")){o.init=function(){o.$super.init.apply(this,arguments)}}o.init.prototype=o;o.$super=this;return o},create:function(){var o=this.extend();o.init.apply(o,arguments);return o},init:function(){},mixIn:function(p){for(var o in p){if(p.hasOwnProperty(o)){this[o]=p[o]}}if(p.hasOwnProperty("toString")){this.toString=p.toString}},clone:function(){return this.init.prototype.extend(this)}}}());var l=b.WordArray=j.extend({init:function(o,n){o=this.words=o||[];if(n!=g){this.sigBytes=n}else{this.sigBytes=o.length*4}},toString:function(n){return(n||h).stringify(this)},concat:function(t){var q=this.words;var p=t.words;var n=this.sigBytes;var s=t.sigBytes;this.clamp();if(n%4){for(var r=0;r<s;r++){var o=(p[r>>>2]>>>(24-(r%4)*8))&255;q[(n+r)>>>2]|=o<<(24-((n+r)%4)*8)}}else{for(var r=0;r<s;r+=4){q[(n+r)>>>2]=p[r>>>2]}}this.sigBytes+=s;return this},clamp:function(){var o=this.words;var n=this.sigBytes;o[n>>>2]&=4294967295<<(32-(n%4)*8);o.length=e.ceil(n/4)},clone:function(){var n=j.clone.call(this);n.words=this.words.slice(0);return n},random:function(p){var o=[];for(var n=0;n<p;n+=4){o.push((e.random()*4294967296)|0)}return new l.init(o,p)}});var m=a.enc={};var h=m.Hex={stringify:function(p){var r=p.words;var o=p.sigBytes;var q=[];for(var n=0;n<o;n++){var s=(r[n>>>2]>>>(24-(n%4)*8))&255;q.push((s>>>4).toString(16));q.push((s&15).toString(16))}return q.join("")},parse:function(p){var n=p.length;var q=[];for(var o=0;o<n;o+=2){q[o>>>3]|=parseInt(p.substr(o,2),16)<<(24-(o%8)*4)}return new l.init(q,n/2)}};var d=m.Latin1={stringify:function(q){var r=q.words;var p=q.sigBytes;var n=[];for(var o=0;o<p;o++){var s=(r[o>>>2]>>>(24-(o%4)*8))&255;n.push(String.fromCharCode(s))}return n.join("")},parse:function(p){var n=p.length;var q=[];for(var o=0;o<n;o++){q[o>>>2]|=(p.charCodeAt(o)&255)<<(24-(o%4)*8)}return new l.init(q,n)}};var c=m.Utf8={stringify:function(n){try{return decodeURIComponent(escape(d.stringify(n)))}catch(o){throw new Error("Malformed UTF-8 data")}},parse:function(n){return d.parse(unescape(encodeURIComponent(n)))}};var i=b.BufferedBlockAlgorithm=j.extend({reset:function(){this._data=new l.init();this._nDataBytes=0},_append:function(n){if(typeof n=="string"){n=c.parse(n)}this._data.concat(n);this._nDataBytes+=n.sigBytes},_process:function(w){var q=this._data;var x=q.words;var n=q.sigBytes;var t=this.blockSize;var v=t*4;var u=n/v;if(w){u=e.ceil(u)}else{u=e.max((u|0)-this._minBufferSize,0)}var s=u*t;var r=e.min(s*4,n);if(s){for(var p=0;p<s;p+=t){this._doProcessBlock(x,p)}var o=x.splice(0,s);q.sigBytes-=r}return new l.init(o,r)},clone:function(){var n=j.clone.call(this);n._data=this._data.clone();return n},_minBufferSize:0});var f=b.Hasher=i.extend({cfg:j.extend(),init:function(n){this.cfg=this.cfg.extend(n);this.reset()},reset:function(){i.reset.call(this);this._doReset()},update:function(n){this._append(n);this._process();return this},finalize:function(n){if(n){this._append(n)}var o=this._doFinalize();return o},blockSize:512/32,_createHelper:function(n){return function(p,o){return new n.init(o).finalize(p)}},_createHmacHelper:function(n){return function(p,o){return new k.HMAC.init(n,o).finalize(p)}}});var k=a.algo={};return a}(Math));
    /*
    CryptoJS v3.1.2 x64-core-min.js
    code.google.com/p/crypto-js
    (c) 2009-2013 by Jeff Mott. All rights reserved.
    code.google.com/p/crypto-js/wiki/License
    */
    (function(g){var a=CryptoJS,f=a.lib,e=f.Base,h=f.WordArray,a=a.x64={};a.Word=e.extend({init:function(b,c){this.high=b;this.low=c}});a.WordArray=e.extend({init:function(b,c){b=this.words=b||[];this.sigBytes=c!=g?c:8*b.length},toX32:function(){for(var b=this.words,c=b.length,a=[],d=0;d<c;d++){var e=b[d];a.push(e.high);a.push(e.low)}return h.create(a,this.sigBytes)},clone:function(){for(var b=e.clone.call(this),c=b.words=this.words.slice(0),a=c.length,d=0;d<a;d++)c[d]=c[d].clone();return b}})})();
    
    /*
    CryptoJS v3.1.2 cipher-core.js
    code.google.com/p/crypto-js
    (c) 2009-2013 by Jeff Mott. All rights reserved.
    code.google.com/p/crypto-js/wiki/License
    */
    CryptoJS.lib.Cipher||function(u){var g=CryptoJS,f=g.lib,k=f.Base,l=f.WordArray,q=f.BufferedBlockAlgorithm,r=g.enc.Base64,v=g.algo.EvpKDF,n=f.Cipher=q.extend({cfg:k.extend(),createEncryptor:function(a,b){return this.create(this._ENC_XFORM_MODE,a,b)},createDecryptor:function(a,b){return this.create(this._DEC_XFORM_MODE,a,b)},init:function(a,b,c){this.cfg=this.cfg.extend(c);this._xformMode=a;this._key=b;this.reset()},reset:function(){q.reset.call(this);this._doReset()},process:function(a){this._append(a);
    return this._process()},finalize:function(a){a&&this._append(a);return this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(a){return{encrypt:function(b,c,d){return("string"==typeof c?s:j).encrypt(a,b,c,d)},decrypt:function(b,c,d){return("string"==typeof c?s:j).decrypt(a,b,c,d)}}}});f.StreamCipher=n.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var m=g.mode={},t=function(a,b,c){var d=this._iv;d?this._iv=u:d=this._prevBlock;for(var e=
    0;e<c;e++)a[b+e]^=d[e]},h=(f.BlockCipherMode=k.extend({createEncryptor:function(a,b){return this.Encryptor.create(a,b)},createDecryptor:function(a,b){return this.Decryptor.create(a,b)},init:function(a,b){this._cipher=a;this._iv=b}})).extend();h.Encryptor=h.extend({processBlock:function(a,b){var c=this._cipher,d=c.blockSize;t.call(this,a,b,d);c.encryptBlock(a,b);this._prevBlock=a.slice(b,b+d)}});h.Decryptor=h.extend({processBlock:function(a,b){var c=this._cipher,d=c.blockSize,e=a.slice(b,b+d);c.decryptBlock(a,
    b);t.call(this,a,b,d);this._prevBlock=e}});m=m.CBC=h;h=(g.pad={}).Pkcs7={pad:function(a,b){for(var c=4*b,c=c-a.sigBytes%c,d=c<<24|c<<16|c<<8|c,e=[],f=0;f<c;f+=4)e.push(d);c=l.create(e,c);a.concat(c)},unpad:function(a){a.sigBytes-=a.words[a.sigBytes-1>>>2]&255}};f.BlockCipher=n.extend({cfg:n.cfg.extend({mode:m,padding:h}),reset:function(){n.reset.call(this);var a=this.cfg,b=a.iv,a=a.mode;if(this._xformMode==this._ENC_XFORM_MODE)var c=a.createEncryptor;else c=a.createDecryptor,this._minBufferSize=1;
    this._mode=c.call(a,this,b&&b.words)},_doProcessBlock:function(a,b){this._mode.processBlock(a,b)},_doFinalize:function(){var a=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){a.pad(this._data,this.blockSize);var b=this._process(!0)}else b=this._process(!0),a.unpad(b);return b},blockSize:4});var p=f.CipherParams=k.extend({init:function(a){this.mixIn(a)},toString:function(a){return(a||this.formatter).stringify(this)}}),m=(g.format={}).OpenSSL={stringify:function(a){var b=a.ciphertext;a=a.salt;
    return(a?l.create([1398893684,1701076831]).concat(a).concat(b):b).toString(r)},parse:function(a){a=r.parse(a);var b=a.words;if(1398893684==b[0]&&1701076831==b[1]){var c=l.create(b.slice(2,4));b.splice(0,4);a.sigBytes-=16}return p.create({ciphertext:a,salt:c})}},j=f.SerializableCipher=k.extend({cfg:k.extend({format:m}),encrypt:function(a,b,c,d){d=this.cfg.extend(d);var e=a.createEncryptor(c,d);b=e.finalize(b);e=e.cfg;return p.create({ciphertext:b,key:c,iv:e.iv,algorithm:a,mode:e.mode,padding:e.padding,
    blockSize:a.blockSize,formatter:d.format})},decrypt:function(a,b,c,d){d=this.cfg.extend(d);b=this._parse(b,d.format);return a.createDecryptor(c,d).finalize(b.ciphertext)},_parse:function(a,b){return"string"==typeof a?b.parse(a,this):a}}),g=(g.kdf={}).OpenSSL={execute:function(a,b,c,d){d||(d=l.random(8));a=v.create({keySize:b+c}).compute(a,d);c=l.create(a.words.slice(b),4*c);a.sigBytes=4*b;return p.create({key:a,iv:c,salt:d})}},s=f.PasswordBasedCipher=j.extend({cfg:j.cfg.extend({kdf:g}),encrypt:function(a,
    b,c,d){d=this.cfg.extend(d);c=d.kdf.execute(c,a.keySize,a.ivSize);d.iv=c.iv;a=j.encrypt.call(this,a,b,c.key,d);a.mixIn(c);return a},decrypt:function(a,b,c,d){d=this.cfg.extend(d);b=this._parse(b,d.format);c=d.kdf.execute(c,a.keySize,a.ivSize,b.salt);d.iv=c.iv;return j.decrypt.call(this,a,b,c.key,d)}})}();
    
    /*
    CryptoJS v3.1.2 aes.js
    code.google.com/p/crypto-js
    (c) 2009-2013 by Jeff Mott. All rights reserved.
    code.google.com/p/crypto-js/wiki/License
    */
    (function(){for(var q=CryptoJS,x=q.lib.BlockCipher,r=q.algo,j=[],y=[],z=[],A=[],B=[],C=[],s=[],u=[],v=[],w=[],g=[],k=0;256>k;k++)g[k]=128>k?k<<1:k<<1^283;for(var n=0,l=0,k=0;256>k;k++){var f=l^l<<1^l<<2^l<<3^l<<4,f=f>>>8^f&255^99;j[n]=f;y[f]=n;var t=g[n],D=g[t],E=g[D],b=257*g[f]^16843008*f;z[n]=b<<24|b>>>8;A[n]=b<<16|b>>>16;B[n]=b<<8|b>>>24;C[n]=b;b=16843009*E^65537*D^257*t^16843008*n;s[f]=b<<24|b>>>8;u[f]=b<<16|b>>>16;v[f]=b<<8|b>>>24;w[f]=b;n?(n=t^g[g[g[E^t]]],l^=g[g[l]]):n=l=1}var F=[0,1,2,4,8,
    16,32,64,128,27,54],r=r.AES=x.extend({_doReset:function(){for(var c=this._key,e=c.words,a=c.sigBytes/4,c=4*((this._nRounds=a+6)+1),b=this._keySchedule=[],h=0;h<c;h++)if(h<a)b[h]=e[h];else{var d=b[h-1];h%a?6<a&&4==h%a&&(d=j[d>>>24]<<24|j[d>>>16&255]<<16|j[d>>>8&255]<<8|j[d&255]):(d=d<<8|d>>>24,d=j[d>>>24]<<24|j[d>>>16&255]<<16|j[d>>>8&255]<<8|j[d&255],d^=F[h/a|0]<<24);b[h]=b[h-a]^d}e=this._invKeySchedule=[];for(a=0;a<c;a++)h=c-a,d=a%4?b[h]:b[h-4],e[a]=4>a||4>=h?d:s[j[d>>>24]]^u[j[d>>>16&255]]^v[j[d>>>
    8&255]]^w[j[d&255]]},encryptBlock:function(c,e){this._doCryptBlock(c,e,this._keySchedule,z,A,B,C,j)},decryptBlock:function(c,e){var a=c[e+1];c[e+1]=c[e+3];c[e+3]=a;this._doCryptBlock(c,e,this._invKeySchedule,s,u,v,w,y);a=c[e+1];c[e+1]=c[e+3];c[e+3]=a},_doCryptBlock:function(c,e,a,b,h,d,j,m){for(var n=this._nRounds,f=c[e]^a[0],g=c[e+1]^a[1],k=c[e+2]^a[2],p=c[e+3]^a[3],l=4,t=1;t<n;t++)var q=b[f>>>24]^h[g>>>16&255]^d[k>>>8&255]^j[p&255]^a[l++],r=b[g>>>24]^h[k>>>16&255]^d[p>>>8&255]^j[f&255]^a[l++],s=
    b[k>>>24]^h[p>>>16&255]^d[f>>>8&255]^j[g&255]^a[l++],p=b[p>>>24]^h[f>>>16&255]^d[g>>>8&255]^j[k&255]^a[l++],f=q,g=r,k=s;q=(m[f>>>24]<<24|m[g>>>16&255]<<16|m[k>>>8&255]<<8|m[p&255])^a[l++];r=(m[g>>>24]<<24|m[k>>>16&255]<<16|m[p>>>8&255]<<8|m[f&255])^a[l++];s=(m[k>>>24]<<24|m[p>>>16&255]<<16|m[f>>>8&255]<<8|m[g&255])^a[l++];p=(m[p>>>24]<<24|m[f>>>16&255]<<16|m[g>>>8&255]<<8|m[k&255])^a[l++];c[e]=q;c[e+1]=r;c[e+2]=s;c[e+3]=p},keySize:8});q.AES=x._createHelper(r)})();
    
    /*
    CryptoJS v3.1.2 tripledes-min.js
    code.google.com/p/crypto-js
    (c) 2009-2013 by Jeff Mott. All rights reserved.
    code.google.com/p/crypto-js/wiki/License
    */
    (function(){function j(b,c){var a=(this._lBlock>>>b^this._rBlock)&c;this._rBlock^=a;this._lBlock^=a<<b}function l(b,c){var a=(this._rBlock>>>b^this._lBlock)&c;this._lBlock^=a;this._rBlock^=a<<b}var h=CryptoJS,e=h.lib,n=e.WordArray,e=e.BlockCipher,g=h.algo,q=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],p=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,
    55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],r=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],s=[{"0":8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,
    2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,
    1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{"0":1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,
    75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,
    276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{"0":260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,
    14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,
    17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{"0":2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,
    98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,
    1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{"0":128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,
    10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,
    83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{"0":268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,
    2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{"0":1048576,
    16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,
    496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{"0":134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,
    2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,
    2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],t=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],m=g.DES=e.extend({_doReset:function(){for(var b=this._key.words,c=[],a=0;56>a;a++){var f=q[a]-1;c[a]=b[f>>>5]>>>31-f%32&1}b=this._subKeys=[];for(f=0;16>f;f++){for(var d=b[f]=[],e=r[f],a=0;24>a;a++)d[a/6|0]|=c[(p[a]-1+e)%28]<<31-a%6,d[4+(a/6|0)]|=c[28+(p[a+24]-1+e)%28]<<31-a%6;d[0]=d[0]<<1|d[0]>>>31;for(a=1;7>a;a++)d[a]>>>=
    4*(a-1)+3;d[7]=d[7]<<5|d[7]>>>27}c=this._invSubKeys=[];for(a=0;16>a;a++)c[a]=b[15-a]},encryptBlock:function(b,c){this._doCryptBlock(b,c,this._subKeys)},decryptBlock:function(b,c){this._doCryptBlock(b,c,this._invSubKeys)},_doCryptBlock:function(b,c,a){this._lBlock=b[c];this._rBlock=b[c+1];j.call(this,4,252645135);j.call(this,16,65535);l.call(this,2,858993459);l.call(this,8,16711935);j.call(this,1,1431655765);for(var f=0;16>f;f++){for(var d=a[f],e=this._lBlock,h=this._rBlock,g=0,k=0;8>k;k++)g|=s[k][((h^
    d[k])&t[k])>>>0];this._lBlock=h;this._rBlock=e^g}a=this._lBlock;this._lBlock=this._rBlock;this._rBlock=a;j.call(this,1,1431655765);l.call(this,8,16711935);l.call(this,2,858993459);j.call(this,16,65535);j.call(this,4,252645135);b[c]=this._lBlock;b[c+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});h.DES=e._createHelper(m);g=g.TripleDES=e.extend({_doReset:function(){var b=this._key.words;this._des1=m.createEncryptor(n.create(b.slice(0,2)));this._des2=m.createEncryptor(n.create(b.slice(2,4)));this._des3=
    m.createEncryptor(n.create(b.slice(4,6)))},encryptBlock:function(b,c){this._des1.encryptBlock(b,c);this._des2.decryptBlock(b,c);this._des3.encryptBlock(b,c)},decryptBlock:function(b,c){this._des3.decryptBlock(b,c);this._des2.encryptBlock(b,c);this._des1.decryptBlock(b,c)},keySize:6,ivSize:2,blockSize:2});h.TripleDES=e._createHelper(g)})();
    
    /*
    CryptoJS v3.1.2 enc-base64.js
    code.google.com/p/crypto-js
    (c) 2009-2013 by Jeff Mott. All rights reserved.
    code.google.com/p/crypto-js/wiki/License
    */
    (function(){var h=CryptoJS,j=h.lib.WordArray;h.enc.Base64={stringify:function(b){var e=b.words,f=b.sigBytes,c=this._map;b.clamp();b=[];for(var a=0;a<f;a+=3)for(var d=(e[a>>>2]>>>24-8*(a%4)&255)<<16|(e[a+1>>>2]>>>24-8*((a+1)%4)&255)<<8|e[a+2>>>2]>>>24-8*((a+2)%4)&255,g=0;4>g&&a+0.75*g<f;g++)b.push(c.charAt(d>>>6*(3-g)&63));if(e=c.charAt(64))for(;b.length%4;)b.push(e);return b.join("")},parse:function(b){var e=b.length,f=this._map,c=f.charAt(64);c&&(c=b.indexOf(c),-1!=c&&(e=c));for(var c=[],a=0,d=0;d<
    e;d++)if(d%4){var g=f.indexOf(b.charAt(d-1))<<2*(d%4),h=f.indexOf(b.charAt(d))>>>6-2*(d%4);c[a>>>2]|=(g|h)<<24-8*(a%4);a++}return j.create(c,a)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}})();
    
    /*
    CryptoJS v3.1.2 md5.js
    code.google.com/p/crypto-js
    (c) 2009-2013 by Jeff Mott. All rights reserved.
    code.google.com/p/crypto-js/wiki/License
    */
    (function(E){function h(a,f,g,j,p,h,k){a=a+(f&g|~f&j)+p+k;return(a<<h|a>>>32-h)+f}function k(a,f,g,j,p,h,k){a=a+(f&j|g&~j)+p+k;return(a<<h|a>>>32-h)+f}function l(a,f,g,j,h,k,l){a=a+(f^g^j)+h+l;return(a<<k|a>>>32-k)+f}function n(a,f,g,j,h,k,l){a=a+(g^(f|~j))+h+l;return(a<<k|a>>>32-k)+f}for(var r=CryptoJS,q=r.lib,F=q.WordArray,s=q.Hasher,q=r.algo,a=[],t=0;64>t;t++)a[t]=4294967296*E.abs(E.sin(t+1))|0;q=q.MD5=s.extend({_doReset:function(){this._hash=new F.init([1732584193,4023233417,2562383102,271733878])},
    _doProcessBlock:function(m,f){for(var g=0;16>g;g++){var j=f+g,p=m[j];m[j]=(p<<8|p>>>24)&16711935|(p<<24|p>>>8)&4278255360}var g=this._hash.words,j=m[f+0],p=m[f+1],q=m[f+2],r=m[f+3],s=m[f+4],t=m[f+5],u=m[f+6],v=m[f+7],w=m[f+8],x=m[f+9],y=m[f+10],z=m[f+11],A=m[f+12],B=m[f+13],C=m[f+14],D=m[f+15],b=g[0],c=g[1],d=g[2],e=g[3],b=h(b,c,d,e,j,7,a[0]),e=h(e,b,c,d,p,12,a[1]),d=h(d,e,b,c,q,17,a[2]),c=h(c,d,e,b,r,22,a[3]),b=h(b,c,d,e,s,7,a[4]),e=h(e,b,c,d,t,12,a[5]),d=h(d,e,b,c,u,17,a[6]),c=h(c,d,e,b,v,22,a[7]),
    b=h(b,c,d,e,w,7,a[8]),e=h(e,b,c,d,x,12,a[9]),d=h(d,e,b,c,y,17,a[10]),c=h(c,d,e,b,z,22,a[11]),b=h(b,c,d,e,A,7,a[12]),e=h(e,b,c,d,B,12,a[13]),d=h(d,e,b,c,C,17,a[14]),c=h(c,d,e,b,D,22,a[15]),b=k(b,c,d,e,p,5,a[16]),e=k(e,b,c,d,u,9,a[17]),d=k(d,e,b,c,z,14,a[18]),c=k(c,d,e,b,j,20,a[19]),b=k(b,c,d,e,t,5,a[20]),e=k(e,b,c,d,y,9,a[21]),d=k(d,e,b,c,D,14,a[22]),c=k(c,d,e,b,s,20,a[23]),b=k(b,c,d,e,x,5,a[24]),e=k(e,b,c,d,C,9,a[25]),d=k(d,e,b,c,r,14,a[26]),c=k(c,d,e,b,w,20,a[27]),b=k(b,c,d,e,B,5,a[28]),e=k(e,b,
    c,d,q,9,a[29]),d=k(d,e,b,c,v,14,a[30]),c=k(c,d,e,b,A,20,a[31]),b=l(b,c,d,e,t,4,a[32]),e=l(e,b,c,d,w,11,a[33]),d=l(d,e,b,c,z,16,a[34]),c=l(c,d,e,b,C,23,a[35]),b=l(b,c,d,e,p,4,a[36]),e=l(e,b,c,d,s,11,a[37]),d=l(d,e,b,c,v,16,a[38]),c=l(c,d,e,b,y,23,a[39]),b=l(b,c,d,e,B,4,a[40]),e=l(e,b,c,d,j,11,a[41]),d=l(d,e,b,c,r,16,a[42]),c=l(c,d,e,b,u,23,a[43]),b=l(b,c,d,e,x,4,a[44]),e=l(e,b,c,d,A,11,a[45]),d=l(d,e,b,c,D,16,a[46]),c=l(c,d,e,b,q,23,a[47]),b=n(b,c,d,e,j,6,a[48]),e=n(e,b,c,d,v,10,a[49]),d=n(d,e,b,c,
    C,15,a[50]),c=n(c,d,e,b,t,21,a[51]),b=n(b,c,d,e,A,6,a[52]),e=n(e,b,c,d,r,10,a[53]),d=n(d,e,b,c,y,15,a[54]),c=n(c,d,e,b,p,21,a[55]),b=n(b,c,d,e,w,6,a[56]),e=n(e,b,c,d,D,10,a[57]),d=n(d,e,b,c,u,15,a[58]),c=n(c,d,e,b,B,21,a[59]),b=n(b,c,d,e,s,6,a[60]),e=n(e,b,c,d,z,10,a[61]),d=n(d,e,b,c,q,15,a[62]),c=n(c,d,e,b,x,21,a[63]);g[0]=g[0]+b|0;g[1]=g[1]+c|0;g[2]=g[2]+d|0;g[3]=g[3]+e|0},_doFinalize:function(){var a=this._data,f=a.words,g=8*this._nDataBytes,j=8*a.sigBytes;f[j>>>5]|=128<<24-j%32;var h=E.floor(g/
    4294967296);f[(j+64>>>9<<4)+15]=(h<<8|h>>>24)&16711935|(h<<24|h>>>8)&4278255360;f[(j+64>>>9<<4)+14]=(g<<8|g>>>24)&16711935|(g<<24|g>>>8)&4278255360;a.sigBytes=4*(f.length+1);this._process();a=this._hash;f=a.words;for(g=0;4>g;g++)j=f[g],f[g]=(j<<8|j>>>24)&16711935|(j<<24|j>>>8)&4278255360;return a},clone:function(){var a=s.clone.call(this);a._hash=this._hash.clone();return a}});r.MD5=s._createHelper(q);r.HmacMD5=s._createHmacHelper(q)})(Math);
    
    /*
    CryptoJS v3.1.2 sha1-min.js
    code.google.com/p/crypto-js
    (c) 2009-2013 by Jeff Mott. All rights reserved.
    code.google.com/p/crypto-js/wiki/License
    */
    (function(){var k=CryptoJS,b=k.lib,m=b.WordArray,l=b.Hasher,d=[],b=k.algo.SHA1=l.extend({_doReset:function(){this._hash=new m.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(n,p){for(var a=this._hash.words,e=a[0],f=a[1],h=a[2],j=a[3],b=a[4],c=0;80>c;c++){if(16>c)d[c]=n[p+c]|0;else{var g=d[c-3]^d[c-8]^d[c-14]^d[c-16];d[c]=g<<1|g>>>31}g=(e<<5|e>>>27)+b+d[c];g=20>c?g+((f&h|~f&j)+1518500249):40>c?g+((f^h^j)+1859775393):60>c?g+((f&h|f&j|h&j)-1894007588):g+((f^h^
    j)-899497514);b=j;j=h;h=f<<30|f>>>2;f=e;e=g}a[0]=a[0]+e|0;a[1]=a[1]+f|0;a[2]=a[2]+h|0;a[3]=a[3]+j|0;a[4]=a[4]+b|0},_doFinalize:function(){var b=this._data,d=b.words,a=8*this._nDataBytes,e=8*b.sigBytes;d[e>>>5]|=128<<24-e%32;d[(e+64>>>9<<4)+14]=Math.floor(a/4294967296);d[(e+64>>>9<<4)+15]=a;b.sigBytes=4*d.length;this._process();return this._hash},clone:function(){var b=l.clone.call(this);b._hash=this._hash.clone();return b}});k.SHA1=l._createHelper(b);k.HmacSHA1=l._createHmacHelper(b)})();
    
    /*
    CryptoJS v3.1.2 sha256-min.js
    code.google.com/p/crypto-js
    (c) 2009-2013 by Jeff Mott. All rights reserved.
    code.google.com/p/crypto-js/wiki/License
    */
    (function(k){for(var g=CryptoJS,h=g.lib,v=h.WordArray,j=h.Hasher,h=g.algo,s=[],t=[],u=function(q){return 4294967296*(q-(q|0))|0},l=2,b=0;64>b;){var d;a:{d=l;for(var w=k.sqrt(d),r=2;r<=w;r++)if(!(d%r)){d=!1;break a}d=!0}d&&(8>b&&(s[b]=u(k.pow(l,0.5))),t[b]=u(k.pow(l,1/3)),b++);l++}var n=[],h=h.SHA256=j.extend({_doReset:function(){this._hash=new v.init(s.slice(0))},_doProcessBlock:function(q,h){for(var a=this._hash.words,c=a[0],d=a[1],b=a[2],k=a[3],f=a[4],g=a[5],j=a[6],l=a[7],e=0;64>e;e++){if(16>e)n[e]=
    q[h+e]|0;else{var m=n[e-15],p=n[e-2];n[e]=((m<<25|m>>>7)^(m<<14|m>>>18)^m>>>3)+n[e-7]+((p<<15|p>>>17)^(p<<13|p>>>19)^p>>>10)+n[e-16]}m=l+((f<<26|f>>>6)^(f<<21|f>>>11)^(f<<7|f>>>25))+(f&g^~f&j)+t[e]+n[e];p=((c<<30|c>>>2)^(c<<19|c>>>13)^(c<<10|c>>>22))+(c&d^c&b^d&b);l=j;j=g;g=f;f=k+m|0;k=b;b=d;d=c;c=m+p|0}a[0]=a[0]+c|0;a[1]=a[1]+d|0;a[2]=a[2]+b|0;a[3]=a[3]+k|0;a[4]=a[4]+f|0;a[5]=a[5]+g|0;a[6]=a[6]+j|0;a[7]=a[7]+l|0},_doFinalize:function(){var d=this._data,b=d.words,a=8*this._nDataBytes,c=8*d.sigBytes;
    b[c>>>5]|=128<<24-c%32;b[(c+64>>>9<<4)+14]=k.floor(a/4294967296);b[(c+64>>>9<<4)+15]=a;d.sigBytes=4*b.length;this._process();return this._hash},clone:function(){var b=j.clone.call(this);b._hash=this._hash.clone();return b}});g.SHA256=j._createHelper(h);g.HmacSHA256=j._createHmacHelper(h)})(Math);
    
    /*
    CryptoJS v3.1.2 sha224-min.js
    code.google.com/p/crypto-js
    (c) 2009-2013 by Jeff Mott. All rights reserved.
    code.google.com/p/crypto-js/wiki/License
    */
    (function(){var b=CryptoJS,d=b.lib.WordArray,a=b.algo,c=a.SHA256,a=a.SHA224=c.extend({_doReset:function(){this._hash=new d.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var a=c._doFinalize.call(this);a.sigBytes-=4;return a}});b.SHA224=c._createHelper(a);b.HmacSHA224=c._createHmacHelper(a)})();
    
    /*
    CryptoJS v3.1.2 sha512-min.js
    code.google.com/p/crypto-js
    (c) 2009-2013 by Jeff Mott. All rights reserved.
    code.google.com/p/crypto-js/wiki/License
    */
    (function(){function a(){return d.create.apply(d,arguments)}for(var n=CryptoJS,r=n.lib.Hasher,e=n.x64,d=e.Word,T=e.WordArray,e=n.algo,ea=[a(1116352408,3609767458),a(1899447441,602891725),a(3049323471,3964484399),a(3921009573,2173295548),a(961987163,4081628472),a(1508970993,3053834265),a(2453635748,2937671579),a(2870763221,3664609560),a(3624381080,2734883394),a(310598401,1164996542),a(607225278,1323610764),a(1426881987,3590304994),a(1925078388,4068182383),a(2162078206,991336113),a(2614888103,633803317),
    a(3248222580,3479774868),a(3835390401,2666613458),a(4022224774,944711139),a(264347078,2341262773),a(604807628,2007800933),a(770255983,1495990901),a(1249150122,1856431235),a(1555081692,3175218132),a(1996064986,2198950837),a(2554220882,3999719339),a(2821834349,766784016),a(2952996808,2566594879),a(3210313671,3203337956),a(3336571891,1034457026),a(3584528711,2466948901),a(113926993,3758326383),a(338241895,168717936),a(666307205,1188179964),a(773529912,1546045734),a(1294757372,1522805485),a(1396182291,
    2643833823),a(1695183700,2343527390),a(1986661051,1014477480),a(2177026350,1206759142),a(2456956037,344077627),a(2730485921,1290863460),a(2820302411,3158454273),a(3259730800,3505952657),a(3345764771,106217008),a(3516065817,3606008344),a(3600352804,1432725776),a(4094571909,1467031594),a(275423344,851169720),a(430227734,3100823752),a(506948616,1363258195),a(659060556,3750685593),a(883997877,3785050280),a(958139571,3318307427),a(1322822218,3812723403),a(1537002063,2003034995),a(1747873779,3602036899),
    a(1955562222,1575990012),a(2024104815,1125592928),a(2227730452,2716904306),a(2361852424,442776044),a(2428436474,593698344),a(2756734187,3733110249),a(3204031479,2999351573),a(3329325298,3815920427),a(3391569614,3928383900),a(3515267271,566280711),a(3940187606,3454069534),a(4118630271,4000239992),a(116418474,1914138554),a(174292421,2731055270),a(289380356,3203993006),a(460393269,320620315),a(685471733,587496836),a(852142971,1086792851),a(1017036298,365543100),a(1126000580,2618297676),a(1288033470,
    3409855158),a(1501505948,4234509866),a(1607167915,987167468),a(1816402316,1246189591)],v=[],w=0;80>w;w++)v[w]=a();e=e.SHA512=r.extend({_doReset:function(){this._hash=new T.init([new d.init(1779033703,4089235720),new d.init(3144134277,2227873595),new d.init(1013904242,4271175723),new d.init(2773480762,1595750129),new d.init(1359893119,2917565137),new d.init(2600822924,725511199),new d.init(528734635,4215389547),new d.init(1541459225,327033209)])},_doProcessBlock:function(a,d){for(var f=this._hash.words,
    F=f[0],e=f[1],n=f[2],r=f[3],G=f[4],H=f[5],I=f[6],f=f[7],w=F.high,J=F.low,X=e.high,K=e.low,Y=n.high,L=n.low,Z=r.high,M=r.low,$=G.high,N=G.low,aa=H.high,O=H.low,ba=I.high,P=I.low,ca=f.high,Q=f.low,k=w,g=J,z=X,x=K,A=Y,y=L,U=Z,B=M,l=$,h=N,R=aa,C=O,S=ba,D=P,V=ca,E=Q,m=0;80>m;m++){var s=v[m];if(16>m)var j=s.high=a[d+2*m]|0,b=s.low=a[d+2*m+1]|0;else{var j=v[m-15],b=j.high,p=j.low,j=(b>>>1|p<<31)^(b>>>8|p<<24)^b>>>7,p=(p>>>1|b<<31)^(p>>>8|b<<24)^(p>>>7|b<<25),u=v[m-2],b=u.high,c=u.low,u=(b>>>19|c<<13)^(b<<
    3|c>>>29)^b>>>6,c=(c>>>19|b<<13)^(c<<3|b>>>29)^(c>>>6|b<<26),b=v[m-7],W=b.high,t=v[m-16],q=t.high,t=t.low,b=p+b.low,j=j+W+(b>>>0<p>>>0?1:0),b=b+c,j=j+u+(b>>>0<c>>>0?1:0),b=b+t,j=j+q+(b>>>0<t>>>0?1:0);s.high=j;s.low=b}var W=l&R^~l&S,t=h&C^~h&D,s=k&z^k&A^z&A,T=g&x^g&y^x&y,p=(k>>>28|g<<4)^(k<<30|g>>>2)^(k<<25|g>>>7),u=(g>>>28|k<<4)^(g<<30|k>>>2)^(g<<25|k>>>7),c=ea[m],fa=c.high,da=c.low,c=E+((h>>>14|l<<18)^(h>>>18|l<<14)^(h<<23|l>>>9)),q=V+((l>>>14|h<<18)^(l>>>18|h<<14)^(l<<23|h>>>9))+(c>>>0<E>>>0?1:
    0),c=c+t,q=q+W+(c>>>0<t>>>0?1:0),c=c+da,q=q+fa+(c>>>0<da>>>0?1:0),c=c+b,q=q+j+(c>>>0<b>>>0?1:0),b=u+T,s=p+s+(b>>>0<u>>>0?1:0),V=S,E=D,S=R,D=C,R=l,C=h,h=B+c|0,l=U+q+(h>>>0<B>>>0?1:0)|0,U=A,B=y,A=z,y=x,z=k,x=g,g=c+b|0,k=q+s+(g>>>0<c>>>0?1:0)|0}J=F.low=J+g;F.high=w+k+(J>>>0<g>>>0?1:0);K=e.low=K+x;e.high=X+z+(K>>>0<x>>>0?1:0);L=n.low=L+y;n.high=Y+A+(L>>>0<y>>>0?1:0);M=r.low=M+B;r.high=Z+U+(M>>>0<B>>>0?1:0);N=G.low=N+h;G.high=$+l+(N>>>0<h>>>0?1:0);O=H.low=O+C;H.high=aa+R+(O>>>0<C>>>0?1:0);P=I.low=P+D;
    I.high=ba+S+(P>>>0<D>>>0?1:0);Q=f.low=Q+E;f.high=ca+V+(Q>>>0<E>>>0?1:0)},_doFinalize:function(){var a=this._data,d=a.words,f=8*this._nDataBytes,e=8*a.sigBytes;d[e>>>5]|=128<<24-e%32;d[(e+128>>>10<<5)+30]=Math.floor(f/4294967296);d[(e+128>>>10<<5)+31]=f;a.sigBytes=4*d.length;this._process();return this._hash.toX32()},clone:function(){var a=r.clone.call(this);a._hash=this._hash.clone();return a},blockSize:32});n.SHA512=r._createHelper(e);n.HmacSHA512=r._createHmacHelper(e)})();
    
    /*
    CryptoJS v3.1.2 sha384-min.js
    code.google.com/p/crypto-js
    (c) 2009-2013 by Jeff Mott. All rights reserved.
    code.google.com/p/crypto-js/wiki/License
    */
    (function(){var c=CryptoJS,a=c.x64,b=a.Word,e=a.WordArray,a=c.algo,d=a.SHA512,a=a.SHA384=d.extend({_doReset:function(){this._hash=new e.init([new b.init(3418070365,3238371032),new b.init(1654270250,914150663),new b.init(2438529370,812702999),new b.init(355462360,4144912697),new b.init(1731405415,4290775857),new b.init(2394180231,1750603025),new b.init(3675008525,1694076839),new b.init(1203062813,3204075428)])},_doFinalize:function(){var a=d._doFinalize.call(this);a.sigBytes-=16;return a}});c.SHA384=
    d._createHelper(a);c.HmacSHA384=d._createHmacHelper(a)})();
    
    /*
    CryptoJS v3.1.2 ripemd160-min.js
    code.google.com/p/crypto-js
    (c) 2009-2013 by Jeff Mott. All rights reserved.
    code.google.com/p/crypto-js/wiki/License
    */
    /*
    
    (c) 2012 by Cedric Mesnil. All rights reserved.
    
    Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
    
        - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
        - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
    
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    */
    (function(){var q=CryptoJS,d=q.lib,n=d.WordArray,p=d.Hasher,d=q.algo,x=n.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),y=n.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),z=n.create([11,14,15,12,
    5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),A=n.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),B=n.create([0,1518500249,1859775393,2400959708,2840853838]),C=n.create([1352829926,1548603684,1836072691,
    2053994217,0]),d=d.RIPEMD160=p.extend({_doReset:function(){this._hash=n.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,v){for(var b=0;16>b;b++){var c=v+b,f=e[c];e[c]=(f<<8|f>>>24)&16711935|(f<<24|f>>>8)&4278255360}var c=this._hash.words,f=B.words,d=C.words,n=x.words,q=y.words,p=z.words,w=A.words,t,g,h,j,r,u,k,l,m,s;u=t=c[0];k=g=c[1];l=h=c[2];m=j=c[3];s=r=c[4];for(var a,b=0;80>b;b+=1)a=t+e[v+n[b]]|0,a=16>b?a+((g^h^j)+f[0]):32>b?a+((g&h|~g&j)+f[1]):48>b?
    a+(((g|~h)^j)+f[2]):64>b?a+((g&j|h&~j)+f[3]):a+((g^(h|~j))+f[4]),a|=0,a=a<<p[b]|a>>>32-p[b],a=a+r|0,t=r,r=j,j=h<<10|h>>>22,h=g,g=a,a=u+e[v+q[b]]|0,a=16>b?a+((k^(l|~m))+d[0]):32>b?a+((k&m|l&~m)+d[1]):48>b?a+(((k|~l)^m)+d[2]):64>b?a+((k&l|~k&m)+d[3]):a+((k^l^m)+d[4]),a|=0,a=a<<w[b]|a>>>32-w[b],a=a+s|0,u=s,s=m,m=l<<10|l>>>22,l=k,k=a;a=c[1]+h+m|0;c[1]=c[2]+j+s|0;c[2]=c[3]+r+u|0;c[3]=c[4]+t+k|0;c[4]=c[0]+g+l|0;c[0]=a},_doFinalize:function(){var e=this._data,d=e.words,b=8*this._nDataBytes,c=8*e.sigBytes;
    d[c>>>5]|=128<<24-c%32;d[(c+64>>>9<<4)+14]=(b<<8|b>>>24)&16711935|(b<<24|b>>>8)&4278255360;e.sigBytes=4*(d.length+1);this._process();e=this._hash;d=e.words;for(b=0;5>b;b++)c=d[b],d[b]=(c<<8|c>>>24)&16711935|(c<<24|c>>>8)&4278255360;return e},clone:function(){var d=p.clone.call(this);d._hash=this._hash.clone();return d}});q.RIPEMD160=p._createHelper(d);q.HmacRIPEMD160=p._createHmacHelper(d)})(Math);
    
    /*
    CryptoJS v3.1.2 hmac.js
    code.google.com/p/crypto-js
    (c) 2009-2013 by Jeff Mott. All rights reserved.
    code.google.com/p/crypto-js/wiki/License
    */
    (function(){var c=CryptoJS,k=c.enc.Utf8;c.algo.HMAC=c.lib.Base.extend({init:function(a,b){a=this._hasher=new a.init;"string"==typeof b&&(b=k.parse(b));var c=a.blockSize,e=4*c;b.sigBytes>e&&(b=a.finalize(b));b.clamp();for(var f=this._oKey=b.clone(),g=this._iKey=b.clone(),h=f.words,j=g.words,d=0;d<c;d++)h[d]^=1549556828,j[d]^=909522486;f.sigBytes=g.sigBytes=e;this.reset()},reset:function(){var a=this._hasher;a.reset();a.update(this._iKey)},update:function(a){this._hasher.update(a);return this},finalize:function(a){var b=
    this._hasher;a=b.finalize(a);b.reset();return b.finalize(this._oKey.clone().concat(a))}})})();
    
    /*
    CryptoJS v3.1.2 pbkdf2-min.js
    code.google.com/p/crypto-js
    (c) 2009-2013 by Jeff Mott. All rights reserved.
    code.google.com/p/crypto-js/wiki/License
    */
    (function(){var b=CryptoJS,a=b.lib,d=a.Base,m=a.WordArray,a=b.algo,q=a.HMAC,l=a.PBKDF2=d.extend({cfg:d.extend({keySize:4,hasher:a.SHA1,iterations:1}),init:function(a){this.cfg=this.cfg.extend(a)},compute:function(a,b){for(var c=this.cfg,f=q.create(c.hasher,a),g=m.create(),d=m.create([1]),l=g.words,r=d.words,n=c.keySize,c=c.iterations;l.length<n;){var h=f.update(b).finalize(d);f.reset();for(var j=h.words,s=j.length,k=h,p=1;p<c;p++){k=f.finalize(k);f.reset();for(var t=k.words,e=0;e<s;e++)j[e]^=t[e]}g.concat(h);
    r[0]++}g.sigBytes=4*n;return g}});b.PBKDF2=function(a,b,c){return l.create(c).compute(a,b)}})();
    
    /*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
     */
    var b64map="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var b64pad="=";function hex2b64(d){var b;var e;var a="";for(b=0;b+3<=d.length;b+=3){e=parseInt(d.substring(b,b+3),16);a+=b64map.charAt(e>>6)+b64map.charAt(e&63)}if(b+1==d.length){e=parseInt(d.substring(b,b+1),16);a+=b64map.charAt(e<<2)}else{if(b+2==d.length){e=parseInt(d.substring(b,b+2),16);a+=b64map.charAt(e>>2)+b64map.charAt((e&3)<<4)}}if(b64pad){while((a.length&3)>0){a+=b64pad}}return a}function b64tohex(f){var d="";var e;var b=0;var c;var a;for(e=0;e<f.length;++e){if(f.charAt(e)==b64pad){break}a=b64map.indexOf(f.charAt(e));if(a<0){continue}if(b==0){d+=int2char(a>>2);c=a&3;b=1}else{if(b==1){d+=int2char((c<<2)|(a>>4));c=a&15;b=2}else{if(b==2){d+=int2char(c);d+=int2char(a>>2);c=a&3;b=3}else{d+=int2char((c<<2)|(a>>4));d+=int2char(a&15);b=0}}}}if(b==1){d+=int2char(c<<2)}return d}function b64toBA(e){var d=b64tohex(e);var c;var b=new Array();for(c=0;2*c<d.length;++c){b[c]=parseInt(d.substring(2*c,2*c+2),16)}return b};
    /*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
     */
    var dbits;var canary=244837814094590;var j_lm=((canary&16777215)==15715070);function BigInteger(e,d,f){if(e!=null){if("number"==typeof e){this.fromNumber(e,d,f)}else{if(d==null&&"string"!=typeof e){this.fromString(e,256)}else{this.fromString(e,d)}}}}function nbi(){return new BigInteger(null)}function am1(f,a,b,e,h,g){while(--g>=0){var d=a*this[f++]+b[e]+h;h=Math.floor(d/67108864);b[e++]=d&67108863}return h}function am2(f,q,r,e,o,a){var k=q&32767,p=q>>15;while(--a>=0){var d=this[f]&32767;var g=this[f++]>>15;var b=p*d+g*k;d=k*d+((b&32767)<<15)+r[e]+(o&1073741823);o=(d>>>30)+(b>>>15)+p*g+(o>>>30);r[e++]=d&1073741823}return o}function am3(f,q,r,e,o,a){var k=q&16383,p=q>>14;while(--a>=0){var d=this[f]&16383;var g=this[f++]>>14;var b=p*d+g*k;d=k*d+((b&16383)<<14)+r[e]+o;o=(d>>28)+(b>>14)+p*g;r[e++]=d&268435455}return o}if(j_lm&&(navigator.appName=="Microsoft Internet Explorer")){BigInteger.prototype.am=am2;dbits=30}else{if(j_lm&&(navigator.appName!="Netscape")){BigInteger.prototype.am=am1;dbits=26}else{BigInteger.prototype.am=am3;dbits=28}}BigInteger.prototype.DB=dbits;BigInteger.prototype.DM=((1<<dbits)-1);BigInteger.prototype.DV=(1<<dbits);var BI_FP=52;BigInteger.prototype.FV=Math.pow(2,BI_FP);BigInteger.prototype.F1=BI_FP-dbits;BigInteger.prototype.F2=2*dbits-BI_FP;var BI_RM="0123456789abcdefghijklmnopqrstuvwxyz";var BI_RC=new Array();var rr,vv;rr="0".charCodeAt(0);for(vv=0;vv<=9;++vv){BI_RC[rr++]=vv}rr="a".charCodeAt(0);for(vv=10;vv<36;++vv){BI_RC[rr++]=vv}rr="A".charCodeAt(0);for(vv=10;vv<36;++vv){BI_RC[rr++]=vv}function int2char(a){return BI_RM.charAt(a)}function intAt(b,a){var d=BI_RC[b.charCodeAt(a)];return(d==null)?-1:d}function bnpCopyTo(b){for(var a=this.t-1;a>=0;--a){b[a]=this[a]}b.t=this.t;b.s=this.s}function bnpFromInt(a){this.t=1;this.s=(a<0)?-1:0;if(a>0){this[0]=a}else{if(a<-1){this[0]=a+this.DV}else{this.t=0}}}function nbv(a){var b=nbi();b.fromInt(a);return b}function bnpFromString(h,c){var e;if(c==16){e=4}else{if(c==8){e=3}else{if(c==256){e=8}else{if(c==2){e=1}else{if(c==32){e=5}else{if(c==4){e=2}else{this.fromRadix(h,c);return}}}}}}this.t=0;this.s=0;var g=h.length,d=false,f=0;while(--g>=0){var a=(e==8)?h[g]&255:intAt(h,g);if(a<0){if(h.charAt(g)=="-"){d=true}continue}d=false;if(f==0){this[this.t++]=a}else{if(f+e>this.DB){this[this.t-1]|=(a&((1<<(this.DB-f))-1))<<f;this[this.t++]=(a>>(this.DB-f))}else{this[this.t-1]|=a<<f}}f+=e;if(f>=this.DB){f-=this.DB}}if(e==8&&(h[0]&128)!=0){this.s=-1;if(f>0){this[this.t-1]|=((1<<(this.DB-f))-1)<<f}}this.clamp();if(d){BigInteger.ZERO.subTo(this,this)}}function bnpClamp(){var a=this.s&this.DM;while(this.t>0&&this[this.t-1]==a){--this.t}}function bnToString(c){if(this.s<0){return"-"+this.negate().toString(c)}var e;if(c==16){e=4}else{if(c==8){e=3}else{if(c==2){e=1}else{if(c==32){e=5}else{if(c==4){e=2}else{return this.toRadix(c)}}}}}var g=(1<<e)-1,l,a=false,h="",f=this.t;var j=this.DB-(f*this.DB)%e;if(f-->0){if(j<this.DB&&(l=this[f]>>j)>0){a=true;h=int2char(l)}while(f>=0){if(j<e){l=(this[f]&((1<<j)-1))<<(e-j);l|=this[--f]>>(j+=this.DB-e)}else{l=(this[f]>>(j-=e))&g;if(j<=0){j+=this.DB;--f}}if(l>0){a=true}if(a){h+=int2char(l)}}}return a?h:"0"}function bnNegate(){var a=nbi();BigInteger.ZERO.subTo(this,a);return a}function bnAbs(){return(this.s<0)?this.negate():this}function bnCompareTo(b){var d=this.s-b.s;if(d!=0){return d}var c=this.t;d=c-b.t;if(d!=0){return(this.s<0)?-d:d}while(--c>=0){if((d=this[c]-b[c])!=0){return d}}return 0}function nbits(a){var c=1,b;if((b=a>>>16)!=0){a=b;c+=16}if((b=a>>8)!=0){a=b;c+=8}if((b=a>>4)!=0){a=b;c+=4}if((b=a>>2)!=0){a=b;c+=2}if((b=a>>1)!=0){a=b;c+=1}return c}function bnBitLength(){if(this.t<=0){return 0}return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM))}function bnpDLShiftTo(c,b){var a;for(a=this.t-1;a>=0;--a){b[a+c]=this[a]}for(a=c-1;a>=0;--a){b[a]=0}b.t=this.t+c;b.s=this.s}function bnpDRShiftTo(c,b){for(var a=c;a<this.t;++a){b[a-c]=this[a]}b.t=Math.max(this.t-c,0);b.s=this.s}function bnpLShiftTo(j,e){var b=j%this.DB;var a=this.DB-b;var g=(1<<a)-1;var f=Math.floor(j/this.DB),h=(this.s<<b)&this.DM,d;for(d=this.t-1;d>=0;--d){e[d+f+1]=(this[d]>>a)|h;h=(this[d]&g)<<b}for(d=f-1;d>=0;--d){e[d]=0}e[f]=h;e.t=this.t+f+1;e.s=this.s;e.clamp()}function bnpRShiftTo(g,d){d.s=this.s;var e=Math.floor(g/this.DB);if(e>=this.t){d.t=0;return}var b=g%this.DB;var a=this.DB-b;var f=(1<<b)-1;d[0]=this[e]>>b;for(var c=e+1;c<this.t;++c){d[c-e-1]|=(this[c]&f)<<a;d[c-e]=this[c]>>b}if(b>0){d[this.t-e-1]|=(this.s&f)<<a}d.t=this.t-e;d.clamp()}function bnpSubTo(d,f){var e=0,g=0,b=Math.min(d.t,this.t);while(e<b){g+=this[e]-d[e];f[e++]=g&this.DM;g>>=this.DB}if(d.t<this.t){g-=d.s;while(e<this.t){g+=this[e];f[e++]=g&this.DM;g>>=this.DB}g+=this.s}else{g+=this.s;while(e<d.t){g-=d[e];f[e++]=g&this.DM;g>>=this.DB}g-=d.s}f.s=(g<0)?-1:0;if(g<-1){f[e++]=this.DV+g}else{if(g>0){f[e++]=g}}f.t=e;f.clamp()}function bnpMultiplyTo(c,e){var b=this.abs(),f=c.abs();var d=b.t;e.t=d+f.t;while(--d>=0){e[d]=0}for(d=0;d<f.t;++d){e[d+b.t]=b.am(0,f[d],e,d,0,b.t)}e.s=0;e.clamp();if(this.s!=c.s){BigInteger.ZERO.subTo(e,e)}}function bnpSquareTo(d){var a=this.abs();var b=d.t=2*a.t;while(--b>=0){d[b]=0}for(b=0;b<a.t-1;++b){var e=a.am(b,a[b],d,2*b,0,1);if((d[b+a.t]+=a.am(b+1,2*a[b],d,2*b+1,e,a.t-b-1))>=a.DV){d[b+a.t]-=a.DV;d[b+a.t+1]=1}}if(d.t>0){d[d.t-1]+=a.am(b,a[b],d,2*b,0,1)}d.s=0;d.clamp()}function bnpDivRemTo(n,h,g){var w=n.abs();if(w.t<=0){return}var k=this.abs();if(k.t<w.t){if(h!=null){h.fromInt(0)}if(g!=null){this.copyTo(g)}return}if(g==null){g=nbi()}var d=nbi(),a=this.s,l=n.s;var v=this.DB-nbits(w[w.t-1]);if(v>0){w.lShiftTo(v,d);k.lShiftTo(v,g)}else{w.copyTo(d);k.copyTo(g)}var p=d.t;var b=d[p-1];if(b==0){return}var o=b*(1<<this.F1)+((p>1)?d[p-2]>>this.F2:0);var A=this.FV/o,z=(1<<this.F1)/o,x=1<<this.F2;var u=g.t,s=u-p,f=(h==null)?nbi():h;d.dlShiftTo(s,f);if(g.compareTo(f)>=0){g[g.t++]=1;g.subTo(f,g)}BigInteger.ONE.dlShiftTo(p,f);f.subTo(d,d);while(d.t<p){d[d.t++]=0}while(--s>=0){var c=(g[--u]==b)?this.DM:Math.floor(g[u]*A+(g[u-1]+x)*z);if((g[u]+=d.am(0,c,g,s,0,p))<c){d.dlShiftTo(s,f);g.subTo(f,g);while(g[u]<--c){g.subTo(f,g)}}}if(h!=null){g.drShiftTo(p,h);if(a!=l){BigInteger.ZERO.subTo(h,h)}}g.t=p;g.clamp();if(v>0){g.rShiftTo(v,g)}if(a<0){BigInteger.ZERO.subTo(g,g)}}function bnMod(b){var c=nbi();this.abs().divRemTo(b,null,c);if(this.s<0&&c.compareTo(BigInteger.ZERO)>0){b.subTo(c,c)}return c}function Classic(a){this.m=a}function cConvert(a){if(a.s<0||a.compareTo(this.m)>=0){return a.mod(this.m)}else{return a}}function cRevert(a){return a}function cReduce(a){a.divRemTo(this.m,null,a)}function cMulTo(a,c,b){a.multiplyTo(c,b);this.reduce(b)}function cSqrTo(a,b){a.squareTo(b);this.reduce(b)}Classic.prototype.convert=cConvert;Classic.prototype.revert=cRevert;Classic.prototype.reduce=cReduce;Classic.prototype.mulTo=cMulTo;Classic.prototype.sqrTo=cSqrTo;function bnpInvDigit(){if(this.t<1){return 0}var a=this[0];if((a&1)==0){return 0}var b=a&3;b=(b*(2-(a&15)*b))&15;b=(b*(2-(a&255)*b))&255;b=(b*(2-(((a&65535)*b)&65535)))&65535;b=(b*(2-a*b%this.DV))%this.DV;return(b>0)?this.DV-b:-b}function Montgomery(a){this.m=a;this.mp=a.invDigit();this.mpl=this.mp&32767;this.mph=this.mp>>15;this.um=(1<<(a.DB-15))-1;this.mt2=2*a.t}function montConvert(a){var b=nbi();a.abs().dlShiftTo(this.m.t,b);b.divRemTo(this.m,null,b);if(a.s<0&&b.compareTo(BigInteger.ZERO)>0){this.m.subTo(b,b)}return b}function montRevert(a){var b=nbi();a.copyTo(b);this.reduce(b);return b}function montReduce(a){while(a.t<=this.mt2){a[a.t++]=0}for(var c=0;c<this.m.t;++c){var b=a[c]&32767;var d=(b*this.mpl+(((b*this.mph+(a[c]>>15)*this.mpl)&this.um)<<15))&a.DM;b=c+this.m.t;a[b]+=this.m.am(0,d,a,c,0,this.m.t);while(a[b]>=a.DV){a[b]-=a.DV;a[++b]++}}a.clamp();a.drShiftTo(this.m.t,a);if(a.compareTo(this.m)>=0){a.subTo(this.m,a)}}function montSqrTo(a,b){a.squareTo(b);this.reduce(b)}function montMulTo(a,c,b){a.multiplyTo(c,b);this.reduce(b)}Montgomery.prototype.convert=montConvert;Montgomery.prototype.revert=montRevert;Montgomery.prototype.reduce=montReduce;Montgomery.prototype.mulTo=montMulTo;Montgomery.prototype.sqrTo=montSqrTo;function bnpIsEven(){return((this.t>0)?(this[0]&1):this.s)==0}function bnpExp(h,j){if(h>4294967295||h<1){return BigInteger.ONE}var f=nbi(),a=nbi(),d=j.convert(this),c=nbits(h)-1;d.copyTo(f);while(--c>=0){j.sqrTo(f,a);if((h&(1<<c))>0){j.mulTo(a,d,f)}else{var b=f;f=a;a=b}}return j.revert(f)}function bnModPowInt(b,a){var c;if(b<256||a.isEven()){c=new Classic(a)}else{c=new Montgomery(a)}return this.exp(b,c)}BigInteger.prototype.copyTo=bnpCopyTo;BigInteger.prototype.fromInt=bnpFromInt;BigInteger.prototype.fromString=bnpFromString;BigInteger.prototype.clamp=bnpClamp;BigInteger.prototype.dlShiftTo=bnpDLShiftTo;BigInteger.prototype.drShiftTo=bnpDRShiftTo;BigInteger.prototype.lShiftTo=bnpLShiftTo;BigInteger.prototype.rShiftTo=bnpRShiftTo;BigInteger.prototype.subTo=bnpSubTo;BigInteger.prototype.multiplyTo=bnpMultiplyTo;BigInteger.prototype.squareTo=bnpSquareTo;BigInteger.prototype.divRemTo=bnpDivRemTo;BigInteger.prototype.invDigit=bnpInvDigit;BigInteger.prototype.isEven=bnpIsEven;BigInteger.prototype.exp=bnpExp;BigInteger.prototype.toString=bnToString;BigInteger.prototype.negate=bnNegate;BigInteger.prototype.abs=bnAbs;BigInteger.prototype.compareTo=bnCompareTo;BigInteger.prototype.bitLength=bnBitLength;BigInteger.prototype.mod=bnMod;BigInteger.prototype.modPowInt=bnModPowInt;BigInteger.ZERO=nbv(0);BigInteger.ONE=nbv(1);
    /*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
     */
    function bnClone(){var a=nbi();this.copyTo(a);return a}function bnIntValue(){if(this.s<0){if(this.t==1){return this[0]-this.DV}else{if(this.t==0){return -1}}}else{if(this.t==1){return this[0]}else{if(this.t==0){return 0}}}return((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0]}function bnByteValue(){return(this.t==0)?this.s:(this[0]<<24)>>24}function bnShortValue(){return(this.t==0)?this.s:(this[0]<<16)>>16}function bnpChunkSize(a){return Math.floor(Math.LN2*this.DB/Math.log(a))}function bnSigNum(){if(this.s<0){return -1}else{if(this.t<=0||(this.t==1&&this[0]<=0)){return 0}else{return 1}}}function bnpToRadix(c){if(c==null){c=10}if(this.signum()==0||c<2||c>36){return"0"}var f=this.chunkSize(c);var e=Math.pow(c,f);var i=nbv(e),j=nbi(),h=nbi(),g="";this.divRemTo(i,j,h);while(j.signum()>0){g=(e+h.intValue()).toString(c).substr(1)+g;j.divRemTo(i,j,h)}return h.intValue().toString(c)+g}function bnpFromRadix(m,h){this.fromInt(0);if(h==null){h=10}var f=this.chunkSize(h);var g=Math.pow(h,f),e=false,a=0,l=0;for(var c=0;c<m.length;++c){var k=intAt(m,c);if(k<0){if(m.charAt(c)=="-"&&this.signum()==0){e=true}continue}l=h*l+k;if(++a>=f){this.dMultiply(g);this.dAddOffset(l,0);a=0;l=0}}if(a>0){this.dMultiply(Math.pow(h,a));this.dAddOffset(l,0)}if(e){BigInteger.ZERO.subTo(this,this)}}function bnpFromNumber(f,e,h){if("number"==typeof e){if(f<2){this.fromInt(1)}else{this.fromNumber(f,h);if(!this.testBit(f-1)){this.bitwiseTo(BigInteger.ONE.shiftLeft(f-1),op_or,this)}if(this.isEven()){this.dAddOffset(1,0)}while(!this.isProbablePrime(e)){this.dAddOffset(2,0);if(this.bitLength()>f){this.subTo(BigInteger.ONE.shiftLeft(f-1),this)}}}}else{var d=new Array(),g=f&7;d.length=(f>>3)+1;e.nextBytes(d);if(g>0){d[0]&=((1<<g)-1)}else{d[0]=0}this.fromString(d,256)}}function bnToByteArray(){var b=this.t,c=new Array();c[0]=this.s;var e=this.DB-(b*this.DB)%8,f,a=0;if(b-->0){if(e<this.DB&&(f=this[b]>>e)!=(this.s&this.DM)>>e){c[a++]=f|(this.s<<(this.DB-e))}while(b>=0){if(e<8){f=(this[b]&((1<<e)-1))<<(8-e);f|=this[--b]>>(e+=this.DB-8)}else{f=(this[b]>>(e-=8))&255;if(e<=0){e+=this.DB;--b}}if((f&128)!=0){f|=-256}if(a==0&&(this.s&128)!=(f&128)){++a}if(a>0||f!=this.s){c[a++]=f}}}return c}function bnEquals(b){return(this.compareTo(b)==0)}function bnMin(b){return(this.compareTo(b)<0)?this:b}function bnMax(b){return(this.compareTo(b)>0)?this:b}function bnpBitwiseTo(c,h,e){var d,g,b=Math.min(c.t,this.t);for(d=0;d<b;++d){e[d]=h(this[d],c[d])}if(c.t<this.t){g=c.s&this.DM;for(d=b;d<this.t;++d){e[d]=h(this[d],g)}e.t=this.t}else{g=this.s&this.DM;for(d=b;d<c.t;++d){e[d]=h(g,c[d])}e.t=c.t}e.s=h(this.s,c.s);e.clamp()}function op_and(a,b){return a&b}function bnAnd(b){var c=nbi();this.bitwiseTo(b,op_and,c);return c}function op_or(a,b){return a|b}function bnOr(b){var c=nbi();this.bitwiseTo(b,op_or,c);return c}function op_xor(a,b){return a^b}function bnXor(b){var c=nbi();this.bitwiseTo(b,op_xor,c);return c}function op_andnot(a,b){return a&~b}function bnAndNot(b){var c=nbi();this.bitwiseTo(b,op_andnot,c);return c}function bnNot(){var b=nbi();for(var a=0;a<this.t;++a){b[a]=this.DM&~this[a]}b.t=this.t;b.s=~this.s;return b}function bnShiftLeft(b){var a=nbi();if(b<0){this.rShiftTo(-b,a)}else{this.lShiftTo(b,a)}return a}function bnShiftRight(b){var a=nbi();if(b<0){this.lShiftTo(-b,a)}else{this.rShiftTo(b,a)}return a}function lbit(a){if(a==0){return -1}var b=0;if((a&65535)==0){a>>=16;b+=16}if((a&255)==0){a>>=8;b+=8}if((a&15)==0){a>>=4;b+=4}if((a&3)==0){a>>=2;b+=2}if((a&1)==0){++b}return b}function bnGetLowestSetBit(){for(var a=0;a<this.t;++a){if(this[a]!=0){return a*this.DB+lbit(this[a])}}if(this.s<0){return this.t*this.DB}return -1}function cbit(a){var b=0;while(a!=0){a&=a-1;++b}return b}function bnBitCount(){var c=0,a=this.s&this.DM;for(var b=0;b<this.t;++b){c+=cbit(this[b]^a)}return c}function bnTestBit(b){var a=Math.floor(b/this.DB);if(a>=this.t){return(this.s!=0)}return((this[a]&(1<<(b%this.DB)))!=0)}function bnpChangeBit(c,b){var a=BigInteger.ONE.shiftLeft(c);this.bitwiseTo(a,b,a);return a}function bnSetBit(a){return this.changeBit(a,op_or)}function bnClearBit(a){return this.changeBit(a,op_andnot)}function bnFlipBit(a){return this.changeBit(a,op_xor)}function bnpAddTo(d,f){var e=0,g=0,b=Math.min(d.t,this.t);while(e<b){g+=this[e]+d[e];f[e++]=g&this.DM;g>>=this.DB}if(d.t<this.t){g+=d.s;while(e<this.t){g+=this[e];f[e++]=g&this.DM;g>>=this.DB}g+=this.s}else{g+=this.s;while(e<d.t){g+=d[e];f[e++]=g&this.DM;g>>=this.DB}g+=d.s}f.s=(g<0)?-1:0;if(g>0){f[e++]=g}else{if(g<-1){f[e++]=this.DV+g}}f.t=e;f.clamp()}function bnAdd(b){var c=nbi();this.addTo(b,c);return c}function bnSubtract(b){var c=nbi();this.subTo(b,c);return c}function bnMultiply(b){var c=nbi();this.multiplyTo(b,c);return c}function bnSquare(){var a=nbi();this.squareTo(a);return a}function bnDivide(b){var c=nbi();this.divRemTo(b,c,null);return c}function bnRemainder(b){var c=nbi();this.divRemTo(b,null,c);return c}function bnDivideAndRemainder(b){var d=nbi(),c=nbi();this.divRemTo(b,d,c);return new Array(d,c)}function bnpDMultiply(a){this[this.t]=this.am(0,a-1,this,0,0,this.t);++this.t;this.clamp()}function bnpDAddOffset(b,a){if(b==0){return}while(this.t<=a){this[this.t++]=0}this[a]+=b;while(this[a]>=this.DV){this[a]-=this.DV;if(++a>=this.t){this[this.t++]=0}++this[a]}}function NullExp(){}function nNop(a){return a}function nMulTo(a,c,b){a.multiplyTo(c,b)}function nSqrTo(a,b){a.squareTo(b)}NullExp.prototype.convert=nNop;NullExp.prototype.revert=nNop;NullExp.prototype.mulTo=nMulTo;NullExp.prototype.sqrTo=nSqrTo;function bnPow(a){return this.exp(a,new NullExp())}function bnpMultiplyLowerTo(b,f,e){var d=Math.min(this.t+b.t,f);e.s=0;e.t=d;while(d>0){e[--d]=0}var c;for(c=e.t-this.t;d<c;++d){e[d+this.t]=this.am(0,b[d],e,d,0,this.t)}for(c=Math.min(b.t,f);d<c;++d){this.am(0,b[d],e,d,0,f-d)}e.clamp()}function bnpMultiplyUpperTo(b,e,d){--e;var c=d.t=this.t+b.t-e;d.s=0;while(--c>=0){d[c]=0}for(c=Math.max(e-this.t,0);c<b.t;++c){d[this.t+c-e]=this.am(e-c,b[c],d,0,0,this.t+c-e)}d.clamp();d.drShiftTo(1,d)}function Barrett(a){this.r2=nbi();this.q3=nbi();BigInteger.ONE.dlShiftTo(2*a.t,this.r2);this.mu=this.r2.divide(a);this.m=a}function barrettConvert(a){if(a.s<0||a.t>2*this.m.t){return a.mod(this.m)}else{if(a.compareTo(this.m)<0){return a}else{var b=nbi();a.copyTo(b);this.reduce(b);return b}}}function barrettRevert(a){return a}function barrettReduce(a){a.drShiftTo(this.m.t-1,this.r2);if(a.t>this.m.t+1){a.t=this.m.t+1;a.clamp()}this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);while(a.compareTo(this.r2)<0){a.dAddOffset(1,this.m.t+1)}a.subTo(this.r2,a);while(a.compareTo(this.m)>=0){a.subTo(this.m,a)}}function barrettSqrTo(a,b){a.squareTo(b);this.reduce(b)}function barrettMulTo(a,c,b){a.multiplyTo(c,b);this.reduce(b)}Barrett.prototype.convert=barrettConvert;Barrett.prototype.revert=barrettRevert;Barrett.prototype.reduce=barrettReduce;Barrett.prototype.mulTo=barrettMulTo;Barrett.prototype.sqrTo=barrettSqrTo;function bnModPow(q,f){var o=q.bitLength(),h,b=nbv(1),v;if(o<=0){return b}else{if(o<18){h=1}else{if(o<48){h=3}else{if(o<144){h=4}else{if(o<768){h=5}else{h=6}}}}}if(o<8){v=new Classic(f)}else{if(f.isEven()){v=new Barrett(f)}else{v=new Montgomery(f)}}var p=new Array(),d=3,s=h-1,a=(1<<h)-1;p[1]=v.convert(this);if(h>1){var A=nbi();v.sqrTo(p[1],A);while(d<=a){p[d]=nbi();v.mulTo(A,p[d-2],p[d]);d+=2}}var l=q.t-1,x,u=true,c=nbi(),y;o=nbits(q[l])-1;while(l>=0){if(o>=s){x=(q[l]>>(o-s))&a}else{x=(q[l]&((1<<(o+1))-1))<<(s-o);if(l>0){x|=q[l-1]>>(this.DB+o-s)}}d=h;while((x&1)==0){x>>=1;--d}if((o-=d)<0){o+=this.DB;--l}if(u){p[x].copyTo(b);u=false}else{while(d>1){v.sqrTo(b,c);v.sqrTo(c,b);d-=2}if(d>0){v.sqrTo(b,c)}else{y=b;b=c;c=y}v.mulTo(c,p[x],b)}while(l>=0&&(q[l]&(1<<o))==0){v.sqrTo(b,c);y=b;b=c;c=y;if(--o<0){o=this.DB-1;--l}}}return v.revert(b)}function bnGCD(c){var b=(this.s<0)?this.negate():this.clone();var h=(c.s<0)?c.negate():c.clone();if(b.compareTo(h)<0){var e=b;b=h;h=e}var d=b.getLowestSetBit(),f=h.getLowestSetBit();if(f<0){return b}if(d<f){f=d}if(f>0){b.rShiftTo(f,b);h.rShiftTo(f,h)}while(b.signum()>0){if((d=b.getLowestSetBit())>0){b.rShiftTo(d,b)}if((d=h.getLowestSetBit())>0){h.rShiftTo(d,h)}if(b.compareTo(h)>=0){b.subTo(h,b);b.rShiftTo(1,b)}else{h.subTo(b,h);h.rShiftTo(1,h)}}if(f>0){h.lShiftTo(f,h)}return h}function bnpModInt(e){if(e<=0){return 0}var c=this.DV%e,b=(this.s<0)?e-1:0;if(this.t>0){if(c==0){b=this[0]%e}else{for(var a=this.t-1;a>=0;--a){b=(c*b+this[a])%e}}}return b}function bnModInverse(f){var j=f.isEven();if((this.isEven()&&j)||f.signum()==0){return BigInteger.ZERO}var i=f.clone(),h=this.clone();var g=nbv(1),e=nbv(0),l=nbv(0),k=nbv(1);while(i.signum()!=0){while(i.isEven()){i.rShiftTo(1,i);if(j){if(!g.isEven()||!e.isEven()){g.addTo(this,g);e.subTo(f,e)}g.rShiftTo(1,g)}else{if(!e.isEven()){e.subTo(f,e)}}e.rShiftTo(1,e)}while(h.isEven()){h.rShiftTo(1,h);if(j){if(!l.isEven()||!k.isEven()){l.addTo(this,l);k.subTo(f,k)}l.rShiftTo(1,l)}else{if(!k.isEven()){k.subTo(f,k)}}k.rShiftTo(1,k)}if(i.compareTo(h)>=0){i.subTo(h,i);if(j){g.subTo(l,g)}e.subTo(k,e)}else{h.subTo(i,h);if(j){l.subTo(g,l)}k.subTo(e,k)}}if(h.compareTo(BigInteger.ONE)!=0){return BigInteger.ZERO}if(k.compareTo(f)>=0){return k.subtract(f)}if(k.signum()<0){k.addTo(f,k)}else{return k}if(k.signum()<0){return k.add(f)}else{return k}}var lowprimes=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];var lplim=(1<<26)/lowprimes[lowprimes.length-1];function bnIsProbablePrime(e){var d,b=this.abs();if(b.t==1&&b[0]<=lowprimes[lowprimes.length-1]){for(d=0;d<lowprimes.length;++d){if(b[0]==lowprimes[d]){return true}}return false}if(b.isEven()){return false}d=1;while(d<lowprimes.length){var a=lowprimes[d],c=d+1;while(c<lowprimes.length&&a<lplim){a*=lowprimes[c++]}a=b.modInt(a);while(d<c){if(a%lowprimes[d++]==0){return false}}}return b.millerRabin(e)}function bnpMillerRabin(f){var g=this.subtract(BigInteger.ONE);var c=g.getLowestSetBit();if(c<=0){return false}var h=g.shiftRight(c);f=(f+1)>>1;if(f>lowprimes.length){f=lowprimes.length}var b=nbi();for(var e=0;e<f;++e){b.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);var l=b.modPow(h,this);if(l.compareTo(BigInteger.ONE)!=0&&l.compareTo(g)!=0){var d=1;while(d++<c&&l.compareTo(g)!=0){l=l.modPowInt(2,this);if(l.compareTo(BigInteger.ONE)==0){return false}}if(l.compareTo(g)!=0){return false}}}return true}BigInteger.prototype.chunkSize=bnpChunkSize;BigInteger.prototype.toRadix=bnpToRadix;BigInteger.prototype.fromRadix=bnpFromRadix;BigInteger.prototype.fromNumber=bnpFromNumber;BigInteger.prototype.bitwiseTo=bnpBitwiseTo;BigInteger.prototype.changeBit=bnpChangeBit;BigInteger.prototype.addTo=bnpAddTo;BigInteger.prototype.dMultiply=bnpDMultiply;BigInteger.prototype.dAddOffset=bnpDAddOffset;BigInteger.prototype.multiplyLowerTo=bnpMultiplyLowerTo;BigInteger.prototype.multiplyUpperTo=bnpMultiplyUpperTo;BigInteger.prototype.modInt=bnpModInt;BigInteger.prototype.millerRabin=bnpMillerRabin;BigInteger.prototype.clone=bnClone;BigInteger.prototype.intValue=bnIntValue;BigInteger.prototype.byteValue=bnByteValue;BigInteger.prototype.shortValue=bnShortValue;BigInteger.prototype.signum=bnSigNum;BigInteger.prototype.toByteArray=bnToByteArray;BigInteger.prototype.equals=bnEquals;BigInteger.prototype.min=bnMin;BigInteger.prototype.max=bnMax;BigInteger.prototype.and=bnAnd;BigInteger.prototype.or=bnOr;BigInteger.prototype.xor=bnXor;BigInteger.prototype.andNot=bnAndNot;BigInteger.prototype.not=bnNot;BigInteger.prototype.shiftLeft=bnShiftLeft;BigInteger.prototype.shiftRight=bnShiftRight;BigInteger.prototype.getLowestSetBit=bnGetLowestSetBit;BigInteger.prototype.bitCount=bnBitCount;BigInteger.prototype.testBit=bnTestBit;BigInteger.prototype.setBit=bnSetBit;BigInteger.prototype.clearBit=bnClearBit;BigInteger.prototype.flipBit=bnFlipBit;BigInteger.prototype.add=bnAdd;BigInteger.prototype.subtract=bnSubtract;BigInteger.prototype.multiply=bnMultiply;BigInteger.prototype.divide=bnDivide;BigInteger.prototype.remainder=bnRemainder;BigInteger.prototype.divideAndRemainder=bnDivideAndRemainder;BigInteger.prototype.modPow=bnModPow;BigInteger.prototype.modInverse=bnModInverse;BigInteger.prototype.pow=bnPow;BigInteger.prototype.gcd=bnGCD;BigInteger.prototype.isProbablePrime=bnIsProbablePrime;BigInteger.prototype.square=bnSquare;
    /*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
     */
    function Arcfour(){this.i=0;this.j=0;this.S=new Array()}function ARC4init(d){var c,a,b;for(c=0;c<256;++c){this.S[c]=c}a=0;for(c=0;c<256;++c){a=(a+this.S[c]+d[c%d.length])&255;b=this.S[c];this.S[c]=this.S[a];this.S[a]=b}this.i=0;this.j=0}function ARC4next(){var a;this.i=(this.i+1)&255;this.j=(this.j+this.S[this.i])&255;a=this.S[this.i];this.S[this.i]=this.S[this.j];this.S[this.j]=a;return this.S[(a+this.S[this.i])&255]}Arcfour.prototype.init=ARC4init;Arcfour.prototype.next=ARC4next;function prng_newstate(){return new Arcfour()}var rng_psize=256;
    /*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
     */
    var rng_state;var rng_pool;var rng_pptr;function rng_seed_int(a){rng_pool[rng_pptr++]^=a&255;rng_pool[rng_pptr++]^=(a>>8)&255;rng_pool[rng_pptr++]^=(a>>16)&255;rng_pool[rng_pptr++]^=(a>>24)&255;if(rng_pptr>=rng_psize){rng_pptr-=rng_psize}}function rng_seed_time(){rng_seed_int(new Date().getTime())}if(rng_pool==null){rng_pool=new Array();rng_pptr=0;var t;if(window!==undefined&&(window.crypto!==undefined||window.msCrypto!==undefined)){var crypto=window.crypto||window.msCrypto;if(crypto.getRandomValues){var ua=new Uint8Array(32);crypto.getRandomValues(ua);for(t=0;t<32;++t){rng_pool[rng_pptr++]=ua[t]}}else{if(navigator.appName=="Netscape"&&navigator.appVersion<"5"){var z=window.crypto.random(32);for(t=0;t<z.length;++t){rng_pool[rng_pptr++]=z.charCodeAt(t)&255}}}}while(rng_pptr<rng_psize){t=Math.floor(65536*Math.random());rng_pool[rng_pptr++]=t>>>8;rng_pool[rng_pptr++]=t&255}rng_pptr=0;rng_seed_time()}function rng_get_byte(){if(rng_state==null){rng_seed_time();rng_state=prng_newstate();rng_state.init(rng_pool);for(rng_pptr=0;rng_pptr<rng_pool.length;++rng_pptr){rng_pool[rng_pptr]=0}rng_pptr=0}return rng_state.next()}function rng_get_bytes(b){var a;for(a=0;a<b.length;++a){b[a]=rng_get_byte()}}function SecureRandom(){}SecureRandom.prototype.nextBytes=rng_get_bytes;
    /*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
     */
    function parseBigInt(b,a){return new BigInteger(b,a)}function linebrk(c,d){var a="";var b=0;while(b+d<c.length){a+=c.substring(b,b+d)+"\n";b+=d}return a+c.substring(b,c.length)}function byte2Hex(a){if(a<16){return"0"+a.toString(16)}else{return a.toString(16)}}function pkcs1pad2(e,h){if(h<e.length+11){throw"Message too long for RSA";return null}var g=new Array();var d=e.length-1;while(d>=0&&h>0){var f=e.charCodeAt(d--);if(f<128){g[--h]=f}else{if((f>127)&&(f<2048)){g[--h]=(f&63)|128;g[--h]=(f>>6)|192}else{g[--h]=(f&63)|128;g[--h]=((f>>6)&63)|128;g[--h]=(f>>12)|224}}}g[--h]=0;var b=new SecureRandom();var a=new Array();while(h>2){a[0]=0;while(a[0]==0){b.nextBytes(a)}g[--h]=a[0]}g[--h]=2;g[--h]=0;return new BigInteger(g)}function oaep_mgf1_arr(c,a,e){var b="",d=0;while(b.length<a){b+=e(String.fromCharCode.apply(String,c.concat([(d&4278190080)>>24,(d&16711680)>>16,(d&65280)>>8,d&255])));d+=1}return b}function oaep_pad(q,a,f,l){var c=KJUR.crypto.MessageDigest;var o=KJUR.crypto.Util;var b=null;if(!f){f="sha1"}if(typeof f==="string"){b=c.getCanonicalAlgName(f);l=c.getHashLength(b);f=function(i){return hextorstr(o.hashHex(rstrtohex(i),b))}}if(q.length+2*l+2>a){throw"Message too long for RSA"}var k="",e;for(e=0;e<a-q.length-2*l-2;e+=1){k+="\x00"}var h=f("")+k+"\x01"+q;var g=new Array(l);new SecureRandom().nextBytes(g);var j=oaep_mgf1_arr(g,h.length,f);var p=[];for(e=0;e<h.length;e+=1){p[e]=h.charCodeAt(e)^j.charCodeAt(e)}var m=oaep_mgf1_arr(p,g.length,f);var d=[0];for(e=0;e<g.length;e+=1){d[e+1]=g[e]^m.charCodeAt(e)}return new BigInteger(d.concat(p))}function RSAKey(){this.n=null;this.e=0;this.d=null;this.p=null;this.q=null;this.dmp1=null;this.dmq1=null;this.coeff=null}function RSASetPublic(b,a){this.isPublic=true;this.isPrivate=false;if(typeof b!=="string"){this.n=b;this.e=a}else{if(b!=null&&a!=null&&b.length>0&&a.length>0){this.n=parseBigInt(b,16);this.e=parseInt(a,16)}else{throw"Invalid RSA public key"}}}function RSADoPublic(a){return a.modPowInt(this.e,this.n)}function RSAEncrypt(d){var a=pkcs1pad2(d,(this.n.bitLength()+7)>>3);if(a==null){return null}var e=this.doPublic(a);if(e==null){return null}var b=e.toString(16);if((b.length&1)==0){return b}else{return"0"+b}}function RSAEncryptOAEP(f,e,b){var a=oaep_pad(f,(this.n.bitLength()+7)>>3,e,b);if(a==null){return null}var g=this.doPublic(a);if(g==null){return null}var d=g.toString(16);if((d.length&1)==0){return d}else{return"0"+d}}RSAKey.prototype.doPublic=RSADoPublic;RSAKey.prototype.setPublic=RSASetPublic;RSAKey.prototype.encrypt=RSAEncrypt;RSAKey.prototype.encryptOAEP=RSAEncryptOAEP;RSAKey.prototype.type="RSA";
    /*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
     */
    function pkcs1unpad2(g,j){var a=g.toByteArray();var f=0;while(f<a.length&&a[f]==0){++f}if(a.length-f!=j-1||a[f]!=2){return null}++f;while(a[f]!=0){if(++f>=a.length){return null}}var e="";while(++f<a.length){var h=a[f]&255;if(h<128){e+=String.fromCharCode(h)}else{if((h>191)&&(h<224)){e+=String.fromCharCode(((h&31)<<6)|(a[f+1]&63));++f}else{e+=String.fromCharCode(((h&15)<<12)|((a[f+1]&63)<<6)|(a[f+2]&63));f+=2}}}return e}function oaep_mgf1_str(c,a,e){var b="",d=0;while(b.length<a){b+=e(c+String.fromCharCode.apply(String,[(d&4278190080)>>24,(d&16711680)>>16,(d&65280)>>8,d&255]));d+=1}return b}function oaep_unpad(o,b,g,p){var e=KJUR.crypto.MessageDigest;var r=KJUR.crypto.Util;var c=null;if(!g){g="sha1"}if(typeof g==="string"){c=e.getCanonicalAlgName(g);p=e.getHashLength(c);g=function(d){return hextorstr(r.hashHex(rstrtohex(d),c))}}o=o.toByteArray();var h;for(h=0;h<o.length;h+=1){o[h]&=255}while(o.length<b){o.unshift(0)}o=String.fromCharCode.apply(String,o);if(o.length<2*p+2){throw"Cipher too short"}var f=o.substr(1,p);var s=o.substr(p+1);var q=oaep_mgf1_str(s,p,g);var k=[],h;for(h=0;h<f.length;h+=1){k[h]=f.charCodeAt(h)^q.charCodeAt(h)}var l=oaep_mgf1_str(String.fromCharCode.apply(String,k),o.length-p,g);var j=[];for(h=0;h<s.length;h+=1){j[h]=s.charCodeAt(h)^l.charCodeAt(h)}j=String.fromCharCode.apply(String,j);if(j.substr(0,p)!==g("")){throw"Hash mismatch"}j=j.substr(p);var a=j.indexOf("\x01");var m=(a!=-1)?j.substr(0,a).lastIndexOf("\x00"):-1;if(m+1!=a){throw"Malformed data"}return j.substr(a+1)}function RSASetPrivate(c,a,b){this.isPrivate=true;if(typeof c!=="string"){this.n=c;this.e=a;this.d=b}else{if(c!=null&&a!=null&&c.length>0&&a.length>0){this.n=parseBigInt(c,16);this.e=parseInt(a,16);this.d=parseBigInt(b,16)}else{throw"Invalid RSA private key"}}}function RSASetPrivateEx(g,d,e,c,b,a,h,f){this.isPrivate=true;this.isPublic=false;if(g==null){throw"RSASetPrivateEx N == null"}if(d==null){throw"RSASetPrivateEx E == null"}if(g.length==0){throw"RSASetPrivateEx N.length == 0"}if(d.length==0){throw"RSASetPrivateEx E.length == 0"}if(g!=null&&d!=null&&g.length>0&&d.length>0){this.n=parseBigInt(g,16);this.e=parseInt(d,16);this.d=parseBigInt(e,16);this.p=parseBigInt(c,16);this.q=parseBigInt(b,16);this.dmp1=parseBigInt(a,16);this.dmq1=parseBigInt(h,16);this.coeff=parseBigInt(f,16)}else{throw"Invalid RSA private key in RSASetPrivateEx"}}function RSAGenerate(b,i){var a=new SecureRandom();var f=b>>1;this.e=parseInt(i,16);var c=new BigInteger(i,16);for(;;){for(;;){this.p=new BigInteger(b-f,1,a);if(this.p.subtract(BigInteger.ONE).gcd(c).compareTo(BigInteger.ONE)==0&&this.p.isProbablePrime(10)){break}}for(;;){this.q=new BigInteger(f,1,a);if(this.q.subtract(BigInteger.ONE).gcd(c).compareTo(BigInteger.ONE)==0&&this.q.isProbablePrime(10)){break}}if(this.p.compareTo(this.q)<=0){var h=this.p;this.p=this.q;this.q=h}var g=this.p.subtract(BigInteger.ONE);var d=this.q.subtract(BigInteger.ONE);var e=g.multiply(d);if(e.gcd(c).compareTo(BigInteger.ONE)==0){this.n=this.p.multiply(this.q);if(this.n.bitLength()==b){this.d=c.modInverse(e);this.dmp1=this.d.mod(g);this.dmq1=this.d.mod(d);this.coeff=this.q.modInverse(this.p);break}}}this.isPrivate=true}function RSADoPrivate(a){if(this.p==null||this.q==null){return a.modPow(this.d,this.n)}var c=a.mod(this.p).modPow(this.dmp1,this.p);var b=a.mod(this.q).modPow(this.dmq1,this.q);while(c.compareTo(b)<0){c=c.add(this.p)}return c.subtract(b).multiply(this.coeff).mod(this.p).multiply(this.q).add(b)}function RSADecrypt(b){if(b.length!=Math.ceil(this.n.bitLength()/4)){throw new Error("wrong ctext length")}var d=parseBigInt(b,16);var a=this.doPrivate(d);if(a==null){return null}return pkcs1unpad2(a,(this.n.bitLength()+7)>>3)}function RSADecryptOAEP(e,d,b){if(e.length!=Math.ceil(this.n.bitLength()/4)){throw new Error("wrong ctext length")}var f=parseBigInt(e,16);var a=this.doPrivate(f);if(a==null){return null}return oaep_unpad(a,(this.n.bitLength()+7)>>3,d,b)}RSAKey.prototype.doPrivate=RSADoPrivate;RSAKey.prototype.setPrivate=RSASetPrivate;RSAKey.prototype.setPrivateEx=RSASetPrivateEx;RSAKey.prototype.generate=RSAGenerate;RSAKey.prototype.decrypt=RSADecrypt;RSAKey.prototype.decryptOAEP=RSADecryptOAEP;
    /*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
     */
    function ECFieldElementFp(b,a){this.x=a;this.q=b}function feFpEquals(a){if(a==this){return true}return(this.q.equals(a.q)&&this.x.equals(a.x))}function feFpToBigInteger(){return this.x}function feFpNegate(){return new ECFieldElementFp(this.q,this.x.negate().mod(this.q))}function feFpAdd(a){return new ECFieldElementFp(this.q,this.x.add(a.toBigInteger()).mod(this.q))}function feFpSubtract(a){return new ECFieldElementFp(this.q,this.x.subtract(a.toBigInteger()).mod(this.q))}function feFpMultiply(a){return new ECFieldElementFp(this.q,this.x.multiply(a.toBigInteger()).mod(this.q))}function feFpSquare(){return new ECFieldElementFp(this.q,this.x.square().mod(this.q))}function feFpDivide(a){return new ECFieldElementFp(this.q,this.x.multiply(a.toBigInteger().modInverse(this.q)).mod(this.q))}ECFieldElementFp.prototype.equals=feFpEquals;ECFieldElementFp.prototype.toBigInteger=feFpToBigInteger;ECFieldElementFp.prototype.negate=feFpNegate;ECFieldElementFp.prototype.add=feFpAdd;ECFieldElementFp.prototype.subtract=feFpSubtract;ECFieldElementFp.prototype.multiply=feFpMultiply;ECFieldElementFp.prototype.square=feFpSquare;ECFieldElementFp.prototype.divide=feFpDivide;function ECPointFp(c,a,d,b){this.curve=c;this.x=a;this.y=d;if(b==null){this.z=BigInteger.ONE}else{this.z=b}this.zinv=null}function pointFpGetX(){if(this.zinv==null){this.zinv=this.z.modInverse(this.curve.q)}return this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q))}function pointFpGetY(){if(this.zinv==null){this.zinv=this.z.modInverse(this.curve.q)}return this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q))}function pointFpEquals(a){if(a==this){return true}if(this.isInfinity()){return a.isInfinity()}if(a.isInfinity()){return this.isInfinity()}var c,b;c=a.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(a.z)).mod(this.curve.q);if(!c.equals(BigInteger.ZERO)){return false}b=a.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(a.z)).mod(this.curve.q);return b.equals(BigInteger.ZERO)}function pointFpIsInfinity(){if((this.x==null)&&(this.y==null)){return true}return this.z.equals(BigInteger.ZERO)&&!this.y.toBigInteger().equals(BigInteger.ZERO)}function pointFpNegate(){return new ECPointFp(this.curve,this.x,this.y.negate(),this.z)}function pointFpAdd(l){if(this.isInfinity()){return l}if(l.isInfinity()){return this}var p=l.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(l.z)).mod(this.curve.q);var o=l.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(l.z)).mod(this.curve.q);if(BigInteger.ZERO.equals(o)){if(BigInteger.ZERO.equals(p)){return this.twice()}return this.curve.getInfinity()}var j=new BigInteger("3");var e=this.x.toBigInteger();var n=this.y.toBigInteger();var c=l.x.toBigInteger();var k=l.y.toBigInteger();var m=o.square();var i=m.multiply(o);var d=e.multiply(m);var g=p.square().multiply(this.z);var a=g.subtract(d.shiftLeft(1)).multiply(l.z).subtract(i).multiply(o).mod(this.curve.q);var h=d.multiply(j).multiply(p).subtract(n.multiply(i)).subtract(g.multiply(p)).multiply(l.z).add(p.multiply(i)).mod(this.curve.q);var f=i.multiply(this.z).multiply(l.z).mod(this.curve.q);return new ECPointFp(this.curve,this.curve.fromBigInteger(a),this.curve.fromBigInteger(h),f)}function pointFpTwice(){if(this.isInfinity()){return this}if(this.y.toBigInteger().signum()==0){return this.curve.getInfinity()}var g=new BigInteger("3");var c=this.x.toBigInteger();var h=this.y.toBigInteger();var e=h.multiply(this.z);var j=e.multiply(h).mod(this.curve.q);var i=this.curve.a.toBigInteger();var k=c.square().multiply(g);if(!BigInteger.ZERO.equals(i)){k=k.add(this.z.square().multiply(i))}k=k.mod(this.curve.q);var b=k.square().subtract(c.shiftLeft(3).multiply(j)).shiftLeft(1).multiply(e).mod(this.curve.q);var f=k.multiply(g).multiply(c).subtract(j.shiftLeft(1)).shiftLeft(2).multiply(j).subtract(k.square().multiply(k)).mod(this.curve.q);var d=e.square().multiply(e).shiftLeft(3).mod(this.curve.q);return new ECPointFp(this.curve,this.curve.fromBigInteger(b),this.curve.fromBigInteger(f),d)}function pointFpMultiply(d){if(this.isInfinity()){return this}if(d.signum()==0){return this.curve.getInfinity()}var m=d;var l=m.multiply(new BigInteger("3"));var b=this.negate();var j=this;var q=this.curve.q.subtract(d);var o=q.multiply(new BigInteger("3"));var c=new ECPointFp(this.curve,this.x,this.y);var a=c.negate();var g;for(g=l.bitLength()-2;g>0;--g){j=j.twice();var n=l.testBit(g);var f=m.testBit(g);if(n!=f){j=j.add(n?this:b)}}for(g=o.bitLength()-2;g>0;--g){c=c.twice();var p=o.testBit(g);var r=q.testBit(g);if(p!=r){c=c.add(p?c:a)}}return j}function pointFpMultiplyTwo(c,a,b){var d;if(c.bitLength()>b.bitLength()){d=c.bitLength()-1}else{d=b.bitLength()-1}var f=this.curve.getInfinity();var e=this.add(a);while(d>=0){f=f.twice();if(c.testBit(d)){if(b.testBit(d)){f=f.add(e)}else{f=f.add(this)}}else{if(b.testBit(d)){f=f.add(a)}}--d}return f}ECPointFp.prototype.getX=pointFpGetX;ECPointFp.prototype.getY=pointFpGetY;ECPointFp.prototype.equals=pointFpEquals;ECPointFp.prototype.isInfinity=pointFpIsInfinity;ECPointFp.prototype.negate=pointFpNegate;ECPointFp.prototype.add=pointFpAdd;ECPointFp.prototype.twice=pointFpTwice;ECPointFp.prototype.multiply=pointFpMultiply;ECPointFp.prototype.multiplyTwo=pointFpMultiplyTwo;function ECCurveFp(e,d,c){this.q=e;this.a=this.fromBigInteger(d);this.b=this.fromBigInteger(c);this.infinity=new ECPointFp(this,null,null)}function curveFpGetQ(){return this.q}function curveFpGetA(){return this.a}function curveFpGetB(){return this.b}function curveFpEquals(a){if(a==this){return true}return(this.q.equals(a.q)&&this.a.equals(a.a)&&this.b.equals(a.b))}function curveFpGetInfinity(){return this.infinity}function curveFpFromBigInteger(a){return new ECFieldElementFp(this.q,a)}function curveFpDecodePointHex(d){switch(parseInt(d.substr(0,2),16)){case 0:return this.infinity;case 2:case 3:return null;case 4:case 6:case 7:var a=(d.length-2)/2;var c=d.substr(2,a);var b=d.substr(a+2,a);return new ECPointFp(this,this.fromBigInteger(new BigInteger(c,16)),this.fromBigInteger(new BigInteger(b,16)));default:return null}}ECCurveFp.prototype.getQ=curveFpGetQ;ECCurveFp.prototype.getA=curveFpGetA;ECCurveFp.prototype.getB=curveFpGetB;ECCurveFp.prototype.equals=curveFpEquals;ECCurveFp.prototype.getInfinity=curveFpGetInfinity;ECCurveFp.prototype.fromBigInteger=curveFpFromBigInteger;ECCurveFp.prototype.decodePointHex=curveFpDecodePointHex;
    /*! (c) Stefan Thomas | https://github.com/bitcoinjs/bitcoinjs-lib
     */
    ECFieldElementFp.prototype.getByteLength=function(){return Math.floor((this.toBigInteger().bitLength()+7)/8)};ECPointFp.prototype.getEncoded=function(c){var d=function(h,f){var g=h.toByteArrayUnsigned();if(f<g.length){g=g.slice(g.length-f)}else{while(f>g.length){g.unshift(0)}}return g};var a=this.getX().toBigInteger();var e=this.getY().toBigInteger();var b=d(a,32);if(c){if(e.isEven()){b.unshift(2)}else{b.unshift(3)}}else{b.unshift(4);b=b.concat(d(e,32))}return b};ECPointFp.decodeFrom=function(g,c){var f=c[0];var e=c.length-1;var d=c.slice(1,1+e/2);var b=c.slice(1+e/2,1+e);d.unshift(0);b.unshift(0);var a=new BigInteger(d);var h=new BigInteger(b);return new ECPointFp(g,g.fromBigInteger(a),g.fromBigInteger(h))};ECPointFp.decodeFromHex=function(g,c){var f=c.substr(0,2);var e=c.length-2;var d=c.substr(2,e/2);var b=c.substr(2+e/2,e/2);var a=new BigInteger(d,16);var h=new BigInteger(b,16);return new ECPointFp(g,g.fromBigInteger(a),g.fromBigInteger(h))};ECPointFp.prototype.add2D=function(c){if(this.isInfinity()){return c}if(c.isInfinity()){return this}if(this.x.equals(c.x)){if(this.y.equals(c.y)){return this.twice()}return this.curve.getInfinity()}var g=c.x.subtract(this.x);var e=c.y.subtract(this.y);var a=e.divide(g);var d=a.square().subtract(this.x).subtract(c.x);var f=a.multiply(this.x.subtract(d)).subtract(this.y);return new ECPointFp(this.curve,d,f)};ECPointFp.prototype.twice2D=function(){if(this.isInfinity()){return this}if(this.y.toBigInteger().signum()==0){return this.curve.getInfinity()}var b=this.curve.fromBigInteger(BigInteger.valueOf(2));var e=this.curve.fromBigInteger(BigInteger.valueOf(3));var a=this.x.square().multiply(e).add(this.curve.a).divide(this.y.multiply(b));var c=a.square().subtract(this.x.multiply(b));var d=a.multiply(this.x.subtract(c)).subtract(this.y);return new ECPointFp(this.curve,c,d)};ECPointFp.prototype.multiply2D=function(b){if(this.isInfinity()){return this}if(b.signum()==0){return this.curve.getInfinity()}var g=b;var f=g.multiply(new BigInteger("3"));var l=this.negate();var d=this;var c;for(c=f.bitLength()-2;c>0;--c){d=d.twice();var a=f.testBit(c);var j=g.testBit(c);if(a!=j){d=d.add2D(a?this:l)}}return d};ECPointFp.prototype.isOnCurve=function(){var d=this.getX().toBigInteger();var i=this.getY().toBigInteger();var f=this.curve.getA().toBigInteger();var c=this.curve.getB().toBigInteger();var h=this.curve.getQ();var e=i.multiply(i).mod(h);var g=d.multiply(d).multiply(d).add(f.multiply(d)).add(c).mod(h);return e.equals(g)};ECPointFp.prototype.toString=function(){return"("+this.getX().toBigInteger().toString()+","+this.getY().toBigInteger().toString()+")"};ECPointFp.prototype.validate=function(){var c=this.curve.getQ();if(this.isInfinity()){throw new Error("Point is at infinity.")}var a=this.getX().toBigInteger();var b=this.getY().toBigInteger();if(a.compareTo(BigInteger.ONE)<0||a.compareTo(c.subtract(BigInteger.ONE))>0){throw new Error("x coordinate out of bounds")}if(b.compareTo(BigInteger.ONE)<0||b.compareTo(c.subtract(BigInteger.ONE))>0){throw new Error("y coordinate out of bounds")}if(!this.isOnCurve()){throw new Error("Point is not on the curve.")}if(this.multiply(c).isInfinity()){throw new Error("Point is not a scalar multiple of G.")}return true};
    /*! Mike Samuel (c) 2009 | code.google.com/p/json-sans-eval
     */
    var jsonParse=(function(){var e="(?:-?\\b(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\b)";var j='(?:[^\\0-\\x08\\x0a-\\x1f"\\\\]|\\\\(?:["/\\\\bfnrt]|u[0-9A-Fa-f]{4}))';var i='(?:"'+j+'*")';var d=new RegExp("(?:false|true|null|[\\{\\}\\[\\]]|"+e+"|"+i+")","g");var k=new RegExp("\\\\(?:([^u])|u(.{4}))","g");var g={'"':'"',"/":"/","\\":"\\",b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"};function h(l,m,n){return m?g[m]:String.fromCharCode(parseInt(n,16))}var c=new String("");var a="\\";var f={"{":Object,"[":Array};var b=Object.hasOwnProperty;return function(u,q){var p=u.match(d);var x;var v=p[0];var l=false;if("{"===v){x={}}else{if("["===v){x=[]}else{x=[];l=true}}var t;var r=[x];for(var o=1-l,m=p.length;o<m;++o){v=p[o];var w;switch(v.charCodeAt(0)){default:w=r[0];w[t||w.length]=+(v);t=void 0;break;case 34:v=v.substring(1,v.length-1);if(v.indexOf(a)!==-1){v=v.replace(k,h)}w=r[0];if(!t){if(w instanceof Array){t=w.length}else{t=v||c;break}}w[t]=v;t=void 0;break;case 91:w=r[0];r.unshift(w[t||w.length]=[]);t=void 0;break;case 93:r.shift();break;case 102:w=r[0];w[t||w.length]=false;t=void 0;break;case 110:w=r[0];w[t||w.length]=null;t=void 0;break;case 116:w=r[0];w[t||w.length]=true;t=void 0;break;case 123:w=r[0];r.unshift(w[t||w.length]={});t=void 0;break;case 125:r.shift();break}}if(l){if(r.length!==1){throw new Error()}x=x[0]}else{if(r.length){throw new Error()}}if(q){var s=function(C,B){var D=C[B];if(D&&typeof D==="object"){var n=null;for(var z in D){if(b.call(D,z)&&D!==C){var y=s(D,z);if(y!==void 0){D[z]=y}else{if(!n){n=[]}n.push(z)}}}if(n){for(var A=n.length;--A>=0;){delete D[n[A]]}}}return q.call(C,B,D)};x=s({"":x},"")}return x}})();
    if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.asn1=="undefined"||!KJUR.asn1){KJUR.asn1={}}KJUR.asn1.ASN1Util=new function(){this.integerToByteHex=function(a){var b=a.toString(16);if((b.length%2)==1){b="0"+b}return b};this.bigIntToMinTwosComplementsHex=function(j){var f=j.toString(16);if(f.substr(0,1)!="-"){if(f.length%2==1){f="0"+f}else{if(!f.match(/^[0-7]/)){f="00"+f}}}else{var a=f.substr(1);var e=a.length;if(e%2==1){e+=1}else{if(!f.match(/^[0-7]/)){e+=2}}var g="";for(var d=0;d<e;d++){g+="f"}var c=new BigInteger(g,16);var b=c.xor(j).add(BigInteger.ONE);f=b.toString(16).replace(/^-/,"")}return f};this.getPEMStringFromHex=function(a,b){return hextopem(a,b)};this.newObject=function(k){var F=KJUR,o=F.asn1,v=o.ASN1Object,B=o.DERBoolean,e=o.DERInteger,t=o.DERBitString,h=o.DEROctetString,x=o.DERNull,y=o.DERObjectIdentifier,m=o.DEREnumerated,g=o.DERUTF8String,f=o.DERNumericString,A=o.DERPrintableString,w=o.DERTeletexString,q=o.DERIA5String,E=o.DERUTCTime,j=o.DERGeneralizedTime,b=o.DERVisibleString,l=o.DERBMPString,n=o.DERSequence,c=o.DERSet,s=o.DERTaggedObject,p=o.ASN1Util.newObject;if(k instanceof o.ASN1Object){return k}var u=Object.keys(k);if(u.length!=1){throw new Error("key of param shall be only one.")}var H=u[0];if(":asn1:bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:visstr:bmpstr:seq:set:tag:".indexOf(":"+H+":")==-1){throw new Error("undefined key: "+H)}if(H=="bool"){return new B(k[H])}if(H=="int"){return new e(k[H])}if(H=="bitstr"){return new t(k[H])}if(H=="octstr"){return new h(k[H])}if(H=="null"){return new x(k[H])}if(H=="oid"){return new y(k[H])}if(H=="enum"){return new m(k[H])}if(H=="utf8str"){return new g(k[H])}if(H=="numstr"){return new f(k[H])}if(H=="prnstr"){return new A(k[H])}if(H=="telstr"){return new w(k[H])}if(H=="ia5str"){return new q(k[H])}if(H=="utctime"){return new E(k[H])}if(H=="gentime"){return new j(k[H])}if(H=="visstr"){return new b(k[H])}if(H=="bmpstr"){return new l(k[H])}if(H=="asn1"){return new v(k[H])}if(H=="seq"){var d=k[H];var G=[];for(var z=0;z<d.length;z++){var D=p(d[z]);G.push(D)}return new n({array:G})}if(H=="set"){var d=k[H];var G=[];for(var z=0;z<d.length;z++){var D=p(d[z]);G.push(D)}return new c({array:G})}if(H=="tag"){var C=k[H];if(Object.prototype.toString.call(C)==="[object Array]"&&C.length==3){var r=p(C[2]);return new s({tag:C[0],explicit:C[1],obj:r})}else{return new s(C)}}};this.jsonToASN1HEX=function(b){var a=this.newObject(b);return a.getEncodedHex()}};KJUR.asn1.ASN1Util.oidHexToInt=function(a){var j="";var k=parseInt(a.substr(0,2),16);var d=Math.floor(k/40);var c=k%40;var j=d+"."+c;var e="";for(var f=2;f<a.length;f+=2){var g=parseInt(a.substr(f,2),16);var h=("00000000"+g.toString(2)).slice(-8);e=e+h.substr(1,7);if(h.substr(0,1)=="0"){var b=new BigInteger(e,2);j=j+"."+b.toString(10);e=""}}return j};KJUR.asn1.ASN1Util.oidIntToHex=function(f){var e=function(a){var k=a.toString(16);if(k.length==1){k="0"+k}return k};var d=function(o){var n="";var k=new BigInteger(o,10);var a=k.toString(2);var l=7-a.length%7;if(l==7){l=0}var q="";for(var m=0;m<l;m++){q+="0"}a=q+a;for(var m=0;m<a.length-1;m+=7){var p=a.substr(m,7);if(m!=a.length-7){p="1"+p}n+=e(parseInt(p,2))}return n};if(!f.match(/^[0-9.]+$/)){throw"malformed oid string: "+f}var g="";var b=f.split(".");var j=parseInt(b[0])*40+parseInt(b[1]);g+=e(j);b.splice(0,2);for(var c=0;c<b.length;c++){g+=d(b[c])}return g};KJUR.asn1.ASN1Object=function(e){var c=true;var b=null;var d="00";var f="00";var a="";this.params=null;this.getLengthHexFromValue=function(){if(typeof this.hV=="undefined"||this.hV==null){throw new Error("this.hV is null or undefined")}if(this.hV.length%2==1){throw new Error("value hex must be even length: n="+a.length+",v="+this.hV)}var j=this.hV.length/2;var i=j.toString(16);if(i.length%2==1){i="0"+i}if(j<128){return i}else{var h=i.length/2;if(h>15){throw"ASN.1 length too long to represent by 8x: n = "+j.toString(16)}var g=128+h;return g.toString(16)+i}};this.getEncodedHex=function(){if(this.hTLV==null||this.isModified){this.hV=this.getFreshValueHex();this.hL=this.getLengthHexFromValue();this.hTLV=this.hT+this.hL+this.hV;this.isModified=false}return this.hTLV};this.getValueHex=function(){this.getEncodedHex();return this.hV};this.getFreshValueHex=function(){return""};this.setByParam=function(g){this.params=g};if(e!=undefined){if(e.tlv!=undefined){this.hTLV=e.tlv;this.isModified=false}}};KJUR.asn1.DERAbstractString=function(c){KJUR.asn1.DERAbstractString.superclass.constructor.call(this);var b=null;var a=null;this.getString=function(){return this.s};this.setString=function(d){this.hTLV=null;this.isModified=true;this.s=d;this.hV=utf8tohex(this.s).toLowerCase()};this.setStringHex=function(d){this.hTLV=null;this.isModified=true;this.s=null;this.hV=d};this.getFreshValueHex=function(){return this.hV};if(typeof c!="undefined"){if(typeof c=="string"){this.setString(c)}else{if(typeof c.str!="undefined"){this.setString(c.str)}else{if(typeof c.hex!="undefined"){this.setStringHex(c.hex)}}}}};extendClass(KJUR.asn1.DERAbstractString,KJUR.asn1.ASN1Object);KJUR.asn1.DERAbstractTime=function(c){KJUR.asn1.DERAbstractTime.superclass.constructor.call(this);var b=null;var a=null;this.localDateToUTC=function(g){var e=g.getTime()+(g.getTimezoneOffset()*60000);var f=new Date(e);return f};this.formatDate=function(m,o,e){var g=this.zeroPadding;var n=this.localDateToUTC(m);var p=String(n.getFullYear());if(o=="utc"){p=p.substr(2,2)}var l=g(String(n.getMonth()+1),2);var q=g(String(n.getDate()),2);var h=g(String(n.getHours()),2);var i=g(String(n.getMinutes()),2);var j=g(String(n.getSeconds()),2);var r=p+l+q+h+i+j;if(e===true){var f=n.getMilliseconds();if(f!=0){var k=g(String(f),3);k=k.replace(/[0]+$/,"");r=r+"."+k}}return r+"Z"};this.zeroPadding=function(e,d){if(e.length>=d){return e}return new Array(d-e.length+1).join("0")+e};this.setByParam=function(d){this.hV=null;this.hTLV=null;this.params=d};this.getString=function(){return undefined};this.setString=function(d){this.hTLV=null;this.isModified=true;if(this.params==undefined){this.params={}}this.params.str=d};this.setByDate=function(d){this.hTLV=null;this.isModified=true;if(this.params==undefined){this.params={}}this.params.date=d};this.setByDateValue=function(h,j,e,d,f,g){var i=new Date(Date.UTC(h,j-1,e,d,f,g,0));this.setByDate(i)};this.getFreshValueHex=function(){return this.hV}};extendClass(KJUR.asn1.DERAbstractTime,KJUR.asn1.ASN1Object);KJUR.asn1.DERAbstractStructured=function(b){KJUR.asn1.DERAbstractString.superclass.constructor.call(this);var a=null;this.setByASN1ObjectArray=function(c){this.hTLV=null;this.isModified=true;this.asn1Array=c};this.appendASN1Object=function(c){this.hTLV=null;this.isModified=true;this.asn1Array.push(c)};this.asn1Array=new Array();if(typeof b!="undefined"){if(typeof b.array!="undefined"){this.asn1Array=b.array}}};extendClass(KJUR.asn1.DERAbstractStructured,KJUR.asn1.ASN1Object);KJUR.asn1.DERBoolean=function(a){KJUR.asn1.DERBoolean.superclass.constructor.call(this);this.hT="01";if(a==false){this.hTLV="010100"}else{this.hTLV="0101ff"}};extendClass(KJUR.asn1.DERBoolean,KJUR.asn1.ASN1Object);KJUR.asn1.DERInteger=function(a){KJUR.asn1.DERInteger.superclass.constructor.call(this);this.hT="02";this.setByBigInteger=function(b){this.hTLV=null;this.isModified=true;this.hV=KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(b)};this.setByInteger=function(c){var b=new BigInteger(String(c),10);this.setByBigInteger(b)};this.setValueHex=function(b){this.hV=b};this.getFreshValueHex=function(){return this.hV};if(typeof a!="undefined"){if(typeof a.bigint!="undefined"){this.setByBigInteger(a.bigint)}else{if(typeof a["int"]!="undefined"){this.setByInteger(a["int"])}else{if(typeof a=="number"){this.setByInteger(a)}else{if(typeof a.hex!="undefined"){this.setValueHex(a.hex)}}}}}};extendClass(KJUR.asn1.DERInteger,KJUR.asn1.ASN1Object);KJUR.asn1.DERBitString=function(b){if(b!==undefined&&typeof b.obj!=="undefined"){var a=KJUR.asn1.ASN1Util.newObject(b.obj);b.hex="00"+a.getEncodedHex()}KJUR.asn1.DERBitString.superclass.constructor.call(this);this.hT="03";this.setHexValueIncludingUnusedBits=function(c){this.hTLV=null;this.isModified=true;this.hV=c};this.setUnusedBitsAndHexValue=function(c,e){if(c<0||7<c){throw"unused bits shall be from 0 to 7: u = "+c}var d="0"+c;this.hTLV=null;this.isModified=true;this.hV=d+e};this.setByBinaryString=function(e){e=e.replace(/0+$/,"");var f=8-e.length%8;if(f==8){f=0}for(var g=0;g<=f;g++){e+="0"}var j="";for(var g=0;g<e.length-1;g+=8){var d=e.substr(g,8);var c=parseInt(d,2).toString(16);if(c.length==1){c="0"+c}j+=c}this.hTLV=null;this.isModified=true;this.hV="0"+f+j};this.setByBooleanArray=function(e){var d="";for(var c=0;c<e.length;c++){if(e[c]==true){d+="1"}else{d+="0"}}this.setByBinaryString(d)};this.newFalseArray=function(e){var c=new Array(e);for(var d=0;d<e;d++){c[d]=false}return c};this.getFreshValueHex=function(){return this.hV};if(typeof b!="undefined"){if(typeof b=="string"&&b.toLowerCase().match(/^[0-9a-f]+$/)){this.setHexValueIncludingUnusedBits(b)}else{if(typeof b.hex!="undefined"){this.setHexValueIncludingUnusedBits(b.hex)}else{if(typeof b.bin!="undefined"){this.setByBinaryString(b.bin)}else{if(typeof b.array!="undefined"){this.setByBooleanArray(b.array)}}}}}};extendClass(KJUR.asn1.DERBitString,KJUR.asn1.ASN1Object);KJUR.asn1.DEROctetString=function(b){if(b!==undefined&&typeof b.obj!=="undefined"){var a=KJUR.asn1.ASN1Util.newObject(b.obj);b.hex=a.getEncodedHex()}KJUR.asn1.DEROctetString.superclass.constructor.call(this,b);this.hT="04"};extendClass(KJUR.asn1.DEROctetString,KJUR.asn1.DERAbstractString);KJUR.asn1.DERNull=function(){KJUR.asn1.DERNull.superclass.constructor.call(this);this.hT="05";this.hTLV="0500"};extendClass(KJUR.asn1.DERNull,KJUR.asn1.ASN1Object);KJUR.asn1.DERObjectIdentifier=function(a){KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(this);this.hT="06";this.setValueHex=function(b){this.hTLV=null;this.isModified=true;this.s=null;this.hV=b};this.setValueOidString=function(b){var c=oidtohex(b);if(c==null){throw new Error("malformed oid string: "+b)}this.hTLV=null;this.isModified=true;this.s=null;this.hV=c};this.setValueName=function(c){var b=KJUR.asn1.x509.OID.name2oid(c);if(b!==""){this.setValueOidString(b)}else{throw new Error("DERObjectIdentifier oidName undefined: "+c)}};this.setValueNameOrOid=function(b){if(b.match(/^[0-2].[0-9.]+$/)){this.setValueOidString(b)}else{this.setValueName(b)}};this.getFreshValueHex=function(){return this.hV};this.setByParam=function(b){if(typeof b==="string"){this.setValueNameOrOid(b)}else{if(b.oid!==undefined){this.setValueNameOrOid(b.oid)}else{if(b.name!==undefined){this.setValueNameOrOid(b.name)}else{if(b.hex!==undefined){this.setValueHex(b.hex)}}}}};if(a!==undefined){this.setByParam(a)}};extendClass(KJUR.asn1.DERObjectIdentifier,KJUR.asn1.ASN1Object);KJUR.asn1.DEREnumerated=function(a){KJUR.asn1.DEREnumerated.superclass.constructor.call(this);this.hT="0a";this.setByBigInteger=function(b){this.hTLV=null;this.isModified=true;this.hV=KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(b)};this.setByInteger=function(c){var b=new BigInteger(String(c),10);this.setByBigInteger(b)};this.setValueHex=function(b){this.hV=b};this.getFreshValueHex=function(){return this.hV};if(typeof a!="undefined"){if(typeof a["int"]!="undefined"){this.setByInteger(a["int"])}else{if(typeof a=="number"){this.setByInteger(a)}else{if(typeof a.hex!="undefined"){this.setValueHex(a.hex)}}}}};extendClass(KJUR.asn1.DEREnumerated,KJUR.asn1.ASN1Object);KJUR.asn1.DERUTF8String=function(a){KJUR.asn1.DERUTF8String.superclass.constructor.call(this,a);this.hT="0c"};extendClass(KJUR.asn1.DERUTF8String,KJUR.asn1.DERAbstractString);KJUR.asn1.DERNumericString=function(a){KJUR.asn1.DERNumericString.superclass.constructor.call(this,a);this.hT="12"};extendClass(KJUR.asn1.DERNumericString,KJUR.asn1.DERAbstractString);KJUR.asn1.DERPrintableString=function(a){KJUR.asn1.DERPrintableString.superclass.constructor.call(this,a);this.hT="13"};extendClass(KJUR.asn1.DERPrintableString,KJUR.asn1.DERAbstractString);KJUR.asn1.DERTeletexString=function(a){KJUR.asn1.DERTeletexString.superclass.constructor.call(this,a);this.hT="14"};extendClass(KJUR.asn1.DERTeletexString,KJUR.asn1.DERAbstractString);KJUR.asn1.DERIA5String=function(a){KJUR.asn1.DERIA5String.superclass.constructor.call(this,a);this.hT="16"};extendClass(KJUR.asn1.DERIA5String,KJUR.asn1.DERAbstractString);KJUR.asn1.DERVisibleString=function(a){KJUR.asn1.DERIA5String.superclass.constructor.call(this,a);this.hT="1a"};extendClass(KJUR.asn1.DERVisibleString,KJUR.asn1.DERAbstractString);KJUR.asn1.DERBMPString=function(a){KJUR.asn1.DERBMPString.superclass.constructor.call(this,a);this.hT="1e"};extendClass(KJUR.asn1.DERBMPString,KJUR.asn1.DERAbstractString);KJUR.asn1.DERUTCTime=function(a){KJUR.asn1.DERUTCTime.superclass.constructor.call(this,a);this.hT="17";this.params=undefined;this.getFreshValueHex=function(){var d=this.params;if(this.params==undefined){d={date:new Date()}}if(typeof d=="string"){if(d.match(/^[0-9]{12}Z$/)||d.match(/^[0-9]{12}\.[0-9]+Z$/)){this.hV=stohex(d)}else{throw new Error("malformed string for GeneralizedTime: "+d)}}else{if(d.str!=undefined){this.hV=stohex(d.str)}else{if(d.date==undefined&&d.millis==true){var c=new Date();this.hV=stohex(this.formatDate(c,"utc",true))}else{if(d.date!=undefined&&d.date instanceof Date){var b=(d.millis===true);this.hV=stohex(this.formatDate(d.date,"utc",b))}else{if(d instanceof Date){this.hV=stohex(this.formatDate(d,"utc"))}}}}}if(this.hV==undefined){throw new Error("parameter not specified properly for UTCTime")}return this.hV};if(a!=undefined){this.setByParam(a)}};extendClass(KJUR.asn1.DERUTCTime,KJUR.asn1.DERAbstractTime);KJUR.asn1.DERGeneralizedTime=function(a){KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(this,a);this.hT="18";this.params=a;this.getFreshValueHex=function(){var d=this.params;if(this.params==undefined){d={date:new Date()}}if(typeof d=="string"){if(d.match(/^[0-9]{14}Z$/)||d.match(/^[0-9]{14}\.[0-9]+Z$/)){this.hV=stohex(d)}else{throw new Error("malformed string for GeneralizedTime: "+d)}}else{if(d.str!=undefined){this.hV=stohex(d.str)}else{if(d.date==undefined&&d.millis==true){var c=new Date();this.hV=stohex(this.formatDate(c,"gen",true))}else{if(d.date!=undefined&&d.date instanceof Date){var b=(d.millis===true);this.hV=stohex(this.formatDate(d.date,"gen",b))}else{if(d instanceof Date){this.hV=stohex(this.formatDate(d,"gen"))}}}}}if(this.hV==undefined){throw new Error("parameter not specified properly for GeneralizedTime")}return this.hV};if(a!=undefined){this.setByParam(a)}};extendClass(KJUR.asn1.DERGeneralizedTime,KJUR.asn1.DERAbstractTime);KJUR.asn1.DERSequence=function(a){KJUR.asn1.DERSequence.superclass.constructor.call(this,a);this.hT="30";this.getFreshValueHex=function(){var c="";for(var b=0;b<this.asn1Array.length;b++){var d=this.asn1Array[b];c+=d.getEncodedHex()}this.hV=c;return this.hV}};extendClass(KJUR.asn1.DERSequence,KJUR.asn1.DERAbstractStructured);KJUR.asn1.DERSet=function(a){KJUR.asn1.DERSet.superclass.constructor.call(this,a);this.hT="31";this.sortFlag=true;this.getFreshValueHex=function(){var b=new Array();for(var c=0;c<this.asn1Array.length;c++){var d=this.asn1Array[c];b.push(d.getEncodedHex())}if(this.sortFlag==true){b.sort()}this.hV=b.join("");return this.hV};if(typeof a!="undefined"){if(typeof a.sortflag!="undefined"&&a.sortflag==false){this.sortFlag=false}}};extendClass(KJUR.asn1.DERSet,KJUR.asn1.DERAbstractStructured);KJUR.asn1.DERTaggedObject=function(b){KJUR.asn1.DERTaggedObject.superclass.constructor.call(this);var a=KJUR.asn1;this.hT="a0";this.hV="";this.isExplicit=true;this.asn1Object=null;this.setASN1Object=function(c,d,e){this.hT=d;this.isExplicit=c;this.asn1Object=e;if(this.isExplicit){this.hV=this.asn1Object.getEncodedHex();this.hTLV=null;this.isModified=true}else{this.hV=null;this.hTLV=e.getEncodedHex();this.hTLV=this.hTLV.replace(/^../,d);this.isModified=false}};this.getFreshValueHex=function(){return this.hV};this.setByParam=function(c){if(c.tag!=undefined){this.hT=c.tag}if(c.explicit!=undefined){this.isExplicit=c.explicit}if(c.tage!=undefined){this.hT=c.tage;this.isExplicit=true}if(c.tagi!=undefined){this.hT=c.tagi;this.isExplicit=false}if(c.obj!=undefined){if(c.obj instanceof a.ASN1Object){this.asn1Object=c.obj;this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)}else{if(typeof c.obj=="object"){this.asn1Object=a.ASN1Util.newObject(c.obj);this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)}}}};if(b!=undefined){this.setByParam(b)}};extendClass(KJUR.asn1.DERTaggedObject,KJUR.asn1.ASN1Object);
    var ASN1HEX=new function(){};ASN1HEX.getLblen=function(c,a){if(c.substr(a+2,1)!="8"){return 1}var b=parseInt(c.substr(a+3,1));if(b==0){return -1}if(0<b&&b<10){return b+1}return -2};ASN1HEX.getL=function(c,b){var a=ASN1HEX.getLblen(c,b);if(a<1){return""}return c.substr(b+2,a*2)};ASN1HEX.getVblen=function(d,a){var c,b;c=ASN1HEX.getL(d,a);if(c==""){return -1}if(c.substr(0,1)==="8"){b=new BigInteger(c.substr(2),16)}else{b=new BigInteger(c,16)}return b.intValue()};ASN1HEX.getVidx=function(c,b){var a=ASN1HEX.getLblen(c,b);if(a<0){return a}return b+(a+1)*2};ASN1HEX.getV=function(d,a){var c=ASN1HEX.getVidx(d,a);var b=ASN1HEX.getVblen(d,a);return d.substr(c,b*2)};ASN1HEX.getTLV=function(b,a){return b.substr(a,2)+ASN1HEX.getL(b,a)+ASN1HEX.getV(b,a)};ASN1HEX.getTLVblen=function(b,a){return 2+ASN1HEX.getLblen(b,a)*2+ASN1HEX.getVblen(b,a)*2};ASN1HEX.getNextSiblingIdx=function(d,a){var c=ASN1HEX.getVidx(d,a);var b=ASN1HEX.getVblen(d,a);return c+b*2};ASN1HEX.getChildIdx=function(e,k){var l=ASN1HEX;var j=[];var c,f,g;c=l.getVidx(e,k);f=l.getVblen(e,k)*2;if(e.substr(k,2)=="03"){c+=2;f-=2}g=0;var d=c;while(g<=f){var b=l.getTLVblen(e,d);g+=b;if(g<=f){j.push(d)}d+=b;if(g>=f){break}}return j};ASN1HEX.getNthChildIdx=function(d,b,e){var c=ASN1HEX.getChildIdx(d,b);return c[e]};ASN1HEX.getIdxbyList=function(e,d,c,i){var g=ASN1HEX;var f,b;if(c.length==0){if(i!==undefined){if(e.substr(d,2)!==i){return -1}}return d}f=c.shift();b=g.getChildIdx(e,d);if(f>=b.length){return -1}return g.getIdxbyList(e,b[f],c,i)};ASN1HEX.getIdxbyListEx=function(f,k,b,g){var m=ASN1HEX;var d,l;if(b.length==0){if(g!==undefined){if(f.substr(k,2)!==g){return -1}}return k}d=b.shift();l=m.getChildIdx(f,k);var j=0;for(var e=0;e<l.length;e++){var c=f.substr(l[e],2);if((typeof d=="number"&&(!m.isContextTag(c))&&j==d)||(typeof d=="string"&&m.isContextTag(c,d))){return m.getIdxbyListEx(f,l[e],b,g)}if(!m.isContextTag(c)){j++}}return -1};ASN1HEX.getTLVbyList=function(d,c,b,f){var e=ASN1HEX;var a=e.getIdxbyList(d,c,b,f);if(a==-1){return null}if(a>=d.length){return null}return e.getTLV(d,a)};ASN1HEX.getTLVbyListEx=function(d,c,b,f){var e=ASN1HEX;var a=e.getIdxbyListEx(d,c,b,f);if(a==-1){return null}return e.getTLV(d,a)};ASN1HEX.getVbyList=function(e,c,b,g,i){var f=ASN1HEX;var a,d;a=f.getIdxbyList(e,c,b,g);if(a==-1){return null}if(a>=e.length){return null}d=f.getV(e,a);if(i===true){d=d.substr(2)}return d};ASN1HEX.getVbyListEx=function(b,e,a,d,f){var j=ASN1HEX;var g,c,i;g=j.getIdxbyListEx(b,e,a,d);if(g==-1){return null}i=j.getV(b,g);if(b.substr(g,2)=="03"&&f!==false){i=i.substr(2)}return i};ASN1HEX.getInt=function(e,b,f){if(f==undefined){f=-1}try{var c=e.substr(b,2);if(c!="02"&&c!="03"){return f}var a=ASN1HEX.getV(e,b);if(c=="02"){return parseInt(a,16)}else{return bitstrtoint(a)}}catch(d){return f}};ASN1HEX.getOID=function(c,a,d){if(d==undefined){d=null}try{if(c.substr(a,2)!="06"){return d}var e=ASN1HEX.getV(c,a);return hextooid(e)}catch(b){return d}};ASN1HEX.getOIDName=function(d,a,f){if(f==undefined){f=null}try{var e=ASN1HEX.getOID(d,a,f);if(e==f){return f}var b=KJUR.asn1.x509.OID.oid2name(e);if(b==""){return e}return b}catch(c){return f}};ASN1HEX.getString=function(d,b,e){if(e==undefined){e=null}try{var a=ASN1HEX.getV(d,b);return hextorstr(a)}catch(c){return e}};ASN1HEX.hextooidstr=function(e){var h=function(b,a){if(b.length>=a){return b}return new Array(a-b.length+1).join("0")+b};var l=[];var o=e.substr(0,2);var f=parseInt(o,16);l[0]=new String(Math.floor(f/40));l[1]=new String(f%40);var m=e.substr(2);var k=[];for(var g=0;g<m.length/2;g++){k.push(parseInt(m.substr(g*2,2),16))}var j=[];var d="";for(var g=0;g<k.length;g++){if(k[g]&128){d=d+h((k[g]&127).toString(2),7)}else{d=d+h((k[g]&127).toString(2),7);j.push(new String(parseInt(d,2)));d=""}}var n=l.join(".");if(j.length>0){n=n+"."+j.join(".")}return n};ASN1HEX.dump=function(t,c,l,g){var p=ASN1HEX;var j=p.getV;var y=p.dump;var w=p.getChildIdx;var e=t;if(t instanceof KJUR.asn1.ASN1Object){e=t.getEncodedHex()}var q=function(A,i){if(A.length<=i*2){return A}else{var v=A.substr(0,i)+"..(total "+A.length/2+"bytes).."+A.substr(A.length-i,i);return v}};if(c===undefined){c={ommit_long_octet:32}}if(l===undefined){l=0}if(g===undefined){g=""}var x=c.ommit_long_octet;var z=e.substr(l,2);if(z=="01"){var h=j(e,l);if(h=="00"){return g+"BOOLEAN FALSE\n"}else{return g+"BOOLEAN TRUE\n"}}if(z=="02"){var h=j(e,l);return g+"INTEGER "+q(h,x)+"\n"}if(z=="03"){var h=j(e,l);if(p.isASN1HEX(h.substr(2))){var k=g+"BITSTRING, encapsulates\n";k=k+y(h.substr(2),c,0,g+"  ");return k}else{return g+"BITSTRING "+q(h,x)+"\n"}}if(z=="04"){var h=j(e,l);if(p.isASN1HEX(h)){var k=g+"OCTETSTRING, encapsulates\n";k=k+y(h,c,0,g+"  ");return k}else{return g+"OCTETSTRING "+q(h,x)+"\n"}}if(z=="05"){return g+"NULL\n"}if(z=="06"){var m=j(e,l);var b=KJUR.asn1.ASN1Util.oidHexToInt(m);var o=KJUR.asn1.x509.OID.oid2name(b);var a=b.replace(/\./g," ");if(o!=""){return g+"ObjectIdentifier "+o+" ("+a+")\n"}else{return g+"ObjectIdentifier ("+a+")\n"}}if(z=="0a"){return g+"ENUMERATED "+parseInt(j(e,l))+"\n"}if(z=="0c"){return g+"UTF8String '"+hextoutf8(j(e,l))+"'\n"}if(z=="13"){return g+"PrintableString '"+hextoutf8(j(e,l))+"'\n"}if(z=="14"){return g+"TeletexString '"+hextoutf8(j(e,l))+"'\n"}if(z=="16"){return g+"IA5String '"+hextoutf8(j(e,l))+"'\n"}if(z=="17"){return g+"UTCTime "+hextoutf8(j(e,l))+"\n"}if(z=="18"){return g+"GeneralizedTime "+hextoutf8(j(e,l))+"\n"}if(z=="1a"){return g+"VisualString '"+hextoutf8(j(e,l))+"'\n"}if(z=="1e"){return g+"BMPString '"+ucs2hextoutf8(j(e,l))+"'\n"}if(z=="30"){if(e.substr(l,4)=="3000"){return g+"SEQUENCE {}\n"}var k=g+"SEQUENCE\n";var d=w(e,l);var f=c;if((d.length==2||d.length==3)&&e.substr(d[0],2)=="06"&&e.substr(d[d.length-1],2)=="04"){var o=p.oidname(j(e,d[0]));var r=JSON.parse(JSON.stringify(c));r.x509ExtName=o;f=r}for(var u=0;u<d.length;u++){k=k+y(e,f,d[u],g+"  ")}return k}if(z=="31"){var k=g+"SET\n";var d=w(e,l);for(var u=0;u<d.length;u++){k=k+y(e,c,d[u],g+"  ")}return k}var z=parseInt(z,16);if((z&128)!=0){var n=z&31;if((z&32)!=0){var k=g+"["+n+"]\n";var d=w(e,l);for(var u=0;u<d.length;u++){k=k+y(e,c,d[u],g+"  ")}return k}else{var h=j(e,l);if(ASN1HEX.isASN1HEX(h)){var k=g+"["+n+"]\n";k=k+y(h,c,0,g+"  ");return k}else{if(h.substr(0,8)=="68747470"){h=hextoutf8(h)}else{if(c.x509ExtName==="subjectAltName"&&n==2){h=hextoutf8(h)}}}var k=g+"["+n+"] "+h+"\n";return k}}return g+"UNKNOWN("+z+") "+j(e,l)+"\n"};ASN1HEX.isContextTag=function(c,b){c=c.toLowerCase();var f,e;try{f=parseInt(c,16)}catch(d){return -1}if(b===undefined){if((f&192)==128){return true}else{return false}}try{var a=b.match(/^\[[0-9]+\]$/);if(a==null){return false}e=parseInt(b.substr(1,b.length-1),10);if(e>31){return false}if(((f&192)==128)&&((f&31)==e)){return true}return false}catch(d){return false}};ASN1HEX.isASN1HEX=function(e){var d=ASN1HEX;if(e.length%2==1){return false}var c=d.getVblen(e,0);var b=e.substr(0,2);var f=d.getL(e,0);var a=e.length-b.length-f.length;if(a==c*2){return true}return false};ASN1HEX.checkStrictDER=function(g,o,d,c,r){var s=ASN1HEX;if(d===undefined){if(typeof g!="string"){throw new Error("not hex string")}g=g.toLowerCase();if(!KJUR.lang.String.isHex(g)){throw new Error("not hex string")}d=g.length;c=g.length/2;if(c<128){r=1}else{r=Math.ceil(c.toString(16))+1}}var k=s.getL(g,o);if(k.length>r*2){throw new Error("L of TLV too long: idx="+o)}var n=s.getVblen(g,o);if(n>c){throw new Error("value of L too long than hex: idx="+o)}var q=s.getTLV(g,o);var f=q.length-2-s.getL(g,o).length;if(f!==(n*2)){throw new Error("V string length and L's value not the same:"+f+"/"+(n*2))}if(o===0){if(g.length!=q.length){throw new Error("total length and TLV length unmatch:"+g.length+"!="+q.length)}}var b=g.substr(o,2);if(b==="02"){var a=s.getVidx(g,o);if(g.substr(a,2)=="00"&&g.charCodeAt(a+2)<56){throw new Error("not least zeros for DER INTEGER")}}if(parseInt(b,16)&32){var p=s.getVblen(g,o);var m=0;var l=s.getChildIdx(g,o);for(var e=0;e<l.length;e++){var j=s.getTLV(g,l[e]);m+=j.length;s.checkStrictDER(g,l[e],d,c,r)}if((p*2)!=m){throw new Error("sum of children's TLV length and L unmatch: "+(p*2)+"!="+m)}}};ASN1HEX.oidname=function(a){var c=KJUR.asn1;if(KJUR.lang.String.isHex(a)){a=c.ASN1Util.oidHexToInt(a)}var b=c.x509.OID.oid2name(a);if(b===""){b=a}return b};
    if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.asn1=="undefined"||!KJUR.asn1){KJUR.asn1={}}if(typeof KJUR.asn1.x509=="undefined"||!KJUR.asn1.x509){KJUR.asn1.x509={}}KJUR.asn1.x509.Certificate=function(h){KJUR.asn1.x509.Certificate.superclass.constructor.call(this);var d=KJUR,c=d.asn1,f=c.DERBitString,b=c.DERSequence,g=c.x509,a=g.TBSCertificate,e=g.AlgorithmIdentifier;this.params=undefined;this.setByParam=function(i){this.params=i};this.sign=function(){var l=this.params;var k=l.sigalg;if(l.sigalg.name!=undefined){k=l.sigalg.name}var i=l.tbsobj.getEncodedHex();var j=new KJUR.crypto.Signature({alg:k});j.init(l.cakey);j.updateHex(i);l.sighex=j.sign()};this.getPEM=function(){return hextopem(this.getEncodedHex(),"CERTIFICATE")};this.getEncodedHex=function(){var k=this.params;if(k.tbsobj==undefined||k.tbsobj==null){k.tbsobj=new a(k)}if(k.sighex==undefined&&k.cakey!=undefined){this.sign()}if(k.sighex==undefined){throw new Error("sighex or cakey parameter not defined")}var i=[];i.push(k.tbsobj);i.push(new e({name:k.sigalg}));i.push(new f({hex:"00"+k.sighex}));var j=new b({array:i});return j.getEncodedHex()};if(h!=undefined){this.params=h}};extendClass(KJUR.asn1.x509.Certificate,KJUR.asn1.ASN1Object);KJUR.asn1.x509.TBSCertificate=function(f){KJUR.asn1.x509.TBSCertificate.superclass.constructor.call(this);var b=KJUR,i=b.asn1,d=i.x509,c=i.DERTaggedObject,h=i.DERInteger,g=i.DERSequence,l=d.AlgorithmIdentifier,e=d.Time,a=d.X500Name,j=d.Extensions,k=d.SubjectPublicKeyInfo;this.params=null;this.setByParam=function(m){this.params=m};this.getEncodedHex=function(){var n=[];var q=this.params;if(q.version!=undefined||q.version!=1){var m=2;if(q.version!=undefined){m=q.version-1}var p=new c({obj:new h({"int":m})});n.push(p)}n.push(new h(q.serial));n.push(new l({name:q.sigalg}));n.push(new a(q.issuer));n.push(new g({array:[new e(q.notbefore),new e(q.notafter)]}));n.push(new a(q.subject));n.push(new k(KEYUTIL.getKey(q.sbjpubkey)));if(q.ext!==undefined&&q.ext.length>0){n.push(new c({tag:"a3",obj:new j(q.ext)}))}var o=new KJUR.asn1.DERSequence({array:n});return o.getEncodedHex()};if(f!==undefined){this.setByParam(f)}};extendClass(KJUR.asn1.x509.TBSCertificate,KJUR.asn1.ASN1Object);KJUR.asn1.x509.Extensions=function(d){KJUR.asn1.x509.Extensions.superclass.constructor.call(this);var c=KJUR,b=c.asn1,a=b.DERSequence,e=b.x509;this.aParam=[];this.setByParam=function(f){this.aParam=f};this.getEncodedHex=function(){var f=[];for(var h=0;h<this.aParam.length;h++){var l=this.aParam[h];var k=l.extname;var j=null;if(l.extn!=undefined){j=new e.PrivateExtension(l)}else{if(k=="subjectKeyIdentifier"){j=new e.SubjectKeyIdentifier(l)}else{if(k=="keyUsage"){j=new e.KeyUsage(l)}else{if(k=="subjectAltName"){j=new e.SubjectAltName(l)}else{if(k=="issuerAltName"){j=new e.IssuerAltName(l)}else{if(k=="basicConstraints"){j=new e.BasicConstraints(l)}else{if(k=="cRLDistributionPoints"){j=new e.CRLDistributionPoints(l)}else{if(k=="certificatePolicies"){j=new e.CertificatePolicies(l)}else{if(k=="authorityKeyIdentifier"){j=new e.AuthorityKeyIdentifier(l)}else{if(k=="extKeyUsage"){j=new e.ExtKeyUsage(l)}else{if(k=="authorityInfoAccess"){j=new e.AuthorityInfoAccess(l)}else{if(k=="cRLNumber"){j=new e.CRLNumber(l)}else{if(k=="cRLReason"){j=new e.CRLReason(l)}else{if(k=="ocspNonce"){j=new e.OCSPNonce(l)}else{if(k=="ocspNoCheck"){j=new e.OCSPNoCheck(l)}else{if(k=="adobeTimeStamp"){j=new e.AdobeTimeStamp(l)}else{if(k=="subjectDirectoryAttributes"){j=new e.SubjectDirectoryAttributes(l)}else{throw new Error("extension not supported:"+JSON.stringify(l))}}}}}}}}}}}}}}}}}if(j!=null){f.push(j)}}var g=new a({array:f});return g.getEncodedHex()};if(d!=undefined){this.setByParam(d)}};extendClass(KJUR.asn1.x509.Extensions,KJUR.asn1.ASN1Object);KJUR.asn1.x509.Extension=function(d){KJUR.asn1.x509.Extension.superclass.constructor.call(this);var f=null,a=KJUR,e=a.asn1,h=e.DERObjectIdentifier,i=e.DEROctetString,b=e.DERBitString,g=e.DERBoolean,c=e.DERSequence;this.getEncodedHex=function(){var m=new h({oid:this.oid});var l=new i({hex:this.getExtnValueHex()});var k=new Array();k.push(m);if(this.critical){k.push(new g())}k.push(l);var j=new c({array:k});return j.getEncodedHex()};this.critical=false;if(d!==undefined){if(d.critical!==undefined){this.critical=d.critical}}};extendClass(KJUR.asn1.x509.Extension,KJUR.asn1.ASN1Object);KJUR.asn1.x509.KeyUsage=function(f){KJUR.asn1.x509.KeyUsage.superclass.constructor.call(this,f);var a=X509.KEYUSAGE_NAME;this.getExtnValueHex=function(){return this.asn1ExtnValue.getEncodedHex()};this.oid="2.5.29.15";if(f!==undefined){if(f.bin!==undefined){this.asn1ExtnValue=new KJUR.asn1.DERBitString(f)}if(f.names!==undefined&&f.names.length!==undefined){var e=f.names;var d="000000000";for(var c=0;c<e.length;c++){for(var b=0;b<a.length;b++){if(e[c]===a[b]){d=d.substring(0,b)+"1"+d.substring(b+1,d.length)}}}this.asn1ExtnValue=new KJUR.asn1.DERBitString({bin:d})}}};extendClass(KJUR.asn1.x509.KeyUsage,KJUR.asn1.x509.Extension);KJUR.asn1.x509.BasicConstraints=function(g){KJUR.asn1.x509.BasicConstraints.superclass.constructor.call(this,g);var c=KJUR.asn1,e=c.DERBoolean,f=c.DERInteger,b=c.DERSequence;var a=false;var d=-1;this.getExtnValueHex=function(){var i=new Array();if(this.cA){i.push(new e())}if(this.pathLen>-1){i.push(new f({"int":this.pathLen}))}var h=new b({array:i});this.asn1ExtnValue=h;return this.asn1ExtnValue.getEncodedHex()};this.oid="2.5.29.19";this.cA=false;this.pathLen=-1;if(g!==undefined){if(g.cA!==undefined){this.cA=g.cA}if(g.pathLen!==undefined){this.pathLen=g.pathLen}}};extendClass(KJUR.asn1.x509.BasicConstraints,KJUR.asn1.x509.Extension);KJUR.asn1.x509.CRLDistributionPoints=function(d){KJUR.asn1.x509.CRLDistributionPoints.superclass.constructor.call(this,d);var b=KJUR,a=b.asn1,c=a.x509;this.getExtnValueHex=function(){return this.asn1ExtnValue.getEncodedHex()};this.setByDPArray=function(e){var f=[];for(var g=0;g<e.length;g++){if(e[g] instanceof KJUR.asn1.ASN1Object){f.push(e[g])}else{var h=new c.DistributionPoint(e[g]);f.push(h)}}this.asn1ExtnValue=new a.DERSequence({array:f})};this.setByOneURI=function(f){var e=new c.DistributionPoint({fulluri:f});this.setByDPArray([e])};this.oid="2.5.29.31";if(d!==undefined){if(d.array!==undefined){this.setByDPArray(d.array)}else{if(d.uri!==undefined){this.setByOneURI(d.uri)}}}};extendClass(KJUR.asn1.x509.CRLDistributionPoints,KJUR.asn1.x509.Extension);KJUR.asn1.x509.DistributionPoint=function(e){KJUR.asn1.x509.DistributionPoint.superclass.constructor.call(this);var a=null,c=KJUR,b=c.asn1,d=b.x509.DistributionPointName;this.getEncodedHex=function(){var f=new b.DERSequence();if(this.asn1DP!=null){var g=new b.DERTaggedObject({explicit:true,tag:"a0",obj:this.asn1DP});f.appendASN1Object(g)}this.hTLV=f.getEncodedHex();return this.hTLV};if(e!==undefined){if(e.dpobj!==undefined){this.asn1DP=e.dpobj}else{if(e.dpname!==undefined){this.asn1DP=new d(e.dpname)}else{if(e.fulluri!==undefined){this.asn1DP=new d({full:[{uri:e.fulluri}]})}}}}};extendClass(KJUR.asn1.x509.DistributionPoint,KJUR.asn1.ASN1Object);KJUR.asn1.x509.DistributionPointName=function(h){KJUR.asn1.x509.DistributionPointName.superclass.constructor.call(this);var g=null,d=null,a=null,f=null,c=KJUR,b=c.asn1,e=b.DERTaggedObject;this.getEncodedHex=function(){if(this.type!="full"){throw new Error("currently type shall be 'full': "+this.type)}this.asn1Obj=new e({explicit:false,tag:this.tag,obj:this.asn1V});this.hTLV=this.asn1Obj.getEncodedHex();return this.hTLV};if(h!==undefined){if(b.x509.GeneralNames.prototype.isPrototypeOf(h)){this.type="full";this.tag="a0";this.asn1V=h}else{if(h.full!==undefined){this.type="full";this.tag="a0";this.asn1V=new b.x509.GeneralNames(h.full)}else{throw new Error("This class supports GeneralNames only as argument")}}}};extendClass(KJUR.asn1.x509.DistributionPointName,KJUR.asn1.ASN1Object);KJUR.asn1.x509.CertificatePolicies=function(f){KJUR.asn1.x509.CertificatePolicies.superclass.constructor.call(this,f);var c=KJUR,b=c.asn1,e=b.x509,a=b.DERSequence,d=e.PolicyInformation;this.params=null;this.getExtnValueHex=function(){var j=[];for(var h=0;h<this.params.array.length;h++){j.push(new d(this.params.array[h]))}var g=new a({array:j});this.asn1ExtnValue=g;return this.asn1ExtnValue.getEncodedHex()};this.oid="2.5.29.32";if(f!==undefined){this.params=f}};extendClass(KJUR.asn1.x509.CertificatePolicies,KJUR.asn1.x509.Extension);KJUR.asn1.x509.PolicyInformation=function(d){KJUR.asn1.x509.PolicyInformation.superclass.constructor.call(this,d);var c=KJUR.asn1,b=c.DERSequence,e=c.DERObjectIdentifier,a=c.x509.PolicyQualifierInfo;this.params=null;this.getEncodedHex=function(){if(this.params.policyoid===undefined&&this.params.array===undefined){throw new Error("parameter oid and array missing")}var f=[new e(this.params.policyoid)];if(this.params.array!==undefined){var j=[];for(var h=0;h<this.params.array.length;h++){j.push(new a(this.params.array[h]))}if(j.length>0){f.push(new b({array:j}))}}var g=new b({array:f});return g.getEncodedHex()};if(d!==undefined){this.params=d}};extendClass(KJUR.asn1.x509.PolicyInformation,KJUR.asn1.ASN1Object);KJUR.asn1.x509.PolicyQualifierInfo=function(e){KJUR.asn1.x509.PolicyQualifierInfo.superclass.constructor.call(this,e);var c=KJUR.asn1,b=c.DERSequence,d=c.DERIA5String,f=c.DERObjectIdentifier,a=c.x509.UserNotice;this.params=null;this.getEncodedHex=function(){if(this.params.cps!==undefined){var g=new b({array:[new f({oid:"1.3.6.1.5.5.7.2.1"}),new d({str:this.params.cps})]});return g.getEncodedHex()}if(this.params.unotice!=undefined){var g=new b({array:[new f({oid:"1.3.6.1.5.5.7.2.2"}),new a(this.params.unotice)]});return g.getEncodedHex()}};if(e!==undefined){this.params=e}};extendClass(KJUR.asn1.x509.PolicyQualifierInfo,KJUR.asn1.ASN1Object);KJUR.asn1.x509.UserNotice=function(e){KJUR.asn1.x509.UserNotice.superclass.constructor.call(this,e);var a=KJUR.asn1.DERSequence,d=KJUR.asn1.DERInteger,c=KJUR.asn1.x509.DisplayText,b=KJUR.asn1.x509.NoticeReference;this.params=null;this.getEncodedHex=function(){var f=[];if(this.params.noticeref!==undefined){f.push(new b(this.params.noticeref))}if(this.params.exptext!==undefined){f.push(new c(this.params.exptext))}var g=new a({array:f});return g.getEncodedHex()};if(e!==undefined){this.params=e}};extendClass(KJUR.asn1.x509.UserNotice,KJUR.asn1.ASN1Object);KJUR.asn1.x509.NoticeReference=function(d){KJUR.asn1.x509.NoticeReference.superclass.constructor.call(this,d);var a=KJUR.asn1.DERSequence,c=KJUR.asn1.DERInteger,b=KJUR.asn1.x509.DisplayText;this.params=null;this.getEncodedHex=function(){var f=[];if(this.params.org!==undefined){f.push(new b(this.params.org))}if(this.params.noticenum!==undefined){var h=[];var e=this.params.noticenum;for(var j=0;j<e.length;j++){h.push(new c(e[j]))}f.push(new a({array:h}))}if(f.length==0){throw new Error("parameter is empty")}var g=new a({array:f});return g.getEncodedHex()};if(d!==undefined){this.params=d}};extendClass(KJUR.asn1.x509.NoticeReference,KJUR.asn1.ASN1Object);KJUR.asn1.x509.DisplayText=function(a){KJUR.asn1.x509.DisplayText.superclass.constructor.call(this,a);this.hT="0c";if(a!==undefined){if(a.type==="ia5"){this.hT="16"}else{if(a.type==="vis"){this.hT="1a"}else{if(a.type==="bmp"){this.hT="1e"}}}}};extendClass(KJUR.asn1.x509.DisplayText,KJUR.asn1.DERAbstractString);KJUR.asn1.x509.ExtKeyUsage=function(c){KJUR.asn1.x509.ExtKeyUsage.superclass.constructor.call(this,c);var b=KJUR,a=b.asn1;this.setPurposeArray=function(d){this.asn1ExtnValue=new a.DERSequence();for(var e=0;e<d.length;e++){var f=new a.DERObjectIdentifier(d[e]);this.asn1ExtnValue.appendASN1Object(f)}};this.getExtnValueHex=function(){return this.asn1ExtnValue.getEncodedHex()};this.oid="2.5.29.37";if(c!==undefined){if(c.array!==undefined){this.setPurposeArray(c.array)}}};extendClass(KJUR.asn1.x509.ExtKeyUsage,KJUR.asn1.x509.Extension);KJUR.asn1.x509.AuthorityKeyIdentifier=function(f){KJUR.asn1.x509.AuthorityKeyIdentifier.superclass.constructor.call(this,f);var b=KJUR,a=b.asn1,d=a.DERTaggedObject,e=a.x509.GeneralNames,c=b.crypto.Util.isKey;this.asn1KID=null;this.asn1CertIssuer=null;this.asn1CertSN=null;this.getExtnValueHex=function(){var h=new Array();if(this.asn1KID){h.push(new d({explicit:false,tag:"80",obj:this.asn1KID}))}if(this.asn1CertIssuer){h.push(new d({explicit:false,tag:"a1",obj:new e([{dn:this.asn1CertIssuer}])}))}if(this.asn1CertSN){h.push(new d({explicit:false,tag:"82",obj:this.asn1CertSN}))}var g=new a.DERSequence({array:h});this.asn1ExtnValue=g;return this.asn1ExtnValue.getEncodedHex()};this.setKIDByParam=function(i){if(i.str!==undefined||i.hex!==undefined){this.asn1KID=new KJUR.asn1.DEROctetString(i)}else{if((typeof i==="object"&&KJUR.crypto.Util.isKey(i))||(typeof i==="string"&&i.indexOf("BEGIN ")!=-1)){var h=i;if(typeof i==="string"){h=KEYUTIL.getKey(i)}var g=KEYUTIL.getKeyID(h);this.asn1KID=new KJUR.asn1.DEROctetString({hex:g})}}};this.setCertIssuerByParam=function(g){if(g.str!==undefined||g.ldapstr!==undefined||g.hex!==undefined||g.certsubject!==undefined||g.certissuer!==undefined){this.asn1CertIssuer=new KJUR.asn1.x509.X500Name(g)}else{if(typeof g==="string"&&g.indexOf("BEGIN ")!=-1&&g.indexOf("CERTIFICATE")!=-1){this.asn1CertIssuer=new KJUR.asn1.x509.X500Name({certissuer:g})}}};this.setCertSNByParam=function(i){if(i.str!==undefined||i.bigint!==undefined||i.hex!==undefined){this.asn1CertSN=new KJUR.asn1.DERInteger(i)}else{if(typeof i==="string"&&i.indexOf("BEGIN ")!=-1&&i.indexOf("CERTIFICATE")){var g=new X509();g.readCertPEM(i);var h=g.getSerialNumberHex();this.asn1CertSN=new KJUR.asn1.DERInteger({hex:h})}}};this.oid="2.5.29.35";if(f!==undefined){if(f.kid!==undefined){this.setKIDByParam(f.kid)}if(f.issuer!==undefined){this.setCertIssuerByParam(f.issuer)}if(f.sn!==undefined){this.setCertSNByParam(f.sn)}if(f.issuersn!==undefined&&typeof f.issuersn==="string"&&f.issuersn.indexOf("BEGIN ")!=-1&&f.issuersn.indexOf("CERTIFICATE")){this.setCertSNByParam(f.issuersn);this.setCertIssuerByParam(f.issuersn)}}};extendClass(KJUR.asn1.x509.AuthorityKeyIdentifier,KJUR.asn1.x509.Extension);KJUR.asn1.x509.SubjectKeyIdentifier=function(d){KJUR.asn1.x509.SubjectKeyIdentifier.superclass.constructor.call(this,d);var b=KJUR,a=b.asn1,c=a.DEROctetString;this.asn1KID=null;this.getExtnValueHex=function(){this.asn1ExtnValue=this.asn1KID;return this.asn1ExtnValue.getEncodedHex()};this.setKIDByParam=function(g){if(g.str!==undefined||g.hex!==undefined){this.asn1KID=new c(g)}else{if((typeof g==="object"&&KJUR.crypto.Util.isKey(g))||(typeof g==="string"&&g.indexOf("BEGIN")!=-1)){var f=g;if(typeof g==="string"){f=KEYUTIL.getKey(g)}var e=KEYUTIL.getKeyID(f);this.asn1KID=new KJUR.asn1.DEROctetString({hex:e})}}};this.oid="2.5.29.14";if(d!==undefined){if(d.kid!==undefined){this.setKIDByParam(d.kid)}}};extendClass(KJUR.asn1.x509.SubjectKeyIdentifier,KJUR.asn1.x509.Extension);KJUR.asn1.x509.AuthorityInfoAccess=function(a){KJUR.asn1.x509.AuthorityInfoAccess.superclass.constructor.call(this,a);this.setAccessDescriptionArray=function(k){var d=new Array(),b=KJUR,g=b.asn1,c=g.DERSequence,j=g.DERObjectIdentifier,l=g.x509.GeneralName;for(var f=0;f<k.length;f++){var e;var h=k[f];if(h.ocsp!==undefined){e=new c({array:[new j({oid:"1.3.6.1.5.5.7.48.1"}),new l({uri:h.ocsp})]})}else{if(h.caissuer!==undefined){e=new c({array:[new j({oid:"1.3.6.1.5.5.7.48.2"}),new l({uri:h.caissuer})]})}else{throw new Error("unknown AccessMethod parameter: "+JSON.stringify(h))}}d.push(e)}this.asn1ExtnValue=new c({array:d})};this.getExtnValueHex=function(){return this.asn1ExtnValue.getEncodedHex()};this.oid="1.3.6.1.5.5.7.1.1";if(a!==undefined){if(a.array!==undefined){this.setAccessDescriptionArray(a.array)}}};extendClass(KJUR.asn1.x509.AuthorityInfoAccess,KJUR.asn1.x509.Extension);KJUR.asn1.x509.SubjectAltName=function(a){KJUR.asn1.x509.SubjectAltName.superclass.constructor.call(this,a);this.setNameArray=function(b){this.asn1ExtnValue=new KJUR.asn1.x509.GeneralNames(b)};this.getExtnValueHex=function(){return this.asn1ExtnValue.getEncodedHex()};this.oid="2.5.29.17";if(a!==undefined){if(a.array!==undefined){this.setNameArray(a.array)}}};extendClass(KJUR.asn1.x509.SubjectAltName,KJUR.asn1.x509.Extension);KJUR.asn1.x509.IssuerAltName=function(a){KJUR.asn1.x509.IssuerAltName.superclass.constructor.call(this,a);this.setNameArray=function(b){this.asn1ExtnValue=new KJUR.asn1.x509.GeneralNames(b)};this.getExtnValueHex=function(){return this.asn1ExtnValue.getEncodedHex()};this.oid="2.5.29.18";if(a!==undefined){if(a.array!==undefined){this.setNameArray(a.array)}}};extendClass(KJUR.asn1.x509.IssuerAltName,KJUR.asn1.x509.Extension);KJUR.asn1.x509.SubjectDirectoryAttributes=function(e){KJUR.asn1.x509.SubjectDirectoryAttributes.superclass.constructor.call(this,e);var c=KJUR.asn1,a=c.DERSequence,b=c.ASN1Util.newObject,d=c.x509.OID.name2oid;this.params=null;this.getExtnValueHex=function(){var f=[];for(var j=0;j<this.params.array.length;j++){var k=this.params.array[j];var h={seq:[{oid:"1.2.3.4"},{set:[{utf8str:"DE"}]}]};if(k.attr=="dateOfBirth"){h.seq[0].oid=d(k.attr);h.seq[1].set[0]={gentime:k.str}}else{if(k.attr=="placeOfBirth"){h.seq[0].oid=d(k.attr);h.seq[1].set[0]={utf8str:k.str}}else{if(k.attr=="gender"){h.seq[0].oid=d(k.attr);h.seq[1].set[0]={prnstr:k.str}}else{if(k.attr=="countryOfCitizenship"){h.seq[0].oid=d(k.attr);h.seq[1].set[0]={prnstr:k.str}}else{if(k.attr=="countryOfResidence"){h.seq[0].oid=d(k.attr);h.seq[1].set[0]={prnstr:k.str}}else{throw new Error("unsupported attribute: "+k.attr)}}}}}f.push(new b(h))}var g=new a({array:f});this.asn1ExtnValue=g;return this.asn1ExtnValue.getEncodedHex()};this.oid="2.5.29.9";if(e!==undefined){this.params=e}};extendClass(KJUR.asn1.x509.SubjectDirectoryAttributes,KJUR.asn1.x509.Extension);KJUR.asn1.x509.PrivateExtension=function(f){KJUR.asn1.x509.PrivateExtension.superclass.constructor.call(this,f);var c=KJUR,e=c.lang.String.isHex,b=c.asn1,d=b.x509.OID.name2oid,a=b.ASN1Util.newObject;this.params=null;this.setByParam=function(g){this.oid=d(g.extname);this.params=g};this.getExtnValueHex=function(){if(this.params.extname==undefined||this.params.extn==undefined){throw new Error("extname or extnhex not specified")}var h=this.params.extn;if(typeof h=="string"&&e(h)){return h}else{if(typeof h=="object"){try{return a(h).getEncodedHex()}catch(g){}}}throw new Error("unsupported extn value")};if(f!=undefined){this.setByParam(f)}};extendClass(KJUR.asn1.x509.PrivateExtension,KJUR.asn1.x509.Extension);KJUR.asn1.x509.CRL=function(g){KJUR.asn1.x509.CRL.superclass.constructor.call(this);var c=KJUR,b=c.asn1,a=b.DERSequence,e=b.DERBitString,f=b.x509,d=f.AlgorithmIdentifier,h=f.TBSCertList;this.params=undefined;this.setByParam=function(i){this.params=i};this.sign=function(){var j=(new h(this.params)).getEncodedHex();var k=new KJUR.crypto.Signature({alg:this.params.sigalg});k.init(this.params.cakey);k.updateHex(j);var i=k.sign();this.params.sighex=i};this.getPEM=function(){return hextopem(this.getEncodedHex(),"X509 CRL")};this.getEncodedHex=function(){var k=this.params;if(k.tbsobj==undefined){k.tbsobj=new h(k)}if(k.sighex==undefined&&k.cakey!=undefined){this.sign()}if(k.sighex==undefined){throw new Error("sighex or cakey parameter not defined")}var i=[];i.push(k.tbsobj);i.push(new d({name:k.sigalg}));i.push(new e({hex:"00"+k.sighex}));var j=new a({array:i});return j.getEncodedHex()};if(g!=undefined){this.params=g}};extendClass(KJUR.asn1.x509.CRL,KJUR.asn1.ASN1Object);KJUR.asn1.x509.TBSCertList=function(f){KJUR.asn1.x509.TBSCertList.superclass.constructor.call(this);var b=KJUR,i=b.asn1,h=i.DERInteger,g=i.DERSequence,c=i.DERTaggedObject,k=i.DERObjectIdentifier,d=i.x509,l=d.AlgorithmIdentifier,e=d.Time,j=d.Extensions,a=d.X500Name;this.params=null;this.setByParam=function(m){this.params=m};this.getRevCertSequence=function(){var m=[];var n=this.params.revcert;for(var o=0;o<n.length;o++){var p=[new h(n[o].sn),new e(n[o].date)];if(n[o].ext!=undefined){p.push(new j(n[o].ext))}m.push(new g({array:p}))}return new g({array:m})};this.getEncodedHex=function(){var n=[];var r=this.params;if(r.version!=undefined){var m=r.version-1;var p=new h({"int":m});n.push(p)}n.push(new l({name:r.sigalg}));n.push(new a(r.issuer));n.push(new e(r.thisupdate));if(r.nextupdate!=undefined){n.push(new e(r.nextupdate))}if(r.revcert!=undefined){n.push(this.getRevCertSequence())}if(r.ext!=undefined){var q=new j(r.ext);n.push(new c({tag:"a0",explicit:true,obj:q}))}var o=new g({array:n});return o.getEncodedHex()};if(f!==undefined){this.setByParam(f)}};extendClass(KJUR.asn1.x509.TBSCertList,KJUR.asn1.ASN1Object);KJUR.asn1.x509.CRLEntry=function(e){KJUR.asn1.x509.CRLEntry.superclass.constructor.call(this);var d=null,c=null,b=KJUR,a=b.asn1;this.setCertSerial=function(f){this.sn=new a.DERInteger(f)};this.setRevocationDate=function(f){this.time=new a.x509.Time(f)};this.getEncodedHex=function(){var f=new a.DERSequence({array:[this.sn,this.time]});this.TLV=f.getEncodedHex();return this.TLV};if(e!==undefined){if(e.time!==undefined){this.setRevocationDate(e.time)}if(e.sn!==undefined){this.setCertSerial(e.sn)}}};extendClass(KJUR.asn1.x509.CRLEntry,KJUR.asn1.ASN1Object);KJUR.asn1.x509.CRLNumber=function(a){KJUR.asn1.x509.CRLNumber.superclass.constructor.call(this,a);this.params=undefined;this.getExtnValueHex=function(){this.asn1ExtnValue=new KJUR.asn1.DERInteger(this.params.num);return this.asn1ExtnValue.getEncodedHex()};this.oid="2.5.29.20";if(a!=undefined){this.params=a}};extendClass(KJUR.asn1.x509.CRLNumber,KJUR.asn1.x509.Extension);KJUR.asn1.x509.CRLReason=function(a){KJUR.asn1.x509.CRLReason.superclass.constructor.call(this,a);this.params=undefined;this.getExtnValueHex=function(){this.asn1ExtnValue=new KJUR.asn1.DEREnumerated(this.params.code);return this.asn1ExtnValue.getEncodedHex()};this.oid="2.5.29.21";if(a!=undefined){this.params=a}};extendClass(KJUR.asn1.x509.CRLReason,KJUR.asn1.x509.Extension);KJUR.asn1.x509.OCSPNonce=function(a){KJUR.asn1.x509.OCSPNonce.superclass.constructor.call(this,a);this.params=undefined;this.getExtnValueHex=function(){this.asn1ExtnValue=new KJUR.asn1.DEROctetString(this.params);return this.asn1ExtnValue.getEncodedHex()};this.oid="1.3.6.1.5.5.7.48.1.2";if(a!=undefined){this.params=a}};extendClass(KJUR.asn1.x509.OCSPNonce,KJUR.asn1.x509.Extension);KJUR.asn1.x509.OCSPNoCheck=function(a){KJUR.asn1.x509.OCSPNoCheck.superclass.constructor.call(this,a);this.params=undefined;this.getExtnValueHex=function(){this.asn1ExtnValue=new KJUR.asn1.DERNull();return this.asn1ExtnValue.getEncodedHex()};this.oid="1.3.6.1.5.5.7.48.1.5";if(a!=undefined){this.params=a}};extendClass(KJUR.asn1.x509.OCSPNoCheck,KJUR.asn1.x509.Extension);KJUR.asn1.x509.AdobeTimeStamp=function(g){KJUR.asn1.x509.AdobeTimeStamp.superclass.constructor.call(this,g);var c=KJUR,b=c.asn1,f=b.DERInteger,d=b.DERBoolean,a=b.DERSequence,e=b.x509.GeneralName;this.params=null;this.getExtnValueHex=function(){var i=this.params;var h=[new f(1)];h.push(new e({uri:i.uri}));if(i.reqauth!=undefined){h.push(new d(i.reqauth))}this.asn1ExtnValue=new a({array:h});return this.asn1ExtnValue.getEncodedHex()};this.oid="1.2.840.113583.1.1.9.1";if(g!==undefined){this.setByParam(g)}};extendClass(KJUR.asn1.x509.AdobeTimeStamp,KJUR.asn1.x509.Extension);KJUR.asn1.x509.X500Name=function(f){KJUR.asn1.x509.X500Name.superclass.constructor.call(this);this.asn1Array=[];this.paramArray=[];this.sRule="utf8";var c=KJUR,b=c.asn1,e=b.x509,d=e.RDN,a=pemtohex;this.setByString=function(g,l){if(l!==undefined){this.sRule=l}var k=g.split("/");k.shift();var j=[];for(var m=0;m<k.length;m++){if(k[m].match(/^[^=]+=.+$/)){j.push(k[m])}else{var h=j.length-1;j[h]=j[h]+"/"+k[m]}}for(var m=0;m<j.length;m++){this.asn1Array.push(new d({str:j[m],rule:this.sRule}))}};this.setByLdapString=function(g,h){if(h!==undefined){this.sRule=h}var i=e.X500Name.ldapToCompat(g);this.setByString(i,h)};this.setByObject=function(j,i){if(i!==undefined){this.sRule=i}for(var g in j){if(j.hasOwnProperty(g)){var h=new d({str:g+"="+j[g],rule:this.sRule});this.asn1Array?this.asn1Array.push(h):this.asn1Array=[h]}}};this.setByParam=function(h){if(h.rule!==undefined){this.sRule=h.rule}if(h.array!==undefined){this.paramArray=h.array}else{if(h.str!==undefined){this.setByString(h.str)}else{if(h.ldapstr!==undefined){this.setByLdapString(h.ldapstr)}else{if(h.hex!==undefined){this.hTLV=h.hex}else{if(h.certissuer!==undefined){var g=new X509();g.readCertPEM(h.certissuer);this.hTLV=g.getIssuerHex()}else{if(h.certsubject!==undefined){var g=new X509();g.readCertPEM(h.certsubject);this.hTLV=g.getSubjectHex()}else{if(typeof h==="object"&&h.certsubject===undefined&&h.certissuer===undefined){this.setByObject(h)}}}}}}}};this.getEncodedHex=function(){if(typeof this.hTLV=="string"){return this.hTLV}if(this.asn1Array.length==0&&this.paramArray.length>0){for(var g=0;g<this.paramArray.length;g++){var k={array:this.paramArray[g]};if(this.sRule!="utf8"){k.rule=this.sRule}var h=new d(k);this.asn1Array.push(h)}}var j=new b.DERSequence({array:this.asn1Array});this.hTLV=j.getEncodedHex();return this.hTLV};if(f!==undefined){this.setByParam(f)}};extendClass(KJUR.asn1.x509.X500Name,KJUR.asn1.ASN1Object);KJUR.asn1.x509.X500Name.compatToLDAP=function(d){if(d.substr(0,1)!=="/"){throw"malformed input"}var b="";d=d.substr(1);var c=d.split("/");c.reverse();c=c.map(function(a){return a.replace(/,/,"\\,")});return c.join(",")};KJUR.asn1.x509.X500Name.onelineToLDAP=function(a){return KJUR.asn1.x509.X500Name.compatToLDAP(a)};KJUR.asn1.x509.X500Name.ldapToCompat=function(g){var c=g.split(",");var e=false;var b=[];for(var f=0;c.length>0;f++){var h=c.shift();if(e===true){var d=b.pop();var j=(d+","+h).replace(/\\,/g,",");b.push(j);e=false}else{b.push(h)}if(h.substr(-1,1)==="\\"){e=true}}b=b.map(function(a){return a.replace("/","\\/")});b.reverse();return"/"+b.join("/")};KJUR.asn1.x509.X500Name.ldapToOneline=function(a){return KJUR.asn1.x509.X500Name.ldapToCompat(a)};KJUR.asn1.x509.RDN=function(b){KJUR.asn1.x509.RDN.superclass.constructor.call(this);this.asn1Array=[];this.paramArray=[];this.sRule="utf8";var a=KJUR.asn1.x509.AttributeTypeAndValue;this.setByParam=function(c){if(c.rule!==undefined){this.sRule=c.rule}if(c.str!==undefined){this.addByMultiValuedString(c.str)}if(c.array!==undefined){this.paramArray=c.array}};this.addByString=function(c){this.asn1Array.push(new KJUR.asn1.x509.AttributeTypeAndValue({str:c,rule:this.sRule}))};this.addByMultiValuedString=function(e){var c=KJUR.asn1.x509.RDN.parseString(e);for(var d=0;d<c.length;d++){this.addByString(c[d])}};this.getEncodedHex=function(){if(this.asn1Array.length==0&&this.paramArray.length>0){for(var d=0;d<this.paramArray.length;d++){var f=this.paramArray[d];if(f.rule!==undefined&&this.sRule!="utf8"){f.rule=this.sRule}var c=new a(f);this.asn1Array.push(c)}}var e=new KJUR.asn1.DERSet({array:this.asn1Array});this.TLV=e.getEncodedHex();return this.TLV};if(b!==undefined){this.setByParam(b)}};extendClass(KJUR.asn1.x509.RDN,KJUR.asn1.ASN1Object);KJUR.asn1.x509.RDN.parseString=function(m){var j=m.split(/\+/);var h=false;var c=[];for(var g=0;j.length>0;g++){var k=j.shift();if(h===true){var f=c.pop();var d=(f+"+"+k).replace(/\\\+/g,"+");c.push(d);h=false}else{c.push(k)}if(k.substr(-1,1)==="\\"){h=true}}var l=false;var b=[];for(var g=0;c.length>0;g++){var k=c.shift();if(l===true){var e=b.pop();if(k.match(/"$/)){var d=(e+"+"+k).replace(/^([^=]+)="(.*)"$/,"$1=$2");b.push(d);l=false}else{b.push(e+"+"+k)}}else{b.push(k)}if(k.match(/^[^=]+="/)){l=true}}return b};KJUR.asn1.x509.AttributeTypeAndValue=function(c){KJUR.asn1.x509.AttributeTypeAndValue.superclass.constructor.call(this);this.sRule="utf8";this.sType=null;this.sValue=null;this.dsType=null;var a=KJUR,g=a.asn1,d=g.DERSequence,l=g.DERUTF8String,i=g.DERPrintableString,h=g.DERTeletexString,b=g.DERIA5String,e=g.DERVisibleString,k=g.DERBMPString,f=a.lang.String.isMail,j=a.lang.String.isPrintable;this.setByParam=function(o){if(o.rule!==undefined){this.sRule=o.rule}if(o.ds!==undefined){this.dsType=o.ds}if(o.value===undefined&&o.str!==undefined){var n=o.str;var m=n.match(/^([^=]+)=(.+)$/);if(m){this.sType=m[1];this.sValue=m[2]}else{throw new Error("malformed attrTypeAndValueStr: "+attrTypeAndValueStr)}}else{this.sType=o.type;this.sValue=o.value}};this.setByString=function(n,o){if(o!==undefined){this.sRule=o}var m=n.match(/^([^=]+)=(.+)$/);if(m){this.setByAttrTypeAndValueStr(m[1],m[2])}else{throw new Error("malformed attrTypeAndValueStr: "+attrTypeAndValueStr)}};this._getDsType=function(){var o=this.sType;var n=this.sValue;var m=this.sRule;if(m==="prn"){if(o=="CN"&&f(n)){return"ia5"}if(j(n)){return"prn"}return"utf8"}else{if(m==="utf8"){if(o=="CN"&&f(n)){return"ia5"}if(o=="C"){return"prn"}return"utf8"}}return"utf8"};this.setByAttrTypeAndValueStr=function(o,n,m){if(m!==undefined){this.sRule=m}this.sType=o;this.sValue=n};this.getValueObj=function(n,m){if(n=="utf8"){return new l({str:m})}if(n=="prn"){return new i({str:m})}if(n=="tel"){return new h({str:m})}if(n=="ia5"){return new b({str:m})}if(n=="vis"){return new e({str:m})}if(n=="bmp"){return new k({str:m})}throw new Error("unsupported directory string type: type="+n+" value="+m)};this.getEncodedHex=function(){if(this.dsType==null){this.dsType=this._getDsType()}var n=KJUR.asn1.x509.OID.atype2obj(this.sType);var m=this.getValueObj(this.dsType,this.sValue);var p=new d({array:[n,m]});this.TLV=p.getEncodedHex();return this.TLV};if(c!==undefined){this.setByParam(c)}};extendClass(KJUR.asn1.x509.AttributeTypeAndValue,KJUR.asn1.ASN1Object);KJUR.asn1.x509.SubjectPublicKeyInfo=function(f){KJUR.asn1.x509.SubjectPublicKeyInfo.superclass.constructor.call(this);var l=null,k=null,a=KJUR,j=a.asn1,i=j.DERInteger,b=j.DERBitString,m=j.DERObjectIdentifier,e=j.DERSequence,h=j.ASN1Util.newObject,d=j.x509,o=d.AlgorithmIdentifier,g=a.crypto,n=g.ECDSA,c=g.DSA;this.getASN1Object=function(){if(this.asn1AlgId==null||this.asn1SubjPKey==null){throw"algId and/or subjPubKey not set"}var p=new e({array:[this.asn1AlgId,this.asn1SubjPKey]});return p};this.getEncodedHex=function(){var p=this.getASN1Object();this.hTLV=p.getEncodedHex();return this.hTLV};this.setPubKey=function(q){try{if(q instanceof RSAKey){var u=h({seq:[{"int":{bigint:q.n}},{"int":{"int":q.e}}]});var s=u.getEncodedHex();this.asn1AlgId=new o({name:"rsaEncryption"});this.asn1SubjPKey=new b({hex:"00"+s})}}catch(p){}try{if(q instanceof KJUR.crypto.ECDSA){var r=new m({name:q.curveName});this.asn1AlgId=new o({name:"ecPublicKey",asn1params:r});this.asn1SubjPKey=new b({hex:"00"+q.pubKeyHex})}}catch(p){}try{if(q instanceof KJUR.crypto.DSA){var r=new h({seq:[{"int":{bigint:q.p}},{"int":{bigint:q.q}},{"int":{bigint:q.g}}]});this.asn1AlgId=new o({name:"dsa",asn1params:r});var t=new i({bigint:q.y});this.asn1SubjPKey=new b({hex:"00"+t.getEncodedHex()})}}catch(p){}};if(f!==undefined){this.setPubKey(f)}};extendClass(KJUR.asn1.x509.SubjectPublicKeyInfo,KJUR.asn1.ASN1Object);KJUR.asn1.x509.Time=function(f){KJUR.asn1.x509.Time.superclass.constructor.call(this);var e=null,a=null,d=KJUR,c=d.asn1,b=c.DERUTCTime,g=c.DERGeneralizedTime;this.params=null;this.type=null;this.setTimeParams=function(h){this.timeParams=h};this.setByParam=function(h){this.params=h};this.getType=function(h){if(h.match(/^[0-9]{12}Z$/)){return"utc"}if(h.match(/^[0-9]{14}Z$/)){return"gen"}if(h.match(/^[0-9]{12}\.[0-9]+Z$/)){return"utc"}if(h.match(/^[0-9]{14}\.[0-9]+Z$/)){return"gen"}return null};this.getEncodedHex=function(){var i=this.params;var h=null;if(typeof i=="string"){i={str:i}}if(i!=null&&i.str&&(i.type==null||i.type==undefined)){i.type=this.getType(i.str)}if(i!=null&&i.str){if(i.type=="utc"){h=new b(i.str)}if(i.type=="gen"){h=new g(i.str)}}else{if(this.type=="gen"){h=new g()}else{h=new b()}}if(h==null){throw new Error("wrong setting for Time")}this.TLV=h.getEncodedHex();return this.TLV};if(f!=undefined){this.setByParam(f)}};KJUR.asn1.x509.Time_bak=function(f){KJUR.asn1.x509.Time_bak.superclass.constructor.call(this);var e=null,a=null,d=KJUR,c=d.asn1,b=c.DERUTCTime,g=c.DERGeneralizedTime;this.setTimeParams=function(h){this.timeParams=h};this.getEncodedHex=function(){var h=null;if(this.timeParams!=null){if(this.type=="utc"){h=new b(this.timeParams)}else{h=new g(this.timeParams)}}else{if(this.type=="utc"){h=new b()}else{h=new g()}}this.TLV=h.getEncodedHex();return this.TLV};this.type="utc";if(f!==undefined){if(f.type!==undefined){this.type=f.type}else{if(f.str!==undefined){if(f.str.match(/^[0-9]{12}Z$/)){this.type="utc"}if(f.str.match(/^[0-9]{14}Z$/)){this.type="gen"}}}this.timeParams=f}};extendClass(KJUR.asn1.x509.Time,KJUR.asn1.ASN1Object);KJUR.asn1.x509.AlgorithmIdentifier=function(e){KJUR.asn1.x509.AlgorithmIdentifier.superclass.constructor.call(this);this.nameAlg=null;this.asn1Alg=null;this.asn1Params=null;this.paramEmpty=false;var b=KJUR,a=b.asn1,c=a.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV;this.getEncodedHex=function(){if(this.nameAlg===null&&this.asn1Alg===null){throw new Error("algorithm not specified")}if(this.nameAlg!==null){var f=null;for(var h in c){if(h===this.nameAlg){f=c[h]}}if(f!==null){this.hTLV=f;return this.hTLV}}if(this.nameAlg!==null&&this.asn1Alg===null){this.asn1Alg=a.x509.OID.name2obj(this.nameAlg)}var g=[this.asn1Alg];if(this.asn1Params!==null){g.push(this.asn1Params)}var i=new a.DERSequence({array:g});this.hTLV=i.getEncodedHex();return this.hTLV};if(e!==undefined){if(e.name!==undefined){this.nameAlg=e.name}if(e.asn1params!==undefined){this.asn1Params=e.asn1params}if(e.paramempty!==undefined){this.paramEmpty=e.paramempty}}if(this.asn1Params===null&&this.paramEmpty===false&&this.nameAlg!==null){if(this.nameAlg.name!==undefined){this.nameAlg=this.nameAlg.name}var d=this.nameAlg.toLowerCase();if(d.substr(-7,7)!=="withdsa"&&d.substr(-9,9)!=="withecdsa"){this.asn1Params=new a.DERNull()}}};extendClass(KJUR.asn1.x509.AlgorithmIdentifier,KJUR.asn1.ASN1Object);KJUR.asn1.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV={SHAwithRSAandMGF1:"300d06092a864886f70d01010a3000",SHA256withRSAandMGF1:"303d06092a864886f70d01010a3030a00d300b0609608648016503040201a11a301806092a864886f70d010108300b0609608648016503040201a203020120",SHA384withRSAandMGF1:"303d06092a864886f70d01010a3030a00d300b0609608648016503040202a11a301806092a864886f70d010108300b0609608648016503040202a203020130",SHA512withRSAandMGF1:"303d06092a864886f70d01010a3030a00d300b0609608648016503040203a11a301806092a864886f70d010108300b0609608648016503040203a203020140"};KJUR.asn1.x509.GeneralName=function(e){KJUR.asn1.x509.GeneralName.superclass.constructor.call(this);var m=null,i=null,k={rfc822:"81",dns:"82",dn:"a4",uri:"86",ip:"87"},b=KJUR,g=b.asn1,f=g.DERSequence,j=g.DEROctetString,d=g.DERIA5String,c=g.DERTaggedObject,l=g.ASN1Object,a=g.x509.X500Name,h=pemtohex;this.explicit=false;this.setByParam=function(p){var r=null;var u=null;if(p===undefined){return}if(p.rfc822!==undefined){this.type="rfc822";u=new d({str:p[this.type]})}if(p.dns!==undefined){this.type="dns";u=new d({str:p[this.type]})}if(p.uri!==undefined){this.type="uri";u=new d({str:p[this.type]})}if(p.dn!==undefined){this.type="dn";this.explicit=true;if(typeof p.dn==="string"){u=new a({str:p.dn})}else{if(p.dn instanceof KJUR.asn1.x509.X500Name){u=p.dn}else{u=new a(p.dn)}}}if(p.ldapdn!==undefined){this.type="dn";this.explicit=true;u=new a({ldapstr:p.ldapdn})}if(p.certissuer!==undefined){this.type="dn";this.explicit=true;var o=p.certissuer;var w=null;if(o.match(/^[0-9A-Fa-f]+$/)){w==o}if(o.indexOf("-----BEGIN ")!=-1){w=h(o)}if(w==null){throw"certissuer param not cert"}var t=new X509();t.hex=w;var y=t.getIssuerHex();u=new l();u.hTLV=y}if(p.certsubj!==undefined){this.type="dn";this.explicit=true;var o=p.certsubj;var w=null;if(o.match(/^[0-9A-Fa-f]+$/)){w==o}if(o.indexOf("-----BEGIN ")!=-1){w=h(o)}if(w==null){throw"certsubj param not cert"}var t=new X509();t.hex=w;var y=t.getSubjectHex();u=new l();u.hTLV=y}if(p.ip!==undefined){this.type="ip";this.explicit=false;var q=p.ip;var s;var n="malformed IP address";if(q.match(/^[0-9.]+[.][0-9.]+$/)){s=intarystrtohex("["+q.split(".").join(",")+"]");if(s.length!==8){throw n}}else{if(q.match(/^[0-9A-Fa-f:]+:[0-9A-Fa-f:]+$/)){s=ipv6tohex(q)}else{if(q.match(/^([0-9A-Fa-f][0-9A-Fa-f]){1,}$/)){s=q}else{throw n}}}u=new j({hex:s})}if(this.type==null){throw"unsupported type in params="+p}this.asn1Obj=new c({explicit:this.explicit,tag:k[this.type],obj:u})};this.getEncodedHex=function(){return this.asn1Obj.getEncodedHex()};if(e!==undefined){this.setByParam(e)}};extendClass(KJUR.asn1.x509.GeneralName,KJUR.asn1.ASN1Object);KJUR.asn1.x509.GeneralNames=function(d){KJUR.asn1.x509.GeneralNames.superclass.constructor.call(this);var a=null,c=KJUR,b=c.asn1;this.setByParamArray=function(g){for(var e=0;e<g.length;e++){var f=new b.x509.GeneralName(g[e]);this.asn1Array.push(f)}};this.getEncodedHex=function(){var e=new b.DERSequence({array:this.asn1Array});return e.getEncodedHex()};this.asn1Array=new Array();if(typeof d!="undefined"){this.setByParamArray(d)}};extendClass(KJUR.asn1.x509.GeneralNames,KJUR.asn1.ASN1Object);KJUR.asn1.x509.OID=new function(a){this.atype2oidList={CN:"2.5.4.3",L:"2.5.4.7",ST:"2.5.4.8",O:"2.5.4.10",OU:"2.5.4.11",C:"2.5.4.6",STREET:"2.5.4.9",DC:"0.9.2342.19200300.100.1.25",UID:"0.9.2342.19200300.100.1.1",SN:"2.5.4.4",T:"2.5.4.12",DN:"2.5.4.49",E:"1.2.840.113549.1.9.1",description:"2.5.4.13",businessCategory:"2.5.4.15",postalCode:"2.5.4.17",serialNumber:"2.5.4.5",uniqueIdentifier:"2.5.4.45",organizationIdentifier:"2.5.4.97",jurisdictionOfIncorporationL:"1.3.6.1.4.1.311.60.2.1.1",jurisdictionOfIncorporationSP:"1.3.6.1.4.1.311.60.2.1.2",jurisdictionOfIncorporationC:"1.3.6.1.4.1.311.60.2.1.3"};this.name2oidList={sha1:"1.3.14.3.2.26",sha256:"2.16.840.1.101.3.4.2.1",sha384:"2.16.840.1.101.3.4.2.2",sha512:"2.16.840.1.101.3.4.2.3",sha224:"2.16.840.1.101.3.4.2.4",md5:"1.2.840.113549.2.5",md2:"1.3.14.7.2.2.1",ripemd160:"1.3.36.3.2.1",MD2withRSA:"1.2.840.113549.1.1.2",MD4withRSA:"1.2.840.113549.1.1.3",MD5withRSA:"1.2.840.113549.1.1.4",SHA1withRSA:"1.2.840.113549.1.1.5","pkcs1-MGF":"1.2.840.113549.1.1.8",rsaPSS:"1.2.840.113549.1.1.10",SHA224withRSA:"1.2.840.113549.1.1.14",SHA256withRSA:"1.2.840.113549.1.1.11",SHA384withRSA:"1.2.840.113549.1.1.12",SHA512withRSA:"1.2.840.113549.1.1.13",SHA1withECDSA:"1.2.840.10045.4.1",SHA224withECDSA:"1.2.840.10045.4.3.1",SHA256withECDSA:"1.2.840.10045.4.3.2",SHA384withECDSA:"1.2.840.10045.4.3.3",SHA512withECDSA:"1.2.840.10045.4.3.4",dsa:"1.2.840.10040.4.1",SHA1withDSA:"1.2.840.10040.4.3",SHA224withDSA:"2.16.840.1.101.3.4.3.1",SHA256withDSA:"2.16.840.1.101.3.4.3.2",rsaEncryption:"1.2.840.113549.1.1.1",commonName:"2.5.4.3",countryName:"2.5.4.6",localityName:"2.5.4.7",stateOrProvinceName:"2.5.4.8",streetAddress:"2.5.4.9",organizationName:"2.5.4.10",organizationalUnitName:"2.5.4.11",domainComponent:"0.9.2342.19200300.100.1.25",userId:"0.9.2342.19200300.100.1.1",surname:"2.5.4.4",givenName:"2.5.4.42",title:"2.5.4.12",distinguishedName:"2.5.4.49",emailAddress:"1.2.840.113549.1.9.1",description:"2.5.4.13",businessCategory:"2.5.4.15",postalCode:"2.5.4.17",uniqueIdentifier:"2.5.4.45",organizationIdentifier:"2.5.4.97",jurisdictionOfIncorporationL:"1.3.6.1.4.1.311.60.2.1.1",jurisdictionOfIncorporationSP:"1.3.6.1.4.1.311.60.2.1.2",jurisdictionOfIncorporationC:"1.3.6.1.4.1.311.60.2.1.3",subjectDirectoryAttributes:"2.5.29.9",subjectKeyIdentifier:"2.5.29.14",keyUsage:"2.5.29.15",subjectAltName:"2.5.29.17",issuerAltName:"2.5.29.18",basicConstraints:"2.5.29.19",cRLNumber:"2.5.29.20",cRLReason:"2.5.29.21",nameConstraints:"2.5.29.30",cRLDistributionPoints:"2.5.29.31",certificatePolicies:"2.5.29.32",anyPolicy:"2.5.29.32.0",authorityKeyIdentifier:"2.5.29.35",policyConstraints:"2.5.29.36",extKeyUsage:"2.5.29.37",authorityInfoAccess:"1.3.6.1.5.5.7.1.1",ocsp:"1.3.6.1.5.5.7.48.1",ocspBasic:"1.3.6.1.5.5.7.48.1.1",ocspNonce:"1.3.6.1.5.5.7.48.1.2",ocspNoCheck:"1.3.6.1.5.5.7.48.1.5",caIssuers:"1.3.6.1.5.5.7.48.2",anyExtendedKeyUsage:"2.5.29.37.0",serverAuth:"1.3.6.1.5.5.7.3.1",clientAuth:"1.3.6.1.5.5.7.3.2",codeSigning:"1.3.6.1.5.5.7.3.3",emailProtection:"1.3.6.1.5.5.7.3.4",timeStamping:"1.3.6.1.5.5.7.3.8",ocspSigning:"1.3.6.1.5.5.7.3.9",dateOfBirth:"1.3.6.1.5.5.7.9.1",placeOfBirth:"1.3.6.1.5.5.7.9.2",gender:"1.3.6.1.5.5.7.9.3",countryOfCitizenship:"1.3.6.1.5.5.7.9.4",countryOfResidence:"1.3.6.1.5.5.7.9.5",ecPublicKey:"1.2.840.10045.2.1","P-256":"1.2.840.10045.3.1.7",secp256r1:"1.2.840.10045.3.1.7",secp256k1:"1.3.132.0.10",secp384r1:"1.3.132.0.34",secp521r1:"1.3.132.0.35",pkcs5PBES2:"1.2.840.113549.1.5.13",pkcs5PBKDF2:"1.2.840.113549.1.5.12","des-EDE3-CBC":"1.2.840.113549.3.7",data:"1.2.840.113549.1.7.1","signed-data":"1.2.840.113549.1.7.2","enveloped-data":"1.2.840.113549.1.7.3","digested-data":"1.2.840.113549.1.7.5","encrypted-data":"1.2.840.113549.1.7.6","authenticated-data":"1.2.840.113549.1.9.16.1.2",tstinfo:"1.2.840.113549.1.9.16.1.4",signingCertificate:"1.2.840.113549.1.9.16.2.12",timeStampToken:"1.2.840.113549.1.9.16.2.14",signaturePolicyIdentifier:"1.2.840.113549.1.9.16.2.15",etsArchiveTimeStamp:"1.2.840.113549.1.9.16.2.27",signingCertificateV2:"1.2.840.113549.1.9.16.2.47",etsArchiveTimeStampV2:"1.2.840.113549.1.9.16.2.48",extensionRequest:"1.2.840.113549.1.9.14",contentType:"1.2.840.113549.1.9.3",messageDigest:"1.2.840.113549.1.9.4",signingTime:"1.2.840.113549.1.9.5",counterSignature:"1.2.840.113549.1.9.6",archiveTimeStampV3:"0.4.0.1733.2.4",pdfRevocationInfoArchival:"1.2.840.113583.1.1.8",adobeTimeStamp:"1.2.840.113583.1.1.9.1"};this.objCache={};this.name2obj=function(b){if(typeof this.objCache[b]!="undefined"){return this.objCache[b]}if(typeof this.name2oidList[b]=="undefined"){throw"Name of ObjectIdentifier not defined: "+b}var c=this.name2oidList[b];var d=new KJUR.asn1.DERObjectIdentifier({oid:c});this.objCache[b]=d;return d};this.atype2obj=function(b){if(this.objCache[b]!==undefined){return this.objCache[b]}var c;if(b.match(/^\d+\.\d+\.[0-9.]+$/)){c=b}else{if(this.atype2oidList[b]!==undefined){c=this.atype2oidList[b]}else{if(this.name2oidList[b]!==undefined){c=this.name2oidList[b]}else{throw"AttributeType name undefined: "+b}}}var d=new KJUR.asn1.DERObjectIdentifier({oid:c});this.objCache[b]=d;return d}};KJUR.asn1.x509.OID.oid2name=function(b){var c=KJUR.asn1.x509.OID.name2oidList;for(var a in c){if(c[a]==b){return a}}return""};KJUR.asn1.x509.OID.oid2atype=function(b){var c=KJUR.asn1.x509.OID.atype2oidList;for(var a in c){if(c[a]==b){return a}}return b};KJUR.asn1.x509.OID.name2oid=function(a){if(a.match(/^[0-9.]+$/)){return a}var b=KJUR.asn1.x509.OID.name2oidList;if(b[a]===undefined){return""}return b[a]};KJUR.asn1.x509.X509Util={};KJUR.asn1.x509.X509Util.newCertPEM=function(e){var d=KJUR.asn1.x509,b=d.TBSCertificate,a=d.Certificate;var c=new a(e);return c.getPEM()};
    if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.asn1=="undefined"||!KJUR.asn1){KJUR.asn1={}}if(typeof KJUR.asn1.cms=="undefined"||!KJUR.asn1.cms){KJUR.asn1.cms={}}KJUR.asn1.cms.Attribute=function(f){var e=Error,d=KJUR,c=d.asn1,b=c.DERSequence,a=c.DERSet,g=c.DERObjectIdentifier;this.params=null;this.typeOid=null;this.setByParam=function(h){this.params=h};this.getValueArray=function(){throw new e("not yet implemented abstract")};this.getEncodedHex=function(){var j=new g({oid:this.typeOid});var h=new a({array:this.getValueArray()});var i=new b({array:[j,h]});return i.getEncodedHex()}};extendClass(KJUR.asn1.cms.Attribute,KJUR.asn1.ASN1Object);KJUR.asn1.cms.ContentType=function(c){var b=KJUR,a=b.asn1;a.cms.ContentType.superclass.constructor.call(this);this.typeOid="1.2.840.113549.1.9.3";this.getValueArray=function(){var d=new a.DERObjectIdentifier(this.params.type);return[d]};if(c!=undefined){this.setByParam(c)}};extendClass(KJUR.asn1.cms.ContentType,KJUR.asn1.cms.Attribute);KJUR.asn1.cms.MessageDigest=function(e){var b=KJUR,a=b.asn1,c=a.DEROctetString,d=a.cms;d.MessageDigest.superclass.constructor.call(this);this.typeOid="1.2.840.113549.1.9.4";this.getValueArray=function(){var f=new c(this.params);return[f]};if(e!=undefined){this.setByParam(e)}};extendClass(KJUR.asn1.cms.MessageDigest,KJUR.asn1.cms.Attribute);KJUR.asn1.cms.SigningTime=function(c){var b=KJUR,a=b.asn1;a.cms.SigningTime.superclass.constructor.call(this);this.typeOid="1.2.840.113549.1.9.5";this.getValueArray=function(){var d=new a.x509.Time(this.params);return[d]};if(c!=undefined){this.setByParam(c)}};extendClass(KJUR.asn1.cms.SigningTime,KJUR.asn1.cms.Attribute);KJUR.asn1.cms.SigningCertificate=function(h){var e=Error,d=KJUR,c=d.asn1,b=c.DERSequence,g=c.cms,a=g.ESSCertID,f=d.crypto;g.SigningCertificate.superclass.constructor.call(this);this.typeOid="1.2.840.113549.1.9.16.2.12";this.getValueArray=function(){if(this.params==null||this.params==undefined||this.params.array==undefined){throw new e("parameter 'array' not specified")}var o=this.params.array;var k=[];for(var l=0;l<o.length;l++){var n=o[l];if(h.hasis==false&&(typeof n=="string"&&(n.indexOf("-----BEGIN")!=-1||ASN1HEX.isASN1HEX(n)))){n={cert:n}}if(n.hasis!=false&&h.hasis==false){n.hasis=false}k.push(new a(n))}var j=new b({array:k});var m=new b({array:[j]});return[m]};if(h!=undefined){this.setByParam(h)}};extendClass(KJUR.asn1.cms.SigningCertificate,KJUR.asn1.cms.Attribute);KJUR.asn1.cms.ESSCertID=function(g){KJUR.asn1.cms.ESSCertID.superclass.constructor.call(this);var d=Error,c=KJUR,b=c.asn1,f=b.DEROctetString,a=b.DERSequence,e=b.cms.IssuerSerial;this.params=null;this.getCertHash=function(k,h){if(k.hash!=undefined){return k.hash}if(typeof k=="string"&&k.indexOf("-----BEGIN")==-1&&!ASN1HEX.isASN1HEX(k)){return k}var i;if(typeof k=="string"){i=k}else{if(k.cert!=undefined){i=k.cert}else{throw new d("hash nor cert unspecified")}}var j;if(i.indexOf("-----BEGIN")!=-1){j=pemtohex(i)}else{j=i}if(typeof k=="string"){if(k.indexOf("-----BEGIN")!=-1){j=pemtohex(k)}else{if(ASN1HEX.isASN1HEX(k)){j=k}}}var l;if(k.alg!=undefined){l=k.alg}else{if(h!=undefined){l=h}else{throw new d("hash alg unspecified")}}return c.crypto.Util.hashHex(j,l)};this.getEncodedHex=function(){var k=this.params;var j=this.getCertHash(k,"sha1");var h=[];h.push(new f({hex:j}));if((typeof k=="string"&&k.indexOf("-----BEGIN")!=-1)||(k.cert!=undefined&&k.hasis!=false)||(k.issuer!=undefined&&k.serial!=undefined)){h.push(new e(k))}var i=new a({array:h});return i.getEncodedHex()};if(g!=undefined){this.setByParam(g)}};extendClass(KJUR.asn1.cms.ESSCertID,KJUR.asn1.ASN1Object);KJUR.asn1.cms.SigningCertificateV2=function(d){var h=Error,a=KJUR,g=a.asn1,e=g.DERSequence,b=g.x509,i=g.cms,c=i.ESSCertIDv2,f=a.crypto;i.SigningCertificateV2.superclass.constructor.call(this);this.typeOid="1.2.840.113549.1.9.16.2.47";this.getValueArray=function(){if(this.params==null||this.params==undefined||this.params.array==undefined){throw new h("parameter 'array' not specified")}var o=this.params.array;var l=[];for(var m=0;m<o.length;m++){var n=o[m];if((d.alg!=undefined||d.hasis==false)&&(typeof n=="string"&&(n.indexOf("-----BEGIN")!=-1||ASN1HEX.isASN1HEX(n)))){n={cert:n}}if(n.alg==undefined&&d.alg!=undefined){n.alg=d.alg}if(n.hasis!=false&&d.hasis==false){n.hasis=false}l.push(new c(n))}var k=new e({array:l});var j=new e({array:[k]});return[j]};if(d!=undefined){this.setByParam(d)}};extendClass(KJUR.asn1.cms.SigningCertificateV2,KJUR.asn1.cms.Attribute);KJUR.asn1.cms.ESSCertIDv2=function(h){KJUR.asn1.cms.ESSCertIDv2.superclass.constructor.call(this);var d=Error,c=KJUR,b=c.asn1,f=b.DEROctetString,a=b.DERSequence,e=b.cms.IssuerSerial,g=b.x509.AlgorithmIdentifier;this.params=null;this.getEncodedHex=function(){var l=this.params;var k=this.getCertHash(l,"sha256");var i=[];if(l.alg!=undefined&&l.alg!="sha256"){i.push(new g({name:l.alg}))}i.push(new f({hex:k}));if((typeof l=="string"&&l.indexOf("-----BEGIN")!=-1)||(l.cert!=undefined&&l.hasis!=false)||(l.issuer!=undefined&&l.serial!=undefined)){i.push(new e(l))}var j=new a({array:i});return j.getEncodedHex()};if(h!=undefined){this.setByParam(h)}};extendClass(KJUR.asn1.cms.ESSCertIDv2,KJUR.asn1.cms.ESSCertID);KJUR.asn1.cms.IssuerSerial=function(e){var i=Error,c=KJUR,h=c.asn1,g=h.DERInteger,f=h.DERSequence,j=h.cms,d=h.x509,a=d.GeneralNames,b=X509;j.IssuerSerial.superclass.constructor.call(this);this.setByParam=function(k){this.params=k};this.getEncodedHex=function(){var p=this.params;var l,r;if((typeof p=="string"&&p.indexOf("-----BEGIN")!=-1)||p.cert!=undefined){var n;if(p.cert!=undefined){n=p.cert}else{n=p}var k=new b();k.readCertPEM(n);l=k.getIssuer();r={hex:k.getSerialNumberHex()}}else{if(p.issuer!=undefined&&p.serial){l=p.issuer;r=p.serial}else{throw new i("cert or issuer and serial parameter not specified")}}var q=new a([{dn:l}]);var o=new g(r);var m=new f({array:[q,o]});return m.getEncodedHex()};if(e!=undefined){this.setByParam(e)}};extendClass(KJUR.asn1.cms.IssuerSerial,KJUR.asn1.ASN1Object);KJUR.asn1.cms.SignerIdentifier=function(f){var c=KJUR,i=c.asn1,h=i.DERInteger,g=i.DERSequence,l=i.cms,k=l.IssuerAndSerialNumber,d=l.SubjectKeyIdentifier,e=i.x509,a=e.X500Name,b=X509,j=Error;l.SignerIdentifier.superclass.constructor.call(this);this.params=null;this.getEncodedHex=function(){var o=this.params;if(o.type=="isssn"){var m=new k(o);return m.getEncodedHex()}else{if(o.type=="skid"){var n=new d(o);return n.getEncodedHex()}else{throw new Error("wrong property for isssn or skid")}}};if(f!=undefined){this.setByParam(f)}};extendClass(KJUR.asn1.cms.SignerIdentifier,KJUR.asn1.ASN1Object);KJUR.asn1.cms.IssuerAndSerialNumber=function(e){var c=KJUR,h=c.asn1,g=h.DERInteger,f=h.DERSequence,j=h.cms,d=h.x509,a=d.X500Name,b=X509,i=Error;j.IssuerAndSerialNumber.superclass.constructor.call(this);this.params=null;this.getEncodedHex=function(){var p=this.params;var l,r;if((typeof p=="string"&&p.indexOf("-----BEGIN")!=-1)||p.cert!=undefined){var n;if(p.cert!=undefined){n=p.cert}else{n=p}var k=new b();k.readCertPEM(n);l=k.getIssuer();r={hex:k.getSerialNumberHex()}}else{if(p.issuer!=undefined&&p.serial){l=p.issuer;r=p.serial}else{throw new i("cert or issuer and serial parameter not specified")}}var q=new a(l);var o=new g(r);var m=new f({array:[q,o]});return m.getEncodedHex()};this.setByParam=function(k){this.params=k};if(e!=undefined){this.setByParam(e)}};extendClass(KJUR.asn1.cms.IssuerAndSerialNumber,KJUR.asn1.ASN1Object);KJUR.asn1.cms.SubjectKeyIdentifier=function(g){var d=KJUR,k=d.asn1,i=k.DERInteger,h=k.DERSequence,j=k.ASN1Util.newObject,m=k.cms,f=m.IssuerAndSerialName,c=m.SubjectKeyIdentifier,e=k.x509,a=e.X500Name,b=X509,l=Error;m.SubjectKeyIdentifier.superclass.constructor.call(this);this.getEncodedHex=function(){var r=this.params;if(r.cert==undefined&&r.skid==undefined){throw new l("property cert nor skid undefined")}var q;if(r.cert!=undefined){var n=new b(r.cert);var o=n.getExtSubjectKeyIdentifier();q=o.kid.hex}else{if(r.skid!=undefined){q=r.skid}}var p=j({tag:{tage:"a0",obj:{octstr:{hex:q}}}});return p.getEncodedHex()};if(g!=undefined){this.setByParam(g)}};extendClass(KJUR.asn1.cms.SubjectKeyIdentifier,KJUR.asn1.ASN1Object);KJUR.asn1.cms.AttributeList=function(f){var d=Error,c=KJUR,b=c.asn1,a=b.DERSet,e=b.cms;e.AttributeList.superclass.constructor.call(this);this.params=null;this.hTLV=null;this.setByParam=function(g){this.params=g};this.getEncodedHex=function(){var o=this.params;if(this.hTLV!=null){return this.hTLV}var m=true;if(o.sortflag!=undefined){m=o.sortflag}var j=o.array;var g=[];for(var l=0;l<j.length;l++){var n=j[l];var k=n.attr;if(k=="contentType"){g.push(new e.ContentType(n))}else{if(k=="messageDigest"){g.push(new e.MessageDigest(n))}else{if(k=="signingTime"){g.push(new e.SigningTime(n))}else{if(k=="signingCertificate"){g.push(new e.SigningCertificate(n))}else{if(k=="signingCertificateV2"){g.push(new e.SigningCertificateV2(n))}else{if(k=="signaturePolicyIdentifier"){g.push(new KJUR.asn1.cades.SignaturePolicyIdentifier(n))}else{if(k=="signatureTimeStamp"||k=="timeStampToken"){g.push(new KJUR.asn1.cades.SignatureTimeStamp(n))}else{throw new d("unknown attr: "+k)}}}}}}}}var h=new a({array:g,sortflag:m});this.hTLV=h.getEncodedHex();return this.hTLV};if(f!=undefined){this.setByParam(f)}};extendClass(KJUR.asn1.cms.AttributeList,KJUR.asn1.ASN1Object);KJUR.asn1.cms.SignerInfo=function(q){var n=Error,r=KJUR,i=r.asn1,c=i.DERInteger,f=i.DEROctetString,h=i.DERSequence,m=i.DERTaggedObject,k=i.cms,p=k.SignerIdentifier,l=k.AttributeList,g=k.ContentType,e=k.EncapsulatedContentInfo,d=k.MessageDigest,j=k.SignedData,a=i.x509,s=a.AlgorithmIdentifier,b=r.crypto,o=KEYUTIL;k.SignerInfo.superclass.constructor.call(this);this.params=null;this.sign=function(){var y=this.params;var x=y.sigalg;var u=(new l(y.sattrs)).getEncodedHex();var v=o.getKey(y.signkey);var w=new b.Signature({alg:x});w.init(v);w.updateHex(u);var t=w.sign();y.sighex=t};this.getEncodedHex=function(){var w=this.params;var t=[];t.push(new c({"int":w.version}));t.push(new p(w.id));t.push(new s({name:w.hashalg}));if(w.sattrs!=undefined){var x=new l(w.sattrs);try{t.push(new m({tag:"a0",explicit:false,obj:x}))}catch(v){throw new n("si sattr error: "+v)}}if(w.sigalgfield!=undefined){t.push(new s({name:w.sigalgfield}))}else{t.push(new s({name:w.sigalg}))}if(w.sighex==undefined&&w.signkey!=undefined){this.sign()}t.push(new f({hex:w.sighex}));if(w.uattrs!=undefined){var x=new l(w.uattrs);try{t.push(new m({tag:"a1",explicit:false,obj:x}))}catch(v){throw new n("si uattr error: "+v)}}var u=new h({array:t});return u.getEncodedHex()};if(q!=undefined){this.setByParam(q)}};extendClass(KJUR.asn1.cms.SignerInfo,KJUR.asn1.ASN1Object);KJUR.asn1.cms.EncapsulatedContentInfo=function(g){var c=KJUR,b=c.asn1,e=b.DERTaggedObject,a=b.DERSequence,h=b.DERObjectIdentifier,d=b.DEROctetString,f=b.cms;f.EncapsulatedContentInfo.superclass.constructor.call(this);this.params=null;this.getEncodedHex=function(){var m=this.params;var i=[];i.push(new h(m.type));if(m.content!=undefined&&(m.content.hex!=undefined||m.content.str!=undefined)&&m.isDetached!=true){var k=new d(m.content);var l=new e({tag:"a0",explicit:true,obj:k});i.push(l)}var j=new a({array:i});return j.getEncodedHex()};this.setByParam=function(i){this.params=i};if(g!=undefined){this.setByParam(g)}};extendClass(KJUR.asn1.cms.EncapsulatedContentInfo,KJUR.asn1.ASN1Object);KJUR.asn1.cms.ContentInfo=function(g){var c=KJUR,b=c.asn1,d=b.DERTaggedObject,a=b.DERSequence,h=b.DERObjectIdentifier,f=b.x509,e=f.OID.name2obj;KJUR.asn1.cms.ContentInfo.superclass.constructor.call(this);this.params=null;this.getEncodedHex=function(){var l=this.params;var i=[];i.push(new h(l.type));var k=new d({tag:"a0",explicit:true,obj:l.obj});i.push(k);var j=new a({array:i});return j.getEncodedHex()};this.setByParam=function(i){this.params=i};if(g!=undefined){this.setByParam(g)}};extendClass(KJUR.asn1.cms.ContentInfo,KJUR.asn1.ASN1Object);KJUR.asn1.cms.SignedData=function(e){var j=Error,a=KJUR,h=a.asn1,m=h.ASN1Object,g=h.DERInteger,p=h.DERSet,f=h.DERSequence,b=h.DERTaggedObject,o=h.cms,l=o.EncapsulatedContentInfo,d=o.SignerInfo,q=o.ContentInfo,k=o.CertificateSet,i=o.RevocationInfoChoices,c=h.x509,n=c.AlgorithmIdentifier;KJUR.asn1.cms.SignedData.superclass.constructor.call(this);this.params=null;this.checkAndFixParam=function(){var r=this.params;this._setDigestAlgs(r);this._setContentTypeByEContent(r);this._setMessageDigestByEContent(r);this._setSignerInfoVersion(r);this._setSignedDataVersion(r)};this._setDigestAlgs=function(v){var u={};var t=v.sinfos;for(var r=0;r<t.length;r++){var s=t[r];u[s.hashalg]=1}v.hashalgs=Object.keys(u).sort()};this._setContentTypeByEContent=function(w){var u=w.econtent.type;var v=w.sinfos;for(var r=0;r<v.length;r++){var t=v[r];var s=this._getAttrParamByName(t,"contentType");s.type=u}};this._setMessageDigestByEContent=function(r){var v=r.econtent;var y=r.econtent.type;var x=v.content.hex;if(x==undefined&&v.type=="data"&&v.content.str!=undefined){x=rstrtohex(v.content.str)}var A=r.sinfos;for(var u=0;u<A.length;u++){var t=A[u];var s=t.hashalg;var z=this._getAttrParamByName(t,"messageDigest");var w=KJUR.crypto.Util.hashHex(x,s);z.hex=w}};this._getAttrParamByName=function(t,s){var u=t.sattrs.array;for(var r=0;r<u.length;r++){if(u[r].attr==s){return u[r]}}};this._setSignerInfoVersion=function(v){var t=v.sinfos;for(var r=0;r<t.length;r++){var s=t[r];var u=1;if(s.id.type=="skid"){u=3}s.version=u}};this._setSignedDataVersion=function(s){var r=this._getSignedDataVersion(s);s.version=r};this._getSignedDataVersion=function(w){if(w.revinfos!=undefined){var r=w.revinfos;for(var t=0;t<r.length;t++){var s=r[t];if(s.ocsp!=undefined){return 5}}}var v=w.sinfos;for(var t=0;t<v.length;t++){var u=w.sinfos[t];if(u.version==3){return 3}}if(w.econtent.type!="data"){return 3}return 1};this.getEncodedHex=function(){var y=this.params;if(this.getEncodedHexPrepare!=undefined){this.getEncodedHexPrepare()}if(y.fixed!=true){this.checkAndFixParam()}var r=[];r.push(new g({"int":y.version}));var w=[];for(var v=0;v<y.hashalgs.length;v++){var t=y.hashalgs[v];w.push(new n({name:t}))}r.push(new p({array:w}));r.push(new l(y.econtent));if(y.certs!=undefined){r.push(new k(y.certs))}if(y.revinfos!=undefined){r.push(new i(y.revinfos))}var u=[];for(var v=0;v<y.sinfos.length;v++){var x=y.sinfos[v];u.push(new d(x))}r.push(new p({array:u}));var s=new f({array:r});return s.getEncodedHex()};this.getContentInfo=function(){var r=new q({type:"signed-data",obj:this});return r};this.getContentInfoEncodedHex=function(){return this.getContentInfo().getEncodedHex()};if(e!=undefined){this.setByParam(e)}};extendClass(KJUR.asn1.cms.SignedData,KJUR.asn1.ASN1Object);KJUR.asn1.cms.CertificateSet=function(f){KJUR.asn1.cms.CertificateSet.superclass.constructor.call(this);var c=Error,b=KJUR.asn1,e=b.DERTaggedObject,a=b.DERSet,d=b.ASN1Object;this.params=null;this.getEncodedHex=function(){var j=this.params;var p=[];var q;if(j instanceof Array){q=j}else{if(j.array!=undefined){q=j.array}else{throw new c("cert array not specified")}}for(var k=0;k<q.length;k++){var l=q[k];var n=pemtohex(l);var g=new d();g.hTLV=n;p.push(g)}var m={array:p};if(j.sortflag==false){m.sortflag=false}var o=new a(m);var h=new e({tag:"a0",explicit:false,obj:o});return h.getEncodedHex()};if(f!=undefined){this.setByParam(f)}};extendClass(KJUR.asn1.cms.CertificateSet,KJUR.asn1.ASN1Object);KJUR.asn1.cms.RevocationInfoChoices=function(a){KJUR.asn1.cms.RevocationInfoChoices.superclass.constructor.call(this);this.params=null;this.getEncodedHex=function(){var e=this.params;if(!e instanceof Array){throw new Error("params is not array")}var b=[];for(var c=0;c<e.length;c++){b.push(new KJUR.asn1.cms.RevocationInfoChoice(e[c]))}var d=KJUR.asn1.ASN1Util.newObject({tag:{tagi:"a1",obj:{set:b}}});return d.getEncodedHex()};if(a!=undefined){this.setByParam(a)}};extendClass(KJUR.asn1.cms.RevocationInfoChoices,KJUR.asn1.ASN1Object);KJUR.asn1.cms.RevocationInfoChoice=function(a){KJUR.asn1.cms.RevocationInfoChoice.superclass.constructor.call(this);this.params=null;this.getEncodedHex=function(){var d=this.params;if(d.crl!=undefined&&typeof d.crl=="string"){var b=d.crl;if(d.crl.indexOf("-----BEGIN")!=-1){b=pemtohex(d.crl)}return b}else{if(d.ocsp!=undefined){var c=KJUR.asn1.ASN1Util.newObject({tag:{tagi:"a1",obj:new KJUR.asn1.cms.OtherRevocationFormat(d)}});return c.getEncodedHex()}else{throw new Error("property crl or ocsp undefined")}}};if(a!=undefined){this.setByParam(a)}};extendClass(KJUR.asn1.cms.RevocationInfoChoice,KJUR.asn1.ASN1Object);KJUR.asn1.cms.OtherRevocationFormat=function(f){KJUR.asn1.cms.OtherRevocationFormat.superclass.constructor.call(this);var d=Error,c=KJUR,b=c.asn1,a=b.ASN1Util.newObject,e=c.lang.String.isHex;this.params=null;this.getEncodedHex=function(){var h=this.params;if(h.ocsp==undefined){throw new d("property ocsp not specified")}if(!e(h.ocsp)||!ASN1HEX.isASN1HEX(h.ocsp)){throw new d("ocsp value not ASN.1 hex string")}var g=a({seq:[{oid:"1.3.6.1.5.5.7.16.2"},{asn1:{tlv:h.ocsp}}]});return g.getEncodedHex()};if(f!=undefined){this.setByParam(f)}};extendClass(KJUR.asn1.cms.OtherRevocationFormat,KJUR.asn1.ASN1Object);KJUR.asn1.cms.CMSUtil=new function(){};KJUR.asn1.cms.CMSUtil.newSignedData=function(a){return new KJUR.asn1.cms.SignedData(a)};KJUR.asn1.cms.CMSUtil.verifySignedData=function(n){var C=KJUR,p=C.asn1,s=p.cms,D=s.SignerInfo,q=s.SignedData,y=s.SigningTime,b=s.SigningCertificate,d=s.SigningCertificateV2,A=p.cades,u=A.SignaturePolicyIdentifier,i=C.lang.String.isHex,v=ASN1HEX,h=v.getVbyList,a=v.getTLVbyList,t=v.getIdxbyList,z=v.getChildIdx,c=v.getTLV,B=v.oidname,j=C.crypto.Util.hashHex;if(n.cms===undefined&&!i(n.cms)){}var E=n.cms;var g=function(J,H){var G;for(var I=3;I<6;I++){G=t(J,0,[1,0,I]);if(G!==undefined){var F=J.substr(G,2);if(F==="a0"){H.certsIdx=G}if(F==="a1"){H.revinfosIdx=G}if(F==="31"){H.signerinfosIdx=G}}}};var l=function(I,F){var H=F.signerinfosIdx;if(H===undefined){return}var L=z(I,H);F.signerInfoIdxList=L;for(var G=0;G<L.length;G++){var K=L[G];var J={idx:K};k(I,J);F.signerInfos.push(J)}};var k=function(I,J){var F=J.idx;J.signerid_issuer1=a(I,F,[1,0],"30");J.signerid_serial1=h(I,F,[1,1],"02");J.hashalg=B(h(I,F,[2,0],"06"));var H=t(I,F,[3],"a0");J.idxSignedAttrs=H;f(I,J,H);var G=z(I,F);var K=G.length;if(K<6){throw"malformed SignerInfo"}J.sigalg=B(h(I,F,[K-2,0],"06"));J.sigval=h(I,F,[K-1],"04")};var f=function(L,M,F){var J=z(L,F);M.signedAttrIdxList=J;for(var K=0;K<J.length;K++){var I=J[K];var G=h(L,I,[0],"06");var H;if(G==="2a864886f70d010905"){H=hextoutf8(h(L,I,[1,0]));M.saSigningTime=H}else{if(G==="2a864886f70d010904"){H=h(L,I,[1,0],"04");M.saMessageDigest=H}}}};var w=function(G,F){if(h(G,0,[0],"06")!=="2a864886f70d010702"){return F}F.cmsType="signedData";F.econtent=h(G,0,[1,0,2,1,0]);g(G,F);F.signerInfos=[];l(G,F)};var o=function(J,F){var G=F.parse.signerInfos;var L=G.length;var K=true;for(var I=0;I<L;I++){var H=G[I];e(J,F,H,I);if(!H.isValid){K=false}}F.isValid=K};var x=function(F,Q,J,P){var N=Q.parse.certsIdx;var H;if(Q.certs===undefined){H=[];Q.certkeys=[];var K=z(F,N);for(var I=0;I<K.length;I++){var M=c(F,K[I]);var O=new X509();O.readCertHex(M);H[I]=O;Q.certkeys[I]=O.getPublicKey()}Q.certs=H}else{H=Q.certs}Q.cccc=H.length;Q.cccci=K.length;for(var I=0;I<H.length;I++){var L=O.getIssuerHex();var G=O.getSerialNumberHex();if(J.signerid_issuer1===L&&J.signerid_serial1===G){J.certkey_idx=I}}};var e=function(F,R,I,N){I.verifyDetail={};var Q=I.verifyDetail;var K=R.parse.econtent;var G=I.hashalg;var L=I.saMessageDigest;Q.validMessageDigest=false;if(j(K,G)===L){Q.validMessageDigest=true}x(F,R,I,N);Q.validSignatureValue=false;var H=I.sigalg;var M="31"+c(F,I.idxSignedAttrs).substr(2);I.signedattrshex=M;var J=R.certs[I.certkey_idx].getPublicKey();var P=new KJUR.crypto.Signature({alg:H});P.init(J);P.updateHex(M);var O=P.verify(I.sigval);Q.validSignatureValue_isValid=O;if(O===true){Q.validSignatureValue=true}I.isValid=false;if(Q.validMessageDigest&&Q.validSignatureValue){I.isValid=true}};var m=function(){};var r={isValid:false,parse:{}};w(E,r.parse);o(E,r);return r};KJUR.asn1.cms.CMSParser=function(){var g=Error,a=X509,h=new a(),l=ASN1HEX,i=l.getV,b=l.getTLV,f=l.getIdxbyList,c=l.getTLVbyList,d=l.getTLVbyListEx,e=l.getVbyList,k=l.getVbyListEx,j=l.getChildIdx;this.getCMSSignedData=function(m){var o=c(m,0,[1,0]);var n=this.getSignedData(o);return n};this.getSignedData=function(o){var q=j(o,0);var v={};var p=i(o,q[0]);var n=parseInt(p,16);v.version=n;var r=b(o,q[1]);v.hashalgs=this.getHashAlgArray(r);var t=b(o,q[2]);v.econtent=this.getEContent(t);var m=d(o,0,["[0]"]);if(m!=null){v.certs=this.getCertificateSet(m)}var u=d(o,0,["[1]"]);if(u!=null){}var s=d(o,0,[3]);v.sinfos=this.getSignerInfos(s);return v};this.getHashAlgArray=function(s){var q=j(s,0);var m=new a();var n=[];for(var r=0;r<q.length;r++){var p=b(s,q[r]);var o=m.getAlgorithmIdentifierName(p);n.push(o)}return n};this.getEContent=function(m){var n={};var p=e(m,0,[0]);var o=e(m,0,[1,0]);n.type=KJUR.asn1.x509.OID.oid2name(ASN1HEX.hextooidstr(p));n.content={hex:o};return n};this.getSignerInfos=function(p){var r=[];var m=j(p,0);for(var n=0;n<m.length;n++){var o=b(p,m[n]);var q=this.getSignerInfo(o);r.push(q)}return r};this.getSignerInfo=function(s){var y={};var u=j(s,0);var q=l.getInt(s,u[0],-1);if(q!=-1){y.version=q}var t=b(s,u[1]);var p=this.getIssuerAndSerialNumber(t);y.id=p;var z=b(s,u[2]);var n=h.getAlgorithmIdentifierName(z);y.hashalg=n;var w=d(s,0,["[0]"]);if(w!=null){var A=this.getAttributeList(w);y.sattrs=A}var m=d(s,0,[3]);var x=h.getAlgorithmIdentifierName(m);y.sigalg=x;var o=k(s,0,[4]);y.sighex=o;var r=d(s,0,["[1]"]);if(r!=null){var v=this.getAttributeList(r);y.uattrs=v}return y};this.getSignerIdentifier=function(m){if(m.substr(0,2)=="30"){return this.getIssuerAndSerialNumber(m)}else{throw new Error("SKID of signerIdentifier not supported")}};this.getIssuerAndSerialNumber=function(n){var o={type:"isssn"};var m=j(n,0);var p=b(n,m[0]);o.issuer=h.getX500Name(p);var q=i(n,m[1]);o.serial={hex:q};return o};this.getAttributeList=function(q){var m=[];var n=j(q,0);for(var o=0;o<n.length;o++){var p=b(q,n[o]);var r=this.getAttribute(p);m.push(r)}return{array:m}};this.getAttribute=function(p){var t={};var q=j(p,0);var o=l.getOID(p,q[0]);var m=KJUR.asn1.x509.OID.oid2name(o);t.attr=m;var r=b(p,q[1]);var u=j(r,0);if(u.length==1){t.valhex=b(r,u[0])}else{var s=[];for(var n=0;n<u.length;n++){s.push(b(r,u[n]))}t.valhex=s}if(m=="contentType"){this.setContentType(t)}else{if(m=="messageDigest"){this.setMessageDigest(t)}else{if(m=="signingTime"){this.setSigningTime(t)}else{if(m=="signingCertificate"){this.setSigningCertificate(t)}else{if(m=="signingCertificateV2"){this.setSigningCertificateV2(t)}else{if(m=="signaturePolicyIdentifier"){this.setSignaturePolicyIdentifier(t)}}}}}}return t};this.setContentType=function(m){var n=l.getOIDName(m.valhex,0,null);if(n!=null){m.type=n;delete m.valhex}};this.setSigningTime=function(o){var n=i(o.valhex,0);var m=hextoutf8(n);o.str=m;delete o.valhex};this.setMessageDigest=function(m){var n=i(m.valhex,0);m.hex=n;delete m.valhex};this.setSigningCertificate=function(n){var q=j(n.valhex,0);if(q.length>0){var m=b(n.valhex,q[0]);var p=j(m,0);var t=[];for(var o=0;o<p.length;o++){var s=b(m,p[o]);var u=this.getESSCertID(s);t.push(u)}n.array=t}if(q.length>1){var r=b(n.valhex,q[1]);n.polhex=r}delete n.valhex};this.setSignaturePolicyIdentifier=function(s){var q=j(s.valhex,0);if(q.length>0){var r=l.getOID(s.valhex,q[0]);s.oid=r}if(q.length>1){var m=new a();var t=j(s.valhex,q[1]);var p=b(s.valhex,t[0]);var o=m.getAlgorithmIdentifierName(p);s.alg=o;var n=i(s.valhex,t[1]);s.hash=n}delete s.valhex};this.setSigningCertificateV2=function(o){var s=j(o.valhex,0);if(s.length>0){var n=b(o.valhex,s[0]);var r=j(n,0);var u=[];for(var q=0;q<r.length;q++){var m=b(n,r[q]);var p=this.getESSCertIDv2(m);u.push(p)}o.array=u}if(s.length>1){var t=b(o.valhex,s[1]);o.polhex=t}delete o.valhex};this.getESSCertID=function(o){var p={};var n=j(o,0);if(n.length>0){var q=i(o,n[0]);p.hash=q}if(n.length>1){var m=b(o,n[1]);var r=this.getIssuerSerial(m);if(r.serial!=undefined){p.serial=r.serial}if(r.issuer!=undefined){p.issuer=r.issuer}}return p};this.getESSCertIDv2=function(q){var s={};var p=j(q,0);if(p.length<1||3<p.length){throw new g("wrong number of elements")}var r=0;if(q.substr(p[0],2)=="30"){var o=b(q,p[0]);s.alg=h.getAlgorithmIdentifierName(o);r++}else{s.alg="sha256"}var n=i(q,p[r]);s.hash=n;if(p.length>r+1){var m=b(q,p[r+1]);var t=this.getIssuerSerial(m);s.issuer=t.issuer;s.serial=t.serial}return s};this.getIssuerSerial=function(q){var r={};var n=j(q,0);var m=b(q,n[0]);var p=h.getGeneralNames(m);var o=p[0].dn;r.issuer=o;var s=i(q,n[1]);r.serial={hex:s};return r};this.getCertificateSet=function(p){var n=j(p,0);var m=[];for(var o=0;o<n.length;o++){var r=b(p,n[o]);if(r.substr(0,2)=="30"){var q=hextopem(r,"CERTIFICATE");m.push(q)}}return{array:m,sortflag:false}}};
    if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.asn1=="undefined"||!KJUR.asn1){KJUR.asn1={}}if(typeof KJUR.asn1.tsp=="undefined"||!KJUR.asn1.tsp){KJUR.asn1.tsp={}}KJUR.asn1.tsp.TimeStampToken=function(d){var c=KJUR,b=c.asn1,a=b.tsp;a.TimeStampToken.superclass.constructor.call(this);this.params=null;this.getEncodedHexPrepare=function(){var e=new a.TSTInfo(this.params.econtent.content);this.params.econtent.content.hex=e.getEncodedHex()};if(d!=undefined){this.setByParam(d)}};extendClass(KJUR.asn1.tsp.TimeStampToken,KJUR.asn1.cms.SignedData);KJUR.asn1.tsp.TSTInfo=function(f){var m=Error,c=KJUR,j=c.asn1,g=j.DERSequence,i=j.DERInteger,l=j.DERBoolean,h=j.DERGeneralizedTime,n=j.DERObjectIdentifier,e=j.DERTaggedObject,k=j.tsp,d=k.MessageImprint,b=k.Accuracy,a=j.x509.X500Name,o=j.x509.GeneralName;k.TSTInfo.superclass.constructor.call(this);this.dVersion=new i({"int":1});this.dPolicy=null;this.dMessageImprint=null;this.dSerial=null;this.dGenTime=null;this.dAccuracy=null;this.dOrdering=null;this.dNonce=null;this.dTsa=null;this.getEncodedHex=function(){var p=[this.dVersion];if(this.dPolicy==null){throw new Error("policy shall be specified.")}p.push(this.dPolicy);if(this.dMessageImprint==null){throw new Error("messageImprint shall be specified.")}p.push(this.dMessageImprint);if(this.dSerial==null){throw new Error("serialNumber shall be specified.")}p.push(this.dSerial);if(this.dGenTime==null){throw new Error("genTime shall be specified.")}p.push(this.dGenTime);if(this.dAccuracy!=null){p.push(this.dAccuracy)}if(this.dOrdering!=null){p.push(this.dOrdering)}if(this.dNonce!=null){p.push(this.dNonce)}if(this.dTsa!=null){p.push(this.dTsa)}var q=new g({array:p});this.hTLV=q.getEncodedHex();return this.hTLV};if(f!==undefined){if(typeof f.policy=="string"){if(!f.policy.match(/^[0-9.]+$/)){throw"policy shall be oid like 0.1.4.134"}this.dPolicy=new n({oid:f.policy})}if(f.messageImprint!==undefined){this.dMessageImprint=new d(f.messageImprint)}if(f.serial!==undefined){this.dSerial=new i(f.serial)}if(f.genTime!==undefined){this.dGenTime=new h(f.genTime)}if(f.accuracy!==undefined){this.dAccuracy=new b(f.accuracy)}if(f.ordering!==undefined&&f.ordering==true){this.dOrdering=new l()}if(f.nonce!==undefined){this.dNonce=new i(f.nonce)}if(f.tsa!==undefined){this.dTsa=new e({tag:"a0",explicit:true,obj:new o({dn:f.tsa})})}}};extendClass(KJUR.asn1.tsp.TSTInfo,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.Accuracy=function(d){var c=KJUR,b=c.asn1,a=b.ASN1Util.newObject;b.tsp.Accuracy.superclass.constructor.call(this);this.params=null;this.getEncodedHex=function(){var f=this.params;var e=[];if(f.seconds!=undefined&&typeof f.seconds=="number"){e.push({"int":f.seconds})}if(f.millis!=undefined&&typeof f.millis=="number"){e.push({tag:{tagi:"80",obj:{"int":f.millis}}})}if(f.micros!=undefined&&typeof f.micros=="number"){e.push({tag:{tagi:"81",obj:{"int":f.micros}}})}return a({seq:e}).getEncodedHex()};if(d!=undefined){this.setByParam(d)}};extendClass(KJUR.asn1.tsp.Accuracy,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.MessageImprint=function(g){var c=KJUR,b=c.asn1,a=b.DERSequence,d=b.DEROctetString,f=b.x509,e=f.AlgorithmIdentifier;b.tsp.MessageImprint.superclass.constructor.call(this);this.params=null;this.getEncodedHex=function(){var k=this.params;var j=new e({name:k.alg});var h=new d({hex:k.hash});var i=new a({array:[j,h]});return i.getEncodedHex()};if(g!==undefined){this.setByParam(g)}};extendClass(KJUR.asn1.tsp.MessageImprint,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.TimeStampReq=function(c){var a=KJUR,f=a.asn1,d=f.DERSequence,e=f.DERInteger,h=f.DERBoolean,j=f.ASN1Object,i=f.DERObjectIdentifier,g=f.tsp,b=g.MessageImprint;g.TimeStampReq.superclass.constructor.call(this);this.params=null;this.getEncodedHex=function(){var m=this.params;var k=[];k.push(new e({"int":1}));if(m.messageImprint instanceof KJUR.asn1.ASN1Object){k.push(m.messageImprint)}else{k.push(new b(m.messageImprint))}if(m.policy!=undefined){k.push(new i(m.policy))}if(m.nonce!=undefined){k.push(new e(m.nonce))}if(m.certreq==true){k.push(new h())}var l=new d({array:k});return l.getEncodedHex()};if(c!=undefined){this.setByParam(c)}};extendClass(KJUR.asn1.tsp.TimeStampReq,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.TimeStampResp=function(g){var e=KJUR,d=e.asn1,c=d.DERSequence,f=d.ASN1Object,a=d.tsp,b=a.PKIStatusInfo;a.TimeStampResp.superclass.constructor.call(this);this.params=null;this.getEncodedHex=function(){var j=this.params;var h=[new b(j.statusinfo)];if(j.econtent!=undefined){h.push((new a.TimeStampToken(j)).getContentInfo())}if(j.tst!=undefined&&j.tst instanceof d.ASN1Object){h.push(j.tst)}var i=new c({array:h});return i.getEncodedHex()};if(g!=undefined){this.setByParam(g)}};extendClass(KJUR.asn1.tsp.TimeStampResp,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.PKIStatusInfo=function(d){var h=Error,a=KJUR,g=a.asn1,e=g.DERSequence,i=g.tsp,f=i.PKIStatus,c=i.PKIFreeText,b=i.PKIFailureInfo;i.PKIStatusInfo.superclass.constructor.call(this);this.params=null;this.getEncodedHex=function(){var l=this.params;var j=[];if(typeof l=="string"){j.push(new f(l))}else{if(l.status==undefined){throw new h("property 'status' unspecified")}j.push(new f(l.status));if(l.statusstr!=undefined){j.push(new c(l.statusstr))}if(l.failinfo!=undefined){j.push(new b(l.failinfo))}}var k=new e({array:j});return k.getEncodedHex()};if(d!=undefined){this.setByParam(d)}};extendClass(KJUR.asn1.tsp.PKIStatusInfo,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.PKIStatus=function(g){var e=Error,d=KJUR,c=d.asn1,f=c.DERInteger,b=c.tsp;b.PKIStatus.superclass.constructor.call(this);var a={granted:0,grantedWithMods:1,rejection:2,waiting:3,revocationWarning:4,revocationNotification:5};this.params=null;this.getEncodedHex=function(){var k=this.params;var h,j;if(typeof k=="string"){try{j=a[k]}catch(i){throw new e("undefined name: "+k)}}else{if(typeof k=="number"){j=k}else{throw new e("unsupported params")}}return(new f({"int":j})).getEncodedHex()};if(g!=undefined){this.setByParam(g)}};extendClass(KJUR.asn1.tsp.PKIStatus,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.PKIFreeText=function(g){var f=Error,e=KJUR,d=e.asn1,b=d.DERSequence,c=d.DERUTF8String,a=d.tsp;a.PKIFreeText.superclass.constructor.call(this);this.params=null;this.getEncodedHex=function(){var l=this.params;if(!l instanceof Array){throw new f("wrong params: not array")}var h=[];for(var k=0;k<l.length;k++){h.push(new c({str:l[k]}))}var j=new b({array:h});return j.getEncodedHex()};if(g!=undefined){this.setByParam(g)}};extendClass(KJUR.asn1.tsp.PKIFreeText,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.PKIFailureInfo=function(h){var f=Error,e=KJUR,d=e.asn1,g=d.DERBitString,b=d.tsp,c=b.PKIFailureInfo;var a={badAlg:0,badRequest:2,badDataFormat:5,timeNotAvailable:14,unacceptedPolicy:15,unacceptedExtension:16,addInfoNotAvailable:17,systemFailure:25};c.superclass.constructor.call(this);this.params=null;this.getEncodedHex=function(){var k=this.params;var j;if(typeof k=="string"){try{j=a[k]}catch(i){throw new f("undefined name: "+k)}}else{if(typeof k=="number"){j=k}else{throw new f("wrong params")}}return(new g({bin:j.toString(2)})).getEncodedHex()};if(h!=undefined){this.setByParam(h)}};extendClass(KJUR.asn1.tsp.PKIFailureInfo,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.AbstractTSAAdapter=function(a){this.getTSTHex=function(c,b){throw"not implemented yet"}};KJUR.asn1.tsp.SimpleTSAAdapter=function(e){var d=KJUR,c=d.asn1,a=c.tsp,b=d.crypto.Util.hashHex;a.SimpleTSAAdapter.superclass.constructor.call(this);this.params=null;this.serial=0;this.getTSTHex=function(g,f){var i=b(g,f);this.params.econtent.content.messageImprint={alg:f,hash:i};this.params.econtent.content.serial={"int":this.serial++};var h=Math.floor(Math.random()*1000000000);this.params.econtent.content.nonce={"int":h};var j=new a.TimeStampToken(this.params);return j.getContentInfoEncodedHex()};if(e!==undefined){this.params=e}};extendClass(KJUR.asn1.tsp.SimpleTSAAdapter,KJUR.asn1.tsp.AbstractTSAAdapter);KJUR.asn1.tsp.FixedTSAAdapter=function(e){var d=KJUR,c=d.asn1,a=c.tsp,b=d.crypto.Util.hashHex;a.FixedTSAAdapter.superclass.constructor.call(this);this.params=null;this.getTSTHex=function(g,f){var h=b(g,f);this.params.econtent.content.messageImprint={alg:f,hash:h};var i=new a.TimeStampToken(this.params);return i.getContentInfoEncodedHex()};if(e!==undefined){this.params=e}};extendClass(KJUR.asn1.tsp.FixedTSAAdapter,KJUR.asn1.tsp.AbstractTSAAdapter);KJUR.asn1.tsp.TSPUtil=new function(){};KJUR.asn1.tsp.TSPUtil.newTimeStampToken=function(a){return new KJUR.asn1.tsp.TimeStampToken(a)};KJUR.asn1.tsp.TSPUtil.parseTimeStampReq=function(m){var l=ASN1HEX;var h=l.getChildIdx;var f=l.getV;var b=l.getTLV;var j={};j.certreq=false;var a=h(m,0);if(a.length<2){throw"TimeStampReq must have at least 2 items"}var e=b(m,a[1]);j.messageImprint=KJUR.asn1.tsp.TSPUtil.parseMessageImprint(e);for(var d=2;d<a.length;d++){var g=a[d];var k=m.substr(g,2);if(k=="06"){var c=f(m,g);j.policy=l.hextooidstr(c)}if(k=="02"){j.nonce=f(m,g)}if(k=="01"){j.certreq=true}}return j};KJUR.asn1.tsp.TSPUtil.parseMessageImprint=function(c){var m=ASN1HEX;var j=m.getChildIdx;var i=m.getV;var g=m.getIdxbyList;var k={};if(c.substr(0,2)!="30"){throw"head of messageImprint hex shall be '30'"}var a=j(c,0);var l=g(c,0,[0,0]);var e=i(c,l);var d=m.hextooidstr(e);var h=KJUR.asn1.x509.OID.oid2name(d);if(h==""){throw"hashAlg name undefined: "+d}var b=h;var f=g(c,0,[1]);k.alg=b;k.hash=i(c,f);return k};KJUR.asn1.tsp.TSPParser=function(){var e=Error,a=X509,f=new a(),k=ASN1HEX,g=k.getV,b=k.getTLV,d=k.getIdxbyList,c=k.getTLVbyListEx,i=k.getChildIdx;var j=["granted","grantedWithMods","rejection","waiting","revocationWarning","revocationNotification"];var h={0:"badAlg",2:"badRequest",5:"badDataFormat",14:"timeNotAvailable",15:"unacceptedPolicy",16:"unacceptedExtension",17:"addInfoNotAvailable",25:"systemFailure"};this.getResponse=function(n){var l=i(n,0);if(l.length==1){return this.getPKIStatusInfo(b(n,l[0]))}else{if(l.length>1){var o=this.getPKIStatusInfo(b(n,l[0]));var m=b(n,l[1]);var p=this.getToken(m);p.statusinfo=o;return p}}};this.getToken=function(m){var l=new KJUR.asn1.cms.CMSParser;var n=l.getCMSSignedData(m);this.setTSTInfo(n);return n};this.setTSTInfo=function(l){var o=l.econtent;if(o.type=="tstinfo"){var n=o.content.hex;var m=this.getTSTInfo(n);o.content=m}};this.getTSTInfo=function(r){var x={};var s=i(r,0);var p=g(r,s[1]);x.policy=hextooid(p);var o=b(r,s[2]);x.messageImprint=this.getMessageImprint(o);var u=g(r,s[3]);x.serial={hex:u};var y=g(r,s[4]);x.genTime={str:hextoutf8(y)};var q=0;if(s.length>5&&r.substr(s[5],2)=="30"){var v=b(r,s[5]);x.accuracy=this.getAccuracy(v);q++}if(s.length>5+q&&r.substr(s[5+q],2)=="01"){var z=g(r,s[5+q]);if(z=="ff"){x.ordering=true}q++}if(s.length>5+q&&r.substr(s[5+q],2)=="02"){var n=g(r,s[5+q]);x.nonce={hex:n};q++}if(s.length>5+q&&r.substr(s[5+q],2)=="a0"){var m=b(r,s[5+q]);m="30"+m.substr(2);pGeneralNames=f.getGeneralNames(m);var t=pGeneralNames[0].dn;x.tsa=t;q++}if(s.length>5+q&&r.substr(s[5+q],2)=="a1"){var l=b(r,s[5+q]);l="30"+l.substr(2);var w=f.getExtParamArray(l);x.ext=w;q++}return x};this.getAccuracy=function(q){var r={};var o=i(q,0);for(var p=0;p<o.length;p++){var m=q.substr(o[p],2);var l=g(q,o[p]);var n=parseInt(l,16);if(m=="02"){r.seconds=n}else{if(m=="80"){r.millis=n}else{if(m=="81"){r.micros=n}}}}return r};this.getMessageImprint=function(n){if(n.substr(0,2)!="30"){throw new Error("head of messageImprint hex shall be x30")}var s={};var l=i(n,0);var t=d(n,0,[0,0]);var o=g(n,t);var p=k.hextooidstr(o);var r=KJUR.asn1.x509.OID.oid2name(p);if(r==""){throw new Error("hashAlg name undefined: "+p)}var m=r;var q=d(n,0,[1]);s.alg=m;s.hash=g(n,q);return s};this.getPKIStatusInfo=function(o){var t={};var r=i(o,0);var n=0;try{var l=g(o,r[0]);var p=parseInt(l,16);t.status=j[p]}catch(s){}if(r.length>1&&o.substr(r[1],2)=="30"){var m=b(o,r[1]);t.statusstr=this.getPKIFreeText(m);n++}if(r.length>n&&o.substr(r[1+n],2)=="03"){var q=b(o,r[1+n]);t.failinfo=this.getPKIFailureInfo(q)}return t};this.getPKIFreeText=function(n){var o=[];var l=i(n,0);for(var m=0;m<l.length;m++){o.push(k.getString(n,l[m]))}return o};this.getPKIFailureInfo=function(l){var m=k.getInt(l,0);if(h[m]!=undefined){return h[m]}else{return m}}};
    if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.asn1=="undefined"||!KJUR.asn1){KJUR.asn1={}}if(typeof KJUR.asn1.cades=="undefined"||!KJUR.asn1.cades){KJUR.asn1.cades={}}KJUR.asn1.cades.SignaturePolicyIdentifier=function(e){var c=KJUR,b=c.asn1,a=b.cades,d=a.SignaturePolicyId;a.SignaturePolicyIdentifier.superclass.constructor.call(this);this.typeOid="1.2.840.113549.1.9.16.2.15";this.params=null;this.getValueArray=function(){return[new d(this.params)]};this.setByParam=function(f){this.params=f};if(e!=undefined){this.setByParam(e)}};extendClass(KJUR.asn1.cades.SignaturePolicyIdentifier,KJUR.asn1.cms.Attribute);KJUR.asn1.cades.SignaturePolicyId=function(e){var a=KJUR,g=a.asn1,f=g.DERSequence,i=g.DERObjectIdentifier,d=g.x509,j=d.AlgorithmIdentifier,c=g.cades,h=c.SignaturePolicyId,b=c.OtherHashAlgAndValue;h.superclass.constructor.call(this);this.params=null;this.getEncodedHex=function(){var m=this.params;var k=[];k.push(new i(m.oid));k.push(new b(m));var l=new f({array:k});return l.getEncodedHex()};this.setByParam=function(k){this.params=k};if(e!=undefined){this.setByParam(e)}};extendClass(KJUR.asn1.cades.SignaturePolicyId,KJUR.asn1.ASN1Object);KJUR.asn1.cades.OtherHashAlgAndValue=function(e){var h=Error,a=KJUR,g=a.asn1,f=g.DERSequence,i=g.DEROctetString,d=g.x509,j=d.AlgorithmIdentifier,c=g.cades,b=c.OtherHashAlgAndValue;b.superclass.constructor.call(this);this.params=null;this.getEncodedHex=function(){var o=this.params;if(o.alg==undefined){throw new h("property 'alg' not specified")}if(o.hash==undefined&&o.cert==undefined){throw new h("property 'hash' nor 'cert' not specified")}var m=null;if(o.hash!=undefined){m=o.hash}else{if(o.cert!=undefined){if(typeof o.cert!="string"){throw new h("cert not string")}var n=o.cert;if(o.cert.indexOf("-----BEGIN")!=-1){n=pemtohex(o.cert)}m=KJUR.crypto.Util.hashHex(n,o.alg)}}var k=[];k.push(new j({name:o.alg}));k.push(new i({hex:m}));var l=new f({array:k});return l.getEncodedHex()};if(e!=undefined){this.setByParam(e)}};extendClass(KJUR.asn1.cades.OtherHashAlgAndValue,KJUR.asn1.ASN1Object);KJUR.asn1.cades.OtherHashValue=function(g){KJUR.asn1.cades.OtherHashValue.superclass.constructor.call(this);var d=Error,c=KJUR,f=c.lang.String.isHex,b=c.asn1,e=b.DEROctetString,a=c.crypto.Util.hashHex;this.params=null;this.getEncodedHex=function(){var j=this.params;if(j.hash==undefined&&j.cert==undefined){throw new d("hash or cert not specified")}var h=null;if(j.hash!=undefined){h=j.hash}else{if(j.cert!=undefined){if(typeof j.cert!="string"){throw new d("cert not string")}var i=j.cert;if(j.cert.indexOf("-----BEGIN")!=-1){i=pemtohex(j.cert)}h=KJUR.crypto.Util.hashHex(i,"sha1")}}return(new e({hex:h})).getEncodedHex()};if(g!=undefined){this.setByParam(g)}};extendClass(KJUR.asn1.cades.OtherHashValue,KJUR.asn1.ASN1Object);KJUR.asn1.cades.SignatureTimeStamp=function(h){var d=Error,c=KJUR,f=c.lang.String.isHex,b=c.asn1,e=b.ASN1Object,g=b.x509,a=b.cades;a.SignatureTimeStamp.superclass.constructor.call(this);this.typeOid="1.2.840.113549.1.9.16.2.14";this.params=null;this.getValueArray=function(){var l=this.params;if(l.tst!=undefined){if(f(l.tst)){var j=new e();j.hTLV=l.tst;return[j]}else{if(l.tst instanceof e){return[l.tst]}else{throw new d("params.tst has wrong value")}}}else{if(l.res!=undefined){var k=l.res;if(k instanceof e){k=k.getEncodedHex()}if(typeof k!="string"||(!f(k))){throw new d("params.res has wrong value")}var i=ASN1HEX.getTLVbyList(k,0,[1]);var j=new e();j.hTLV=l.tst;return[j]}}};if(h!=null){this.setByParam(h)}};extendClass(KJUR.asn1.cades.SignatureTimeStamp,KJUR.asn1.cms.Attribute);KJUR.asn1.cades.CompleteCertificateRefs=function(h){var f=Error,e=KJUR,d=e.asn1,b=d.DERSequence,c=d.cades,a=c.OtherCertID,g=e.lang.String.isHex;c.CompleteCertificateRefs.superclass.constructor.call(this);this.typeOid="1.2.840.113549.1.9.16.2.21";this.params=null;this.getValueArray=function(){var o=this.params;var k=[];for(var m=0;m<o.array.length;m++){var n=o.array[m];if(typeof n=="string"){if(n.indexOf("-----BEGIN")!=-1){n={cert:n}}else{if(g(n)){n={hash:n}}else{throw new f("unsupported value: "+n)}}}if(o.alg!=undefined&&n.alg==undefined){n.alg=o.alg}if(o.hasis!=undefined&&n.hasis==undefined){n.hasis=o.hasis}var j=new a(n);k.push(j)}var l=new b({array:k});return[l]};if(h!=undefined){this.setByParam(h)}};extendClass(KJUR.asn1.cades.CompleteCertificateRefs,KJUR.asn1.cms.Attribute);KJUR.asn1.cades.OtherCertID=function(e){var a=KJUR,h=a.asn1,f=h.DERSequence,i=h.cms,g=i.IssuerSerial,c=h.cades,d=c.OtherHashValue,b=c.OtherHashAlgAndValue;c.OtherCertID.superclass.constructor.call(this);this.params=e;this.getEncodedHex=function(){var n=this.params;if(typeof n=="string"){if(n.indexOf("-----BEGIN")!=-1){n={cert:n}}else{if(_isHex(n)){n={hash:n}}}}var j=[];var m=null;if(n.alg!=undefined){m=new b(n)}else{m=new d(n)}j.push(m);if((n.cert!=undefined&&n.hasis==true)||(n.issuer!=undefined&&n.serial!=undefined)){var l=new g(n);j.push(l)}var k=new f({array:j});return k.getEncodedHex()};if(e!=undefined){this.setByParam(e)}};extendClass(KJUR.asn1.cades.OtherCertID,KJUR.asn1.ASN1Object);KJUR.asn1.cades.OtherHash=function(g){var i=Error,a=KJUR,h=a.asn1,j=h.cms,c=h.cades,b=c.OtherHashAlgAndValue,e=c.OtherHashValue,d=a.crypto.Util.hashHex,f=a.lang.String.isHex;c.OtherHash.superclass.constructor.call(this);this.params=null;this.getEncodedHex=function(){var l=this.params;if(typeof l=="string"){if(l.indexOf("-----BEGIN")!=-1){l={cert:l}}else{if(f(l)){l={hash:l}}}}var k=null;if(l.alg!=undefined){k=new b(l)}else{k=new e(l)}return k.getEncodedHex()};if(g!=undefined){this.setByParam(g)}};extendClass(KJUR.asn1.cades.OtherHash,KJUR.asn1.ASN1Object);KJUR.asn1.cades.CAdESUtil=new function(){};KJUR.asn1.cades.CAdESUtil.parseSignedDataForAddingUnsigned=function(a){var c=new KJUR.asn1.cms.CMSParser();var b=c.getCMSSignedData(a);return b};KJUR.asn1.cades.CAdESUtil.parseSignerInfoForAddingUnsigned=function(g,q,c){var p=ASN1HEX,s=p.getChildIdx,a=p.getTLV,l=p.getV,v=KJUR,h=v.asn1,n=h.ASN1Object,j=h.cms,k=j.AttributeList,w=j.SignerInfo;var o={};var t=s(g,q);if(t.length!=6){throw"not supported items for SignerInfo (!=6)"}var d=t.shift();o.version=a(g,d);var e=t.shift();o.si=a(g,e);var m=t.shift();o.digalg=a(g,m);var f=t.shift();o.sattrs=a(g,f);var i=t.shift();o.sigalg=a(g,i);var b=t.shift();o.sig=a(g,b);o.sigval=l(g,b);var u=null;o.obj=new w();u=new n();u.hTLV=o.version;o.obj.dCMSVersion=u;u=new n();u.hTLV=o.si;o.obj.dSignerIdentifier=u;u=new n();u.hTLV=o.digalg;o.obj.dDigestAlgorithm=u;u=new n();u.hTLV=o.sattrs;o.obj.dSignedAttrs=u;u=new n();u.hTLV=o.sigalg;o.obj.dSigAlg=u;u=new n();u.hTLV=o.sig;o.obj.dSig=u;o.obj.dUnsignedAttrs=new k();return o};
    if(typeof KJUR.asn1.csr=="undefined"||!KJUR.asn1.csr){KJUR.asn1.csr={}}KJUR.asn1.csr.CertificationRequest=function(g){var d=KJUR,c=d.asn1,e=c.DERBitString,b=c.DERSequence,a=c.csr,f=c.x509,h=a.CertificationRequestInfo;a.CertificationRequest.superclass.constructor.call(this);this.setByParam=function(i){this.params=i};this.sign=function(){var j=(new h(this.params)).getEncodedHex();var k=new KJUR.crypto.Signature({alg:this.params.sigalg});k.init(this.params.sbjprvkey);k.updateHex(j);var i=k.sign();this.params.sighex=i};this.getPEM=function(){return hextopem(this.getEncodedHex(),"CERTIFICATE REQUEST")};this.getEncodedHex=function(){var l=this.params;var j=new KJUR.asn1.csr.CertificationRequestInfo(this.params);var m=new KJUR.asn1.x509.AlgorithmIdentifier({name:l.sigalg});if(l.sighex==undefined&&l.sbjprvkey!=undefined){this.sign()}if(l.sighex==undefined){throw new Error("sighex or sbjprvkey parameter not defined")}var k=new e({hex:"00"+l.sighex});var i=new b({array:[j,m,k]});return i.getEncodedHex()};if(g!==undefined){this.setByParam(g)}};extendClass(KJUR.asn1.csr.CertificationRequest,KJUR.asn1.ASN1Object);KJUR.asn1.csr.CertificationRequestInfo=function(f){var b=KJUR,j=b.asn1,c=j.DERBitString,g=j.DERSequence,i=j.DERInteger,n=j.DERUTF8String,d=j.DERTaggedObject,h=j.ASN1Util.newObject,l=j.csr,e=j.x509,a=e.X500Name,k=e.Extensions,m=e.SubjectPublicKeyInfo;l.CertificationRequestInfo.superclass.constructor.call(this);this.params=null;this.setByParam=function(o){if(o!=undefined){this.params=o}};this.getEncodedHex=function(){var s=this.params;var p=[];p.push(new i({"int":0}));p.push(new a(s.subject));p.push(new m(KEYUTIL.getKey(s.sbjpubkey)));if(s.extreq!=undefined){var o=new k(s.extreq);var r=h({tag:{tag:"a0",explict:true,obj:{seq:[{oid:"1.2.840.113549.1.9.14"},{set:[o]}]}}});p.push(r)}else{p.push(new d({tag:"a0",explicit:false,obj:new n({str:""})}))}var q=new g({array:p});return q.getEncodedHex()};if(f!=undefined){this.setByParam(f)}};extendClass(KJUR.asn1.csr.CertificationRequestInfo,KJUR.asn1.ASN1Object);KJUR.asn1.csr.CSRUtil=new function(){};KJUR.asn1.csr.CSRUtil.newCSRPEM=function(e){var b=KEYUTIL,a=KJUR.asn1.csr;var c=new a.CertificationRequest(e);var d=c.getPEM();return d};KJUR.asn1.csr.CSRUtil.getParam=function(c){var m=ASN1HEX,j=m.getV;_getIdxbyList=m.getIdxbyList;_getTLVbyList=m.getTLVbyList,_getTLVbyListEx=m.getTLVbyListEx,_getVbyListEx=m.getVbyListEx;var b=function(p){var o=_getIdxbyList(p,0,[0,3,0,0],"06");if(j(p,o)!="2a864886f70d01090e"){return null}return _getTLVbyList(p,0,[0,3,0,1,0],"30")};var n={};if(c.indexOf("-----BEGIN CERTIFICATE REQUEST")==-1){throw new Error("argument is not PEM file")}var e=pemtohex(c,"CERTIFICATE REQUEST");try{var g=_getTLVbyListEx(e,0,[0,1]);if(g=="3000"){n.subject={}}else{var k=new X509();n.subject=k.getX500Name(g)}}catch(h){}var d=_getTLVbyListEx(e,0,[0,2]);var f=KEYUTIL.getKey(d,null,"pkcs8pub");n.sbjpubkey=KEYUTIL.getPEM(f,"PKCS8PUB");var i=b(e);var k=new X509();if(i!=null){n.extreq=k.getExtParamArray(i)}try{var a=_getTLVbyListEx(e,0,[1],"30");var k=new X509();n.sigalg=k.getAlgorithmIdentifierName(a)}catch(h){}try{var l=_getVbyListEx(e,0,[2]);n.sighex=l}catch(h){}return n};
    if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.asn1=="undefined"||!KJUR.asn1){KJUR.asn1={}}if(typeof KJUR.asn1.ocsp=="undefined"||!KJUR.asn1.ocsp){KJUR.asn1.ocsp={}}KJUR.asn1.ocsp.DEFAULT_HASH="sha1";KJUR.asn1.ocsp.OCSPResponse=function(e){KJUR.asn1.ocsp.OCSPResponse.superclass.constructor.call(this);var a=KJUR.asn1.DEREnumerated,b=KJUR.asn1.ASN1Util.newObject,c=KJUR.asn1.ocsp.ResponseBytes;var d=["successful","malformedRequest","internalError","tryLater","_not_used_","sigRequired","unauthorized"];this.params=null;this._getStatusCode=function(){var f=this.params.resstatus;if(typeof f=="number"){return f}if(typeof f!="string"){return -1}return d.indexOf(f)};this.setByParam=function(f){this.params=f};this.getEncodedHex=function(){var h=this.params;var g=this._getStatusCode();if(g==-1){throw new Error("responseStatus not supported: "+h.resstatus)}if(g!=0){return b({seq:[{"enum":{"int":g}}]}).getEncodedHex()}var f=new c(h);return b({seq:[{"enum":{"int":0}},{tag:{tag:"a0",explicit:true,obj:f}}]}).getEncodedHex()};if(e!==undefined){this.setByParam(e)}};extendClass(KJUR.asn1.ocsp.OCSPResponse,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.ResponseBytes=function(e){KJUR.asn1.ocsp.ResponseBytes.superclass.constructor.call(this);var b=KJUR.asn1,a=b.DERSequence,f=b.DERObjectIdentifier,c=b.DEROctetString,d=b.ocsp.BasicOCSPResponse;this.params=null;this.setByParam=function(g){this.params=g};this.getEncodedHex=function(){var j=this.params;if(j.restype!="ocspBasic"){throw new Error("not supported responseType: "+j.restype)}var i=new d(j);var g=[];g.push(new f({name:"ocspBasic"}));g.push(new c({hex:i.getEncodedHex()}));var h=new a({array:g});return h.getEncodedHex()};if(e!==undefined){this.setByParam(e)}};extendClass(KJUR.asn1.ocsp.ResponseBytes,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.BasicOCSPResponse=function(d){KJUR.asn1.ocsp.BasicOCSPResponse.superclass.constructor.call(this);var i=Error,g=KJUR.asn1,j=g.ASN1Object,e=g.DERSequence,f=g.DERGeneralizedTime,c=g.DERTaggedObject,b=g.DERBitString,h=g.x509.Extensions,k=g.x509.AlgorithmIdentifier,l=g.ocsp,a=l.ResponderID;_SingleResponseList=l.SingleResponseList,_ResponseData=l.ResponseData;this.params=null;this.setByParam=function(m){this.params=m};this.sign=function(){var o=this.params;var m=o.tbsresp.getEncodedHex();var n=new KJUR.crypto.Signature({alg:o.sigalg});n.init(o.reskey);n.updateHex(m);o.sighex=n.sign()};this.getEncodedHex=function(){var t=this.params;if(t.tbsresp==undefined){t.tbsresp=new _ResponseData(t)}if(t.sighex==undefined&&t.reskey!=undefined){this.sign()}var n=[];n.push(t.tbsresp);n.push(new k({name:t.sigalg}));n.push(new b({hex:"00"+t.sighex}));if(t.certs!=undefined&&t.certs.length!=undefined){var m=[];for(var q=0;q<t.certs.length;q++){var s=t.certs[q];var r=null;if(ASN1HEX.isASN1HEX(s)){r=s}else{if(s.match(/-----BEGIN/)){r=pemtohex(s)}else{throw new i("certs["+q+"] not hex or PEM")}}m.push(new j({tlv:r}))}var p=new e({array:m});n.push(new c({tag:"a0",explicit:true,obj:p}))}var o=new e({array:n});return o.getEncodedHex()};if(d!==undefined){this.setByParam(d)}};extendClass(KJUR.asn1.ocsp.BasicOCSPResponse,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.ResponseData=function(c){KJUR.asn1.ocsp.ResponseData.superclass.constructor.call(this);var h=Error,f=KJUR.asn1,d=f.DERSequence,e=f.DERGeneralizedTime,b=f.DERTaggedObject,g=f.x509.Extensions,i=f.ocsp,a=i.ResponderID;_SingleResponseList=i.SingleResponseList;this.params=null;this.getEncodedHex=function(){var m=this.params;if(m.respid!=undefined){new h("respid not specified")}if(m.prodat!=undefined){new h("prodat not specified")}if(m.array!=undefined){new h("array not specified")}var j=[];j.push(new a(m.respid));j.push(new e(m.prodat));j.push(new _SingleResponseList(m.array));if(m.ext!=undefined){var l=new g(m.ext);j.push(new b({tag:"a1",explicit:true,obj:l}))}var k=new d({array:j});return k.getEncodedHex()};this.setByParam=function(j){this.params=j};if(c!==undefined){this.setByParam(c)}};extendClass(KJUR.asn1.ocsp.ResponseData,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.ResponderID=function(d){KJUR.asn1.ocsp.ResponderID.superclass.constructor.call(this);var b=KJUR.asn1,a=b.ASN1Util.newObject,c=b.x509.X500Name;this.params=null;this.getEncodedHex=function(){var f=this.params;if(f.key!=undefined){var e=a({tag:{tag:"a2",explicit:true,obj:{octstr:{hex:f.key}}}});return e.getEncodedHex()}else{if(f.name!=undefined){var e=a({tag:{tag:"a1",explicit:true,obj:new c(f.name)}});return e.getEncodedHex()}}throw new Error("key or name not specified")};this.setByParam=function(e){this.params=e};if(d!==undefined){this.setByParam(d)}};extendClass(KJUR.asn1.ocsp.ResponderID,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.SingleResponseList=function(d){KJUR.asn1.ocsp.SingleResponseList.superclass.constructor.call(this);var c=KJUR.asn1,b=c.DERSequence,a=c.ocsp.SingleResponse;this.params=null;this.getEncodedHex=function(){var h=this.params;if(typeof h!="object"||h.length==undefined){throw new Error("params not specified properly")}var e=[];for(var g=0;g<h.length;g++){e.push(new a(h[g]))}var f=new b({array:e});return f.getEncodedHex()};this.setByParam=function(e){this.params=e};if(d!==undefined){this.setByParam(d)}};extendClass(KJUR.asn1.ocsp.SingleResponseList,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.SingleResponse=function(e){var k=Error,a=KJUR,i=a.asn1,f=i.DERSequence,g=i.DERGeneralizedTime,b=i.DERTaggedObject,l=i.ocsp,h=l.CertID,c=l.CertStatus,d=i.x509,j=d.Extensions;l.SingleResponse.superclass.constructor.call(this);this.params=null;this.getEncodedHex=function(){var q=this.params;var n=[];if(q.certid==undefined){throw new k("certid unspecified")}if(q.status==undefined){throw new k("status unspecified")}if(q.thisupdate==undefined){throw new k("thisupdate unspecified")}n.push(new h(q.certid));n.push(new c(q.status));n.push(new g(q.thisupdate));if(q.nextupdate!=undefined){var m=new g(q.nextupdate);n.push(new b({tag:"a0",explicit:true,obj:m}))}if(q.ext!=undefined){var p=new j(q.ext);n.push(new b({tag:"a1",explicit:true,obj:p}))}var o=new f({array:n});return o.getEncodedHex()};this.setByParam=function(m){this.params=m};if(e!==undefined){this.setByParam(e)}};extendClass(KJUR.asn1.ocsp.SingleResponse,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.CertID=function(g){var d=KJUR,k=d.asn1,m=k.DEROctetString,j=k.DERInteger,h=k.DERSequence,f=k.x509,n=f.AlgorithmIdentifier,o=k.ocsp,l=o.DEFAULT_HASH,i=d.crypto,e=i.Util.hashHex,c=X509,q=ASN1HEX;o.CertID.superclass.constructor.call(this);this.dHashAlg=null;this.dIssuerNameHash=null;this.dIssuerKeyHash=null;this.dSerialNumber=null;this.setByValue=function(t,s,p,r){if(r===undefined){r=l}this.dHashAlg=new n({name:r});this.dIssuerNameHash=new m({hex:t});this.dIssuerKeyHash=new m({hex:s});this.dSerialNumber=new j({hex:p})};this.setByCert=function(x,t,v){if(v===undefined){v=l}var p=new c();p.readCertPEM(t);var y=new c();y.readCertPEM(x);var z=y.getPublicKeyHex();var w=q.getVbyList(z,0,[1],"03",true);var r=p.getSerialNumberHex();var s=e(y.getSubjectHex(),v);var u=e(w,v);this.setByValue(s,u,r,v);this.hoge=p.getSerialNumberHex()};this.getEncodedHex=function(){if(this.dHashAlg===null&&this.dIssuerNameHash===null&&this.dIssuerKeyHash===null&&this.dSerialNumber===null){throw"not yet set values"}var p=[this.dHashAlg,this.dIssuerNameHash,this.dIssuerKeyHash,this.dSerialNumber];var r=new h({array:p});this.hTLV=r.getEncodedHex();return this.hTLV};if(g!==undefined){var b=g;if(b.issuerCert!==undefined&&b.subjectCert!==undefined){var a=l;if(b.alg===undefined){a=undefined}this.setByCert(b.issuerCert,b.subjectCert,a)}else{if(b.issname!==undefined&&b.isskey!==undefined&&b.sbjsn!==undefined){var a=l;if(b.alg===undefined){a=undefined}this.setByValue(b.issname,b.isskey,b.sbjsn,a)}else{throw new Error("invalid constructor arguments")}}}};extendClass(KJUR.asn1.ocsp.CertID,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.CertStatus=function(a){KJUR.asn1.ocsp.CertStatus.superclass.constructor.call(this);this.params=null;this.getEncodedHex=function(){var d=this.params;if(d.status=="good"){return"8000"}if(d.status=="unknown"){return"8200"}if(d.status=="revoked"){var c=[{gentime:{str:d.time}}];if(d.reason!=undefined){c.push({tag:{tag:"a0",explicit:true,obj:{"enum":{"int":d.reason}}}})}var b={tag:"a1",explicit:false,obj:{seq:c}};return KJUR.asn1.ASN1Util.newObject({tag:b}).getEncodedHex()}throw new Error("bad status")};this.setByParam=function(b){this.params=b};if(a!==undefined){this.setByParam(a)}};extendClass(KJUR.asn1.ocsp.CertStatus,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.Request=function(f){var c=KJUR,b=c.asn1,a=b.DERSequence,d=b.ocsp;d.Request.superclass.constructor.call(this);this.dReqCert=null;this.dExt=null;this.getEncodedHex=function(){var g=[];if(this.dReqCert===null){throw"reqCert not set"}g.push(this.dReqCert);var h=new a({array:g});this.hTLV=h.getEncodedHex();return this.hTLV};if(typeof f!=="undefined"){var e=new d.CertID(f);this.dReqCert=e}};extendClass(KJUR.asn1.ocsp.Request,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.TBSRequest=function(e){var c=KJUR,b=c.asn1,a=b.DERSequence,d=b.ocsp;d.TBSRequest.superclass.constructor.call(this);this.version=0;this.dRequestorName=null;this.dRequestList=[];this.dRequestExt=null;this.setRequestListByParam=function(h){var f=[];for(var g=0;g<h.length;g++){var j=new d.Request(h[0]);f.push(j)}this.dRequestList=f};this.getEncodedHex=function(){var f=[];if(this.version!==0){throw"not supported version: "+this.version}if(this.dRequestorName!==null){throw"requestorName not supported"}var h=new a({array:this.dRequestList});f.push(h);if(this.dRequestExt!==null){throw"requestExtensions not supported"}var g=new a({array:f});this.hTLV=g.getEncodedHex();return this.hTLV};if(e!==undefined){if(e.reqList!==undefined){this.setRequestListByParam(e.reqList)}}};extendClass(KJUR.asn1.ocsp.TBSRequest,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.OCSPRequest=function(f){var c=KJUR,b=c.asn1,a=b.DERSequence,d=b.ocsp;d.OCSPRequest.superclass.constructor.call(this);this.dTbsRequest=null;this.dOptionalSignature=null;this.getEncodedHex=function(){var g=[];if(this.dTbsRequest!==null){g.push(this.dTbsRequest)}else{throw"tbsRequest not set"}if(this.dOptionalSignature!==null){throw"optionalSignature not supported"}var h=new a({array:g});this.hTLV=h.getEncodedHex();return this.hTLV};if(f!==undefined){if(f.reqList!==undefined){var e=new d.TBSRequest(f);this.dTbsRequest=e}}};extendClass(KJUR.asn1.ocsp.OCSPRequest,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.OCSPUtil={};KJUR.asn1.ocsp.OCSPUtil.getRequestHex=function(a,b,h){var d=KJUR,c=d.asn1,e=c.ocsp;if(h===undefined){h=e.DEFAULT_HASH}var g={alg:h,issuerCert:a,subjectCert:b};var f=new e.OCSPRequest({reqList:[g]});return f.getEncodedHex()};KJUR.asn1.ocsp.OCSPUtil.getOCSPResponseInfo=function(b){var m=ASN1HEX,c=m.getVbyList,k=m.getVbyListEx,e=m.getIdxbyList,d=m.getIdxbyListEx,g=m.getV;var n={};try{var j=k(b,0,[0],"0a");n.responseStatus=parseInt(j,16)}catch(f){}if(n.responseStatus!==0){return n}try{var i=e(b,0,[1,0,1,0,0,2,0,1]);if(b.substr(i,2)==="80"){n.certStatus="good"}else{if(b.substr(i,2)==="a1"){n.certStatus="revoked";n.revocationTime=hextoutf8(c(b,i,[0]))}else{if(b.substr(i,2)==="82"){n.certStatus="unknown"}}}}catch(f){}try{var a=e(b,0,[1,0,1,0,0,2,0,2]);n.thisUpdate=hextoutf8(g(b,a))}catch(f){}try{var l=e(b,0,[1,0,1,0,0,2,0,3]);if(b.substr(l,2)==="a0"){n.nextUpdate=hextoutf8(c(b,l,[0]))}}catch(f){}return n};KJUR.asn1.ocsp.OCSPParser=function(){var g=Error,a=X509,h=new a(),l=ASN1HEX,i=l.getV,b=l.getTLV,f=l.getIdxbyList,e=l.getVbyList,c=l.getTLVbyList,k=l.getVbyListEx,d=l.getTLVbyListEx,j=l.getChildIdx;this.getOCSPRequest=function(o){var n=j(o,0);if(n.length!=1&&n.length!=2){throw new g("wrong number elements: "+n.length)}var m=this.getTBSRequest(b(o,n[0]));return m};this.getTBSRequest=function(o){var m={};var n=d(o,0,[0],"30");m.array=this.getRequestList(n);var p=d(o,0,["[2]",0],"30");if(p!=null){m.ext=h.getExtParamArray(p)}return m};this.getRequestList=function(p){var m=[];var n=j(p,0);for(var o=0;o<n.length;o++){var p=b(p,n[o]);m.push(this.getRequest(p))}return m};this.getRequest=function(n){var m=j(n,0);if(m.length!=1&&m.length!=2){throw new g("wrong number elements: "+m.length)}var p=this.getCertID(b(n,m[0]));if(m.length==2){var o=f(n,0,[1,0]);p.ext=h.getExtParamArray(b(n,o))}return p};this.getCertID=function(p){var o=j(p,0);if(o.length!=4){throw new g("wrong number elements: "+o.length)}var n=new a();var m={};m.alg=n.getAlgorithmIdentifierName(b(p,o[0]));m.issname=i(p,o[1]);m.isskey=i(p,o[2]);m.sbjsn=i(p,o[3]);return m};this.getOCSPResponse=function(r){var o=j(r,0);var m;var q=i(r,o[0]);var p=parseInt(q);if(o.length==1){return{resstatus:p}}var n=c(r,0,[1,0]);m=this.getResponseBytes(n);m.resstatus=p;return m};this.getResponseBytes=function(p){var o=j(p,0);var n;var q=c(p,0,[1,0]);n=this.getBasicOCSPResponse(q);var m=i(p,o[0]);n.restype=KJUR.asn1.x509.OID.oid2name(hextooid(m));return n};this.getBasicOCSPResponse=function(q){var t=j(q,0);var v;v=this.getResponseData(b(q,t[0]));var u=new X509();v.alg=u.getAlgorithmIdentifierName(b(q,t[1]));var n=i(q,t[2]);v.sighex=n.substr(2);var m=k(q,0,["[0]"]);if(m!=null){var r=j(m,0);var o=[];for(var p=0;p<r.length;p++){var s=b(m,r[p]);o.push(s)}v.certs=o}return v};this.getResponseData=function(q){var p=j(q,0);var r=p.length;var o={};var n=0;if(q.substr(p[0],2)=="a0"){n++}o.respid=this.getResponderID(b(q,p[n++]));var t=i(q,p[n++]);o.prodat=hextoutf8(t);o.array=this.getSingleResponseList(b(q,p[n++]));if(q.substr(p[r-1],2)=="a1"){var s=c(q,p[r-1],[0]);var m=new X509();o.ext=m.getExtParamArray(s)}return o};this.getResponderID=function(o){var n={};if(o.substr(0,2)=="a2"){var p=e(o,0,[0]);n.key=p}if(o.substr(0,2)=="a1"){var q=c(o,0,[0]);var m=new X509();n.name=m.getX500Name(q)}return n};this.getSingleResponseList=function(q){var n=j(q,0);var m=[];for(var o=0;o<n.length;o++){var r=this.getSingleResponse(b(q,n[o]));m.push(r)}return m};this.getSingleResponse=function(p){var t=j(p,0);var v={};var r=this.getCertID(b(p,t[0]));v.certid=r;var u=this.getCertStatus(b(p,t[1]));v.status=u;if(p.substr(t[2],2)=="18"){var q=i(p,t[2]);v.thisupdate=hextoutf8(q)}for(var o=3;o<t.length;o++){if(p.substr(t[o],2)=="a0"){var m=e(p,t[o],[0],"18");v.nextupdate=hextoutf8(m)}if(p.substr(t[o],2)=="a1"){var s=new X509();var n=c(p,0,[o,0]);v.ext=s.getExtParamArray(n)}}return v};this.getCertStatus=function(p){var m={};if(p=="8000"){return{status:"good"}}if(p=="8200"){return{status:"unknown"}}if(p.substr(0,2)=="a1"){m.status="revoked";var o=e(p,0,[0]);var n=hextoutf8(o);m.time=n}return m}};
    var KJUR;if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.lang=="undefined"||!KJUR.lang){KJUR.lang={}}KJUR.lang.String=function(){};function Base64x(){}function stoBA(d){var b=new Array();for(var c=0;c<d.length;c++){b[c]=d.charCodeAt(c)}return b}function BAtos(b){var d="";for(var c=0;c<b.length;c++){d=d+String.fromCharCode(b[c])}return d}function BAtohex(b){var e="";for(var d=0;d<b.length;d++){var c=b[d].toString(16);if(c.length==1){c="0"+c}e=e+c}return e}function stohex(a){return BAtohex(stoBA(a))}function stob64(a){return hex2b64(stohex(a))}function stob64u(a){return b64tob64u(hex2b64(stohex(a)))}function b64utos(a){return BAtos(b64toBA(b64utob64(a)))}function b64tob64u(a){a=a.replace(/\=/g,"");a=a.replace(/\+/g,"-");a=a.replace(/\//g,"_");return a}function b64utob64(a){if(a.length%4==2){a=a+"=="}else{if(a.length%4==3){a=a+"="}}a=a.replace(/-/g,"+");a=a.replace(/_/g,"/");return a}function hextob64u(a){if(a.length%2==1){a="0"+a}return b64tob64u(hex2b64(a))}function b64utohex(a){return b64tohex(b64utob64(a))}var utf8tob64u,b64utoutf8;if(typeof Buffer==="function"){utf8tob64u=function(a){return b64tob64u(Buffer.from(a,"utf8").toString("base64"))};b64utoutf8=function(a){return Buffer.from(b64utob64(a),"base64").toString("utf8")}}else{utf8tob64u=function(a){return hextob64u(uricmptohex(encodeURIComponentAll(a)))};b64utoutf8=function(a){return decodeURIComponent(hextouricmp(b64utohex(a)))}}function utf8tob64(a){return hex2b64(uricmptohex(encodeURIComponentAll(a)))}function b64toutf8(a){return decodeURIComponent(hextouricmp(b64tohex(a)))}function utf8tohex(a){return uricmptohex(encodeURIComponentAll(a))}function hextoutf8(a){return decodeURIComponent(hextouricmp(a))}function hextorstr(c){var b="";for(var a=0;a<c.length-1;a+=2){b+=String.fromCharCode(parseInt(c.substr(a,2),16))}return b}function rstrtohex(c){var a="";for(var b=0;b<c.length;b++){a+=("0"+c.charCodeAt(b).toString(16)).slice(-2)}return a}function hextob64(a){return hex2b64(a)}function hextob64nl(b){var a=hextob64(b);var c=a.replace(/(.{64})/g,"$1\r\n");c=c.replace(/\r\n$/,"");return c}function b64nltohex(b){var a=b.replace(/[^0-9A-Za-z\/+=]*/g,"");var c=b64tohex(a);return c}function hextopem(a,b){var c=hextob64nl(a);return"-----BEGIN "+b+"-----\r\n"+c+"\r\n-----END "+b+"-----\r\n"}function pemtohex(a,b){if(a.indexOf("-----BEGIN ")==-1){throw"can't find PEM header: "+b}if(b!==undefined){a=a.replace(new RegExp("^[^]*-----BEGIN "+b+"-----"),"");a=a.replace(new RegExp("-----END "+b+"-----[^]*$"),"")}else{a=a.replace(/^[^]*-----BEGIN [^-]+-----/,"");a=a.replace(/-----END [^-]+-----[^]*$/,"")}return b64nltohex(a)}function hextoArrayBuffer(d){if(d.length%2!=0){throw"input is not even length"}if(d.match(/^[0-9A-Fa-f]+$/)==null){throw"input is not hexadecimal"}var b=new ArrayBuffer(d.length/2);var a=new DataView(b);for(var c=0;c<d.length/2;c++){a.setUint8(c,parseInt(d.substr(c*2,2),16))}return b}function ArrayBuffertohex(b){var d="";var a=new DataView(b);for(var c=0;c<b.byteLength;c++){d+=("00"+a.getUint8(c).toString(16)).slice(-2)}return d}function zulutomsec(n){var l,j,m,e,f,i,b,k;var a,h,g,c;c=n.match(/^(\d{2}|\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(|\.\d+)Z$/);if(c){a=c[1];l=parseInt(a);if(a.length===2){if(50<=l&&l<100){l=1900+l}else{if(0<=l&&l<50){l=2000+l}}}j=parseInt(c[2])-1;m=parseInt(c[3]);e=parseInt(c[4]);f=parseInt(c[5]);i=parseInt(c[6]);b=0;h=c[7];if(h!==""){g=(h.substr(1)+"00").substr(0,3);b=parseInt(g)}return Date.UTC(l,j,m,e,f,i,b)}throw"unsupported zulu format: "+n}function zulutosec(a){var b=zulutomsec(a);return ~~(b/1000)}function zulutodate(a){return new Date(zulutomsec(a))}function datetozulu(g,e,f){var b;var a=g.getUTCFullYear();if(e){if(a<1950||2049<a){throw"not proper year for UTCTime: "+a}b=(""+a).slice(-2)}else{b=("000"+a).slice(-4)}b+=("0"+(g.getUTCMonth()+1)).slice(-2);b+=("0"+g.getUTCDate()).slice(-2);b+=("0"+g.getUTCHours()).slice(-2);b+=("0"+g.getUTCMinutes()).slice(-2);b+=("0"+g.getUTCSeconds()).slice(-2);if(f){var c=g.getUTCMilliseconds();if(c!==0){c=("00"+c).slice(-3);c=c.replace(/0+$/g,"");b+="."+c}}b+="Z";return b}function uricmptohex(a){return a.replace(/%/g,"")}function hextouricmp(a){return a.replace(/(..)/g,"%$1")}function ipv6tohex(g){var b="malformed IPv6 address";if(!g.match(/^[0-9A-Fa-f:]+$/)){throw b}g=g.toLowerCase();var d=g.split(":").length-1;if(d<2){throw b}var e=":".repeat(7-d+2);g=g.replace("::",e);var c=g.split(":");if(c.length!=8){throw b}for(var f=0;f<8;f++){c[f]=("0000"+c[f]).slice(-4)}return c.join("")}function hextoipv6(e){if(!e.match(/^[0-9A-Fa-f]{32}$/)){throw"malformed IPv6 address octet"}e=e.toLowerCase();var b=e.match(/.{1,4}/g);for(var d=0;d<8;d++){b[d]=b[d].replace(/^0+/,"");if(b[d]==""){b[d]="0"}}e=":"+b.join(":")+":";var c=e.match(/:(0:){2,}/g);if(c===null){return e.slice(1,-1)}var f="";for(var d=0;d<c.length;d++){if(c[d].length>f.length){f=c[d]}}e=e.replace(f,"::");return e.slice(1,-1)}function hextoip(b){var d="malformed hex value";if(!b.match(/^([0-9A-Fa-f][0-9A-Fa-f]){1,}$/)){throw d}if(b.length==8){var c;try{c=parseInt(b.substr(0,2),16)+"."+parseInt(b.substr(2,2),16)+"."+parseInt(b.substr(4,2),16)+"."+parseInt(b.substr(6,2),16);return c}catch(a){throw d}}else{if(b.length==32){return hextoipv6(b)}else{return b}}}function iptohex(f){var j="malformed IP address";f=f.toLowerCase(f);if(f.match(/^[0-9.]+$/)){var b=f.split(".");if(b.length!==4){throw j}var g="";try{for(var e=0;e<4;e++){var h=parseInt(b[e]);g+=("0"+h.toString(16)).slice(-2)}return g}catch(c){throw j}}else{if(f.match(/^[0-9a-f:]+$/)&&f.indexOf(":")!==-1){return ipv6tohex(f)}else{throw j}}}function ucs2hextoutf8(d){function e(f){var h=parseInt(f.substr(0,2),16);var a=parseInt(f.substr(2),16);if(h==0&a<128){return String.fromCharCode(a)}if(h<8){var j=192|((h&7)<<3)|((a&192)>>6);var i=128|(a&63);return hextoutf8(j.toString(16)+i.toString(16))}var j=224|((h&240)>>4);var i=128|((h&15)<<2)|((a&192)>>6);var g=128|(a&63);return hextoutf8(j.toString(16)+i.toString(16)+g.toString(16))}var c=d.match(/.{4}/g);var b=c.map(e);return b.join("")}function encodeURIComponentAll(a){var d=encodeURIComponent(a);var b="";for(var c=0;c<d.length;c++){if(d[c]=="%"){b=b+d.substr(c,3);c=c+2}else{b=b+"%"+stohex(d[c])}}return b}function newline_toUnix(a){a=a.replace(/\r\n/mg,"\n");return a}function newline_toDos(a){a=a.replace(/\r\n/mg,"\n");a=a.replace(/\n/mg,"\r\n");return a}KJUR.lang.String.isInteger=function(a){if(a.match(/^[0-9]+$/)){return true}else{if(a.match(/^-[0-9]+$/)){return true}else{return false}}};KJUR.lang.String.isHex=function(a){return ishex(a)};function ishex(a){if(a.length%2==0&&(a.match(/^[0-9a-f]+$/)||a.match(/^[0-9A-F]+$/))){return true}else{return false}}KJUR.lang.String.isBase64=function(a){a=a.replace(/\s+/g,"");if(a.match(/^[0-9A-Za-z+\/]+={0,3}$/)&&a.length%4==0){return true}else{return false}};KJUR.lang.String.isBase64URL=function(a){if(a.match(/[+/=]/)){return false}a=b64utob64(a);return KJUR.lang.String.isBase64(a)};KJUR.lang.String.isIntegerArray=function(a){a=a.replace(/\s+/g,"");if(a.match(/^\[[0-9,]+\]$/)){return true}else{return false}};KJUR.lang.String.isPrintable=function(a){if(a.match(/^[0-9A-Za-z '()+,-./:=?]*$/)!==null){return true}return false};KJUR.lang.String.isIA5=function(a){if(a.match(/^[\x20-\x21\x23-\x7f]*$/)!==null){return true}return false};KJUR.lang.String.isMail=function(a){if(a.match(/^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\.[A-Za-z0-9]{1,}$/)!==null){return true}return false};function hextoposhex(a){if(a.length%2==1){return"0"+a}if(a.substr(0,1)>"7"){return"00"+a}return a}function intarystrtohex(b){b=b.replace(/^\s*\[\s*/,"");b=b.replace(/\s*\]\s*$/,"");b=b.replace(/\s*/g,"");try{var c=b.split(/,/).map(function(g,e,h){var f=parseInt(g);if(f<0||255<f){throw"integer not in range 0-255"}var d=("00"+f.toString(16)).slice(-2);return d}).join("");return c}catch(a){throw"malformed integer array string: "+a}}var strdiffidx=function(c,a){var d=c.length;if(c.length>a.length){d=a.length}for(var b=0;b<d;b++){if(c.charCodeAt(b)!=a.charCodeAt(b)){return b}}if(c.length!=a.length){return d}return -1};function oidtohex(g){var f=function(a){var l=a.toString(16);if(l.length==1){l="0"+l}return l};var e=function(p){var o="";var l=parseInt(p,10);var a=l.toString(2);var m=7-a.length%7;if(m==7){m=0}var r="";for(var n=0;n<m;n++){r+="0"}a=r+a;for(var n=0;n<a.length-1;n+=7){var q=a.substr(n,7);if(n!=a.length-7){q="1"+q}o+=f(parseInt(q,2))}return o};try{if(!g.match(/^[0-9.]+$/)){return null}var j="";var b=g.split(".");var k=parseInt(b[0],10)*40+parseInt(b[1],10);j+=f(k);b.splice(0,2);for(var d=0;d<b.length;d++){j+=e(b[d])}return j}catch(c){return null}}function hextooid(g){if(!ishex(g)){return null}try{var m=[];var p=g.substr(0,2);var e=parseInt(p,16);m[0]=new String(Math.floor(e/40));m[1]=new String(e%40);var n=g.substr(2);var l=[];for(var f=0;f<n.length/2;f++){l.push(parseInt(n.substr(f*2,2),16))}var k=[];var d="";for(var f=0;f<l.length;f++){if(l[f]&128){d=d+strpad((l[f]&127).toString(2),7)}else{d=d+strpad((l[f]&127).toString(2),7);k.push(new String(parseInt(d,2)));d=""}}var o=m.join(".");if(k.length>0){o=o+"."+k.join(".")}return o}catch(j){return null}}var strpad=function(c,b,a){if(a==undefined){a="0"}if(c.length>=b){return c}return new Array(b-c.length+1).join(a)+c};function bitstrtoint(e){try{var a=e.substr(0,2);if(a=="00"){return parseInt(e.substr(2),16)}var b=parseInt(a,16);var f=e.substr(2);var d=parseInt(f,16).toString(2);if(d=="0"){d="00000000"}d=d.slice(0,0-b);return parseInt(d,2)}catch(c){return -1}}function inttobitstr(e){var c=Number(e).toString(2);var b=8-c.length%8;if(b==8){b=0}c=c+strpad("",b,"0");var d=parseInt(c,2).toString(16);if(d.length%2==1){d="0"+d}var a="0"+b;return a+d}function extendClass(c,a){var b=function(){};b.prototype=a.prototype;c.prototype=new b();c.prototype.constructor=c;c.superclass=a.prototype;if(a.prototype.constructor==Object.prototype.constructor){a.prototype.constructor=a}};
    if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.crypto=="undefined"||!KJUR.crypto){KJUR.crypto={}}KJUR.crypto.Util=new function(){this.DIGESTINFOHEAD={sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",ripemd160:"3021300906052b2403020105000414",};this.DEFAULTPROVIDER={md5:"cryptojs",sha1:"cryptojs",sha224:"cryptojs",sha256:"cryptojs",sha384:"cryptojs",sha512:"cryptojs",ripemd160:"cryptojs",hmacmd5:"cryptojs",hmacsha1:"cryptojs",hmacsha224:"cryptojs",hmacsha256:"cryptojs",hmacsha384:"cryptojs",hmacsha512:"cryptojs",hmacripemd160:"cryptojs",MD5withRSA:"cryptojs/jsrsa",SHA1withRSA:"cryptojs/jsrsa",SHA224withRSA:"cryptojs/jsrsa",SHA256withRSA:"cryptojs/jsrsa",SHA384withRSA:"cryptojs/jsrsa",SHA512withRSA:"cryptojs/jsrsa",RIPEMD160withRSA:"cryptojs/jsrsa",MD5withECDSA:"cryptojs/jsrsa",SHA1withECDSA:"cryptojs/jsrsa",SHA224withECDSA:"cryptojs/jsrsa",SHA256withECDSA:"cryptojs/jsrsa",SHA384withECDSA:"cryptojs/jsrsa",SHA512withECDSA:"cryptojs/jsrsa",RIPEMD160withECDSA:"cryptojs/jsrsa",SHA1withDSA:"cryptojs/jsrsa",SHA224withDSA:"cryptojs/jsrsa",SHA256withDSA:"cryptojs/jsrsa",MD5withRSAandMGF1:"cryptojs/jsrsa",SHAwithRSAandMGF1:"cryptojs/jsrsa",SHA1withRSAandMGF1:"cryptojs/jsrsa",SHA224withRSAandMGF1:"cryptojs/jsrsa",SHA256withRSAandMGF1:"cryptojs/jsrsa",SHA384withRSAandMGF1:"cryptojs/jsrsa",SHA512withRSAandMGF1:"cryptojs/jsrsa",RIPEMD160withRSAandMGF1:"cryptojs/jsrsa",};this.CRYPTOJSMESSAGEDIGESTNAME={md5:CryptoJS.algo.MD5,sha1:CryptoJS.algo.SHA1,sha224:CryptoJS.algo.SHA224,sha256:CryptoJS.algo.SHA256,sha384:CryptoJS.algo.SHA384,sha512:CryptoJS.algo.SHA512,ripemd160:CryptoJS.algo.RIPEMD160};this.getDigestInfoHex=function(a,b){if(typeof this.DIGESTINFOHEAD[b]=="undefined"){throw"alg not supported in Util.DIGESTINFOHEAD: "+b}return this.DIGESTINFOHEAD[b]+a};this.getPaddedDigestInfoHex=function(h,a,j){var c=this.getDigestInfoHex(h,a);var d=j/4;if(c.length+22>d){throw"key is too short for SigAlg: keylen="+j+","+a}var b="0001";var k="00"+c;var g="";var l=d-b.length-k.length;for(var f=0;f<l;f+=2){g+="ff"}var e=b+g+k;return e};this.hashString=function(a,c){var b=new KJUR.crypto.MessageDigest({alg:c});return b.digestString(a)};this.hashHex=function(b,c){var a=new KJUR.crypto.MessageDigest({alg:c});return a.digestHex(b)};this.sha1=function(a){return this.hashString(a,"sha1")};this.sha256=function(a){return this.hashString(a,"sha256")};this.sha256Hex=function(a){return this.hashHex(a,"sha256")};this.sha512=function(a){return this.hashString(a,"sha512")};this.sha512Hex=function(a){return this.hashHex(a,"sha512")};this.isKey=function(a){if(a instanceof RSAKey||a instanceof KJUR.crypto.DSA||a instanceof KJUR.crypto.ECDSA){return true}else{return false}}};KJUR.crypto.Util.md5=function(a){var b=new KJUR.crypto.MessageDigest({alg:"md5",prov:"cryptojs"});return b.digestString(a)};KJUR.crypto.Util.ripemd160=function(a){var b=new KJUR.crypto.MessageDigest({alg:"ripemd160",prov:"cryptojs"});return b.digestString(a)};KJUR.crypto.Util.SECURERANDOMGEN=new SecureRandom();KJUR.crypto.Util.getRandomHexOfNbytes=function(b){var a=new Array(b);KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(a);return BAtohex(a)};KJUR.crypto.Util.getRandomBigIntegerOfNbytes=function(a){return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbytes(a),16)};KJUR.crypto.Util.getRandomHexOfNbits=function(d){var c=d%8;var a=(d-c)/8;var b=new Array(a+1);KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(b);b[0]=(((255<<c)&255)^255)&b[0];return BAtohex(b)};KJUR.crypto.Util.getRandomBigIntegerOfNbits=function(a){return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbits(a),16)};KJUR.crypto.Util.getRandomBigIntegerZeroToMax=function(b){var a=b.bitLength();while(1){var c=KJUR.crypto.Util.getRandomBigIntegerOfNbits(a);if(b.compareTo(c)!=-1){return c}}};KJUR.crypto.Util.getRandomBigIntegerMinToMax=function(e,b){var c=e.compareTo(b);if(c==1){throw"biMin is greater than biMax"}if(c==0){return e}var a=b.subtract(e);var d=KJUR.crypto.Util.getRandomBigIntegerZeroToMax(a);return d.add(e)};KJUR.crypto.MessageDigest=function(c){var b=null;var a=null;var d=null;this.setAlgAndProvider=function(g,f){g=KJUR.crypto.MessageDigest.getCanonicalAlgName(g);if(g!==null&&f===undefined){f=KJUR.crypto.Util.DEFAULTPROVIDER[g]}if(":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(g)!=-1&&f=="cryptojs"){try{this.md=KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g].create()}catch(e){throw"setAlgAndProvider hash alg set fail alg="+g+"/"+e}this.updateString=function(h){this.md.update(h)};this.updateHex=function(h){var i=CryptoJS.enc.Hex.parse(h);this.md.update(i)};this.digest=function(){var h=this.md.finalize();return h.toString(CryptoJS.enc.Hex)};this.digestString=function(h){this.updateString(h);return this.digest()};this.digestHex=function(h){this.updateHex(h);return this.digest()}}if(":sha256:".indexOf(g)!=-1&&f=="sjcl"){try{this.md=new sjcl.hash.sha256()}catch(e){throw"setAlgAndProvider hash alg set fail alg="+g+"/"+e}this.updateString=function(h){this.md.update(h)};this.updateHex=function(i){var h=sjcl.codec.hex.toBits(i);this.md.update(h)};this.digest=function(){var h=this.md.finalize();return sjcl.codec.hex.fromBits(h)};this.digestString=function(h){this.updateString(h);return this.digest()};this.digestHex=function(h){this.updateHex(h);return this.digest()}}};this.updateString=function(e){throw"updateString(str) not supported for this alg/prov: "+this.algName+"/"+this.provName};this.updateHex=function(e){throw"updateHex(hex) not supported for this alg/prov: "+this.algName+"/"+this.provName};this.digest=function(){throw"digest() not supported for this alg/prov: "+this.algName+"/"+this.provName};this.digestString=function(e){throw"digestString(str) not supported for this alg/prov: "+this.algName+"/"+this.provName};this.digestHex=function(e){throw"digestHex(hex) not supported for this alg/prov: "+this.algName+"/"+this.provName};if(c!==undefined){if(c.alg!==undefined){this.algName=c.alg;if(c.prov===undefined){this.provName=KJUR.crypto.Util.DEFAULTPROVIDER[this.algName]}this.setAlgAndProvider(this.algName,this.provName)}}};KJUR.crypto.MessageDigest.getCanonicalAlgName=function(a){if(typeof a==="string"){a=a.toLowerCase();a=a.replace(/-/,"")}return a};KJUR.crypto.MessageDigest.getHashLength=function(c){var b=KJUR.crypto.MessageDigest;var a=b.getCanonicalAlgName(c);if(b.HASHLENGTH[a]===undefined){throw"not supported algorithm: "+c}return b.HASHLENGTH[a]};KJUR.crypto.MessageDigest.HASHLENGTH={md5:16,sha1:20,sha224:28,sha256:32,sha384:48,sha512:64,ripemd160:20};KJUR.crypto.Mac=function(d){var f=null;var c=null;var a=null;var e=null;var b=null;this.setAlgAndProvider=function(k,i){k=k.toLowerCase();if(k==null){k="hmacsha1"}k=k.toLowerCase();if(k.substr(0,4)!="hmac"){throw"setAlgAndProvider unsupported HMAC alg: "+k}if(i===undefined){i=KJUR.crypto.Util.DEFAULTPROVIDER[k]}this.algProv=k+"/"+i;var g=k.substr(4);if(":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(g)!=-1&&i=="cryptojs"){try{var j=KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g];this.mac=CryptoJS.algo.HMAC.create(j,this.pass)}catch(h){throw"setAlgAndProvider hash alg set fail hashAlg="+g+"/"+h}this.updateString=function(l){this.mac.update(l)};this.updateHex=function(l){var m=CryptoJS.enc.Hex.parse(l);this.mac.update(m)};this.doFinal=function(){var l=this.mac.finalize();return l.toString(CryptoJS.enc.Hex)};this.doFinalString=function(l){this.updateString(l);return this.doFinal()};this.doFinalHex=function(l){this.updateHex(l);return this.doFinal()}}};this.updateString=function(g){throw"updateString(str) not supported for this alg/prov: "+this.algProv};this.updateHex=function(g){throw"updateHex(hex) not supported for this alg/prov: "+this.algProv};this.doFinal=function(){throw"digest() not supported for this alg/prov: "+this.algProv};this.doFinalString=function(g){throw"digestString(str) not supported for this alg/prov: "+this.algProv};this.doFinalHex=function(g){throw"digestHex(hex) not supported for this alg/prov: "+this.algProv};this.setPassword=function(h){if(typeof h=="string"){var g=h;if(h.length%2==1||!h.match(/^[0-9A-Fa-f]+$/)){g=rstrtohex(h)}this.pass=CryptoJS.enc.Hex.parse(g);return}if(typeof h!="object"){throw"KJUR.crypto.Mac unsupported password type: "+h}var g=null;if(h.hex!==undefined){if(h.hex.length%2!=0||!h.hex.match(/^[0-9A-Fa-f]+$/)){throw"Mac: wrong hex password: "+h.hex}g=h.hex}if(h.utf8!==undefined){g=utf8tohex(h.utf8)}if(h.rstr!==undefined){g=rstrtohex(h.rstr)}if(h.b64!==undefined){g=b64tohex(h.b64)}if(h.b64u!==undefined){g=b64utohex(h.b64u)}if(g==null){throw"KJUR.crypto.Mac unsupported password type: "+h}this.pass=CryptoJS.enc.Hex.parse(g)};if(d!==undefined){if(d.pass!==undefined){this.setPassword(d.pass)}if(d.alg!==undefined){this.algName=d.alg;if(d.prov===undefined){this.provName=KJUR.crypto.Util.DEFAULTPROVIDER[this.algName]}this.setAlgAndProvider(this.algName,this.provName)}}};KJUR.crypto.Signature=function(o){var q=null;var n=null;var r=null;var c=null;var l=null;var d=null;var k=null;var h=null;var p=null;var e=null;var b=-1;var g=null;var j=null;var a=null;var i=null;var f=null;this._setAlgNames=function(){var s=this.algName.match(/^(.+)with(.+)$/);if(s){this.mdAlgName=s[1].toLowerCase();this.pubkeyAlgName=s[2].toLowerCase();if(this.pubkeyAlgName=="rsaandmgf1"&&this.mdAlgName=="sha"){this.mdAlgName="sha1"}}};this._zeroPaddingOfSignature=function(x,w){var v="";var t=w/4-x.length;for(var u=0;u<t;u++){v=v+"0"}return v+x};this.setAlgAndProvider=function(u,t){this._setAlgNames();if(t!="cryptojs/jsrsa"){throw new Error("provider not supported: "+t)}if(":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(this.mdAlgName)!=-1){try{this.md=new KJUR.crypto.MessageDigest({alg:this.mdAlgName})}catch(s){throw new Error("setAlgAndProvider hash alg set fail alg="+this.mdAlgName+"/"+s)}this.init=function(w,x){var y=null;try{if(x===undefined){y=KEYUTIL.getKey(w)}else{y=KEYUTIL.getKey(w,x)}}catch(v){throw"init failed:"+v}if(y.isPrivate===true){this.prvKey=y;this.state="SIGN"}else{if(y.isPublic===true){this.pubKey=y;this.state="VERIFY"}else{throw"init failed.:"+y}}};this.updateString=function(v){this.md.updateString(v)};this.updateHex=function(v){this.md.updateHex(v)};this.sign=function(){this.sHashHex=this.md.digest();if(this.prvKey===undefined&&this.ecprvhex!==undefined&&this.eccurvename!==undefined&&KJUR.crypto.ECDSA!==undefined){this.prvKey=new KJUR.crypto.ECDSA({curve:this.eccurvename,prv:this.ecprvhex})}if(this.prvKey instanceof RSAKey&&this.pubkeyAlgName==="rsaandmgf1"){this.hSign=this.prvKey.signWithMessageHashPSS(this.sHashHex,this.mdAlgName,this.pssSaltLen)}else{if(this.prvKey instanceof RSAKey&&this.pubkeyAlgName==="rsa"){this.hSign=this.prvKey.signWithMessageHash(this.sHashHex,this.mdAlgName)}else{if(this.prvKey instanceof KJUR.crypto.ECDSA){this.hSign=this.prvKey.signWithMessageHash(this.sHashHex)}else{if(this.prvKey instanceof KJUR.crypto.DSA){this.hSign=this.prvKey.signWithMessageHash(this.sHashHex)}else{throw"Signature: unsupported private key alg: "+this.pubkeyAlgName}}}}return this.hSign};this.signString=function(v){this.updateString(v);return this.sign()};this.signHex=function(v){this.updateHex(v);return this.sign()};this.verify=function(v){this.sHashHex=this.md.digest();if(this.pubKey===undefined&&this.ecpubhex!==undefined&&this.eccurvename!==undefined&&KJUR.crypto.ECDSA!==undefined){this.pubKey=new KJUR.crypto.ECDSA({curve:this.eccurvename,pub:this.ecpubhex})}if(this.pubKey instanceof RSAKey&&this.pubkeyAlgName==="rsaandmgf1"){return this.pubKey.verifyWithMessageHashPSS(this.sHashHex,v,this.mdAlgName,this.pssSaltLen)}else{if(this.pubKey instanceof RSAKey&&this.pubkeyAlgName==="rsa"){return this.pubKey.verifyWithMessageHash(this.sHashHex,v)}else{if(KJUR.crypto.ECDSA!==undefined&&this.pubKey instanceof KJUR.crypto.ECDSA){return this.pubKey.verifyWithMessageHash(this.sHashHex,v)}else{if(KJUR.crypto.DSA!==undefined&&this.pubKey instanceof KJUR.crypto.DSA){return this.pubKey.verifyWithMessageHash(this.sHashHex,v)}else{throw"Signature: unsupported public key alg: "+this.pubkeyAlgName}}}}}}};this.init=function(s,t){throw"init(key, pass) not supported for this alg:prov="+this.algProvName};this.updateString=function(s){throw"updateString(str) not supported for this alg:prov="+this.algProvName};this.updateHex=function(s){throw"updateHex(hex) not supported for this alg:prov="+this.algProvName};this.sign=function(){throw"sign() not supported for this alg:prov="+this.algProvName};this.signString=function(s){throw"digestString(str) not supported for this alg:prov="+this.algProvName};this.signHex=function(s){throw"digestHex(hex) not supported for this alg:prov="+this.algProvName};this.verify=function(s){throw"verify(hSigVal) not supported for this alg:prov="+this.algProvName};this.initParams=o;if(o!==undefined){if(o.alg!==undefined){this.algName=o.alg;if(o.prov===undefined){this.provName=KJUR.crypto.Util.DEFAULTPROVIDER[this.algName]}else{this.provName=o.prov}this.algProvName=this.algName+":"+this.provName;this.setAlgAndProvider(this.algName,this.provName);this._setAlgNames()}if(o.psssaltlen!==undefined){this.pssSaltLen=o.psssaltlen}if(o.prvkeypem!==undefined){if(o.prvkeypas!==undefined){throw"both prvkeypem and prvkeypas parameters not supported"}else{try{var q=KEYUTIL.getKey(o.prvkeypem);this.init(q)}catch(m){throw"fatal error to load pem private key: "+m}}}}};KJUR.crypto.Cipher=function(a){};KJUR.crypto.Cipher.encrypt=function(e,f,d){if(f instanceof RSAKey&&f.isPublic){var c=KJUR.crypto.Cipher.getAlgByKeyAndName(f,d);if(c==="RSA"){return f.encrypt(e)}if(c==="RSAOAEP"){return f.encryptOAEP(e,"sha1")}var b=c.match(/^RSAOAEP(\d+)$/);if(b!==null){return f.encryptOAEP(e,"sha"+b[1])}throw"Cipher.encrypt: unsupported algorithm for RSAKey: "+d}else{throw"Cipher.encrypt: unsupported key or algorithm"}};KJUR.crypto.Cipher.decrypt=function(e,f,d){if(f instanceof RSAKey&&f.isPrivate){var c=KJUR.crypto.Cipher.getAlgByKeyAndName(f,d);if(c==="RSA"){return f.decrypt(e)}if(c==="RSAOAEP"){return f.decryptOAEP(e,"sha1")}var b=c.match(/^RSAOAEP(\d+)$/);if(b!==null){return f.decryptOAEP(e,"sha"+b[1])}throw"Cipher.decrypt: unsupported algorithm for RSAKey: "+d}else{throw"Cipher.decrypt: unsupported key or algorithm"}};KJUR.crypto.Cipher.getAlgByKeyAndName=function(b,a){if(b instanceof RSAKey){if(":RSA:RSAOAEP:RSAOAEP224:RSAOAEP256:RSAOAEP384:RSAOAEP512:".indexOf(a)!=-1){return a}if(a===null||a===undefined){return"RSA"}throw"getAlgByKeyAndName: not supported algorithm name for RSAKey: "+a}throw"getAlgByKeyAndName: not supported algorithm name: "+a};KJUR.crypto.OID=new function(){this.oidhex2name={"2a864886f70d010101":"rsaEncryption","2a8648ce3d0201":"ecPublicKey","2a8648ce380401":"dsa","2a8648ce3d030107":"secp256r1","2b8104001f":"secp192k1","2b81040021":"secp224r1","2b8104000a":"secp256k1","2b81040022":"secp384r1","2b81040023":"secp521r1","2a8648ce380403":"SHA1withDSA","608648016503040301":"SHA224withDSA","608648016503040302":"SHA256withDSA",}};
    if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.crypto=="undefined"||!KJUR.crypto){KJUR.crypto={}}KJUR.crypto.ECDSA=function(e){var g="secp256r1";var p=null;var b=null;var i=null;var j=Error,f=BigInteger,h=ECPointFp,m=KJUR.crypto.ECDSA,c=KJUR.crypto.ECParameterDB,d=m.getName,q=ASN1HEX,n=q.getVbyListEx,k=q.isASN1HEX;var a=new SecureRandom();var o=null;this.type="EC";this.isPrivate=false;this.isPublic=false;function l(x,t,w,s){var r=Math.max(t.bitLength(),s.bitLength());var y=x.add2D(w);var v=x.curve.getInfinity();for(var u=r-1;u>=0;--u){v=v.twice2D();v.z=f.ONE;if(t.testBit(u)){if(s.testBit(u)){v=v.add2D(y)}else{v=v.add2D(x)}}else{if(s.testBit(u)){v=v.add2D(w)}}}return v}this.getBigRandom=function(r){return new f(r.bitLength(),a).mod(r.subtract(f.ONE)).add(f.ONE)};this.setNamedCurve=function(r){this.ecparams=c.getByName(r);this.prvKeyHex=null;this.pubKeyHex=null;this.curveName=r};this.setPrivateKeyHex=function(r){this.isPrivate=true;this.prvKeyHex=r};this.setPublicKeyHex=function(r){this.isPublic=true;this.pubKeyHex=r};this.getPublicKeyXYHex=function(){var t=this.pubKeyHex;if(t.substr(0,2)!=="04"){throw"this method supports uncompressed format(04) only"}var s=this.ecparams.keycharlen;if(t.length!==2+s*2){throw"malformed public key hex length"}var r={};r.x=t.substr(2,s);r.y=t.substr(2+s);return r};this.getShortNISTPCurveName=function(){var r=this.curveName;if(r==="secp256r1"||r==="NIST P-256"||r==="P-256"||r==="prime256v1"){return"P-256"}if(r==="secp384r1"||r==="NIST P-384"||r==="P-384"){return"P-384"}if(r==="secp521r1"||r==="NIST P-521"||r==="P-521"){return"P-521"}return null};this.generateKeyPairHex=function(){var s=this.ecparams.n;var u=this.getBigRandom(s);var r=this.ecparams.keycharlen;var t=("0000000000"+u.toString(16)).slice(-r);this.setPrivateKeyHex(t);var v=this.generatePublicKeyHex();return{ecprvhex:t,ecpubhex:v}};this.generatePublicKeyHex=function(){var u=new f(this.prvKeyHex,16);var w=this.ecparams.G.multiply(u);var t=w.getX().toBigInteger();var s=w.getY().toBigInteger();var r=this.ecparams.keycharlen;var y=("0000000000"+t.toString(16)).slice(-r);var v=("0000000000"+s.toString(16)).slice(-r);var x="04"+y+v;this.setPublicKeyHex(x);return x};this.signWithMessageHash=function(r){return this.signHex(r,this.prvKeyHex)};this.signHex=function(x,u){var A=new f(u,16);var v=this.ecparams.n;var z=new f(x.substring(0,this.ecparams.keycharlen),16);do{var w=this.getBigRandom(v);var B=this.ecparams.G;var y=B.multiply(w);var t=y.getX().toBigInteger().mod(v)}while(t.compareTo(f.ZERO)<=0);var C=w.modInverse(v).multiply(z.add(A.multiply(t))).mod(v);return m.biRSSigToASN1Sig(t,C)};this.sign=function(w,B){var z=B;var u=this.ecparams.n;var y=f.fromByteArrayUnsigned(w);do{var v=this.getBigRandom(u);var A=this.ecparams.G;var x=A.multiply(v);var t=x.getX().toBigInteger().mod(u)}while(t.compareTo(BigInteger.ZERO)<=0);var C=v.modInverse(u).multiply(y.add(z.multiply(t))).mod(u);return this.serializeSig(t,C)};this.verifyWithMessageHash=function(s,r){return this.verifyHex(s,r,this.pubKeyHex)};this.verifyHex=function(v,y,u){try{var t,B;var w=m.parseSigHex(y);t=w.r;B=w.s;var x=h.decodeFromHex(this.ecparams.curve,u);var z=new f(v.substring(0,this.ecparams.keycharlen),16);return this.verifyRaw(z,t,B,x)}catch(A){return false}};this.verify=function(z,A,u){var w,t;if(Bitcoin.Util.isArray(A)){var y=this.parseSig(A);w=y.r;t=y.s}else{if("object"===typeof A&&A.r&&A.s){w=A.r;t=A.s}else{throw"Invalid value for signature"}}var v;if(u instanceof ECPointFp){v=u}else{if(Bitcoin.Util.isArray(u)){v=h.decodeFrom(this.ecparams.curve,u)}else{throw"Invalid format for pubkey value, must be byte array or ECPointFp"}}var x=f.fromByteArrayUnsigned(z);return this.verifyRaw(x,w,t,v)};this.verifyRaw=function(z,t,E,y){var x=this.ecparams.n;var D=this.ecparams.G;if(t.compareTo(f.ONE)<0||t.compareTo(x)>=0){return false}if(E.compareTo(f.ONE)<0||E.compareTo(x)>=0){return false}var A=E.modInverse(x);var w=z.multiply(A).mod(x);var u=t.multiply(A).mod(x);var B=D.multiply(w).add(y.multiply(u));var C=B.getX().toBigInteger().mod(x);return C.equals(t)};this.serializeSig=function(v,u){var w=v.toByteArraySigned();var t=u.toByteArraySigned();var x=[];x.push(2);x.push(w.length);x=x.concat(w);x.push(2);x.push(t.length);x=x.concat(t);x.unshift(x.length);x.unshift(48);return x};this.parseSig=function(y){var x;if(y[0]!=48){throw new Error("Signature not a valid DERSequence")}x=2;if(y[x]!=2){throw new Error("First element in signature must be a DERInteger")}var w=y.slice(x+2,x+2+y[x+1]);x+=2+y[x+1];if(y[x]!=2){throw new Error("Second element in signature must be a DERInteger")}var t=y.slice(x+2,x+2+y[x+1]);x+=2+y[x+1];var v=f.fromByteArrayUnsigned(w);var u=f.fromByteArrayUnsigned(t);return{r:v,s:u}};this.parseSigCompact=function(w){if(w.length!==65){throw"Signature has the wrong length"}var t=w[0]-27;if(t<0||t>7){throw"Invalid signature type"}var x=this.ecparams.n;var v=f.fromByteArrayUnsigned(w.slice(1,33)).mod(x);var u=f.fromByteArrayUnsigned(w.slice(33,65)).mod(x);return{r:v,s:u,i:t}};this.readPKCS5PrvKeyHex=function(u){if(k(u)===false){throw new Error("not ASN.1 hex string")}var r,t,v;try{r=n(u,0,["[0]",0],"06");t=n(u,0,[1],"04");try{v=n(u,0,["[1]",0],"03")}catch(s){}}catch(s){throw new Error("malformed PKCS#1/5 plain ECC private key")}this.curveName=d(r);if(this.curveName===undefined){throw"unsupported curve name"}this.setNamedCurve(this.curveName);this.setPublicKeyHex(v);this.setPrivateKeyHex(t);this.isPublic=false};this.readPKCS8PrvKeyHex=function(v){if(k(v)===false){throw new j("not ASN.1 hex string")}var t,r,u,w;try{t=n(v,0,[1,0],"06");r=n(v,0,[1,1],"06");u=n(v,0,[2,0,1],"04");try{w=n(v,0,[2,0,"[1]",0],"03")}catch(s){}}catch(s){throw new j("malformed PKCS#8 plain ECC private key")}this.curveName=d(r);if(this.curveName===undefined){throw new j("unsupported curve name")}this.setNamedCurve(this.curveName);this.setPublicKeyHex(w);this.setPrivateKeyHex(u);this.isPublic=false};this.readPKCS8PubKeyHex=function(u){if(k(u)===false){throw new j("not ASN.1 hex string")}var t,r,v;try{t=n(u,0,[0,0],"06");r=n(u,0,[0,1],"06");v=n(u,0,[1],"03")}catch(s){throw new j("malformed PKCS#8 ECC public key")}this.curveName=d(r);if(this.curveName===null){throw new j("unsupported curve name")}this.setNamedCurve(this.curveName);this.setPublicKeyHex(v)};this.readCertPubKeyHex=function(t,v){if(k(t)===false){throw new j("not ASN.1 hex string")}var r,u;try{r=n(t,0,[0,5,0,1],"06");u=n(t,0,[0,5,1],"03")}catch(s){throw new j("malformed X.509 certificate ECC public key")}this.curveName=d(r);if(this.curveName===null){throw new j("unsupported curve name")}this.setNamedCurve(this.curveName);this.setPublicKeyHex(u)};if(e!==undefined){if(e.curve!==undefined){this.curveName=e.curve}}if(this.curveName===undefined){this.curveName=g}this.setNamedCurve(this.curveName);if(e!==undefined){if(e.prv!==undefined){this.setPrivateKeyHex(e.prv)}if(e.pub!==undefined){this.setPublicKeyHex(e.pub)}}};KJUR.crypto.ECDSA.parseSigHex=function(a){var b=KJUR.crypto.ECDSA.parseSigHexInHexRS(a);var d=new BigInteger(b.r,16);var c=new BigInteger(b.s,16);return{r:d,s:c}};KJUR.crypto.ECDSA.parseSigHexInHexRS=function(f){var j=ASN1HEX,i=j.getChildIdx,g=j.getV;j.checkStrictDER(f,0);if(f.substr(0,2)!="30"){throw new Error("signature is not a ASN.1 sequence")}var h=i(f,0);if(h.length!=2){throw new Error("signature shall have two elements")}var e=h[0];var d=h[1];if(f.substr(e,2)!="02"){throw new Error("1st item not ASN.1 integer")}if(f.substr(d,2)!="02"){throw new Error("2nd item not ASN.1 integer")}var c=g(f,e);var b=g(f,d);return{r:c,s:b}};KJUR.crypto.ECDSA.asn1SigToConcatSig=function(d){var e=KJUR.crypto.ECDSA.parseSigHexInHexRS(d);var b=e.r;var a=e.s;if(b.length>=130&&b.length<=134){if(b.length%2!=0){throw Error("unknown ECDSA sig r length error")}if(a.length%2!=0){throw Error("unknown ECDSA sig s length error")}if(b.substr(0,2)=="00"){b=b.substr(2)}if(a.substr(0,2)=="00"){a=a.substr(2)}var c=Math.max(b.length,a.length);b=("000000"+b).slice(-c);a=("000000"+a).slice(-c);return b+a}if(b.substr(0,2)=="00"&&(b.length%32)==2){b=b.substr(2)}if(a.substr(0,2)=="00"&&(a.length%32)==2){a=a.substr(2)}if((b.length%32)==30){b="00"+b}if((a.length%32)==30){a="00"+a}if(b.length%32!=0){throw Error("unknown ECDSA sig r length error")}if(a.length%32!=0){throw Error("unknown ECDSA sig s length error")}return b+a};KJUR.crypto.ECDSA.concatSigToASN1Sig=function(a){if(a.length%4!=0){throw Error("unknown ECDSA concatinated r-s sig length error")}var c=a.substr(0,a.length/2);var b=a.substr(a.length/2);return KJUR.crypto.ECDSA.hexRSSigToASN1Sig(c,b)};KJUR.crypto.ECDSA.hexRSSigToASN1Sig=function(b,a){var d=new BigInteger(b,16);var c=new BigInteger(a,16);return KJUR.crypto.ECDSA.biRSSigToASN1Sig(d,c)};KJUR.crypto.ECDSA.biRSSigToASN1Sig=function(f,d){var c=KJUR.asn1;var b=new c.DERInteger({bigint:f});var a=new c.DERInteger({bigint:d});var e=new c.DERSequence({array:[b,a]});return e.getEncodedHex()};KJUR.crypto.ECDSA.getName=function(a){if(a==="2b8104001f"){return"secp192k1"}if(a==="2a8648ce3d030107"){return"secp256r1"}if(a==="2b8104000a"){return"secp256k1"}if(a==="2b81040021"){return"secp224r1"}if(a==="2b81040022"){return"secp384r1"}if(a==="2b81040023"){return"secp521r1"}if("|secp256r1|NIST P-256|P-256|prime256v1|".indexOf(a)!==-1){return"secp256r1"}if("|secp256k1|".indexOf(a)!==-1){return"secp256k1"}if("|secp224r1|NIST P-224|P-224|".indexOf(a)!==-1){return"secp224r1"}if("|secp384r1|NIST P-384|P-384|".indexOf(a)!==-1){return"secp384r1"}if("|secp521r1|NIST P-521|P-521|".indexOf(a)!==-1){return"secp521r1"}return null};
    if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.crypto=="undefined"||!KJUR.crypto){KJUR.crypto={}}KJUR.crypto.ECParameterDB=new function(){var b={};var c={};function a(d){return new BigInteger(d,16)}this.getByName=function(e){var d=e;if(typeof c[d]!="undefined"){d=c[e]}if(typeof b[d]!="undefined"){return b[d]}throw"unregistered EC curve name: "+d};this.regist=function(A,l,o,g,m,e,j,f,k,u,d,x){b[A]={};var s=a(o);var z=a(g);var y=a(m);var t=a(e);var w=a(j);var r=new ECCurveFp(s,z,y);var q=r.decodePointHex("04"+f+k);b[A]["name"]=A;b[A]["keylen"]=l;b[A]["keycharlen"]=Math.ceil(l/8)*2;b[A]["curve"]=r;b[A]["G"]=q;b[A]["n"]=t;b[A]["h"]=w;b[A]["oid"]=d;b[A]["info"]=x;for(var v=0;v<u.length;v++){c[u[v]]=A}}};KJUR.crypto.ECParameterDB.regist("secp128r1",128,"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC","E87579C11079F43DD824993C2CEE5ED3","FFFFFFFE0000000075A30D1B9038A115","1","161FF7528B899B2D0C28607CA52C5B86","CF5AC8395BAFEB13C02DA292DDED7A83",[],"","secp128r1 : SECG curve over a 128 bit prime field");KJUR.crypto.ECParameterDB.regist("secp160k1",160,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73","0","7","0100000000000000000001B8FA16DFAB9ACA16B6B3","1","3B4C382CE37AA192A4019E763036F4F5DD4D7EBB","938CF935318FDCED6BC28286531733C3F03C4FEE",[],"","secp160k1 : SECG curve over a 160 bit prime field");KJUR.crypto.ECParameterDB.regist("secp160r1",160,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC","1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45","0100000000000000000001F4C8F927AED3CA752257","1","4A96B5688EF573284664698968C38BB913CBFC82","23A628553168947D59DCC912042351377AC5FB32",[],"","secp160r1 : SECG curve over a 160 bit prime field");KJUR.crypto.ECParameterDB.regist("secp192k1",192,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37","0","3","FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D","1","DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D","9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D",[]);KJUR.crypto.ECParameterDB.regist("secp192r1",192,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC","64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1","FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831","1","188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012","07192B95FFC8DA78631011ED6B24CDD573F977A11E794811",[]);KJUR.crypto.ECParameterDB.regist("secp224r1",224,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE","B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4","FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D","1","B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21","BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34",[]);KJUR.crypto.ECParameterDB.regist("secp256k1",256,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F","0","7","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141","1","79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798","483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8",[]);KJUR.crypto.ECParameterDB.regist("secp256r1",256,"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC","5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B","FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551","1","6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296","4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5",["NIST P-256","P-256","prime256v1"]);KJUR.crypto.ECParameterDB.regist("secp384r1",384,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC","B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973","1","AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7","3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f",["NIST P-384","P-384"]);KJUR.crypto.ECParameterDB.regist("secp521r1",521,"1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC","051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00","1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409","1","00C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66","011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650",["NIST P-521","P-521"]);
    if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.crypto=="undefined"||!KJUR.crypto){KJUR.crypto={}}KJUR.crypto.DSA=function(){var b=ASN1HEX,e=b.getVbyList,d=b.getVbyListEx,a=b.isASN1HEX,c=BigInteger;this.p=null;this.q=null;this.g=null;this.y=null;this.x=null;this.type="DSA";this.isPrivate=false;this.isPublic=false;this.setPrivate=function(j,i,h,k,f){this.isPrivate=true;this.p=j;this.q=i;this.g=h;this.y=k;this.x=f};this.setPrivateHex=function(i,g,k,n,o){var h,f,j,l,m;h=new BigInteger(i,16);f=new BigInteger(g,16);j=new BigInteger(k,16);if(typeof n==="string"&&n.length>1){l=new BigInteger(n,16)}else{l=null}m=new BigInteger(o,16);this.setPrivate(h,f,j,l,m)};this.setPublic=function(i,h,f,j){this.isPublic=true;this.p=i;this.q=h;this.g=f;this.y=j;this.x=null};this.setPublicHex=function(k,j,i,l){var g,f,m,h;g=new BigInteger(k,16);f=new BigInteger(j,16);m=new BigInteger(i,16);h=new BigInteger(l,16);this.setPublic(g,f,m,h)};this.signWithMessageHash=function(j){var i=this.p;var h=this.q;var m=this.g;var o=this.y;var t=this.x;var l=KJUR.crypto.Util.getRandomBigIntegerMinToMax(BigInteger.ONE.add(BigInteger.ONE),h.subtract(BigInteger.ONE));var u=j.substr(0,h.bitLength()/4);var n=new BigInteger(u,16);var f=(m.modPow(l,i)).mod(h);var w=(l.modInverse(h).multiply(n.add(t.multiply(f)))).mod(h);var v=KJUR.asn1.ASN1Util.jsonToASN1HEX({seq:[{"int":{bigint:f}},{"int":{bigint:w}}]});return v};this.verifyWithMessageHash=function(m,l){var j=this.p;var h=this.q;var o=this.g;var u=this.y;var n=this.parseASN1Signature(l);var f=n[0];var C=n[1];var B=m.substr(0,h.bitLength()/4);var t=new BigInteger(B,16);if(BigInteger.ZERO.compareTo(f)>0||f.compareTo(h)>0){throw"invalid DSA signature"}if(BigInteger.ZERO.compareTo(C)>=0||C.compareTo(h)>0){throw"invalid DSA signature"}var x=C.modInverse(h);var k=t.multiply(x).mod(h);var i=f.multiply(x).mod(h);var A=o.modPow(k,j).multiply(u.modPow(i,j)).mod(j).mod(h);return A.compareTo(f)==0};this.parseASN1Signature=function(f){try{var i=new c(d(f,0,[0],"02"),16);var h=new c(d(f,0,[1],"02"),16);return[i,h]}catch(g){throw new Error("malformed ASN.1 DSA signature")}};this.readPKCS5PrvKeyHex=function(j){var k,i,g,l,m;if(a(j)===false){throw new Error("not ASN.1 hex string")}try{k=d(j,0,[1],"02");i=d(j,0,[2],"02");g=d(j,0,[3],"02");l=d(j,0,[4],"02");m=d(j,0,[5],"02")}catch(f){throw new Error("malformed PKCS#1/5 plain DSA private key")}this.setPrivateHex(k,i,g,l,m)};this.readPKCS8PrvKeyHex=function(j){var k,i,g,l;if(a(j)===false){throw new Error("not ASN.1 hex string")}try{k=d(j,0,[1,1,0],"02");i=d(j,0,[1,1,1],"02");g=d(j,0,[1,1,2],"02");l=d(j,0,[2,0],"02")}catch(f){throw new Error("malformed PKCS#8 plain DSA private key")}this.setPrivateHex(k,i,g,null,l)};this.readPKCS8PubKeyHex=function(j){var k,i,g,l;if(a(j)===false){throw new Error("not ASN.1 hex string")}try{k=d(j,0,[0,1,0],"02");i=d(j,0,[0,1,1],"02");g=d(j,0,[0,1,2],"02");l=d(j,0,[1,0],"02")}catch(f){throw new Error("malformed PKCS#8 DSA public key")}this.setPublicHex(k,i,g,l)};this.readCertPubKeyHex=function(j,m){var k,i,g,l;if(a(j)===false){throw new Error("not ASN.1 hex string")}try{k=d(j,0,[0,5,0,1,0],"02");i=d(j,0,[0,5,0,1,1],"02");g=d(j,0,[0,5,0,1,2],"02");l=d(j,0,[0,5,1,0],"02")}catch(f){throw new Error("malformed X.509 certificate DSA public key")}this.setPublicHex(k,i,g,l)}};
    var KEYUTIL=function(){var d=function(p,r,q){return k(CryptoJS.AES,p,r,q)};var e=function(p,r,q){return k(CryptoJS.TripleDES,p,r,q)};var a=function(p,r,q){return k(CryptoJS.DES,p,r,q)};var k=function(s,x,u,q){var r=CryptoJS.enc.Hex.parse(x);var w=CryptoJS.enc.Hex.parse(u);var p=CryptoJS.enc.Hex.parse(q);var t={};t.key=w;t.iv=p;t.ciphertext=r;var v=s.decrypt(t,w,{iv:p});return CryptoJS.enc.Hex.stringify(v)};var l=function(p,r,q){return g(CryptoJS.AES,p,r,q)};var o=function(p,r,q){return g(CryptoJS.TripleDES,p,r,q)};var f=function(p,r,q){return g(CryptoJS.DES,p,r,q)};var g=function(t,y,v,q){var s=CryptoJS.enc.Hex.parse(y);var x=CryptoJS.enc.Hex.parse(v);var p=CryptoJS.enc.Hex.parse(q);var w=t.encrypt(s,x,{iv:p});var r=CryptoJS.enc.Hex.parse(w.toString());var u=CryptoJS.enc.Base64.stringify(r);return u};var i={"AES-256-CBC":{proc:d,eproc:l,keylen:32,ivlen:16},"AES-192-CBC":{proc:d,eproc:l,keylen:24,ivlen:16},"AES-128-CBC":{proc:d,eproc:l,keylen:16,ivlen:16},"DES-EDE3-CBC":{proc:e,eproc:o,keylen:24,ivlen:8},"DES-CBC":{proc:a,eproc:f,keylen:8,ivlen:8}};var c=function(p){return i[p]["proc"]};var m=function(p){var r=CryptoJS.lib.WordArray.random(p);var q=CryptoJS.enc.Hex.stringify(r);return q};var n=function(v){var w={};var q=v.match(new RegExp("DEK-Info: ([^,]+),([0-9A-Fa-f]+)","m"));if(q){w.cipher=q[1];w.ivsalt=q[2]}var p=v.match(new RegExp("-----BEGIN ([A-Z]+) PRIVATE KEY-----"));if(p){w.type=p[1]}var u=-1;var x=0;if(v.indexOf("\r\n\r\n")!=-1){u=v.indexOf("\r\n\r\n");x=2}if(v.indexOf("\n\n")!=-1){u=v.indexOf("\n\n");x=1}var t=v.indexOf("-----END");if(u!=-1&&t!=-1){var r=v.substring(u+x*2,t-x);r=r.replace(/\s+/g,"");w.data=r}return w};var j=function(q,y,p){var v=p.substring(0,16);var t=CryptoJS.enc.Hex.parse(v);var r=CryptoJS.enc.Utf8.parse(y);var u=i[q]["keylen"]+i[q]["ivlen"];var x="";var w=null;for(;;){var s=CryptoJS.algo.MD5.create();if(w!=null){s.update(w)}s.update(r);s.update(t);w=s.finalize();x=x+CryptoJS.enc.Hex.stringify(w);if(x.length>=u*2){break}}var z={};z.keyhex=x.substr(0,i[q]["keylen"]*2);z.ivhex=x.substr(i[q]["keylen"]*2,i[q]["ivlen"]*2);return z};var b=function(p,v,r,w){var s=CryptoJS.enc.Base64.parse(p);var q=CryptoJS.enc.Hex.stringify(s);var u=i[v]["proc"];var t=u(q,r,w);return t};var h=function(p,s,q,u){var r=i[s]["eproc"];var t=r(p,q,u);return t};return{version:"1.0.0",parsePKCS5PEM:function(p){return n(p)},getKeyAndUnusedIvByPasscodeAndIvsalt:function(q,p,r){return j(q,p,r)},decryptKeyB64:function(p,r,q,s){return b(p,r,q,s)},getDecryptedKeyHex:function(y,x){var q=n(y);var t=q.type;var r=q.cipher;var p=q.ivsalt;var s=q.data;var w=j(r,x,p);var v=w.keyhex;var u=b(s,r,v,p);return u},getEncryptedPKCS5PEMFromPrvKeyHex:function(x,s,A,t,r){var p="";if(typeof t=="undefined"||t==null){t="AES-256-CBC"}if(typeof i[t]=="undefined"){throw new Error("KEYUTIL unsupported algorithm: "+t)}if(typeof r=="undefined"||r==null){var v=i[t]["ivlen"];var u=m(v);r=u.toUpperCase()}var z=j(t,A,r);var y=z.keyhex;var w=h(s,t,y,r);var q=w.replace(/(.{64})/g,"$1\r\n");var p="-----BEGIN "+x+" PRIVATE KEY-----\r\n";p+="Proc-Type: 4,ENCRYPTED\r\n";p+="DEK-Info: "+t+","+r+"\r\n";p+="\r\n";p+=q;p+="\r\n-----END "+x+" PRIVATE KEY-----\r\n";return p},parseHexOfEncryptedPKCS8:function(y){var B=ASN1HEX;var z=B.getChildIdx;var w=B.getV;var t={};var r=z(y,0);if(r.length!=2){throw new Error("malformed format: SEQUENCE(0).items != 2: "+r.length)}t.ciphertext=w(y,r[1]);var A=z(y,r[0]);if(A.length!=2){throw new Error("malformed format: SEQUENCE(0.0).items != 2: "+A.length)}if(w(y,A[0])!="2a864886f70d01050d"){throw new Error("this only supports pkcs5PBES2")}var p=z(y,A[1]);if(A.length!=2){throw new Error("malformed format: SEQUENCE(0.0.1).items != 2: "+p.length)}var q=z(y,p[1]);if(q.length!=2){throw new Error("malformed format: SEQUENCE(0.0.1.1).items != 2: "+q.length)}if(w(y,q[0])!="2a864886f70d0307"){throw"this only supports TripleDES"}t.encryptionSchemeAlg="TripleDES";t.encryptionSchemeIV=w(y,q[1]);var s=z(y,p[0]);if(s.length!=2){throw new Error("malformed format: SEQUENCE(0.0.1.0).items != 2: "+s.length)}if(w(y,s[0])!="2a864886f70d01050c"){throw new Error("this only supports pkcs5PBKDF2")}var x=z(y,s[1]);if(x.length<2){throw new Error("malformed format: SEQUENCE(0.0.1.0.1).items < 2: "+x.length)}t.pbkdf2Salt=w(y,x[0]);var u=w(y,x[1]);try{t.pbkdf2Iter=parseInt(u,16)}catch(v){throw new Error("malformed format pbkdf2Iter: "+u)}return t},getPBKDF2KeyHexFromParam:function(u,p){var t=CryptoJS.enc.Hex.parse(u.pbkdf2Salt);var q=u.pbkdf2Iter;var s=CryptoJS.PBKDF2(p,t,{keySize:192/32,iterations:q});var r=CryptoJS.enc.Hex.stringify(s);return r},_getPlainPKCS8HexFromEncryptedPKCS8PEM:function(x,y){var r=pemtohex(x,"ENCRYPTED PRIVATE KEY");var p=this.parseHexOfEncryptedPKCS8(r);var u=KEYUTIL.getPBKDF2KeyHexFromParam(p,y);var v={};v.ciphertext=CryptoJS.enc.Hex.parse(p.ciphertext);var t=CryptoJS.enc.Hex.parse(u);var s=CryptoJS.enc.Hex.parse(p.encryptionSchemeIV);var w=CryptoJS.TripleDES.decrypt(v,t,{iv:s});var q=CryptoJS.enc.Hex.stringify(w);return q},getKeyFromEncryptedPKCS8PEM:function(s,q){var p=this._getPlainPKCS8HexFromEncryptedPKCS8PEM(s,q);var r=this.getKeyFromPlainPrivatePKCS8Hex(p);return r},parsePlainPrivatePKCS8Hex:function(s){var v=ASN1HEX;var u=v.getChildIdx;var t=v.getV;var q={};q.algparam=null;if(s.substr(0,2)!="30"){throw new Error("malformed plain PKCS8 private key(code:001)")}var r=u(s,0);if(r.length<3){throw new Error("malformed plain PKCS8 private key(code:002)")}if(s.substr(r[1],2)!="30"){throw new Error("malformed PKCS8 private key(code:003)")}var p=u(s,r[1]);if(p.length!=2){throw new Error("malformed PKCS8 private key(code:004)")}if(s.substr(p[0],2)!="06"){throw new Error("malformed PKCS8 private key(code:005)")}q.algoid=t(s,p[0]);if(s.substr(p[1],2)=="06"){q.algparam=t(s,p[1])}if(s.substr(r[2],2)!="04"){throw new Error("malformed PKCS8 private key(code:006)")}q.keyidx=v.getVidx(s,r[2]);return q},getKeyFromPlainPrivatePKCS8PEM:function(q){var p=pemtohex(q,"PRIVATE KEY");var r=this.getKeyFromPlainPrivatePKCS8Hex(p);return r},getKeyFromPlainPrivatePKCS8Hex:function(p){var q=this.parsePlainPrivatePKCS8Hex(p);var r;if(q.algoid=="2a864886f70d010101"){r=new RSAKey()}else{if(q.algoid=="2a8648ce380401"){r=new KJUR.crypto.DSA()}else{if(q.algoid=="2a8648ce3d0201"){r=new KJUR.crypto.ECDSA()}else{throw new Error("unsupported private key algorithm")}}}r.readPKCS8PrvKeyHex(p);return r},_getKeyFromPublicPKCS8Hex:function(q){var p;var r=ASN1HEX.getVbyList(q,0,[0,0],"06");if(r==="2a864886f70d010101"){p=new RSAKey()}else{if(r==="2a8648ce380401"){p=new KJUR.crypto.DSA()}else{if(r==="2a8648ce3d0201"){p=new KJUR.crypto.ECDSA()}else{throw new Error("unsupported PKCS#8 public key hex")}}}p.readPKCS8PubKeyHex(q);return p},parsePublicRawRSAKeyHex:function(r){var u=ASN1HEX;var t=u.getChildIdx;var s=u.getV;var p={};if(r.substr(0,2)!="30"){throw new Error("malformed RSA key(code:001)")}var q=t(r,0);if(q.length!=2){throw new Error("malformed RSA key(code:002)")}if(r.substr(q[0],2)!="02"){throw new Error("malformed RSA key(code:003)")}p.n=s(r,q[0]);if(r.substr(q[1],2)!="02"){throw new Error("malformed RSA key(code:004)")}p.e=s(r,q[1]);return p},parsePublicPKCS8Hex:function(t){var v=ASN1HEX;var u=v.getChildIdx;var s=v.getV;var q={};q.algparam=null;var r=u(t,0);if(r.length!=2){throw new Error("outer DERSequence shall have 2 elements: "+r.length)}var w=r[0];if(t.substr(w,2)!="30"){throw new Error("malformed PKCS8 public key(code:001)")}var p=u(t,w);if(p.length!=2){throw new Error("malformed PKCS8 public key(code:002)")}if(t.substr(p[0],2)!="06"){throw new Error("malformed PKCS8 public key(code:003)")}q.algoid=s(t,p[0]);if(t.substr(p[1],2)=="06"){q.algparam=s(t,p[1])}else{if(t.substr(p[1],2)=="30"){q.algparam={};q.algparam.p=v.getVbyList(t,p[1],[0],"02");q.algparam.q=v.getVbyList(t,p[1],[1],"02");q.algparam.g=v.getVbyList(t,p[1],[2],"02")}}if(t.substr(r[1],2)!="03"){throw new Error("malformed PKCS8 public key(code:004)")}q.key=s(t,r[1]).substr(2);return q},}}();KEYUTIL.getKey=function(l,k,n){var G=ASN1HEX,L=G.getChildIdx,v=G.getV,d=G.getVbyList,c=KJUR.crypto,i=c.ECDSA,C=c.DSA,w=RSAKey,M=pemtohex,F=KEYUTIL;if(typeof w!="undefined"&&l instanceof w){return l}if(typeof i!="undefined"&&l instanceof i){return l}if(typeof C!="undefined"&&l instanceof C){return l}if(l.curve!==undefined&&l.xy!==undefined&&l.d===undefined){return new i({pub:l.xy,curve:l.curve})}if(l.curve!==undefined&&l.d!==undefined){return new i({prv:l.d,curve:l.curve})}if(l.kty===undefined&&l.n!==undefined&&l.e!==undefined&&l.d===undefined){var P=new w();P.setPublic(l.n,l.e);return P}if(l.kty===undefined&&l.n!==undefined&&l.e!==undefined&&l.d!==undefined&&l.p!==undefined&&l.q!==undefined&&l.dp!==undefined&&l.dq!==undefined&&l.co!==undefined&&l.qi===undefined){var P=new w();P.setPrivateEx(l.n,l.e,l.d,l.p,l.q,l.dp,l.dq,l.co);return P}if(l.kty===undefined&&l.n!==undefined&&l.e!==undefined&&l.d!==undefined&&l.p===undefined){var P=new w();P.setPrivate(l.n,l.e,l.d);return P}if(l.p!==undefined&&l.q!==undefined&&l.g!==undefined&&l.y!==undefined&&l.x===undefined){var P=new C();P.setPublic(l.p,l.q,l.g,l.y);return P}if(l.p!==undefined&&l.q!==undefined&&l.g!==undefined&&l.y!==undefined&&l.x!==undefined){var P=new C();P.setPrivate(l.p,l.q,l.g,l.y,l.x);return P}if(l.kty==="RSA"&&l.n!==undefined&&l.e!==undefined&&l.d===undefined){var P=new w();P.setPublic(b64utohex(l.n),b64utohex(l.e));return P}if(l.kty==="RSA"&&l.n!==undefined&&l.e!==undefined&&l.d!==undefined&&l.p!==undefined&&l.q!==undefined&&l.dp!==undefined&&l.dq!==undefined&&l.qi!==undefined){var P=new w();P.setPrivateEx(b64utohex(l.n),b64utohex(l.e),b64utohex(l.d),b64utohex(l.p),b64utohex(l.q),b64utohex(l.dp),b64utohex(l.dq),b64utohex(l.qi));return P}if(l.kty==="RSA"&&l.n!==undefined&&l.e!==undefined&&l.d!==undefined){var P=new w();P.setPrivate(b64utohex(l.n),b64utohex(l.e),b64utohex(l.d));return P}if(l.kty==="EC"&&l.crv!==undefined&&l.x!==undefined&&l.y!==undefined&&l.d===undefined){var j=new i({curve:l.crv});var t=j.ecparams.keycharlen;var B=("0000000000"+b64utohex(l.x)).slice(-t);var z=("0000000000"+b64utohex(l.y)).slice(-t);var u="04"+B+z;j.setPublicKeyHex(u);return j}if(l.kty==="EC"&&l.crv!==undefined&&l.x!==undefined&&l.y!==undefined&&l.d!==undefined){var j=new i({curve:l.crv});var t=j.ecparams.keycharlen;var B=("0000000000"+b64utohex(l.x)).slice(-t);var z=("0000000000"+b64utohex(l.y)).slice(-t);var u="04"+B+z;var b=("0000000000"+b64utohex(l.d)).slice(-t);j.setPublicKeyHex(u);j.setPrivateKeyHex(b);return j}if(n==="pkcs5prv"){var J=l,G=ASN1HEX,N,P;N=L(J,0);if(N.length===9){P=new w();P.readPKCS5PrvKeyHex(J)}else{if(N.length===6){P=new C();P.readPKCS5PrvKeyHex(J)}else{if(N.length>2&&J.substr(N[1],2)==="04"){P=new i();P.readPKCS5PrvKeyHex(J)}else{throw new Error("unsupported PKCS#1/5 hexadecimal key")}}}return P}if(n==="pkcs8prv"){var P=F.getKeyFromPlainPrivatePKCS8Hex(l);return P}if(n==="pkcs8pub"){return F._getKeyFromPublicPKCS8Hex(l)}if(n==="x509pub"){return X509.getPublicKeyFromCertHex(l)}if(l.indexOf("-END CERTIFICATE-",0)!=-1||l.indexOf("-END X509 CERTIFICATE-",0)!=-1||l.indexOf("-END TRUSTED CERTIFICATE-",0)!=-1){return X509.getPublicKeyFromCertPEM(l)}if(l.indexOf("-END PUBLIC KEY-")!=-1){var O=pemtohex(l,"PUBLIC KEY");return F._getKeyFromPublicPKCS8Hex(O)}if(l.indexOf("-END RSA PRIVATE KEY-")!=-1&&l.indexOf("4,ENCRYPTED")==-1){var m=M(l,"RSA PRIVATE KEY");return F.getKey(m,null,"pkcs5prv")}if(l.indexOf("-END DSA PRIVATE KEY-")!=-1&&l.indexOf("4,ENCRYPTED")==-1){var I=M(l,"DSA PRIVATE KEY");var E=d(I,0,[1],"02");var D=d(I,0,[2],"02");var K=d(I,0,[3],"02");var r=d(I,0,[4],"02");var s=d(I,0,[5],"02");var P=new C();P.setPrivate(new BigInteger(E,16),new BigInteger(D,16),new BigInteger(K,16),new BigInteger(r,16),new BigInteger(s,16));return P}if(l.indexOf("-END EC PRIVATE KEY-")!=-1&&l.indexOf("4,ENCRYPTED")==-1){var m=M(l,"EC PRIVATE KEY");return F.getKey(m,null,"pkcs5prv")}if(l.indexOf("-END PRIVATE KEY-")!=-1){return F.getKeyFromPlainPrivatePKCS8PEM(l)}if(l.indexOf("-END RSA PRIVATE KEY-")!=-1&&l.indexOf("4,ENCRYPTED")!=-1){var o=F.getDecryptedKeyHex(l,k);var H=new RSAKey();H.readPKCS5PrvKeyHex(o);return H}if(l.indexOf("-END EC PRIVATE KEY-")!=-1&&l.indexOf("4,ENCRYPTED")!=-1){var I=F.getDecryptedKeyHex(l,k);var P=d(I,0,[1],"04");var f=d(I,0,[2,0],"06");var A=d(I,0,[3,0],"03").substr(2);var e="";if(KJUR.crypto.OID.oidhex2name[f]!==undefined){e=KJUR.crypto.OID.oidhex2name[f]}else{throw new Error("undefined OID(hex) in KJUR.crypto.OID: "+f)}var j=new i({curve:e});j.setPublicKeyHex(A);j.setPrivateKeyHex(P);j.isPublic=false;return j}if(l.indexOf("-END DSA PRIVATE KEY-")!=-1&&l.indexOf("4,ENCRYPTED")!=-1){var I=F.getDecryptedKeyHex(l,k);var E=d(I,0,[1],"02");var D=d(I,0,[2],"02");var K=d(I,0,[3],"02");var r=d(I,0,[4],"02");var s=d(I,0,[5],"02");var P=new C();P.setPrivate(new BigInteger(E,16),new BigInteger(D,16),new BigInteger(K,16),new BigInteger(r,16),new BigInteger(s,16));return P}if(l.indexOf("-END ENCRYPTED PRIVATE KEY-")!=-1){return F.getKeyFromEncryptedPKCS8PEM(l,k)}throw new Error("not supported argument")};KEYUTIL.generateKeypair=function(a,c){if(a=="RSA"){var b=c;var h=new RSAKey();h.generate(b,"10001");h.isPrivate=true;h.isPublic=true;var f=new RSAKey();var e=h.n.toString(16);var i=h.e.toString(16);f.setPublic(e,i);f.isPrivate=false;f.isPublic=true;var k={};k.prvKeyObj=h;k.pubKeyObj=f;return k}else{if(a=="EC"){var d=c;var g=new KJUR.crypto.ECDSA({curve:d});var j=g.generateKeyPairHex();var h=new KJUR.crypto.ECDSA({curve:d});h.setPublicKeyHex(j.ecpubhex);h.setPrivateKeyHex(j.ecprvhex);h.isPrivate=true;h.isPublic=false;var f=new KJUR.crypto.ECDSA({curve:d});f.setPublicKeyHex(j.ecpubhex);f.isPrivate=false;f.isPublic=true;var k={};k.prvKeyObj=h;k.pubKeyObj=f;return k}else{throw new Error("unknown algorithm: "+a)}}};KEYUTIL.getPEM=function(b,D,y,m,q,j){var F=KJUR,k=F.asn1,z=k.DERObjectIdentifier,f=k.DERInteger,l=k.ASN1Util.newObject,a=k.x509,C=a.SubjectPublicKeyInfo,e=F.crypto,u=e.DSA,r=e.ECDSA,n=RSAKey;function A(s){var G=l({seq:[{"int":0},{"int":{bigint:s.n}},{"int":s.e},{"int":{bigint:s.d}},{"int":{bigint:s.p}},{"int":{bigint:s.q}},{"int":{bigint:s.dmp1}},{"int":{bigint:s.dmq1}},{"int":{bigint:s.coeff}}]});return G}function B(G){var s=l({seq:[{"int":1},{octstr:{hex:G.prvKeyHex}},{tag:["a0",true,{oid:{name:G.curveName}}]},{tag:["a1",true,{bitstr:{hex:"00"+G.pubKeyHex}}]}]});return s}function x(s){var G=l({seq:[{"int":0},{"int":{bigint:s.p}},{"int":{bigint:s.q}},{"int":{bigint:s.g}},{"int":{bigint:s.y}},{"int":{bigint:s.x}}]});return G}if(((n!==undefined&&b instanceof n)||(u!==undefined&&b instanceof u)||(r!==undefined&&b instanceof r))&&b.isPublic==true&&(D===undefined||D=="PKCS8PUB")){var E=new C(b);var w=E.getEncodedHex();return hextopem(w,"PUBLIC KEY")}if(D=="PKCS1PRV"&&n!==undefined&&b instanceof n&&(y===undefined||y==null)&&b.isPrivate==true){var E=A(b);var w=E.getEncodedHex();return hextopem(w,"RSA PRIVATE KEY")}if(D=="PKCS1PRV"&&r!==undefined&&b instanceof r&&(y===undefined||y==null)&&b.isPrivate==true){var i=new z({name:b.curveName});var v=i.getEncodedHex();var h=B(b);var t=h.getEncodedHex();var p="";p+=hextopem(v,"EC PARAMETERS");p+=hextopem(t,"EC PRIVATE KEY");return p}if(D=="PKCS1PRV"&&u!==undefined&&b instanceof u&&(y===undefined||y==null)&&b.isPrivate==true){var E=x(b);var w=E.getEncodedHex();return hextopem(w,"DSA PRIVATE KEY")}if(D=="PKCS5PRV"&&n!==undefined&&b instanceof n&&(y!==undefined&&y!=null)&&b.isPrivate==true){var E=A(b);var w=E.getEncodedHex();if(m===undefined){m="DES-EDE3-CBC"}return this.getEncryptedPKCS5PEMFromPrvKeyHex("RSA",w,y,m,j)}if(D=="PKCS5PRV"&&r!==undefined&&b instanceof r&&(y!==undefined&&y!=null)&&b.isPrivate==true){var E=B(b);var w=E.getEncodedHex();if(m===undefined){m="DES-EDE3-CBC"}return this.getEncryptedPKCS5PEMFromPrvKeyHex("EC",w,y,m,j)}if(D=="PKCS5PRV"&&u!==undefined&&b instanceof u&&(y!==undefined&&y!=null)&&b.isPrivate==true){var E=x(b);var w=E.getEncodedHex();if(m===undefined){m="DES-EDE3-CBC"}return this.getEncryptedPKCS5PEMFromPrvKeyHex("DSA",w,y,m,j)}var o=function(G,s){var I=c(G,s);var H=new l({seq:[{seq:[{oid:{name:"pkcs5PBES2"}},{seq:[{seq:[{oid:{name:"pkcs5PBKDF2"}},{seq:[{octstr:{hex:I.pbkdf2Salt}},{"int":I.pbkdf2Iter}]}]},{seq:[{oid:{name:"des-EDE3-CBC"}},{octstr:{hex:I.encryptionSchemeIV}}]}]}]},{octstr:{hex:I.ciphertext}}]});return H.getEncodedHex()};var c=function(N,O){var H=100;var M=CryptoJS.lib.WordArray.random(8);var L="DES-EDE3-CBC";var s=CryptoJS.lib.WordArray.random(8);var I=CryptoJS.PBKDF2(O,M,{keySize:192/32,iterations:H});var J=CryptoJS.enc.Hex.parse(N);var K=CryptoJS.TripleDES.encrypt(J,I,{iv:s})+"";var G={};G.ciphertext=K;G.pbkdf2Salt=CryptoJS.enc.Hex.stringify(M);G.pbkdf2Iter=H;G.encryptionSchemeAlg=L;G.encryptionSchemeIV=CryptoJS.enc.Hex.stringify(s);return G};if(D=="PKCS8PRV"&&n!=undefined&&b instanceof n&&b.isPrivate==true){var g=A(b);var d=g.getEncodedHex();var E=l({seq:[{"int":0},{seq:[{oid:{name:"rsaEncryption"}},{"null":true}]},{octstr:{hex:d}}]});var w=E.getEncodedHex();if(y===undefined||y==null){return hextopem(w,"PRIVATE KEY")}else{var t=o(w,y);return hextopem(t,"ENCRYPTED PRIVATE KEY")}}if(D=="PKCS8PRV"&&r!==undefined&&b instanceof r&&b.isPrivate==true){var g=new l({seq:[{"int":1},{octstr:{hex:b.prvKeyHex}},{tag:["a1",true,{bitstr:{hex:"00"+b.pubKeyHex}}]}]});var d=g.getEncodedHex();var E=l({seq:[{"int":0},{seq:[{oid:{name:"ecPublicKey"}},{oid:{name:b.curveName}}]},{octstr:{hex:d}}]});var w=E.getEncodedHex();if(y===undefined||y==null){return hextopem(w,"PRIVATE KEY")}else{var t=o(w,y);return hextopem(t,"ENCRYPTED PRIVATE KEY")}}if(D=="PKCS8PRV"&&u!==undefined&&b instanceof u&&b.isPrivate==true){var g=new f({bigint:b.x});var d=g.getEncodedHex();var E=l({seq:[{"int":0},{seq:[{oid:{name:"dsa"}},{seq:[{"int":{bigint:b.p}},{"int":{bigint:b.q}},{"int":{bigint:b.g}}]}]},{octstr:{hex:d}}]});var w=E.getEncodedHex();if(y===undefined||y==null){return hextopem(w,"PRIVATE KEY")}else{var t=o(w,y);return hextopem(t,"ENCRYPTED PRIVATE KEY")}}throw new Error("unsupported object nor format")};KEYUTIL.getKeyFromCSRPEM=function(b){var a=pemtohex(b,"CERTIFICATE REQUEST");var c=KEYUTIL.getKeyFromCSRHex(a);return c};KEYUTIL.getKeyFromCSRHex=function(a){var c=KEYUTIL.parseCSRHex(a);var b=KEYUTIL.getKey(c.p8pubkeyhex,null,"pkcs8pub");return b};KEYUTIL.parseCSRHex=function(d){var i=ASN1HEX;var f=i.getChildIdx;var c=i.getTLV;var b={};var g=d;if(g.substr(0,2)!="30"){throw new Error("malformed CSR(code:001)")}var e=f(g,0);if(e.length<1){throw new Error("malformed CSR(code:002)")}if(g.substr(e[0],2)!="30"){throw new Error("malformed CSR(code:003)")}var a=f(g,e[0]);if(a.length<3){throw new Error("malformed CSR(code:004)")}b.p8pubkeyhex=c(g,a[2]);return b};KEYUTIL.getKeyID=function(f){var c=KEYUTIL;var e=ASN1HEX;if(typeof f==="string"&&f.indexOf("BEGIN ")!=-1){f=c.getKey(f)}var d=pemtohex(c.getPEM(f));var b=e.getIdxbyList(d,0,[1]);var a=e.getV(d,b).substring(2);return KJUR.crypto.Util.hashHex(a,"sha1")};KEYUTIL.getJWK=function(d,h,g,b,f){var i;var k={};var e;var c=KJUR.crypto.Util.hashHex;if(typeof d=="string"){i=KEYUTIL.getKey(d);if(d.indexOf("CERTIFICATE")!=-1){e=pemtohex(d)}}else{if(typeof d=="object"){if(d instanceof X509){i=d.getPublicKey();e=d.hex}else{i=d}}else{throw new Error("unsupported keyinfo type")}}if(i instanceof RSAKey&&i.isPrivate){k.kty="RSA";k.n=hextob64u(i.n.toString(16));k.e=hextob64u(i.e.toString(16));k.d=hextob64u(i.d.toString(16));k.p=hextob64u(i.p.toString(16));k.q=hextob64u(i.q.toString(16));k.dp=hextob64u(i.dmp1.toString(16));k.dq=hextob64u(i.dmq1.toString(16));k.qi=hextob64u(i.coeff.toString(16))}else{if(i instanceof RSAKey&&i.isPublic){k.kty="RSA";k.n=hextob64u(i.n.toString(16));k.e=hextob64u(i.e.toString(16))}else{if(i instanceof KJUR.crypto.ECDSA&&i.isPrivate){var a=i.getShortNISTPCurveName();if(a!=="P-256"&&a!=="P-384"&&a!=="P-521"){throw new Error("unsupported curve name for JWT: "+a)}var j=i.getPublicKeyXYHex();k.kty="EC";k.crv=a;k.x=hextob64u(j.x);k.y=hextob64u(j.y);k.d=hextob64u(i.prvKeyHex)}else{if(i instanceof KJUR.crypto.ECDSA&&i.isPublic){var a=i.getShortNISTPCurveName();if(a!=="P-256"&&a!=="P-384"&&a!=="P-521"){throw new Error("unsupported curve name for JWT: "+a)}var j=i.getPublicKeyXYHex();k.kty="EC";k.crv=a;k.x=hextob64u(j.x);k.y=hextob64u(j.y)}}}}if(k.kty==undefined){throw new Error("unsupported keyinfo")}if((!i.isPrivate)&&h!=true){k.kid=KJUR.jws.JWS.getJWKthumbprint(k)}if(e!=undefined&&g!=true){k.x5c=[hex2b64(e)]}if(e!=undefined&&b!=true){k.x5t=b64tob64u(hex2b64(c(e,"sha1")))}if(e!=undefined&&f!=true){k["x5t#S256"]=b64tob64u(hex2b64(c(e,"sha256")))}return k};KEYUTIL.getJWKFromKey=function(a){return KEYUTIL.getJWK(a,true,true,true,true)};
    RSAKey.getPosArrayOfChildrenFromHex=function(a){return ASN1HEX.getChildIdx(a,0)};RSAKey.getHexValueArrayOfChildrenFromHex=function(f){var n=ASN1HEX;var i=n.getV;var k=RSAKey.getPosArrayOfChildrenFromHex(f);var e=i(f,k[0]);var j=i(f,k[1]);var b=i(f,k[2]);var c=i(f,k[3]);var h=i(f,k[4]);var g=i(f,k[5]);var m=i(f,k[6]);var l=i(f,k[7]);var d=i(f,k[8]);var k=new Array();k.push(e,j,b,c,h,g,m,l,d);return k};RSAKey.prototype.readPrivateKeyFromPEMString=function(d){var c=pemtohex(d);var b=RSAKey.getHexValueArrayOfChildrenFromHex(c);this.setPrivateEx(b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8])};RSAKey.prototype.readPKCS5PrvKeyHex=function(c){var b=RSAKey.getHexValueArrayOfChildrenFromHex(c);this.setPrivateEx(b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8])};RSAKey.prototype.readPKCS8PrvKeyHex=function(e){var c,i,k,b,a,f,d,j;var m=ASN1HEX;var l=m.getVbyListEx;if(m.isASN1HEX(e)===false){throw new Error("not ASN.1 hex string")}try{c=l(e,0,[2,0,1],"02");i=l(e,0,[2,0,2],"02");k=l(e,0,[2,0,3],"02");b=l(e,0,[2,0,4],"02");a=l(e,0,[2,0,5],"02");f=l(e,0,[2,0,6],"02");d=l(e,0,[2,0,7],"02");j=l(e,0,[2,0,8],"02")}catch(g){throw new Error("malformed PKCS#8 plain RSA private key")}this.setPrivateEx(c,i,k,b,a,f,d,j)};RSAKey.prototype.readPKCS5PubKeyHex=function(c){var e=ASN1HEX;var b=e.getV;if(e.isASN1HEX(c)===false){throw new Error("keyHex is not ASN.1 hex string")}var a=e.getChildIdx(c,0);if(a.length!==2||c.substr(a[0],2)!=="02"||c.substr(a[1],2)!=="02"){throw new Error("wrong hex for PKCS#5 public key")}var f=b(c,a[0]);var d=b(c,a[1]);this.setPublic(f,d)};RSAKey.prototype.readPKCS8PubKeyHex=function(b){var c=ASN1HEX;if(c.isASN1HEX(b)===false){throw new Error("not ASN.1 hex string")}if(c.getTLVbyListEx(b,0,[0,0])!=="06092a864886f70d010101"){throw new Error("not PKCS8 RSA public key")}var a=c.getTLVbyListEx(b,0,[1,0]);this.readPKCS5PubKeyHex(a)};RSAKey.prototype.readCertPubKeyHex=function(b,d){var a,c;a=new X509();a.readCertHex(b);c=a.getPublicKeyHex();this.readPKCS8PubKeyHex(c)};
    var _RE_HEXDECONLY=new RegExp("[^0-9a-f]","gi");function _rsasign_getHexPaddedDigestInfoForString(d,e,a){var b=function(f){return KJUR.crypto.Util.hashString(f,a)};var c=b(d);return KJUR.crypto.Util.getPaddedDigestInfoHex(c,a,e)}function _zeroPaddingOfSignature(e,d){var c="";var a=d/4-e.length;for(var b=0;b<a;b++){c=c+"0"}return c+e}RSAKey.prototype.sign=function(d,a){var b=function(e){return KJUR.crypto.Util.hashString(e,a)};var c=b(d);return this.signWithMessageHash(c,a)};RSAKey.prototype.signWithMessageHash=function(e,c){var f=KJUR.crypto.Util.getPaddedDigestInfoHex(e,c,this.n.bitLength());var b=parseBigInt(f,16);var d=this.doPrivate(b);var a=d.toString(16);return _zeroPaddingOfSignature(a,this.n.bitLength())};function pss_mgf1_str(c,a,e){var b="",d=0;while(b.length<a){b+=hextorstr(e(rstrtohex(c+String.fromCharCode.apply(String,[(d&4278190080)>>24,(d&16711680)>>16,(d&65280)>>8,d&255]))));d+=1}return b}RSAKey.prototype.signPSS=function(e,a,d){var c=function(f){return KJUR.crypto.Util.hashHex(f,a)};var b=c(rstrtohex(e));if(d===undefined){d=-1}return this.signWithMessageHashPSS(b,a,d)};RSAKey.prototype.signWithMessageHashPSS=function(l,a,k){var b=hextorstr(l);var g=b.length;var m=this.n.bitLength()-1;var c=Math.ceil(m/8);var d;var o=function(i){return KJUR.crypto.Util.hashHex(i,a)};if(k===-1||k===undefined){k=g}else{if(k===-2){k=c-g-2}else{if(k<-2){throw new Error("invalid salt length")}}}if(c<(g+k+2)){throw new Error("data too long")}var f="";if(k>0){f=new Array(k);new SecureRandom().nextBytes(f);f=String.fromCharCode.apply(String,f)}var n=hextorstr(o(rstrtohex("\x00\x00\x00\x00\x00\x00\x00\x00"+b+f)));var j=[];for(d=0;d<c-k-g-2;d+=1){j[d]=0}var e=String.fromCharCode.apply(String,j)+"\x01"+f;var h=pss_mgf1_str(n,e.length,o);var q=[];for(d=0;d<e.length;d+=1){q[d]=e.charCodeAt(d)^h.charCodeAt(d)}var p=(65280>>(8*c-m))&255;q[0]&=~p;for(d=0;d<g;d++){q.push(n.charCodeAt(d))}q.push(188);return _zeroPaddingOfSignature(this.doPrivate(new BigInteger(q)).toString(16),this.n.bitLength())};function _rsasign_getDecryptSignatureBI(a,d,c){var b=new RSAKey();b.setPublic(d,c);var e=b.doPublic(a);return e}function _rsasign_getHexDigestInfoFromSig(a,c,b){var e=_rsasign_getDecryptSignatureBI(a,c,b);var d=e.toString(16).replace(/^1f+00/,"");return d}function _rsasign_getAlgNameAndHashFromHexDisgestInfo(f){for(var e in KJUR.crypto.Util.DIGESTINFOHEAD){var d=KJUR.crypto.Util.DIGESTINFOHEAD[e];var b=d.length;if(f.substring(0,b)==d){var c=[e,f.substring(b)];return c}}return[]}RSAKey.prototype.verify=function(f,l){l=l.toLowerCase();if(l.match(/^[0-9a-f]+$/)==null){return false}var b=parseBigInt(l,16);var k=this.n.bitLength();if(b.bitLength()>k){return false}var j=this.doPublic(b);var i=j.toString(16);if(i.length+3!=k/4){return false}var e=i.replace(/^1f+00/,"");var g=_rsasign_getAlgNameAndHashFromHexDisgestInfo(e);if(g.length==0){return false}var d=g[0];var h=g[1];var a=function(m){return KJUR.crypto.Util.hashString(m,d)};var c=a(f);return(h==c)};RSAKey.prototype.verifyWithMessageHash=function(e,a){if(a.length!=Math.ceil(this.n.bitLength()/4)){return false}var b=parseBigInt(a,16);if(b.bitLength()>this.n.bitLength()){return 0}var h=this.doPublic(b);var g=h.toString(16).replace(/^1f+00/,"");var c=_rsasign_getAlgNameAndHashFromHexDisgestInfo(g);if(c.length==0){return false}var d=c[0];var f=c[1];return(f==e)};RSAKey.prototype.verifyPSS=function(c,b,a,f){var e=function(g){return KJUR.crypto.Util.hashHex(g,a)};var d=e(rstrtohex(c));if(f===undefined){f=-1}return this.verifyWithMessageHashPSS(d,b,a,f)};RSAKey.prototype.verifyWithMessageHashPSS=function(f,s,l,c){if(s.length!=Math.ceil(this.n.bitLength()/4)){return false}var k=new BigInteger(s,16);var r=function(i){return KJUR.crypto.Util.hashHex(i,l)};var j=hextorstr(f);var h=j.length;var g=this.n.bitLength()-1;var m=Math.ceil(g/8);var q;if(c===-1||c===undefined){c=h}else{if(c===-2){c=m-h-2}else{if(c<-2){throw new Error("invalid salt length")}}}if(m<(h+c+2)){throw new Error("data too long")}var a=this.doPublic(k).toByteArray();for(q=0;q<a.length;q+=1){a[q]&=255}while(a.length<m){a.unshift(0)}if(a[m-1]!==188){throw new Error("encoded message does not end in 0xbc")}a=String.fromCharCode.apply(String,a);var d=a.substr(0,m-h-1);var e=a.substr(d.length,h);var p=(65280>>(8*m-g))&255;if((d.charCodeAt(0)&p)!==0){throw new Error("bits beyond keysize not zero")}var n=pss_mgf1_str(e,d.length,r);var o=[];for(q=0;q<d.length;q+=1){o[q]=d.charCodeAt(q)^n.charCodeAt(q)}o[0]&=~p;var b=m-h-c-2;for(q=0;q<b;q+=1){if(o[q]!==0){throw new Error("leftmost octets not zero")}}if(o[b]!==1){throw new Error("0x01 marker not found")}return e===hextorstr(r(rstrtohex("\x00\x00\x00\x00\x00\x00\x00\x00"+j+String.fromCharCode.apply(String,o.slice(-c)))))};RSAKey.SALT_LEN_HLEN=-1;RSAKey.SALT_LEN_MAX=-2;RSAKey.SALT_LEN_RECOVER=-2;
    function X509(q){var j=ASN1HEX,n=j.getChildIdx,g=j.getV,b=j.getTLV,c=j.getVbyList,k=j.getVbyListEx,a=j.getTLVbyList,l=j.getTLVbyListEx,h=j.getIdxbyList,e=j.getIdxbyListEx,i=j.getVidx,s=j.getInt,p=j.oidname,m=j.hextooidstr,d=X509,r=pemtohex,f;try{f=KJUR.asn1.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV}catch(o){}this.HEX2STAG={"0c":"utf8","13":"prn","16":"ia5","1a":"vis","1e":"bmp"};this.hex=null;this.version=0;this.foffset=0;this.aExtInfo=null;this.getVersion=function(){if(this.hex===null||this.version!==0){return this.version}var u=a(this.hex,0,[0,0]);if(u.substr(0,2)=="a0"){var v=a(u,0,[0]);var t=s(v,0);if(t<0||2<t){throw new Error("malformed version field")}this.version=t+1;return this.version}else{this.version=1;this.foffset=-1;return 1}};this.getSerialNumberHex=function(){return k(this.hex,0,[0,0],"02")};this.getSignatureAlgorithmField=function(){var t=l(this.hex,0,[0,1]);return this.getAlgorithmIdentifierName(t)};this.getAlgorithmIdentifierName=function(t){for(var u in f){if(t===f[u]){return u}}return p(k(t,0,[0],"06"))};this.getIssuer=function(){return this.getX500Name(this.getIssuerHex())};this.getIssuerHex=function(){return a(this.hex,0,[0,3+this.foffset],"30")};this.getIssuerString=function(){var t=this.getIssuer();return t.str};this.getSubject=function(){return this.getX500Name(this.getSubjectHex())};this.getSubjectHex=function(){return a(this.hex,0,[0,5+this.foffset],"30")};this.getSubjectString=function(){var t=this.getSubject();return t.str};this.getNotBefore=function(){var t=c(this.hex,0,[0,4+this.foffset,0]);t=t.replace(/(..)/g,"%$1");t=decodeURIComponent(t);return t};this.getNotAfter=function(){var t=c(this.hex,0,[0,4+this.foffset,1]);t=t.replace(/(..)/g,"%$1");t=decodeURIComponent(t);return t};this.getPublicKeyHex=function(){return j.getTLVbyList(this.hex,0,[0,6+this.foffset],"30")};this.getPublicKeyIdx=function(){return h(this.hex,0,[0,6+this.foffset],"30")};this.getPublicKeyContentIdx=function(){var t=this.getPublicKeyIdx();return h(this.hex,t,[1,0],"30")};this.getPublicKey=function(){return KEYUTIL.getKey(this.getPublicKeyHex(),null,"pkcs8pub")};this.getSignatureAlgorithmName=function(){var t=a(this.hex,0,[1],"30");return this.getAlgorithmIdentifierName(t)};this.getSignatureValueHex=function(){return c(this.hex,0,[2],"03",true)};this.verifySignature=function(v){var w=this.getSignatureAlgorithmField();var t=this.getSignatureValueHex();var u=a(this.hex,0,[0],"30");var x=new KJUR.crypto.Signature({alg:w});x.init(v);x.updateHex(u);return x.verify(t)};this.parseExt=function(C){var v,t,x;if(C===undefined){x=this.hex;if(this.version!==3){return -1}v=h(x,0,[0,7,0],"30");t=n(x,v)}else{x=pemtohex(C);var y=h(x,0,[0,3,0,0],"06");if(g(x,y)!="2a864886f70d01090e"){this.aExtInfo=new Array();return}v=h(x,0,[0,3,0,1,0],"30");t=n(x,v);this.hex=x}this.aExtInfo=new Array();for(var w=0;w<t.length;w++){var A={};A.critical=false;var z=n(x,t[w]);var u=0;if(z.length===3){A.critical=true;u=1}A.oid=j.hextooidstr(c(x,t[w],[0],"06"));var B=h(x,t[w],[1+u]);A.vidx=i(x,B);this.aExtInfo.push(A)}};this.getExtInfo=function(v){var t=this.aExtInfo;var w=v;if(!v.match(/^[0-9.]+$/)){w=KJUR.asn1.x509.OID.name2oid(v)}if(w===""){return undefined}for(var u=0;u<t.length;u++){if(t[u].oid===w){return t[u]}}return undefined};this.getExtBasicConstraints=function(u,y){if(u===undefined&&y===undefined){var w=this.getExtInfo("basicConstraints");if(w===undefined){return undefined}u=b(this.hex,w.vidx);y=w.critical}var t={extname:"basicConstraints"};if(y){t.critical=true}if(u==="3000"){return t}if(u==="30030101ff"){t.cA=true;return t}if(u.substr(0,12)==="30060101ff02"){var x=g(u,10);var v=parseInt(x,16);t.cA=true;t.pathLen=v;return t}throw new Error("hExtV parse error: "+u)};this.getExtKeyUsage=function(u,w){if(u===undefined&&w===undefined){var v=this.getExtInfo("keyUsage");if(v===undefined){return undefined}u=b(this.hex,v.vidx);w=v.critical}var t={extname:"keyUsage"};if(w){t.critical=true}t.names=this.getExtKeyUsageString(u).split(",");return t};this.getExtKeyUsageBin=function(u){if(u===undefined){var v=this.getExtInfo("keyUsage");if(v===undefined){return""}u=b(this.hex,v.vidx)}if(u.length!=8&&u.length!=10){throw new Error("malformed key usage value: "+u)}var t="000000000000000"+parseInt(u.substr(6),16).toString(2);if(u.length==8){t=t.slice(-8)}if(u.length==10){t=t.slice(-16)}t=t.replace(/0+$/,"");if(t==""){t="0"}return t};this.getExtKeyUsageString=function(v){var w=this.getExtKeyUsageBin(v);var t=new Array();for(var u=0;u<w.length;u++){if(w.substr(u,1)=="1"){t.push(X509.KEYUSAGE_NAME[u])}}return t.join(",")};this.getExtSubjectKeyIdentifier=function(v,x){if(v===undefined&&x===undefined){var w=this.getExtInfo("subjectKeyIdentifier");if(w===undefined){return undefined}v=b(this.hex,w.vidx);x=w.critical}var t={extname:"subjectKeyIdentifier"};if(x){t.critical=true}var u=g(v,0);t.kid={hex:u};return t};this.getExtAuthorityKeyIdentifier=function(z,x){if(z===undefined&&x===undefined){var t=this.getExtInfo("authorityKeyIdentifier");if(t===undefined){return undefined}z=b(this.hex,t.vidx);x=t.critical}var A={extname:"authorityKeyIdentifier"};if(x){A.critical=true}var y=n(z,0);for(var u=0;u<y.length;u++){var B=z.substr(y[u],2);if(B==="80"){A.kid={hex:g(z,y[u])}}if(B==="a1"){var w=b(z,y[u]);var v=this.getGeneralNames(w);A.issuer=v[0]["dn"]}if(B==="82"){A.sn={hex:g(z,y[u])}}}return A};this.getExtExtKeyUsage=function(w,y){if(w===undefined&&y===undefined){var x=this.getExtInfo("extKeyUsage");if(x===undefined){return undefined}w=b(this.hex,x.vidx);y=x.critical}var t={extname:"extKeyUsage",array:[]};if(y){t.critical=true}var u=n(w,0);for(var v=0;v<u.length;v++){t.array.push(p(g(w,u[v])))}return t};this.getExtExtKeyUsageName=function(){var x=this.getExtInfo("extKeyUsage");if(x===undefined){return x}var t=new Array();var w=b(this.hex,x.vidx);if(w===""){return t}var u=n(w,0);for(var v=0;v<u.length;v++){t.push(p(g(w,u[v])))}return t};this.getExtSubjectAltName=function(u,w){if(u===undefined&&w===undefined){var v=this.getExtInfo("subjectAltName");if(v===undefined){return undefined}u=b(this.hex,v.vidx);w=v.critical}var t={extname:"subjectAltName",array:[]};if(w){t.critical=true}t.array=this.getGeneralNames(u);return t};this.getExtIssuerAltName=function(u,w){if(u===undefined&&w===undefined){var v=this.getExtInfo("issuerAltName");if(v===undefined){return undefined}u=b(this.hex,v.vidx);w=v.critical}var t={extname:"issuerAltName",array:[]};if(w){t.critical=true}t.array=this.getGeneralNames(u);return t};this.getGeneralNames=function(x){var v=n(x,0);var t=[];for(var w=0;w<v.length;w++){var u=this.getGeneralName(b(x,v[w]));if(u!==undefined){t.push(u)}}return t};this.getGeneralName=function(u){var t=u.substr(0,2);var w=g(u,0);var v=hextorstr(w);if(t=="81"){return{rfc822:v}}if(t=="82"){return{dns:v}}if(t=="86"){return{uri:v}}if(t=="87"){return{ip:hextoip(w)}}if(t=="a4"){return{dn:this.getX500Name(w)}}return undefined};this.getExtSubjectAltName2=function(){var x,A,z;var y=this.getExtInfo("subjectAltName");if(y===undefined){return y}var t=new Array();var w=b(this.hex,y.vidx);var u=n(w,0);for(var v=0;v<u.length;v++){z=w.substr(u[v],2);x=g(w,u[v]);if(z==="81"){A=hextoutf8(x);t.push(["MAIL",A])}if(z==="82"){A=hextoutf8(x);t.push(["DNS",A])}if(z==="84"){A=X509.hex2dn(x,0);t.push(["DN",A])}if(z==="86"){A=hextoutf8(x);t.push(["URI",A])}if(z==="87"){A=hextoip(x);t.push(["IP",A])}}return t};this.getExtCRLDistributionPoints=function(x,z){if(x===undefined&&z===undefined){var y=this.getExtInfo("cRLDistributionPoints");if(y===undefined){return undefined}x=b(this.hex,y.vidx);z=y.critical}var u={extname:"cRLDistributionPoints",array:[]};if(z){u.critical=true}var v=n(x,0);for(var w=0;w<v.length;w++){var t=b(x,v[w]);u.array.push(this.getDistributionPoint(t))}return u};this.getDistributionPoint=function(y){var v={};var w=n(y,0);for(var x=0;x<w.length;x++){var u=y.substr(w[x],2);var t=b(y,w[x]);if(u=="a0"){v.dpname=this.getDistributionPointName(t)}}return v};this.getDistributionPointName=function(y){var v={};var w=n(y,0);for(var x=0;x<w.length;x++){var u=y.substr(w[x],2);var t=b(y,w[x]);if(u=="a0"){v.full=this.getGeneralNames(t)}}return v};this.getExtCRLDistributionPointsURI=function(){var y=this.getExtInfo("cRLDistributionPoints");if(y===undefined){return y}var t=new Array();var u=n(this.hex,y.vidx);for(var w=0;w<u.length;w++){try{var z=c(this.hex,u[w],[0,0,0],"86");var x=hextoutf8(z);t.push(x)}catch(v){}}return t};this.getExtAIAInfo=function(){var x=this.getExtInfo("authorityInfoAccess");if(x===undefined){return x}var t={ocsp:[],caissuer:[]};var u=n(this.hex,x.vidx);for(var v=0;v<u.length;v++){var y=c(this.hex,u[v],[0],"06");var w=c(this.hex,u[v],[1],"86");if(y==="2b06010505073001"){t.ocsp.push(hextoutf8(w))}if(y==="2b06010505073002"){t.caissuer.push(hextoutf8(w))}}return t};this.getExtAuthorityInfoAccess=function(A,y){if(A===undefined&&y===undefined){var t=this.getExtInfo("authorityInfoAccess");if(t===undefined){return undefined}A=b(this.hex,t.vidx);y=t.critical}var B={extname:"authorityInfoAccess",array:[]};if(y){B.critical=true}var z=n(A,0);for(var u=0;u<z.length;u++){var x=k(A,z[u],[0],"06");var v=c(A,z[u],[1],"86");var w=hextoutf8(v);if(x=="2b06010505073001"){B.array.push({ocsp:w})}else{if(x=="2b06010505073002"){B.array.push({caissuer:w})}else{throw new Error("unknown method: "+x)}}}return B};this.getExtCertificatePolicies=function(x,A){if(x===undefined&&A===undefined){var z=this.getExtInfo("certificatePolicies");if(z===undefined){return undefined}x=b(this.hex,z.vidx);A=z.critical}var t={extname:"certificatePolicies",array:[]};if(A){t.critical=true}var u=n(x,0);for(var v=0;v<u.length;v++){var y=b(x,u[v]);var w=this.getPolicyInformation(y);t.array.push(w)}return t};this.getPolicyInformation=function(x){var t={};var z=c(x,0,[0],"06");t.policyoid=p(z);var A=e(x,0,[1],"30");if(A!=-1){t.array=[];var u=n(x,A);for(var v=0;v<u.length;v++){var y=b(x,u[v]);var w=this.getPolicyQualifierInfo(y);t.array.push(w)}}return t};this.getPolicyQualifierInfo=function(u){var t={};var v=c(u,0,[0],"06");if(v==="2b06010505070201"){var x=k(u,0,[1],"16");t.cps=hextorstr(x)}else{if(v==="2b06010505070202"){var w=a(u,0,[1],"30");t.unotice=this.getUserNotice(w)}}return t};this.getUserNotice=function(x){var u={};var v=n(x,0);for(var w=0;w<v.length;w++){var t=b(x,v[w]);if(t.substr(0,2)!="30"){u.exptext=this.getDisplayText(t)}}return u};this.getDisplayText=function(u){var v={"0c":"utf8","16":"ia5","1a":"vis","1e":"bmp"};var t={};t.type=v[u.substr(0,2)];t.str=hextorstr(g(u,0));return t};this.getExtCRLNumber=function(u,v){var t={extname:"cRLNumber"};if(v){t.critical=true}if(u.substr(0,2)=="02"){t.num={hex:g(u,0)};return t}throw new Error("hExtV parse error: "+u)};this.getExtCRLReason=function(u,v){var t={extname:"cRLReason"};if(v){t.critical=true}if(u.substr(0,2)=="0a"){t.code=parseInt(g(u,0),16);return t}throw new Error("hExtV parse error: "+u)};this.getExtOcspNonce=function(u,w){var t={extname:"ocspNonce"};if(w){t.critical=true}var v=g(u,0);t.hex=v;return t};this.getExtOcspNoCheck=function(u,v){var t={extname:"ocspNoCheck"};if(v){t.critical=true}return t};this.getExtAdobeTimeStamp=function(w,z){if(w===undefined&&z===undefined){var y=this.getExtInfo("adobeTimeStamp");if(y===undefined){return undefined}w=b(this.hex,y.vidx);z=y.critical}var t={extname:"adobeTimeStamp"};if(z){t.critical=true}var v=n(w,0);if(v.length>1){var A=b(w,v[1]);var u=this.getGeneralName(A);if(u.uri!=undefined){t.uri=u.uri}}if(v.length>2){var x=b(w,v[2]);if(x=="0101ff"){t.reqauth=true}if(x=="010100"){t.reqauth=false}}return t};this.getX500NameRule=function(t){var A=true;var E=true;var D=false;var u="";var x="";var G=null;var B=[];for(var w=0;w<t.length;w++){var y=t[w];for(var v=0;v<y.length;v++){B.push(y[v])}}for(var w=0;w<B.length;w++){var F=B[w];var H=F.ds;var C=F.value;var z=F.type;u+=":"+H;if(H!="prn"&&H!="utf8"&&H!="ia5"){return"mixed"}if(H=="ia5"){if(z!="CN"){return"mixed"}else{if(!KJUR.lang.String.isMail(C)){return"mixed"}else{continue}}}if(z=="C"){if(H=="prn"){continue}else{return"mixed"}}x+=":"+H;if(G==null){G=H}else{if(G!==H){return"mixed"}}}if(G==null){return"prn"}else{return G}};this.getX500Name=function(v){var t=this.getX500NameArray(v);var u=this.dnarraytostr(t);return{array:t,str:u}};this.getX500NameArray=function(w){var t=[];var u=n(w,0);for(var v=0;v<u.length;v++){t.push(this.getRDN(b(w,u[v])))}return t};this.getRDN=function(w){var t=[];var u=n(w,0);for(var v=0;v<u.length;v++){t.push(this.getAttrTypeAndValue(b(w,u[v])))}return t};this.getAttrTypeAndValue=function(v){var t={type:null,value:null,ds:null};var u=n(v,0);var y=c(v,u[0],[],"06");var x=c(v,u[1],[]);var w=KJUR.asn1.ASN1Util.oidHexToInt(y);t.type=KJUR.asn1.x509.OID.oid2atype(w);t.ds=this.HEX2STAG[v.substr(u[1],2)];if(t.ds!="bmp"){t.value=hextoutf8(x)}else{t.value=ucs2hextoutf8(x)}return t};this.readCertPEM=function(t){this.readCertHex(r(t))};this.readCertHex=function(t){this.hex=t;this.getVersion();try{h(this.hex,0,[0,7],"a3");this.parseExt()}catch(u){}};this.getParam=function(){var t={};t.version=this.getVersion();t.serial={hex:this.getSerialNumberHex()};t.sigalg=this.getSignatureAlgorithmField();t.issuer=this.getIssuer();t.notbefore=this.getNotBefore();t.notafter=this.getNotAfter();t.subject=this.getSubject();t.sbjpubkey=hextopem(this.getPublicKeyHex(),"PUBLIC KEY");if(this.aExtInfo.length>0){t.ext=this.getExtParamArray()}t.sighex=this.getSignatureValueHex();return t};this.getExtParamArray=function(u){if(u==undefined){var w=e(this.hex,0,[0,"[3]"]);if(w!=-1){u=l(this.hex,0,[0,"[3]",0],"30")}}var t=[];var v=n(u,0);for(var x=0;x<v.length;x++){var z=b(u,v[x]);var y=this.getExtParam(z);if(y!=null){t.push(y)}}return t};this.getExtParam=function(u){var B={};var w=n(u,0);var x=w.length;if(x!=2&&x!=3){throw new Error("wrong number elements in Extension: "+x+" "+u)}var v=m(c(u,0,[0],"06"));var z=false;if(x==3&&a(u,0,[1])=="0101ff"){z=true}var A=a(u,0,[x-1,0]);var y=undefined;if(v=="2.5.29.14"){y=this.getExtSubjectKeyIdentifier(A,z)}else{if(v=="2.5.29.15"){y=this.getExtKeyUsage(A,z)}else{if(v=="2.5.29.17"){y=this.getExtSubjectAltName(A,z)}else{if(v=="2.5.29.18"){y=this.getExtIssuerAltName(A,z)}else{if(v=="2.5.29.19"){y=this.getExtBasicConstraints(A,z)}else{if(v=="2.5.29.31"){y=this.getExtCRLDistributionPoints(A,z)}else{if(v=="2.5.29.32"){y=this.getExtCertificatePolicies(A,z)}else{if(v=="2.5.29.35"){y=this.getExtAuthorityKeyIdentifier(A,z)}else{if(v=="2.5.29.37"){y=this.getExtExtKeyUsage(A,z)}else{if(v=="1.3.6.1.5.5.7.1.1"){y=this.getExtAuthorityInfoAccess(A,z)}else{if(v=="2.5.29.20"){y=this.getExtCRLNumber(A,z)}else{if(v=="2.5.29.21"){y=this.getExtCRLReason(A,z)}else{if(v=="1.3.6.1.5.5.7.48.1.2"){y=this.getExtOcspNonce(A,z)}else{if(v=="1.3.6.1.5.5.7.48.1.5"){y=this.getExtOcspNoCheck(A,z)}else{if(v=="1.2.840.113583.1.1.9.1"){y=this.getExtAdobeTimeStamp(A,z)}}}}}}}}}}}}}}}if(y!=undefined){return y}var t={extname:v,extn:A};if(z){t.critical=true}return t};this.findExt=function(u,v){for(var t=0;t<u.length;t++){if(u[t].extname==v){return u[t]}}return null};this.updateExtCDPFullURI=function(x,t){var w=this.findExt(x,"cRLDistributionPoints");if(w==null){return}if(w.array==undefined){return}var z=w.array;for(var v=0;v<z.length;v++){if(z[v].dpname==undefined){continue}if(z[v].dpname.full==undefined){continue}var A=z[v].dpname.full;for(var u=0;u<A.length;u++){var y=A[v];if(y.uri==undefined){continue}y.uri=t}}};this.updateExtAIAOCSP=function(x,u){var w=this.findExt(x,"authorityInfoAccess");if(w==null){return}if(w.array==undefined){return}var t=w.array;for(var v=0;v<t.length;v++){if(t[v].ocsp!=undefined){t[v].ocsp=u}}};this.updateExtAIACAIssuer=function(x,u){var w=this.findExt(x,"authorityInfoAccess");if(w==null){return}if(w.array==undefined){return}var t=w.array;for(var v=0;v<t.length;v++){if(t[v].caissuer!=undefined){t[v].caissuer=u}}};this.dnarraytostr=function(v){function t(w){return w.map(function(y){return u(y).replace(/\+/,"\\+")}).join("+")}function u(w){return w.type+"="+w.value}return"/"+v.map(function(w){return t(w).replace(/\//,"\\/")}).join("/")};this.getInfo=function(){var u=function(M){var L=JSON.stringify(M.array).replace(/[\[\]\{\}\"]/g,"");return L};var A=function(R){var P="";var L=R.array;for(var O=0;O<L.length;O++){var Q=L[O];P+="    policy oid: "+Q.policyoid+"\n";if(Q.array===undefined){continue}for(var N=0;N<Q.array.length;N++){var M=Q.array[N];if(M.cps!==undefined){P+="    cps: "+M.cps+"\n"}}}return P};var D=function(P){var O="";var L=P.array;for(var N=0;N<L.length;N++){var Q=L[N];try{if(Q.dpname.full[0].uri!==undefined){O+="    "+Q.dpname.full[0].uri+"\n"}}catch(M){}try{if(Q.dname.full[0].dn.hex!==undefined){O+="    "+X509.hex2dn(Q.dpname.full[0].dn.hex)+"\n"}}catch(M){}}return O};var B=function(P){var O="";var L=P.array;for(var M=0;M<L.length;M++){var N=L[M];if(N.caissuer!==undefined){O+="    caissuer: "+N.caissuer+"\n"}if(N.ocsp!==undefined){O+="    ocsp: "+N.ocsp+"\n"}}return O};var v=X509;var F,E,K;F="Basic Fields\n";F+="  serial number: "+this.getSerialNumberHex()+"\n";F+="  signature algorithm: "+this.getSignatureAlgorithmField()+"\n";F+="  issuer: "+this.getIssuerString()+"\n";F+="  notBefore: "+this.getNotBefore()+"\n";F+="  notAfter: "+this.getNotAfter()+"\n";F+="  subject: "+this.getSubjectString()+"\n";F+="  subject public key info: \n";E=this.getPublicKey();F+="    key algorithm: "+E.type+"\n";if(E.type==="RSA"){F+="    n="+hextoposhex(E.n.toString(16)).substr(0,16)+"...\n";F+="    e="+hextoposhex(E.e.toString(16))+"\n"}K=this.aExtInfo;if(K!==undefined&&K!==null){F+="X509v3 Extensions:\n";for(var H=0;H<K.length;H++){var J=K[H];var t=KJUR.asn1.x509.OID.oid2name(J.oid);if(t===""){t=J.oid}var G="";if(J.critical===true){G="CRITICAL"}F+="  "+t+" "+G+":\n";if(t==="basicConstraints"){var w=this.getExtBasicConstraints();if(w.cA===undefined){F+="    {}\n"}else{F+="    cA=true";if(w.pathLen!==undefined){F+=", pathLen="+w.pathLen}F+="\n"}}else{if(t==="keyUsage"){F+="    "+this.getExtKeyUsageString()+"\n"}else{if(t==="subjectKeyIdentifier"){F+="    "+this.getExtSubjectKeyIdentifier().kid.hex+"\n"}else{if(t==="authorityKeyIdentifier"){var x=this.getExtAuthorityKeyIdentifier();if(x.kid!==undefined){F+="    kid="+x.kid.hex+"\n"}}else{if(t==="extKeyUsage"){var I=this.getExtExtKeyUsage().array;F+="    "+I.join(", ")+"\n"}else{if(t==="subjectAltName"){var y=u(this.getExtSubjectAltName());F+="    "+y+"\n"}else{if(t==="cRLDistributionPoints"){var C=this.getExtCRLDistributionPoints();F+=D(C)}else{if(t==="authorityInfoAccess"){var z=this.getExtAuthorityInfoAccess();F+=B(z)}else{if(t==="certificatePolicies"){F+=A(this.getExtCertificatePolicies())}}}}}}}}}}}F+="signature algorithm: "+this.getSignatureAlgorithmName()+"\n";F+="signature: "+this.getSignatureValueHex().substr(0,16)+"...\n";return F};if(typeof q=="string"){if(q.indexOf("-----BEGIN")!=-1){this.readCertPEM(q)}else{if(KJUR.lang.String.isHex(q)){this.readCertHex(q)}}}}X509.hex2dn=function(e,b){if(b===undefined){b=0}var a=new X509();var c=ASN1HEX.getTLV(e,b);var d=a.getX500Name(e);return d.str};X509.hex2rdn=function(f,b){if(b===undefined){b=0}if(f.substr(b,2)!=="31"){throw new Error("malformed RDN")}var c=new Array();var d=ASN1HEX.getChildIdx(f,b);for(var e=0;e<d.length;e++){c.push(X509.hex2attrTypeValue(f,d[e]))}c=c.map(function(a){return a.replace("+","\\+")});return c.join("+")};X509.hex2attrTypeValue=function(d,i){var j=ASN1HEX;var h=j.getV;if(i===undefined){i=0}if(d.substr(i,2)!=="30"){throw new Error("malformed attribute type and value")}var g=j.getChildIdx(d,i);if(g.length!==2||d.substr(g[0],2)!=="06"){"malformed attribute type and value"}var b=h(d,g[0]);var f=KJUR.asn1.ASN1Util.oidHexToInt(b);var e=KJUR.asn1.x509.OID.oid2atype(f);var a=h(d,g[1]);var c=hextorstr(a);return e+"="+c};X509.getPublicKeyFromCertHex=function(b){var a=new X509();a.readCertHex(b);return a.getPublicKey()};X509.getPublicKeyFromCertPEM=function(b){var a=new X509();a.readCertPEM(b);return a.getPublicKey()};X509.getPublicKeyInfoPropOfCertPEM=function(c){var e=ASN1HEX;var g=e.getVbyList;var b={};var a,f,d;b.algparam=null;a=new X509();a.readCertPEM(c);f=a.getPublicKeyHex();b.keyhex=g(f,0,[1],"03").substr(2);b.algoid=g(f,0,[0,0],"06");if(b.algoid==="2a8648ce3d0201"){b.algparam=g(f,0,[0,1],"06")}return b};X509.KEYUSAGE_NAME=["digitalSignature","nonRepudiation","keyEncipherment","dataEncipherment","keyAgreement","keyCertSign","cRLSign","encipherOnly","decipherOnly"];
    var X509CRL=function(e){var a=KJUR,f=a.lang.String.isHex,m=ASN1HEX,k=m.getV,b=m.getTLV,h=m.getVbyList,c=m.getTLVbyList,d=m.getTLVbyListEx,i=m.getIdxbyList,g=m.getIdxbyListEx,l=m.getChildIdx,j=new X509();this.hex=null;this.posSigAlg=null;this.posRevCert=null;this._setPos=function(){var o=i(this.hex,0,[0,0]);var n=this.hex.substr(o,2);if(n=="02"){this.posSigAlg=1}else{if(n=="30"){this.posSigAlg=0}else{throw new Error("malformed 1st item of TBSCertList: "+n)}}var s=i(this.hex,0,[0,this.posSigAlg+3]);var r=this.hex.substr(s,2);if(r=="17"||r=="18"){var q,p;q=i(this.hex,0,[0,this.posSigAlg+4]);this.posRevCert=null;if(q!=-1){p=this.hex.substr(q,2);if(p=="30"){this.posRevCert=this.posSigAlg+4}}}else{if(r=="30"){this.posRevCert=this.posSigAlg+3}else{if(r=="a0"){this.posRevCert=null}else{throw new Error("malformed nextUpdate or revCert tag: "+r)}}}};this.getVersion=function(){if(this.posSigAlg==0){return null}return parseInt(h(this.hex,0,[0,0],"02"),16)+1};this.getSignatureAlgorithmField=function(){var n=c(this.hex,0,[0,this.posSigAlg],"30");return j.getAlgorithmIdentifierName(n)};this.getIssuer=function(){var n=c(this.hex,0,[0,this.posSigAlg+1],"30");return j.getX500Name(n)};this.getThisUpdate=function(){var n=h(this.hex,0,[0,this.posSigAlg+2]);return result=hextorstr(n)};this.getNextUpdate=function(){var o=i(this.hex,0,[0,this.posSigAlg+3]);var n=this.hex.substr(o,2);if(n!="17"&&n!="18"){return null}return hextorstr(k(this.hex,o))};this.getRevCertArray=function(){if(this.posRevCert==null){return null}var o=[];var n=i(this.hex,0,[0,this.posRevCert]);var p=l(this.hex,n);for(var q=0;q<p.length;q++){var r=b(this.hex,p[q]);o.push(this.getRevCert(r))}return o};this.getRevCert=function(p){var o={};var n=l(p,0);o.sn={hex:h(p,0,[0],"02")};o.date=hextorstr(h(p,0,[1]));if(n.length==3){o.ext=j.getExtParamArray(c(p,0,[2]))}return o};this.getSignatureValueHex=function(){return h(this.hex,0,[2],"03",true)};this.verifySignature=function(o){var p=this.getSignatureAlgorithmField();var n=this.getSignatureValueHex();var q=c(this.hex,0,[0],"30");var r=new KJUR.crypto.Signature({alg:p});r.init(o);r.updateHex(q);return r.verify(n)};this.getParam=function(){var n={};var p=this.getVersion();if(p!=null){n.version=p}n.sigalg=this.getSignatureAlgorithmField();n.issuer=this.getIssuer();n.thisupdate=this.getThisUpdate();var q=this.getNextUpdate();if(q!=null){n.nextupdate=q}var s=this.getRevCertArray();if(s!=null){n.revcert=s}var r=g(this.hex,0,[0,"[0]"]);if(r!=-1){var o=d(this.hex,0,[0,"[0]",0]);n.ext=j.getExtParamArray(o)}n.sighex=this.getSignatureValueHex();return n};if(typeof e=="string"){if(f(e)){this.hex=e}else{if(e.match(/-----BEGIN X509 CRL/)){this.hex=pemtohex(e)}}this._setPos()}};
    if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.jws=="undefined"||!KJUR.jws){KJUR.jws={}}KJUR.jws.JWS=function(){var b=KJUR,a=b.jws.JWS,c=a.isSafeJSONString;this.parseJWS=function(g,j){if((this.parsedJWS!==undefined)&&(j||(this.parsedJWS.sigvalH!==undefined))){return}var i=g.match(/^([^.]+)\.([^.]+)\.([^.]+)$/);if(i==null){throw"JWS signature is not a form of 'Head.Payload.SigValue'."}var k=i[1];var e=i[2];var l=i[3];var n=k+"."+e;this.parsedJWS={};this.parsedJWS.headB64U=k;this.parsedJWS.payloadB64U=e;this.parsedJWS.sigvalB64U=l;this.parsedJWS.si=n;if(!j){var h=b64utohex(l);var f=parseBigInt(h,16);this.parsedJWS.sigvalH=h;this.parsedJWS.sigvalBI=f}var d=b64utoutf8(k);var m=b64utoutf8(e);this.parsedJWS.headS=d;this.parsedJWS.payloadS=m;if(!c(d,this.parsedJWS,"headP")){throw"malformed JSON string for JWS Head: "+d}}};KJUR.jws.JWS.sign=function(j,w,z,A,a){var x=KJUR,n=x.jws,r=n.JWS,h=r.readSafeJSONString,q=r.isSafeJSONString,d=x.crypto,l=d.ECDSA,p=d.Mac,c=d.Signature,u=JSON;var t,k,o;if(typeof w!="string"&&typeof w!="object"){throw"spHeader must be JSON string or object: "+w}if(typeof w=="object"){k=w;t=u.stringify(k)}if(typeof w=="string"){t=w;if(!q(t)){throw"JWS Head is not safe JSON string: "+t}k=h(t)}o=z;if(typeof z=="object"){o=u.stringify(z)}if((j==""||j==null)&&k.alg!==undefined){j=k.alg}if((j!=""&&j!=null)&&k.alg===undefined){k.alg=j;t=u.stringify(k)}if(j!==k.alg){throw"alg and sHeader.alg doesn't match: "+j+"!="+k.alg}var s=null;if(r.jwsalg2sigalg[j]===undefined){throw"unsupported alg name: "+j}else{s=r.jwsalg2sigalg[j]}var e=utf8tob64u(t);var m=utf8tob64u(o);var b=e+"."+m;var y="";if(s.substr(0,4)=="Hmac"){if(A===undefined){throw"mac key shall be specified for HS* alg"}var i=new p({alg:s,prov:"cryptojs",pass:A});i.updateString(b);y=i.doFinal()}else{if(s.indexOf("withECDSA")!=-1){var f=new c({alg:s});f.init(A,a);f.updateString(b);var g=f.sign();y=KJUR.crypto.ECDSA.asn1SigToConcatSig(g)}else{if(s!="none"){var f=new c({alg:s});f.init(A,a);f.updateString(b);y=f.sign()}}}var v=hextob64u(y);return b+"."+v};KJUR.jws.JWS.verify=function(w,B,n){var x=KJUR,q=x.jws,t=q.JWS,i=t.readSafeJSONString,e=x.crypto,p=e.ECDSA,s=e.Mac,d=e.Signature,m;if(typeof RSAKey!==undefined){m=RSAKey}var y=w.split(".");if(y.length!==3){return false}var f=y[0];var r=y[1];var c=f+"."+r;var A=b64utohex(y[2]);var l=i(b64utoutf8(y[0]));var k=null;var z=null;if(l.alg===undefined){throw"algorithm not specified in header"}else{k=l.alg;z=k.substr(0,2)}if(n!=null&&Object.prototype.toString.call(n)==="[object Array]"&&n.length>0){var b=":"+n.join(":")+":";if(b.indexOf(":"+k+":")==-1){throw"algorithm '"+k+"' not accepted in the list"}}if(k!="none"&&B===null){throw"key shall be specified to verify."}if(typeof B=="string"&&B.indexOf("-----BEGIN ")!=-1){B=KEYUTIL.getKey(B)}if(z=="RS"||z=="PS"){if(!(B instanceof m)){throw"key shall be a RSAKey obj for RS* and PS* algs"}}if(z=="ES"){if(!(B instanceof p)){throw"key shall be a ECDSA obj for ES* algs"}}if(k=="none"){}var u=null;if(t.jwsalg2sigalg[l.alg]===undefined){throw"unsupported alg name: "+k}else{u=t.jwsalg2sigalg[k]}if(u=="none"){throw"not supported"}else{if(u.substr(0,4)=="Hmac"){var o=null;if(B===undefined){throw"hexadecimal key shall be specified for HMAC"}var j=new s({alg:u,pass:B});j.updateString(c);o=j.doFinal();return A==o}else{if(u.indexOf("withECDSA")!=-1){var h=null;try{h=p.concatSigToASN1Sig(A)}catch(v){return false}var g=new d({alg:u});g.init(B);g.updateString(c);return g.verify(h)}else{var g=new d({alg:u});g.init(B);g.updateString(c);return g.verify(A)}}}};KJUR.jws.JWS.parse=function(g){var c=g.split(".");var b={};var f,e,d;if(c.length!=2&&c.length!=3){throw"malformed sJWS: wrong number of '.' splitted elements"}f=c[0];e=c[1];if(c.length==3){d=c[2]}b.headerObj=KJUR.jws.JWS.readSafeJSONString(b64utoutf8(f));b.payloadObj=KJUR.jws.JWS.readSafeJSONString(b64utoutf8(e));b.headerPP=JSON.stringify(b.headerObj,null,"  ");if(b.payloadObj==null){b.payloadPP=b64utoutf8(e)}else{b.payloadPP=JSON.stringify(b.payloadObj,null,"  ")}if(d!==undefined){b.sigHex=b64utohex(d)}return b};KJUR.jws.JWS.verifyJWT=function(e,l,r){var d=KJUR,j=d.jws,o=j.JWS,n=o.readSafeJSONString,p=o.inArray,f=o.includedArray;var k=e.split(".");var c=k[0];var i=k[1];var q=c+"."+i;var m=b64utohex(k[2]);var h=n(b64utoutf8(c));var g=n(b64utoutf8(i));if(h.alg===undefined){return false}if(r.alg===undefined){throw"acceptField.alg shall be specified"}if(!p(h.alg,r.alg)){return false}if(g.iss!==undefined&&typeof r.iss==="object"){if(!p(g.iss,r.iss)){return false}}if(g.sub!==undefined&&typeof r.sub==="object"){if(!p(g.sub,r.sub)){return false}}if(g.aud!==undefined&&typeof r.aud==="object"){if(typeof g.aud=="string"){if(!p(g.aud,r.aud)){return false}}else{if(typeof g.aud=="object"){if(!f(g.aud,r.aud)){return false}}}}var b=j.IntDate.getNow();if(r.verifyAt!==undefined&&typeof r.verifyAt==="number"){b=r.verifyAt}if(r.gracePeriod===undefined||typeof r.gracePeriod!=="number"){r.gracePeriod=0}if(g.exp!==undefined&&typeof g.exp=="number"){if(g.exp+r.gracePeriod<b){return false}}if(g.nbf!==undefined&&typeof g.nbf=="number"){if(b<g.nbf-r.gracePeriod){return false}}if(g.iat!==undefined&&typeof g.iat=="number"){if(b<g.iat-r.gracePeriod){return false}}if(g.jti!==undefined&&r.jti!==undefined){if(g.jti!==r.jti){return false}}if(!o.verify(e,l,r.alg)){return false}return true};KJUR.jws.JWS.includedArray=function(b,a){var c=KJUR.jws.JWS.inArray;if(b===null){return false}if(typeof b!=="object"){return false}if(typeof b.length!=="number"){return false}for(var d=0;d<b.length;d++){if(!c(b[d],a)){return false}}return true};KJUR.jws.JWS.inArray=function(d,b){if(b===null){return false}if(typeof b!=="object"){return false}if(typeof b.length!=="number"){return false}for(var c=0;c<b.length;c++){if(b[c]==d){return true}}return false};KJUR.jws.JWS.jwsalg2sigalg={HS256:"HmacSHA256",HS384:"HmacSHA384",HS512:"HmacSHA512",RS256:"SHA256withRSA",RS384:"SHA384withRSA",RS512:"SHA512withRSA",ES256:"SHA256withECDSA",ES384:"SHA384withECDSA",ES512:"SHA512withECDSA",PS256:"SHA256withRSAandMGF1",PS384:"SHA384withRSAandMGF1",PS512:"SHA512withRSAandMGF1",none:"none",};KJUR.jws.JWS.isSafeJSONString=function(c,b,d){var e=null;try{e=jsonParse(c);if(typeof e!="object"){return 0}if(e.constructor===Array){return 0}if(b){b[d]=e}return 1}catch(a){return 0}};KJUR.jws.JWS.readSafeJSONString=function(b){var c=null;try{c=jsonParse(b);if(typeof c!="object"){return null}if(c.constructor===Array){return null}return c}catch(a){return null}};KJUR.jws.JWS.getEncodedSignatureValueFromJWS=function(b){var a=b.match(/^[^.]+\.[^.]+\.([^.]+)$/);if(a==null){throw"JWS signature is not a form of 'Head.Payload.SigValue'."}return a[1]};KJUR.jws.JWS.getJWKthumbprint=function(d){if(d.kty!=="RSA"&&d.kty!=="EC"&&d.kty!=="oct"){throw"unsupported algorithm for JWK Thumprint"}var a="{";if(d.kty==="RSA"){if(typeof d.n!="string"||typeof d.e!="string"){throw"wrong n and e value for RSA key"}a+='"e":"'+d.e+'",';a+='"kty":"'+d.kty+'",';a+='"n":"'+d.n+'"}'}else{if(d.kty==="EC"){if(typeof d.crv!="string"||typeof d.x!="string"||typeof d.y!="string"){throw"wrong crv, x and y value for EC key"}a+='"crv":"'+d.crv+'",';a+='"kty":"'+d.kty+'",';a+='"x":"'+d.x+'",';a+='"y":"'+d.y+'"}'}else{if(d.kty==="oct"){if(typeof d.k!="string"){throw"wrong k value for oct(symmetric) key"}a+='"kty":"'+d.kty+'",';a+='"k":"'+d.k+'"}'}}}var b=rstrtohex(a);var c=KJUR.crypto.Util.hashHex(b,"sha256");var e=hextob64u(c);return e};KJUR.jws.IntDate={};KJUR.jws.IntDate.get=function(c){var b=KJUR.jws.IntDate,d=b.getNow,a=b.getZulu;if(c=="now"){return d()}else{if(c=="now + 1hour"){return d()+60*60}else{if(c=="now + 1day"){return d()+60*60*24}else{if(c=="now + 1month"){return d()+60*60*24*30}else{if(c=="now + 1year"){return d()+60*60*24*365}else{if(c.match(/Z$/)){return a(c)}else{if(c.match(/^[0-9]+$/)){return parseInt(c)}}}}}}}throw"unsupported format: "+c};KJUR.jws.IntDate.getZulu=function(a){return zulutosec(a)};KJUR.jws.IntDate.getNow=function(){var a=~~(new Date()/1000);return a};KJUR.jws.IntDate.intDate2UTCString=function(a){var b=new Date(a*1000);return b.toUTCString()};KJUR.jws.IntDate.intDate2Zulu=function(e){var i=new Date(e*1000),h=("0000"+i.getUTCFullYear()).slice(-4),g=("00"+(i.getUTCMonth()+1)).slice(-2),b=("00"+i.getUTCDate()).slice(-2),a=("00"+i.getUTCHours()).slice(-2),c=("00"+i.getUTCMinutes()).slice(-2),f=("00"+i.getUTCSeconds()).slice(-2);return h+g+b+a+c+f+"Z"};
    if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.jws=="undefined"||!KJUR.jws){KJUR.jws={}}KJUR.jws.JWSJS=function(){var c=KJUR,b=c.jws,a=b.JWS,d=a.readSafeJSONString;this.aHeader=[];this.sPayload="";this.aSignature=[];this.init=function(){this.aHeader=[];this.sPayload=undefined;this.aSignature=[]};this.initWithJWS=function(f){this.init();var e=f.split(".");if(e.length!=3){throw"malformed input JWS"}this.aHeader.push(e[0]);this.sPayload=e[1];this.aSignature.push(e[2])};this.addSignature=function(e,h,m,k){if(this.sPayload===undefined||this.sPayload===null){throw"there's no JSON-JS signature to add."}var l=this.aHeader.length;if(this.aHeader.length!=this.aSignature.length){throw"aHeader.length != aSignature.length"}try{var f=KJUR.jws.JWS.sign(e,h,this.sPayload,m,k);var j=f.split(".");var n=j[0];var g=j[2];this.aHeader.push(j[0]);this.aSignature.push(j[2])}catch(i){if(this.aHeader.length>l){this.aHeader.pop()}if(this.aSignature.length>l){this.aSignature.pop()}throw"addSignature failed: "+i}};this.verifyAll=function(h){if(this.aHeader.length!==h.length||this.aSignature.length!==h.length){return false}for(var g=0;g<h.length;g++){var f=h[g];if(f.length!==2){return false}var e=this.verifyNth(g,f[0],f[1]);if(e===false){return false}}return true};this.verifyNth=function(f,j,g){if(this.aHeader.length<=f||this.aSignature.length<=f){return false}var h=this.aHeader[f];var k=this.aSignature[f];var l=h+"."+this.sPayload+"."+k;var e=false;try{e=a.verify(l,j,g)}catch(i){return false}return e};this.readJWSJS=function(g){if(typeof g==="string"){var f=d(g);if(f==null){throw"argument is not safe JSON object string"}this.aHeader=f.headers;this.sPayload=f.payload;this.aSignature=f.signatures}else{try{if(g.headers.length>0){this.aHeader=g.headers}else{throw"malformed header"}if(typeof g.payload==="string"){this.sPayload=g.payload}else{throw"malformed signatures"}if(g.signatures.length>0){this.aSignature=g.signatures}else{throw"malformed signatures"}}catch(e){throw"malformed JWS-JS JSON object: "+e}}};this.getJSON=function(){return{headers:this.aHeader,payload:this.sPayload,signatures:this.aSignature}};this.isEmpty=function(){if(this.aHeader.length==0){return 1}return 0}};
    exports.SecureRandom = SecureRandom;
    exports.rng_seed_time = rng_seed_time;
    
    exports.BigInteger = BigInteger;
    exports.RSAKey = RSAKey;
    exports.ECDSA = KJUR.crypto.ECDSA;
    exports.DSA = KJUR.crypto.DSA;
    exports.Signature = KJUR.crypto.Signature;
    exports.MessageDigest = KJUR.crypto.MessageDigest;
    exports.Mac = KJUR.crypto.Mac;
    exports.Cipher = KJUR.crypto.Cipher;
    exports.KEYUTIL = KEYUTIL;
    exports.ASN1HEX = ASN1HEX;
    exports.X509 = X509;
    exports.X509CRL = X509CRL;
    exports.CryptoJS = CryptoJS;
    
    // ext/base64.js
    exports.b64tohex = b64tohex;
    exports.b64toBA = b64toBA;
    
    // ext/ec*.js
    exports.ECFieldElementFp = ECFieldElementFp;
    exports.ECPointFp = ECPointFp;
    exports.ECCurveFp = ECCurveFp;
    
    // base64x.js
    exports.stoBA = stoBA;
    exports.BAtos = BAtos;
    exports.BAtohex = BAtohex;
    exports.stohex = stohex;
    exports.stob64 = stob64;
    exports.stob64u = stob64u;
    exports.b64utos = b64utos;
    exports.b64tob64u = b64tob64u;
    exports.b64utob64 = b64utob64;
    exports.hex2b64 = hex2b64;
    exports.hextob64u = hextob64u;
    exports.b64utohex = b64utohex;
    exports.utf8tob64u = utf8tob64u;
    exports.b64utoutf8 = b64utoutf8;
    exports.utf8tob64 = utf8tob64;
    exports.b64toutf8 = b64toutf8;
    exports.utf8tohex = utf8tohex;
    exports.hextoutf8 = hextoutf8;
    exports.hextorstr = hextorstr;
    exports.rstrtohex = rstrtohex;
    exports.hextob64 = hextob64;
    exports.hextob64nl = hextob64nl;
    exports.b64nltohex = b64nltohex;
    exports.hextopem = hextopem;
    exports.pemtohex = pemtohex;
    exports.hextoArrayBuffer = hextoArrayBuffer;
    exports.ArrayBuffertohex = ArrayBuffertohex;
    exports.zulutomsec = zulutomsec;
    exports.zulutosec = zulutosec;
    exports.zulutodate = zulutodate;
    exports.datetozulu = datetozulu;
    exports.uricmptohex = uricmptohex;
    exports.hextouricmp = hextouricmp;
    exports.ipv6tohex = ipv6tohex;
    exports.hextoipv6 = hextoipv6;
    exports.hextoip = hextoip;
    exports.iptohex = iptohex;
    exports.ucs2hextoutf8 = ucs2hextoutf8;
    exports.encodeURIComponentAll = encodeURIComponentAll;
    exports.newline_toUnix = newline_toUnix;
    exports.newline_toDos = newline_toDos;
    exports.hextoposhex = hextoposhex;
    exports.intarystrtohex = intarystrtohex;
    exports.strdiffidx = strdiffidx;
    exports.oidtohex = oidtohex;
    exports.hextooid = hextooid;
    exports.strpad = strpad;
    exports.bitstrtoint = bitstrtoint;
    exports.inttobitstr = inttobitstr;
    
    // name spaces
    exports.KJUR = KJUR;
    exports.crypto = KJUR.crypto;
    exports.asn1 = KJUR.asn1;
    exports.jws = KJUR.jws;
    exports.lang = KJUR.lang;
    
    
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"buffer":301}],188:[function(require,module,exports){
    module.exports = require('./lib/api')(require('./lib/keccak'))
    
    },{"./lib/api":189,"./lib/keccak":193}],189:[function(require,module,exports){
    const createKeccak = require('./keccak')
    const createShake = require('./shake')
    
    module.exports = function (KeccakState) {
      const Keccak = createKeccak(KeccakState)
      const Shake = createShake(KeccakState)
    
      return function (algorithm, options) {
        const hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm
        switch (hash) {
          case 'keccak224': return new Keccak(1152, 448, null, 224, options)
          case 'keccak256': return new Keccak(1088, 512, null, 256, options)
          case 'keccak384': return new Keccak(832, 768, null, 384, options)
          case 'keccak512': return new Keccak(576, 1024, null, 512, options)
    
          case 'sha3-224': return new Keccak(1152, 448, 0x06, 224, options)
          case 'sha3-256': return new Keccak(1088, 512, 0x06, 256, options)
          case 'sha3-384': return new Keccak(832, 768, 0x06, 384, options)
          case 'sha3-512': return new Keccak(576, 1024, 0x06, 512, options)
    
          case 'shake128': return new Shake(1344, 256, 0x1f, options)
          case 'shake256': return new Shake(1088, 512, 0x1f, options)
    
          default: throw new Error('Invald algorithm: ' + algorithm)
        }
      }
    }
    
    },{"./keccak":190,"./shake":191}],190:[function(require,module,exports){
    (function (Buffer){(function (){
    const { Transform } = require('readable-stream')
    
    module.exports = (KeccakState) => class Keccak extends Transform {
      constructor (rate, capacity, delimitedSuffix, hashBitLength, options) {
        super(options)
    
        this._rate = rate
        this._capacity = capacity
        this._delimitedSuffix = delimitedSuffix
        this._hashBitLength = hashBitLength
        this._options = options
    
        this._state = new KeccakState()
        this._state.initialize(rate, capacity)
        this._finalized = false
      }
    
      _transform (chunk, encoding, callback) {
        let error = null
        try {
          this.update(chunk, encoding)
        } catch (err) {
          error = err
        }
    
        callback(error)
      }
    
      _flush (callback) {
        let error = null
        try {
          this.push(this.digest())
        } catch (err) {
          error = err
        }
    
        callback(error)
      }
    
      update (data, encoding) {
        if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
        if (this._finalized) throw new Error('Digest already called')
        if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)
    
        this._state.absorb(data)
    
        return this
      }
    
      digest (encoding) {
        if (this._finalized) throw new Error('Digest already called')
        this._finalized = true
    
        if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix)
        let digest = this._state.squeeze(this._hashBitLength / 8)
        if (encoding !== undefined) digest = digest.toString(encoding)
    
        this._resetState()
    
        return digest
      }
    
      // remove result from memory
      _resetState () {
        this._state.initialize(this._rate, this._capacity)
        return this
      }
    
      // because sometimes we need hash right now and little later
      _clone () {
        const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options)
        this._state.copy(clone._state)
        clone._finalized = this._finalized
    
        return clone
      }
    }
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"buffer":301,"readable-stream":212}],191:[function(require,module,exports){
    (function (Buffer){(function (){
    const { Transform } = require('readable-stream')
    
    module.exports = (KeccakState) => class Shake extends Transform {
      constructor (rate, capacity, delimitedSuffix, options) {
        super(options)
    
        this._rate = rate
        this._capacity = capacity
        this._delimitedSuffix = delimitedSuffix
        this._options = options
    
        this._state = new KeccakState()
        this._state.initialize(rate, capacity)
        this._finalized = false
      }
    
      _transform (chunk, encoding, callback) {
        let error = null
        try {
          this.update(chunk, encoding)
        } catch (err) {
          error = err
        }
    
        callback(error)
      }
    
      _flush () {}
    
      _read (size) {
        this.push(this.squeeze(size))
      }
    
      update (data, encoding) {
        if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
        if (this._finalized) throw new Error('Squeeze already called')
        if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)
    
        this._state.absorb(data)
    
        return this
      }
    
      squeeze (dataByteLength, encoding) {
        if (!this._finalized) {
          this._finalized = true
          this._state.absorbLastFewBits(this._delimitedSuffix)
        }
    
        let data = this._state.squeeze(dataByteLength)
        if (encoding !== undefined) data = data.toString(encoding)
    
        return data
      }
    
      _resetState () {
        this._state.initialize(this._rate, this._capacity)
        return this
      }
    
      _clone () {
        const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options)
        this._state.copy(clone._state)
        clone._finalized = this._finalized
    
        return clone
      }
    }
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"buffer":301,"readable-stream":212}],192:[function(require,module,exports){
    const P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648]
    
    exports.p1600 = function (s) {
      for (let round = 0; round < 24; ++round) {
        // theta
        const lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40]
        const hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41]
        const lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42]
        const hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43]
        const lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44]
        const hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45]
        const lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46]
        const hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47]
        const lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48]
        const hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49]
    
        let lo = lo4 ^ (lo1 << 1 | hi1 >>> 31)
        let hi = hi4 ^ (hi1 << 1 | lo1 >>> 31)
        const t1slo0 = s[0] ^ lo
        const t1shi0 = s[1] ^ hi
        const t1slo5 = s[10] ^ lo
        const t1shi5 = s[11] ^ hi
        const t1slo10 = s[20] ^ lo
        const t1shi10 = s[21] ^ hi
        const t1slo15 = s[30] ^ lo
        const t1shi15 = s[31] ^ hi
        const t1slo20 = s[40] ^ lo
        const t1shi20 = s[41] ^ hi
        lo = lo0 ^ (lo2 << 1 | hi2 >>> 31)
        hi = hi0 ^ (hi2 << 1 | lo2 >>> 31)
        const t1slo1 = s[2] ^ lo
        const t1shi1 = s[3] ^ hi
        const t1slo6 = s[12] ^ lo
        const t1shi6 = s[13] ^ hi
        const t1slo11 = s[22] ^ lo
        const t1shi11 = s[23] ^ hi
        const t1slo16 = s[32] ^ lo
        const t1shi16 = s[33] ^ hi
        const t1slo21 = s[42] ^ lo
        const t1shi21 = s[43] ^ hi
        lo = lo1 ^ (lo3 << 1 | hi3 >>> 31)
        hi = hi1 ^ (hi3 << 1 | lo3 >>> 31)
        const t1slo2 = s[4] ^ lo
        const t1shi2 = s[5] ^ hi
        const t1slo7 = s[14] ^ lo
        const t1shi7 = s[15] ^ hi
        const t1slo12 = s[24] ^ lo
        const t1shi12 = s[25] ^ hi
        const t1slo17 = s[34] ^ lo
        const t1shi17 = s[35] ^ hi
        const t1slo22 = s[44] ^ lo
        const t1shi22 = s[45] ^ hi
        lo = lo2 ^ (lo4 << 1 | hi4 >>> 31)
        hi = hi2 ^ (hi4 << 1 | lo4 >>> 31)
        const t1slo3 = s[6] ^ lo
        const t1shi3 = s[7] ^ hi
        const t1slo8 = s[16] ^ lo
        const t1shi8 = s[17] ^ hi
        const t1slo13 = s[26] ^ lo
        const t1shi13 = s[27] ^ hi
        const t1slo18 = s[36] ^ lo
        const t1shi18 = s[37] ^ hi
        const t1slo23 = s[46] ^ lo
        const t1shi23 = s[47] ^ hi
        lo = lo3 ^ (lo0 << 1 | hi0 >>> 31)
        hi = hi3 ^ (hi0 << 1 | lo0 >>> 31)
        const t1slo4 = s[8] ^ lo
        const t1shi4 = s[9] ^ hi
        const t1slo9 = s[18] ^ lo
        const t1shi9 = s[19] ^ hi
        const t1slo14 = s[28] ^ lo
        const t1shi14 = s[29] ^ hi
        const t1slo19 = s[38] ^ lo
        const t1shi19 = s[39] ^ hi
        const t1slo24 = s[48] ^ lo
        const t1shi24 = s[49] ^ hi
    
        // rho & pi
        const t2slo0 = t1slo0
        const t2shi0 = t1shi0
        const t2slo16 = (t1shi5 << 4 | t1slo5 >>> 28)
        const t2shi16 = (t1slo5 << 4 | t1shi5 >>> 28)
        const t2slo7 = (t1slo10 << 3 | t1shi10 >>> 29)
        const t2shi7 = (t1shi10 << 3 | t1slo10 >>> 29)
        const t2slo23 = (t1shi15 << 9 | t1slo15 >>> 23)
        const t2shi23 = (t1slo15 << 9 | t1shi15 >>> 23)
        const t2slo14 = (t1slo20 << 18 | t1shi20 >>> 14)
        const t2shi14 = (t1shi20 << 18 | t1slo20 >>> 14)
        const t2slo10 = (t1slo1 << 1 | t1shi1 >>> 31)
        const t2shi10 = (t1shi1 << 1 | t1slo1 >>> 31)
        const t2slo1 = (t1shi6 << 12 | t1slo6 >>> 20)
        const t2shi1 = (t1slo6 << 12 | t1shi6 >>> 20)
        const t2slo17 = (t1slo11 << 10 | t1shi11 >>> 22)
        const t2shi17 = (t1shi11 << 10 | t1slo11 >>> 22)
        const t2slo8 = (t1shi16 << 13 | t1slo16 >>> 19)
        const t2shi8 = (t1slo16 << 13 | t1shi16 >>> 19)
        const t2slo24 = (t1slo21 << 2 | t1shi21 >>> 30)
        const t2shi24 = (t1shi21 << 2 | t1slo21 >>> 30)
        const t2slo20 = (t1shi2 << 30 | t1slo2 >>> 2)
        const t2shi20 = (t1slo2 << 30 | t1shi2 >>> 2)
        const t2slo11 = (t1slo7 << 6 | t1shi7 >>> 26)
        const t2shi11 = (t1shi7 << 6 | t1slo7 >>> 26)
        const t2slo2 = (t1shi12 << 11 | t1slo12 >>> 21)
        const t2shi2 = (t1slo12 << 11 | t1shi12 >>> 21)
        const t2slo18 = (t1slo17 << 15 | t1shi17 >>> 17)
        const t2shi18 = (t1shi17 << 15 | t1slo17 >>> 17)
        const t2slo9 = (t1shi22 << 29 | t1slo22 >>> 3)
        const t2shi9 = (t1slo22 << 29 | t1shi22 >>> 3)
        const t2slo5 = (t1slo3 << 28 | t1shi3 >>> 4)
        const t2shi5 = (t1shi3 << 28 | t1slo3 >>> 4)
        const t2slo21 = (t1shi8 << 23 | t1slo8 >>> 9)
        const t2shi21 = (t1slo8 << 23 | t1shi8 >>> 9)
        const t2slo12 = (t1slo13 << 25 | t1shi13 >>> 7)
        const t2shi12 = (t1shi13 << 25 | t1slo13 >>> 7)
        const t2slo3 = (t1slo18 << 21 | t1shi18 >>> 11)
        const t2shi3 = (t1shi18 << 21 | t1slo18 >>> 11)
        const t2slo19 = (t1shi23 << 24 | t1slo23 >>> 8)
        const t2shi19 = (t1slo23 << 24 | t1shi23 >>> 8)
        const t2slo15 = (t1slo4 << 27 | t1shi4 >>> 5)
        const t2shi15 = (t1shi4 << 27 | t1slo4 >>> 5)
        const t2slo6 = (t1slo9 << 20 | t1shi9 >>> 12)
        const t2shi6 = (t1shi9 << 20 | t1slo9 >>> 12)
        const t2slo22 = (t1shi14 << 7 | t1slo14 >>> 25)
        const t2shi22 = (t1slo14 << 7 | t1shi14 >>> 25)
        const t2slo13 = (t1slo19 << 8 | t1shi19 >>> 24)
        const t2shi13 = (t1shi19 << 8 | t1slo19 >>> 24)
        const t2slo4 = (t1slo24 << 14 | t1shi24 >>> 18)
        const t2shi4 = (t1shi24 << 14 | t1slo24 >>> 18)
    
        // chi
        s[0] = t2slo0 ^ (~t2slo1 & t2slo2)
        s[1] = t2shi0 ^ (~t2shi1 & t2shi2)
        s[10] = t2slo5 ^ (~t2slo6 & t2slo7)
        s[11] = t2shi5 ^ (~t2shi6 & t2shi7)
        s[20] = t2slo10 ^ (~t2slo11 & t2slo12)
        s[21] = t2shi10 ^ (~t2shi11 & t2shi12)
        s[30] = t2slo15 ^ (~t2slo16 & t2slo17)
        s[31] = t2shi15 ^ (~t2shi16 & t2shi17)
        s[40] = t2slo20 ^ (~t2slo21 & t2slo22)
        s[41] = t2shi20 ^ (~t2shi21 & t2shi22)
        s[2] = t2slo1 ^ (~t2slo2 & t2slo3)
        s[3] = t2shi1 ^ (~t2shi2 & t2shi3)
        s[12] = t2slo6 ^ (~t2slo7 & t2slo8)
        s[13] = t2shi6 ^ (~t2shi7 & t2shi8)
        s[22] = t2slo11 ^ (~t2slo12 & t2slo13)
        s[23] = t2shi11 ^ (~t2shi12 & t2shi13)
        s[32] = t2slo16 ^ (~t2slo17 & t2slo18)
        s[33] = t2shi16 ^ (~t2shi17 & t2shi18)
        s[42] = t2slo21 ^ (~t2slo22 & t2slo23)
        s[43] = t2shi21 ^ (~t2shi22 & t2shi23)
        s[4] = t2slo2 ^ (~t2slo3 & t2slo4)
        s[5] = t2shi2 ^ (~t2shi3 & t2shi4)
        s[14] = t2slo7 ^ (~t2slo8 & t2slo9)
        s[15] = t2shi7 ^ (~t2shi8 & t2shi9)
        s[24] = t2slo12 ^ (~t2slo13 & t2slo14)
        s[25] = t2shi12 ^ (~t2shi13 & t2shi14)
        s[34] = t2slo17 ^ (~t2slo18 & t2slo19)
        s[35] = t2shi17 ^ (~t2shi18 & t2shi19)
        s[44] = t2slo22 ^ (~t2slo23 & t2slo24)
        s[45] = t2shi22 ^ (~t2shi23 & t2shi24)
        s[6] = t2slo3 ^ (~t2slo4 & t2slo0)
        s[7] = t2shi3 ^ (~t2shi4 & t2shi0)
        s[16] = t2slo8 ^ (~t2slo9 & t2slo5)
        s[17] = t2shi8 ^ (~t2shi9 & t2shi5)
        s[26] = t2slo13 ^ (~t2slo14 & t2slo10)
        s[27] = t2shi13 ^ (~t2shi14 & t2shi10)
        s[36] = t2slo18 ^ (~t2slo19 & t2slo15)
        s[37] = t2shi18 ^ (~t2shi19 & t2shi15)
        s[46] = t2slo23 ^ (~t2slo24 & t2slo20)
        s[47] = t2shi23 ^ (~t2shi24 & t2shi20)
        s[8] = t2slo4 ^ (~t2slo0 & t2slo1)
        s[9] = t2shi4 ^ (~t2shi0 & t2shi1)
        s[18] = t2slo9 ^ (~t2slo5 & t2slo6)
        s[19] = t2shi9 ^ (~t2shi5 & t2shi6)
        s[28] = t2slo14 ^ (~t2slo10 & t2slo11)
        s[29] = t2shi14 ^ (~t2shi10 & t2shi11)
        s[38] = t2slo19 ^ (~t2slo15 & t2slo16)
        s[39] = t2shi19 ^ (~t2shi15 & t2shi16)
        s[48] = t2slo24 ^ (~t2slo20 & t2slo21)
        s[49] = t2shi24 ^ (~t2shi20 & t2shi21)
    
        // iota
        s[0] ^= P1600_ROUND_CONSTANTS[round * 2]
        s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1]
      }
    }
    
    },{}],193:[function(require,module,exports){
    (function (Buffer){(function (){
    const keccakState = require('./keccak-state-unroll')
    
    function Keccak () {
      // much faster than `new Array(50)`
      this.state = [
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0
      ]
    
      this.blockSize = null
      this.count = 0
      this.squeezing = false
    }
    
    Keccak.prototype.initialize = function (rate, capacity) {
      for (let i = 0; i < 50; ++i) this.state[i] = 0
      this.blockSize = rate / 8
      this.count = 0
      this.squeezing = false
    }
    
    Keccak.prototype.absorb = function (data) {
      for (let i = 0; i < data.length; ++i) {
        this.state[~~(this.count / 4)] ^= data[i] << (8 * (this.count % 4))
        this.count += 1
        if (this.count === this.blockSize) {
          keccakState.p1600(this.state)
          this.count = 0
        }
      }
    }
    
    Keccak.prototype.absorbLastFewBits = function (bits) {
      this.state[~~(this.count / 4)] ^= bits << (8 * (this.count % 4))
      if ((bits & 0x80) !== 0 && this.count === (this.blockSize - 1)) keccakState.p1600(this.state)
      this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << (8 * ((this.blockSize - 1) % 4))
      keccakState.p1600(this.state)
      this.count = 0
      this.squeezing = true
    }
    
    Keccak.prototype.squeeze = function (length) {
      if (!this.squeezing) this.absorbLastFewBits(0x01)
    
      const output = Buffer.alloc(length)
      for (let i = 0; i < length; ++i) {
        output[i] = (this.state[~~(this.count / 4)] >>> (8 * (this.count % 4))) & 0xff
        this.count += 1
        if (this.count === this.blockSize) {
          keccakState.p1600(this.state)
          this.count = 0
        }
      }
    
      return output
    }
    
    Keccak.prototype.copy = function (dest) {
      for (let i = 0; i < 50; ++i) dest.state[i] = this.state[i]
      dest.blockSize = this.blockSize
      dest.count = this.count
      dest.squeezing = this.squeezing
    }
    
    module.exports = Keccak
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"./keccak-state-unroll":192,"buffer":301}],194:[function(require,module,exports){
    'use strict'
    var inherits = require('inherits')
    var HashBase = require('hash-base')
    var Buffer = require('safe-buffer').Buffer
    
    var ARRAY16 = new Array(16)
    
    function MD5 () {
      HashBase.call(this, 64)
    
      // state
      this._a = 0x67452301
      this._b = 0xefcdab89
      this._c = 0x98badcfe
      this._d = 0x10325476
    }
    
    inherits(MD5, HashBase)
    
    MD5.prototype._update = function () {
      var M = ARRAY16
      for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)
    
      var a = this._a
      var b = this._b
      var c = this._c
      var d = this._d
    
      a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
      d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
      c = fnF(c, d, a, b, M[2], 0x242070db, 17)
      b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
      a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
      d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
      c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
      b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
      a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
      d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
      c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
      b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
      a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
      d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
      c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
      b = fnF(b, c, d, a, M[15], 0x49b40821, 22)
    
      a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
      d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
      c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
      b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
      a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
      d = fnG(d, a, b, c, M[10], 0x02441453, 9)
      c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
      b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
      a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
      d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
      c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
      b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
      a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
      d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
      c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
      b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)
    
      a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
      d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
      c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
      b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
      a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
      d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
      c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
      b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
      a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
      d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
      c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
      b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
      a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
      d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
      c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
      b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)
    
      a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
      d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
      c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
      b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
      a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
      d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
      c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
      b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
      a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
      d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
      c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
      b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
      a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
      d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
      c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
      b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)
    
      this._a = (this._a + a) | 0
      this._b = (this._b + b) | 0
      this._c = (this._c + c) | 0
      this._d = (this._d + d) | 0
    }
    
    MD5.prototype._digest = function () {
      // create padding and handle blocks
      this._block[this._blockOffset++] = 0x80
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64)
        this._update()
        this._blockOffset = 0
      }
    
      this._block.fill(0, this._blockOffset, 56)
      this._block.writeUInt32LE(this._length[0], 56)
      this._block.writeUInt32LE(this._length[1], 60)
      this._update()
    
      // produce result
      var buffer = Buffer.allocUnsafe(16)
      buffer.writeInt32LE(this._a, 0)
      buffer.writeInt32LE(this._b, 4)
      buffer.writeInt32LE(this._c, 8)
      buffer.writeInt32LE(this._d, 12)
      return buffer
    }
    
    function rotl (x, n) {
      return (x << n) | (x >>> (32 - n))
    }
    
    function fnF (a, b, c, d, m, k, s) {
      return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
    }
    
    function fnG (a, b, c, d, m, k, s) {
      return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
    }
    
    function fnH (a, b, c, d, m, k, s) {
      return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
    }
    
    function fnI (a, b, c, d, m, k, s) {
      return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
    }
    
    module.exports = MD5
    
    },{"hash-base":170,"inherits":184,"safe-buffer":216}],195:[function(require,module,exports){
    module.exports = assert;
    
    function assert(val, msg) {
      if (!val)
        throw new Error(msg || 'Assertion failed');
    }
    
    assert.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
    };
    
    },{}],196:[function(require,module,exports){
    'use strict';
    
    var utils = exports;
    
    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== 'string') {
        for (var i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
        return res;
      }
      if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      } else {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 0xff;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils.toArray = toArray;
    
    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    utils.zero2 = zero2;
    
    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    utils.toHex = toHex;
    
    utils.encode = function encode(arr, enc) {
      if (enc === 'hex')
        return toHex(arr);
      else
        return arr;
    };
    
    },{}],197:[function(require,module,exports){
    (function (process,global){(function (){
    'use strict'
    
    // limit of Crypto.getRandomValues()
    // https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
    var MAX_BYTES = 65536
    
    // Node supports requesting up to this number of bytes
    // https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
    var MAX_UINT32 = 4294967295
    
    function oldBrowser () {
      throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
    }
    
    var Buffer = require('safe-buffer').Buffer
    var crypto = global.crypto || global.msCrypto
    
    if (crypto && crypto.getRandomValues) {
      module.exports = randomBytes
    } else {
      module.exports = oldBrowser
    }
    
    function randomBytes (size, cb) {
      // phantomjs needs to throw
      if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')
    
      var bytes = Buffer.allocUnsafe(size)
    
      if (size > 0) {  // getRandomValues fails on IE if size == 0
        if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
          // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
          for (var generated = 0; generated < size; generated += MAX_BYTES) {
            // buffer.slice automatically checks if the end is past the end of
            // the buffer so we don't have to here
            crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
          }
        } else {
          crypto.getRandomValues(bytes)
        }
      }
    
      if (typeof cb === 'function') {
        return process.nextTick(function () {
          cb(null, bytes)
        })
      }
    
      return bytes
    }
    
    }).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"_process":388,"safe-buffer":216}],198:[function(require,module,exports){
    'use strict';
    
    function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
    
    var codes = {};
    
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
    
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
    
      var NodeError =
      /*#__PURE__*/
      function (_Base) {
        _inheritsLoose(NodeError, _Base);
    
        function NodeError(arg1, arg2, arg3) {
          return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
    
        return NodeError;
      }(Base);
    
      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes[code] = NodeError;
    } // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
    
    
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function (i) {
          return String(i);
        });
    
        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
    
    
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
    
    
    function endsWith(str, search, this_len) {
      if (this_len === undefined || this_len > str.length) {
        this_len = str.length;
      }
    
      return str.substring(this_len - search.length, this_len) === search;
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
    
    
    function includes(str, search, start) {
      if (typeof start !== 'number') {
        start = 0;
      }
    
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    
    createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"';
    }, TypeError);
    createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
      // determiner: 'must be' or 'must not be'
      var determiner;
    
      if (typeof expected === 'string' && startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
      } else {
        determiner = 'must be';
      }
    
      var msg;
    
      if (endsWith(name, ' argument')) {
        // For cases like 'first argument'
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
      } else {
        var type = includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
      }
    
      msg += ". Received type ".concat(typeof actual);
      return msg;
    }, TypeError);
    createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
    createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
      return 'The ' + name + ' method is not implemented';
    });
    createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
    createErrorType('ERR_STREAM_DESTROYED', function (name) {
      return 'Cannot call ' + name + ' after a stream was destroyed';
    });
    createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
    createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
    createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
    createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
    createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
      return 'Unknown encoding: ' + arg;
    }, TypeError);
    createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
    module.exports.codes = codes;
    
    },{}],199:[function(require,module,exports){
    (function (process){(function (){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    // a duplex stream is just a stream that is both readable and writable.
    // Since JS doesn't have multiple prototypal inheritance, this class
    // prototypally inherits from Readable, and then parasitically from
    // Writable.
    'use strict';
    /*<replacement>*/
    
    var objectKeys = Object.keys || function (obj) {
      var keys = [];
    
      for (var key in obj) {
        keys.push(key);
      }
    
      return keys;
    };
    /*</replacement>*/
    
    
    module.exports = Duplex;
    
    var Readable = require('./_stream_readable');
    
    var Writable = require('./_stream_writable');
    
    require('inherits')(Duplex, Readable);
    
    {
      // Allow the keys array to be GC'ed.
      var keys = objectKeys(Writable.prototype);
    
      for (var v = 0; v < keys.length; v++) {
        var method = keys[v];
        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    
    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      this.allowHalfOpen = true;
    
      if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
    
        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once('end', onend);
        }
      }
    }
    
    Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex.prototype, 'writableBuffer', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex.prototype, 'writableLength', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    }); // the no-half-open enforcer
    
    function onend() {
      // If the writable side ended, then we're ok.
      if (this._writableState.ended) return; // no more data can be written.
      // But allow more writes to happen in this tick.
    
      process.nextTick(onEndNT, this);
    }
    
    function onEndNT(self) {
      self.end();
    }
    
    Object.defineProperty(Duplex.prototype, 'destroyed', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) {
          return false;
        }
    
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) {
          return;
        } // backward compatibility, the user is explicitly
        // managing destroyed
    
    
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
    }).call(this)}).call(this,require('_process'))
    },{"./_stream_readable":201,"./_stream_writable":203,"_process":388,"inherits":184}],200:[function(require,module,exports){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    // a passthrough stream.
    // basically just the most minimal sort of Transform stream.
    // Every written chunk gets output as-is.
    'use strict';
    
    module.exports = PassThrough;
    
    var Transform = require('./_stream_transform');
    
    require('inherits')(PassThrough, Transform);
    
    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);
      Transform.call(this, options);
    }
    
    PassThrough.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };
    },{"./_stream_transform":202,"inherits":184}],201:[function(require,module,exports){
    (function (process,global){(function (){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    'use strict';
    
    module.exports = Readable;
    /*<replacement>*/
    
    var Duplex;
    /*</replacement>*/
    
    Readable.ReadableState = ReadableState;
    /*<replacement>*/
    
    var EE = require('events').EventEmitter;
    
    var EElistenerCount = function EElistenerCount(emitter, type) {
      return emitter.listeners(type).length;
    };
    /*</replacement>*/
    
    /*<replacement>*/
    
    
    var Stream = require('./internal/streams/stream');
    /*</replacement>*/
    
    
    var Buffer = require('buffer').Buffer;
    
    var OurUint8Array = global.Uint8Array || function () {};
    
    function _uint8ArrayToBuffer(chunk) {
      return Buffer.from(chunk);
    }
    
    function _isUint8Array(obj) {
      return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    /*<replacement>*/
    
    
    var debugUtil = require('util');
    
    var debug;
    
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog('stream');
    } else {
      debug = function debug() {};
    }
    /*</replacement>*/
    
    
    var BufferList = require('./internal/streams/buffer_list');
    
    var destroyImpl = require('./internal/streams/destroy');
    
    var _require = require('./internal/streams/state'),
        getHighWaterMark = _require.getHighWaterMark;
    
    var _require$codes = require('../errors').codes,
        ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
        ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
        ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
    
    
    var StringDecoder;
    var createReadableStreamAsyncIterator;
    var from;
    
    require('inherits')(Readable, Stream);
    
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
    
    function prependListener(emitter, event, fn) {
      // Sadly this is not cacheable as some libraries bundle their own
      // event emitter implementation with them.
      if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
      // userland ones.  NEVER DO THIS. This is here only because this code needs
      // to continue to work with older versions of Node.js that do not include
      // the prependListener() method. The goal is to eventually remove this hack.
    
      if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
    }
    
    function ReadableState(options, stream, isDuplex) {
      Duplex = Duplex || require('./_stream_duplex');
      options = options || {}; // Duplex streams are both readable and writable, but share
      // the same options object.
      // However, some cases require setting options to different
      // values for the readable and the writable sides of the duplex stream.
      // These options can be provided separately as readableXXX and writableXXX.
    
      if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
      // make all the buffer merging and length checks go away
    
      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
      // Note: 0 is a valid value, means "don't call _read preemptively ever"
    
      this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
      // linked list can remove elements from the beginning faster than
      // array.shift()
    
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
      // immediately, or on a later tick.  We set this to true at first, because
      // any actions that shouldn't happen until "later" should generally also
      // not happen before the first read call.
    
      this.sync = true; // whenever we return null, then we set a flag to say
      // that we're awaiting a 'readable' event emission.
    
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true; // Should close be emitted on destroy. Defaults to true.
    
      this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    
      this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    
      this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
    
      this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s
    
      this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
    
      if (options.encoding) {
        if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    
    function Readable(options) {
      Duplex = Duplex || require('./_stream_duplex');
      if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
      // the ReadableState constructor, at least with V8 6.5
    
      var isDuplex = this instanceof Duplex;
      this._readableState = new ReadableState(options, this, isDuplex); // legacy
    
      this.readable = true;
    
      if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
      }
    
      Stream.call(this);
    }
    
    Object.defineProperty(Readable.prototype, 'destroyed', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === undefined) {
          return false;
        }
    
        return this._readableState.destroyed;
      },
      set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) {
          return;
        } // backward compatibility, the user is explicitly
        // managing destroyed
    
    
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    
    Readable.prototype._destroy = function (err, cb) {
      cb(err);
    }; // Manually shove something into the read() buffer.
    // This returns true if the highWaterMark has not been hit yet,
    // similar to how Writable.write() returns true if you should
    // write() some more.
    
    
    Readable.prototype.push = function (chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
    
      if (!state.objectMode) {
        if (typeof chunk === 'string') {
          encoding = encoding || state.defaultEncoding;
    
          if (encoding !== state.encoding) {
            chunk = Buffer.from(chunk, encoding);
            encoding = '';
          }
    
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
    
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    }; // Unshift should *always* be something directly out of read()
    
    
    Readable.prototype.unshift = function (chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug('readableAddChunk', chunk);
      var state = stream._readableState;
    
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    
        if (er) {
          errorOrDestroy(stream, er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
    
          if (addToFront) {
            if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;
    
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore(stream, state);
        }
      } // We can push more data if we are below the highWaterMark.
      // Also, if we have no data yet, we can stand some more bytes.
      // This is to work around cases where hwm=0, such as the repl.
    
    
      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }
    
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit('data', chunk);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
      }
    
      maybeReadMore(stream, state);
    }
    
    function chunkInvalid(state, chunk) {
      var er;
    
      if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
      }
    
      return er;
    }
    
    Readable.prototype.isPaused = function () {
      return this._readableState.flowing === false;
    }; // backwards compatibility.
    
    
    Readable.prototype.setEncoding = function (enc) {
      if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
      var decoder = new StringDecoder(enc);
      this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    
      this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    
      var p = this._readableState.buffer.head;
      var content = '';
    
      while (p !== null) {
        content += decoder.write(p.data);
        p = p.next;
      }
    
      this._readableState.buffer.clear();
    
      if (content !== '') this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    }; // Don't raise the hwm > 1GB
    
    
    var MAX_HWM = 0x40000000;
    
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
        n = MAX_HWM;
      } else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
    
      return n;
    } // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    
    
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended) return 0;
      if (state.objectMode) return 1;
    
      if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
      } // If we're asking for more than the current hwm, then raise the hwm.
    
    
      if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length) return n; // Don't have enough
    
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
    
      return state.length;
    } // you can override either this method, or the async _read(n) below.
    
    
    Readable.prototype.read = function (n) {
      debug('read', n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
      // already have a bunch of data in the buffer, then just trigger
      // the 'readable' event and move on.
    
      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
        return null;
      }
    
      n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    
      if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
      } // All the actual chunk generation logic needs to be
      // *below* the call to _read.  The reason is that in certain
      // synthetic stream cases, such as passthrough streams, _read
      // may be a completely synchronous operation which may change
      // the state of the read buffer, providing enough data when
      // before there was *not* enough.
      //
      // So, the steps are:
      // 1. Figure out what the state of things will be after we do
      // a read from the buffer.
      //
      // 2. If that resulting state will trigger a _read, then call _read.
      // Note that this may be asynchronous, or synchronous.  Yes, it is
      // deeply ugly to write APIs this way, but that still doesn't mean
      // that the Readable class should behave improperly, as streams are
      // designed to be sync/async agnostic.
      // Take note if the _read call is sync or async (ie, if the read call
      // has returned yet), so that we know whether or not it's safe to emit
      // 'readable' etc.
      //
      // 3. Actually pull the requested chunks out of the buffer and return.
      // if we need a readable event, then we need to do some reading.
    
    
      var doRead = state.needReadable;
      debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some
    
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug('length less than watermark', doRead);
      } // however, if we've ended, then there's no point, and if we're already
      // reading, then it's unnecessary.
    
    
      if (state.ended || state.reading) {
        doRead = false;
        debug('reading or ended', doRead);
      } else if (doRead) {
        debug('do read');
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
    
        if (state.length === 0) state.needReadable = true; // call internal read method
    
        this._read(state.highWaterMark);
    
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
    
        if (!state.reading) n = howMuchToRead(nOrig, state);
      }
    
      var ret;
      if (n > 0) ret = fromList(n, state);else ret = null;
    
      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        state.awaitDrain = 0;
      }
    
      if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
    
        if (nOrig !== n && state.ended) endReadable(this);
      }
    
      if (ret !== null) this.emit('data', ret);
      return ret;
    };
    
    function onEofChunk(stream, state) {
      debug('onEofChunk');
      if (state.ended) return;
    
      if (state.decoder) {
        var chunk = state.decoder.end();
    
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
    
      state.ended = true;
    
      if (state.sync) {
        // if we are sync, wait until next tick to emit the data.
        // Otherwise we risk emitting data in the flow()
        // the readable code triggers during a read() call
        emitReadable(stream);
      } else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
    
        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_(stream);
        }
      }
    } // Don't emit readable right away in sync mode, because this can trigger
    // another read() call => stack overflow.  This way, it might trigger
    // a nextTick recursion warning, but that's not so bad.
    
    
    function emitReadable(stream) {
      var state = stream._readableState;
      debug('emitReadable', state.needReadable, state.emittedReadable);
      state.needReadable = false;
    
      if (!state.emittedReadable) {
        debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
      }
    }
    
    function emitReadable_(stream) {
      var state = stream._readableState;
      debug('emitReadable_', state.destroyed, state.length, state.ended);
    
      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit('readable');
        state.emittedReadable = false;
      } // The stream needs another readable event if
      // 1. It is not flowing, as the flow mechanism will take
      //    care of it.
      // 2. It is not ended.
      // 3. It is below the highWaterMark, so we can schedule
      //    another readable later.
    
    
      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow(stream);
    } // at this point, the user has presumably seen the 'readable' event,
    // and called read() to consume some data.  that may have triggered
    // in turn another _read(n) call, in which case reading = true if
    // it's in progress.
    // However, if we're not ended, or reading, and the length < hwm,
    // then go ahead and try to read some more preemptively.
    
    
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
      }
    }
    
    function maybeReadMore_(stream, state) {
      // Attempt to read more data if we should.
      //
      // The conditions for reading more data are (one of):
      // - Not enough data buffered (state.length < state.highWaterMark). The loop
      //   is responsible for filling the buffer with enough data if such data
      //   is available. If highWaterMark is 0 and we are not in the flowing mode
      //   we should _not_ attempt to buffer any extra data. We'll get more data
      //   when the stream consumer calls read() instead.
      // - No data in the buffer, and the stream is in flowing mode. In this mode
      //   the loop below is responsible for ensuring read() is called. Failing to
      //   call read here would abort the flow and there's no other mechanism for
      //   continuing the flow if the stream consumer has just subscribed to the
      //   'data' event.
      //
      // In addition to the above conditions to keep reading data, the following
      // conditions prevent the data from being read:
      // - The stream has ended (state.ended).
      // - There is already a pending 'read' operation (state.reading). This is a
      //   case where the the stream has called the implementation defined _read()
      //   method, but they are processing the call asynchronously and have _not_
      //   called push() with new data. In this case we skip performing more
      //   read()s. The execution ends in this method again after the _read() ends
      //   up calling push() with more data.
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) // didn't get any data, stop spinning.
          break;
      }
    
      state.readingMore = false;
    } // abstract method.  to be overridden in specific implementation classes.
    // call cb(er, data) where data is <= n in length.
    // for virtual (non-string, non-buffer) streams, "length" is somewhat
    // arbitrary, and perhaps not very meaningful.
    
    
    Readable.prototype._read = function (n) {
      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
    };
    
    Readable.prototype.pipe = function (dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
    
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
    
        case 1:
          state.pipes = [state.pipes, dest];
          break;
    
        default:
          state.pipes.push(dest);
          break;
      }
    
      state.pipesCount += 1;
      debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
      dest.on('unpipe', onunpipe);
    
      function onunpipe(readable, unpipeInfo) {
        debug('onunpipe');
    
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
    
      function onend() {
        debug('onend');
        dest.end();
      } // when the dest drains, it reduces the awaitDrain counter
      // on the source.  This would be more elegant with a .once()
      // handler in flow(), but adding and removing repeatedly is
      // too slow.
    
    
      var ondrain = pipeOnDrain(src);
      dest.on('drain', ondrain);
      var cleanedUp = false;
    
      function cleanup() {
        debug('cleanup'); // cleanup event handlers once the pipe is broken
    
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
    
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }
    
      src.on('data', ondata);
    
      function ondata(chunk) {
        debug('ondata');
        var ret = dest.write(chunk);
        debug('dest.write', ret);
    
        if (ret === false) {
          // If the user unpiped during `dest.write()`, it is possible
          // to get stuck in a permanently paused state if that write
          // also returned false.
          // => Check whether `dest` is still a piping destination.
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug('false write response, pause', state.awaitDrain);
            state.awaitDrain++;
          }
    
          src.pause();
        }
      } // if the dest has an error, then stop piping into it.
      // however, don't suppress the throwing behavior for this.
    
    
      function onerror(er) {
        debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
      } // Make sure our error handler is attached before userland ones.
    
    
      prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.
    
      function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
      }
    
      dest.once('close', onclose);
    
      function onfinish() {
        debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
      }
    
      dest.once('finish', onfinish);
    
      function unpipe() {
        debug('unpipe');
        src.unpipe(dest);
      } // tell the dest that it's being piped to
    
    
      dest.emit('pipe', src); // start the flow if it hasn't been started already.
    
      if (!state.flowing) {
        debug('pipe resume');
        src.resume();
      }
    
      return dest;
    };
    
    function pipeOnDrain(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
    
        if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    
    Readable.prototype.unpipe = function (dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      }; // if we're not piping anywhere, then do nothing.
    
      if (state.pipesCount === 0) return this; // just one destination.  most common case.
    
      if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
    
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
      } // slow case. multiple pipe destinations.
    
    
      if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
    
        for (var i = 0; i < len; i++) {
          dests[i].emit('unpipe', this, {
            hasUnpiped: false
          });
        }
    
        return this;
      } // try to find the right one.
    
    
      var index = indexOf(state.pipes, dest);
      if (index === -1) return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1) state.pipes = state.pipes[0];
      dest.emit('unpipe', this, unpipeInfo);
      return this;
    }; // set up data events if they are asked for
    // Ensure readable listeners eventually get something
    
    
    Readable.prototype.on = function (ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      var state = this._readableState;
    
      if (ev === 'data') {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused
    
        if (state.flowing !== false) this.resume();
      } else if (ev === 'readable') {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug('on readable', state.length, state.reading);
    
          if (state.length) {
            emitReadable(this);
          } else if (!state.reading) {
            process.nextTick(nReadingNextTick, this);
          }
        }
      }
    
      return res;
    };
    
    Readable.prototype.addListener = Readable.prototype.on;
    
    Readable.prototype.removeListener = function (ev, fn) {
      var res = Stream.prototype.removeListener.call(this, ev, fn);
    
      if (ev === 'readable') {
        // We need to check if there is someone still listening to
        // readable and reset the state. However this needs to happen
        // after readable has been emitted but before I/O (nextTick) to
        // support once('readable', fn) cycles. This means that calling
        // resume within the same tick will have no
        // effect.
        process.nextTick(updateReadableListening, this);
      }
    
      return res;
    };
    
    Readable.prototype.removeAllListeners = function (ev) {
      var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    
      if (ev === 'readable' || ev === undefined) {
        // We need to check if there is someone still listening to
        // readable and reset the state. However this needs to happen
        // after readable has been emitted but before I/O (nextTick) to
        // support once('readable', fn) cycles. This means that calling
        // resume within the same tick will have no
        // effect.
        process.nextTick(updateReadableListening, this);
      }
    
      return res;
    };
    
    function updateReadableListening(self) {
      var state = self._readableState;
      state.readableListening = self.listenerCount('readable') > 0;
    
      if (state.resumeScheduled && !state.paused) {
        // flowing needs to be set to true now, otherwise
        // the upcoming resume will not flow.
        state.flowing = true; // crude way to check if we should resume
      } else if (self.listenerCount('data') > 0) {
        self.resume();
      }
    }
    
    function nReadingNextTick(self) {
      debug('readable nexttick read 0');
      self.read(0);
    } // pause() and resume() are remnants of the legacy readable stream API
    // If the user uses them, then switch into old mode.
    
    
    Readable.prototype.resume = function () {
      var state = this._readableState;
    
      if (!state.flowing) {
        debug('resume'); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
    
        state.flowing = !state.readableListening;
        resume(this, state);
      }
    
      state.paused = false;
      return this;
    };
    
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
      }
    }
    
    function resume_(stream, state) {
      debug('resume', state.reading);
    
      if (!state.reading) {
        stream.read(0);
      }
    
      state.resumeScheduled = false;
      stream.emit('resume');
      flow(stream);
      if (state.flowing && !state.reading) stream.read(0);
    }
    
    Readable.prototype.pause = function () {
      debug('call pause flowing=%j', this._readableState.flowing);
    
      if (this._readableState.flowing !== false) {
        debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
      }
    
      this._readableState.paused = true;
      return this;
    };
    
    function flow(stream) {
      var state = stream._readableState;
      debug('flow', state.flowing);
    
      while (state.flowing && stream.read() !== null) {
        ;
      }
    } // wrap an old-style stream as the async data source.
    // This is *not* part of the readable stream interface.
    // It is an ugly unfortunate mess of history.
    
    
    Readable.prototype.wrap = function (stream) {
      var _this = this;
    
      var state = this._readableState;
      var paused = false;
      stream.on('end', function () {
        debug('wrapped end');
    
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) _this.push(chunk);
        }
    
        _this.push(null);
      });
      stream.on('data', function (chunk) {
        debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
    
        if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
    
        var ret = _this.push(chunk);
    
        if (!ret) {
          paused = true;
          stream.pause();
        }
      }); // proxy all the other methods.
      // important when wrapping filters and duplexes.
    
      for (var i in stream) {
        if (this[i] === undefined && typeof stream[i] === 'function') {
          this[i] = function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      } // proxy certain important events.
    
    
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      } // when we try to consume some more bytes, simply unpause the
      // underlying stream.
    
    
      this._read = function (n) {
        debug('wrapped _read', n);
    
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
    
      return this;
    };
    
    if (typeof Symbol === 'function') {
      Readable.prototype[Symbol.asyncIterator] = function () {
        if (createReadableStreamAsyncIterator === undefined) {
          createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
        }
    
        return createReadableStreamAsyncIterator(this);
      };
    }
    
    Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable.prototype, 'readableBuffer', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable.prototype, 'readableFlowing', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    }); // exposed for testing purposes only.
    
    Readable._fromList = fromList;
    Object.defineProperty(Readable.prototype, 'readableLength', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.length;
      }
    }); // Pluck off n bytes from an array of buffers.
    // Length is the combined lengths of all the buffers in the list.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    
    function fromList(n, state) {
      // nothing buffered
      if (state.length === 0) return null;
      var ret;
      if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        // read part of list
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }
    
    function endReadable(stream) {
      var state = stream._readableState;
      debug('endReadable', state.endEmitted);
    
      if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
      }
    }
    
    function endReadableNT(state, stream) {
      debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.
    
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
    
        if (state.autoDestroy) {
          // In case of duplex streams we need a way to detect
          // if the writable side is ready for autoDestroy as well
          var wState = stream._writableState;
    
          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }
    
    if (typeof Symbol === 'function') {
      Readable.from = function (iterable, opts) {
        if (from === undefined) {
          from = require('./internal/streams/from');
        }
    
        return from(Readable, iterable, opts);
      };
    }
    
    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
      }
    
      return -1;
    }
    }).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"../errors":198,"./_stream_duplex":199,"./internal/streams/async_iterator":204,"./internal/streams/buffer_list":205,"./internal/streams/destroy":206,"./internal/streams/from":208,"./internal/streams/state":210,"./internal/streams/stream":211,"_process":388,"buffer":301,"events":338,"inherits":184,"string_decoder/":229,"util":257}],202:[function(require,module,exports){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    // a transform stream is a readable/writable stream where you do
    // something with the data.  Sometimes it's called a "filter",
    // but that's not a great name for it, since that implies a thing where
    // some bits pass through, and others are simply ignored.  (That would
    // be a valid example of a transform, of course.)
    //
    // While the output is causally related to the input, it's not a
    // necessarily symmetric or synchronous transformation.  For example,
    // a zlib stream might take multiple plain-text writes(), and then
    // emit a single compressed chunk some time in the future.
    //
    // Here's how this works:
    //
    // The Transform stream has all the aspects of the readable and writable
    // stream classes.  When you write(chunk), that calls _write(chunk,cb)
    // internally, and returns false if there's a lot of pending writes
    // buffered up.  When you call read(), that calls _read(n) until
    // there's enough pending readable data buffered up.
    //
    // In a transform stream, the written data is placed in a buffer.  When
    // _read(n) is called, it transforms the queued up data, calling the
    // buffered _write cb's as it consumes chunks.  If consuming a single
    // written chunk would result in multiple output chunks, then the first
    // outputted bit calls the readcb, and subsequent chunks just go into
    // the read buffer, and will cause it to emit 'readable' if necessary.
    //
    // This way, back-pressure is actually determined by the reading side,
    // since _read has to be called to start processing a new chunk.  However,
    // a pathological inflate type of transform can cause excessive buffering
    // here.  For example, imagine a stream where every byte of input is
    // interpreted as an integer from 0-255, and then results in that many
    // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
    // 1kb of data being output.  In this case, you could write a very small
    // amount of input, and end up with a very large amount of output.  In
    // such a pathological inflating mechanism, there'd be no way to tell
    // the system to stop doing the transform.  A single 4MB write could
    // cause the system to run out of memory.
    //
    // However, even in such a pathological case, only a single written chunk
    // would be consumed, and then the rest would wait (un-transformed) until
    // the results of the previous transformed chunk were consumed.
    'use strict';
    
    module.exports = Transform;
    
    var _require$codes = require('../errors').codes,
        ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
        ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
        ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
    
    var Duplex = require('./_stream_duplex');
    
    require('inherits')(Transform, Duplex);
    
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
    
      if (cb === null) {
        return this.emit('error', new ERR_MULTIPLE_CALLBACK());
      }
    
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null) // single equals check for both `null` and `undefined`
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
    
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    
    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      }; // start out asking for a readable event once data is transformed.
    
      this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.
    
      this._readableState.sync = false;
    
      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
      } // When the writable side finishes, then flush out anything remaining.
    
    
      this.on('prefinish', prefinish);
    }
    
    function prefinish() {
      var _this = this;
    
      if (typeof this._flush === 'function' && !this._readableState.destroyed) {
        this._flush(function (er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }
    
    Transform.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    }; // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.
    
    
    Transform.prototype._transform = function (chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
    };
    
    Transform.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
    
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    }; // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.
    
    
    Transform.prototype._read = function (n) {
      var ts = this._transformState;
    
      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
    
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };
    
    Transform.prototype._destroy = function (err, cb) {
      Duplex.prototype._destroy.call(this, err, function (err2) {
        cb(err2);
      });
    };
    
    function done(stream, er, data) {
      if (er) return stream.emit('error', er);
      if (data != null) // single equals check for both `null` and `undefined`
        stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
      // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided
    
      if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }
    },{"../errors":198,"./_stream_duplex":199,"inherits":184}],203:[function(require,module,exports){
    (function (process,global){(function (){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    // A bit simpler than readable streams.
    // Implement an async ._write(chunk, encoding, cb), and it'll handle all
    // the drain event emission and buffering.
    'use strict';
    
    module.exports = Writable;
    /* <replacement> */
    
    function WriteReq(chunk, encoding, cb) {
      this.chunk = chunk;
      this.encoding = encoding;
      this.callback = cb;
      this.next = null;
    } // It seems a linked list but it is not
    // there will be only 2 of these for each stream
    
    
    function CorkedRequest(state) {
      var _this = this;
    
      this.next = null;
      this.entry = null;
    
      this.finish = function () {
        onCorkedFinish(_this, state);
      };
    }
    /* </replacement> */
    
    /*<replacement>*/
    
    
    var Duplex;
    /*</replacement>*/
    
    Writable.WritableState = WritableState;
    /*<replacement>*/
    
    var internalUtil = {
      deprecate: require('util-deprecate')
    };
    /*</replacement>*/
    
    /*<replacement>*/
    
    var Stream = require('./internal/streams/stream');
    /*</replacement>*/
    
    
    var Buffer = require('buffer').Buffer;
    
    var OurUint8Array = global.Uint8Array || function () {};
    
    function _uint8ArrayToBuffer(chunk) {
      return Buffer.from(chunk);
    }
    
    function _isUint8Array(obj) {
      return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    
    var destroyImpl = require('./internal/streams/destroy');
    
    var _require = require('./internal/streams/state'),
        getHighWaterMark = _require.getHighWaterMark;
    
    var _require$codes = require('../errors').codes,
        ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
        ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
        ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
        ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
        ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
        ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
        ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
    
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    
    require('inherits')(Writable, Stream);
    
    function nop() {}
    
    function WritableState(options, stream, isDuplex) {
      Duplex = Duplex || require('./_stream_duplex');
      options = options || {}; // Duplex streams are both readable and writable, but share
      // the same options object.
      // However, some cases require setting options to different
      // values for the readable and the writable sides of the duplex stream,
      // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    
      if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
      // contains buffers or objects.
    
      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
      // Note: 0 is a valid value, means that we always return false if
      // the entire buffer is not flushed immediately on write()
    
      this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called
    
      this.finalCalled = false; // drain event flag.
    
      this.needDrain = false; // at the start of calling end()
    
      this.ending = false; // when end() has been called, and returned
    
      this.ended = false; // when 'finish' is emitted
    
      this.finished = false; // has it been destroyed
    
      this.destroyed = false; // should we decode strings into buffers before passing to _write?
      // this is here so that some node-core streams can optimize string
      // handling at a lower level.
    
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
    
      this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
      // of how much we're waiting to get pushed to some underlying
      // socket or file.
    
      this.length = 0; // a flag to see when we're in the middle of a write.
    
      this.writing = false; // when true all writes will be buffered until .uncork() call
    
      this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.
    
      this.sync = true; // a flag to know if we're processing previously buffered items, which
      // may call the _write() callback in the same tick, so that we don't
      // end up in an overlapped onwrite situation.
    
      this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    
      this.onwrite = function (er) {
        onwrite(stream, er);
      }; // the callback that the user supplies to write(chunk,encoding,cb)
    
    
      this.writecb = null; // the amount that is being written when _write is called.
    
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
      // this must be 0 before 'finish' can be emitted
    
      this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
      // This is relevant for synchronous Transform streams
    
      this.prefinished = false; // True if the error was already emitted and should not be thrown again
    
      this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    
      this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    
      this.autoDestroy = !!options.autoDestroy; // count buffered requests
    
      this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
      // one allocated and free to use, and we maintain at most two
    
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
    
      while (current) {
        out.push(current);
        current = current.next;
      }
    
      return out;
    };
    
    (function () {
      try {
        Object.defineProperty(WritableState.prototype, 'buffer', {
          get: internalUtil.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
        });
      } catch (_) {}
    })(); // Test _writableState for inheritance to account for Duplex streams,
    // whose prototype chain only points to Readable.
    
    
    var realHasInstance;
    
    if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance.call(this, object)) return true;
          if (this !== Writable) return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function realHasInstance(object) {
        return object instanceof this;
      };
    }
    
    function Writable(options) {
      Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
      // `realHasInstance` is necessary because using plain `instanceof`
      // would return false, as no `_writableState` property is attached.
      // Trying to use the custom `instanceof` for Writable here will also break the
      // Node.js LazyTransform implementation, which has a non-trivial getter for
      // `_writableState` that would lead to infinite recursion.
      // Checking for a Stream.Duplex instance is faster here instead of inside
      // the WritableState constructor, at least with V8 6.5
    
      var isDuplex = this instanceof Duplex;
      if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
      this._writableState = new WritableState(options, this, isDuplex); // legacy.
    
      this.writable = true;
    
      if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
      }
    
      Stream.call(this);
    } // Otherwise people can pipe Writable streams, which is just wrong.
    
    
    Writable.prototype.pipe = function () {
      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    };
    
    function writeAfterEnd(stream, cb) {
      var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    
      errorOrDestroy(stream, er);
      process.nextTick(cb, er);
    } // Checks that a user-supplied chunk is valid, especially for the particular
    // mode the stream is in. Currently this means that `null` is never accepted
    // and undefined/non-string values are only allowed in object mode.
    
    
    function validChunk(stream, state, chunk, cb) {
      var er;
    
      if (chunk === null) {
        er = new ERR_STREAM_NULL_VALUES();
      } else if (typeof chunk !== 'string' && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
      }
    
      if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
      }
    
      return true;
    }
    
    Writable.prototype.write = function (chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
    
      var isBuf = !state.objectMode && _isUint8Array(chunk);
    
      if (isBuf && !Buffer.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
    
      if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }
    
      if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
      if (typeof cb !== 'function') cb = nop;
      if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };
    
    Writable.prototype.cork = function () {
      this._writableState.corked++;
    };
    
    Writable.prototype.uncork = function () {
      var state = this._writableState;
    
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
      }
    };
    
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      // node::ParseEncoding() requires lower case.
      if (typeof encoding === 'string') encoding = encoding.toLowerCase();
      if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    
    Object.defineProperty(Writable.prototype, 'writableBuffer', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
        chunk = Buffer.from(chunk, encoding);
      }
    
      return chunk;
    }
    
    Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    }); // if we're already writing something, then just put this
    // in the queue, and wait our turn.  Otherwise, call _write
    // If we return false, then we need a drain event, so set that flag.
    
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
    
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = 'buffer';
          chunk = newChunk;
        }
      }
    
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    
      if (!ret) state.needDrain = true;
    
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk: chunk,
          encoding: encoding,
          isBuf: isBuf,
          callback: cb,
          next: null
        };
    
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
    
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }
    
      return ret;
    }
    
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    
    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
    
      if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
    
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
      } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
    
        finishMaybe(stream, state);
      }
    }
    
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    
    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
      onwriteStateUpdate(state);
      if (er) onwriteError(stream, state, sync, er, cb);else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state) || stream.destroyed;
    
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
    
        if (sync) {
          process.nextTick(afterWrite, stream, state, finished, cb);
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    
    function afterWrite(stream, state, finished, cb) {
      if (!finished) onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    } // Must force callback to be called on nextTick, so that we don't
    // emit 'drain' before the write() consumer gets the 'false' return
    // value, and has a chance to attach a 'drain' listener.
    
    
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
      }
    } // if there's something in the buffer waiting, then process it
    
    
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
    
      if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
    
        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf) allBuffers = false;
          entry = entry.next;
          count += 1;
        }
    
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
    
        state.pendingcb++;
        state.lastBufferedRequest = null;
    
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
    
        state.bufferedRequestCount = 0;
      } else {
        // Slow case, write chunks one-by-one
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
          // it means that we need to wait until it does.
          // also, that means that the chunk and cb are currently
          // being processed, so move the buffer counter past them.
    
          if (state.writing) {
            break;
          }
        }
    
        if (entry === null) state.lastBufferedRequest = null;
      }
    
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    
    Writable.prototype._write = function (chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
    };
    
    Writable.prototype._writev = null;
    
    Writable.prototype.end = function (chunk, encoding, cb) {
      var state = this._writableState;
    
      if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }
    
      if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      } // ignore unnecessary end() calls.
    
    
      if (!state.ending) endWritable(this, state, cb);
      return this;
    };
    
    Object.defineProperty(Writable.prototype, 'writableLength', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    
    function callFinal(stream, state) {
      stream._final(function (err) {
        state.pendingcb--;
    
        if (err) {
          errorOrDestroy(stream, err);
        }
    
        state.prefinished = true;
        stream.emit('prefinish');
        finishMaybe(stream, state);
      });
    }
    
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          process.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit('prefinish');
        }
      }
    }
    
    function finishMaybe(stream, state) {
      var need = needFinish(state);
    
      if (need) {
        prefinish(stream, state);
    
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit('finish');
    
          if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the readable side is ready for autoDestroy as well
            var rState = stream._readableState;
    
            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }
    
      return need;
    }
    
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
    
      if (cb) {
        if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
      }
    
      state.ended = true;
      stream.writable = false;
    }
    
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
    
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      } // reuse the free corkReq.
    
    
      state.corkedRequestsFree.next = corkReq;
    }
    
    Object.defineProperty(Writable.prototype, 'destroyed', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._writableState === undefined) {
          return false;
        }
    
        return this._writableState.destroyed;
      },
      set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) {
          return;
        } // backward compatibility, the user is explicitly
        // managing destroyed
    
    
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    
    Writable.prototype._destroy = function (err, cb) {
      cb(err);
    };
    }).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"../errors":198,"./_stream_duplex":199,"./internal/streams/destroy":206,"./internal/streams/state":210,"./internal/streams/stream":211,"_process":388,"buffer":301,"inherits":184,"util-deprecate":233}],204:[function(require,module,exports){
    (function (process){(function (){
    'use strict';
    
    var _Object$setPrototypeO;
    
    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
    
    var finished = require('./end-of-stream');
    
    var kLastResolve = Symbol('lastResolve');
    var kLastReject = Symbol('lastReject');
    var kError = Symbol('error');
    var kEnded = Symbol('ended');
    var kLastPromise = Symbol('lastPromise');
    var kHandlePromise = Symbol('handlePromise');
    var kStream = Symbol('stream');
    
    function createIterResult(value, done) {
      return {
        value: value,
        done: done
      };
    }
    
    function readAndResolve(iter) {
      var resolve = iter[kLastResolve];
    
      if (resolve !== null) {
        var data = iter[kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
    
        if (data !== null) {
          iter[kLastPromise] = null;
          iter[kLastResolve] = null;
          iter[kLastReject] = null;
          resolve(createIterResult(data, false));
        }
      }
    }
    
    function onReadable(iter) {
      // we wait for the next tick, because it might
      // emit an error with process.nextTick
      process.nextTick(readAndResolve, iter);
    }
    
    function wrapForNext(lastPromise, iter) {
      return function (resolve, reject) {
        lastPromise.then(function () {
          if (iter[kEnded]) {
            resolve(createIterResult(undefined, true));
            return;
          }
    
          iter[kHandlePromise](resolve, reject);
        }, reject);
      };
    }
    
    var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
      get stream() {
        return this[kStream];
      },
    
      next: function next() {
        var _this = this;
    
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];
    
        if (error !== null) {
          return Promise.reject(error);
        }
    
        if (this[kEnded]) {
          return Promise.resolve(createIterResult(undefined, true));
        }
    
        if (this[kStream].destroyed) {
          // We need to defer via nextTick because if .destroy(err) is
          // called, the error will be emitted via nextTick, and
          // we cannot guarantee that there is no error lingering around
          // waiting to be emitted.
          return new Promise(function (resolve, reject) {
            process.nextTick(function () {
              if (_this[kError]) {
                reject(_this[kError]);
              } else {
                resolve(createIterResult(undefined, true));
              }
            });
          });
        } // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
    
    
        var lastPromise = this[kLastPromise];
        var promise;
    
        if (lastPromise) {
          promise = new Promise(wrapForNext(lastPromise, this));
        } else {
          // fast path needed to support multiple this.push()
          // without triggering the next() queue
          var data = this[kStream].read();
    
          if (data !== null) {
            return Promise.resolve(createIterResult(data, false));
          }
    
          promise = new Promise(this[kHandlePromise]);
        }
    
        this[kLastPromise] = promise;
        return promise;
      }
    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
      return this;
    }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
      var _this2 = this;
    
      // destroy(err, cb) is a private API
      // we can guarantee we have that here, because we control the
      // Readable class this is attached to
      return new Promise(function (resolve, reject) {
        _this2[kStream].destroy(null, function (err) {
          if (err) {
            reject(err);
            return;
          }
    
          resolve(createIterResult(undefined, true));
        });
      });
    }), _Object$setPrototypeO), AsyncIteratorPrototype);
    
    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
      var _Object$create;
    
      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
      }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
          var data = iterator[kStream].read();
    
          if (data) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(data, false));
          } else {
            iterator[kLastResolve] = resolve;
            iterator[kLastReject] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise] = null;
      finished(stream, function (err) {
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
          var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
          // returned by next() and store the error
    
          if (reject !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            reject(err);
          }
    
          iterator[kError] = err;
          return;
        }
    
        var resolve = iterator[kLastResolve];
    
        if (resolve !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(undefined, true));
        }
    
        iterator[kEnded] = true;
      });
      stream.on('readable', onReadable.bind(null, iterator));
      return iterator;
    };
    
    module.exports = createReadableStreamAsyncIterator;
    }).call(this)}).call(this,require('_process'))
    },{"./end-of-stream":207,"_process":388}],205:[function(require,module,exports){
    'use strict';
    
    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
    
    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
    
    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
    
    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
    
    var _require = require('buffer'),
        Buffer = _require.Buffer;
    
    var _require2 = require('util'),
        inspect = _require2.inspect;
    
    var custom = inspect && inspect.custom || 'inspect';
    
    function copyBuffer(src, target, offset) {
      Buffer.prototype.copy.call(src, target, offset);
    }
    
    module.exports =
    /*#__PURE__*/
    function () {
      function BufferList() {
        _classCallCheck(this, BufferList);
    
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
    
      _createClass(BufferList, [{
        key: "push",
        value: function push(v) {
          var entry = {
            data: v,
            next: null
          };
          if (this.length > 0) this.tail.next = entry;else this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v) {
          var entry = {
            data: v,
            next: this.head
          };
          if (this.length === 0) this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0) return;
          var ret = this.head.data;
          if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s) {
          if (this.length === 0) return '';
          var p = this.head;
          var ret = '' + p.data;
    
          while (p = p.next) {
            ret += s + p.data;
          }
    
          return ret;
        }
      }, {
        key: "concat",
        value: function concat(n) {
          if (this.length === 0) return Buffer.alloc(0);
          var ret = Buffer.allocUnsafe(n >>> 0);
          var p = this.head;
          var i = 0;
    
          while (p) {
            copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
          }
    
          return ret;
        } // Consumes a specified amount of bytes or characters from the buffered data.
    
      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;
    
          if (n < this.head.data.length) {
            // `slice` is the same for buffers and strings.
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            // First chunk is a perfect match.
            ret = this.shift();
          } else {
            // Result spans more than one buffer.
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }
    
          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        } // Consumes a specified amount of characters from the buffered data.
    
      }, {
        key: "_getString",
        value: function _getString(n) {
          var p = this.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;
    
          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length) ret += str;else ret += str.slice(0, n);
            n -= nb;
    
            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next) this.head = p.next;else this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = str.slice(nb);
              }
    
              break;
            }
    
            ++c;
          }
    
          this.length -= c;
          return ret;
        } // Consumes a specified amount of bytes from the buffered data.
    
      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer.allocUnsafe(n);
          var p = this.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;
    
          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;
    
            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next) this.head = p.next;else this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = buf.slice(nb);
              }
    
              break;
            }
    
            ++c;
          }
    
          this.length -= c;
          return ret;
        } // Make sure the linked list only shows the minimal necessary information.
    
      }, {
        key: custom,
        value: function value(_, options) {
          return inspect(this, _objectSpread({}, options, {
            // Only inspect one level.
            depth: 0,
            // It should not recurse.
            customInspect: false
          }));
        }
      }]);
    
      return BufferList;
    }();
    },{"buffer":301,"util":257}],206:[function(require,module,exports){
    (function (process){(function (){
    'use strict'; // undocumented cb() API, needed for core, not for public API
    
    function destroy(err, cb) {
      var _this = this;
    
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
    
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            process.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            process.nextTick(emitErrorNT, this, err);
          }
        }
    
        return this;
      } // we set destroyed to true before firing error callbacks in order
      // to make it re-entrance safe in case destroy() is called within callbacks
    
    
      if (this._readableState) {
        this._readableState.destroyed = true;
      } // if this is a duplex stream mark the writable part as destroyed as well
    
    
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
    
      this._destroy(err || null, function (err) {
        if (!cb && err) {
          if (!_this._writableState) {
            process.nextTick(emitErrorAndCloseNT, _this, err);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            process.nextTick(emitErrorAndCloseNT, _this, err);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        } else if (cb) {
          process.nextTick(emitCloseNT, _this);
          cb(err);
        } else {
          process.nextTick(emitCloseNT, _this);
        }
      });
    
      return this;
    }
    
    function emitErrorAndCloseNT(self, err) {
      emitErrorNT(self, err);
      emitCloseNT(self);
    }
    
    function emitCloseNT(self) {
      if (self._writableState && !self._writableState.emitClose) return;
      if (self._readableState && !self._readableState.emitClose) return;
      self.emit('close');
    }
    
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
    
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    
    function emitErrorNT(self, err) {
      self.emit('error', err);
    }
    
    function errorOrDestroy(stream, err) {
      // We have tests that rely on errors being emitted
      // in the same tick, so changing this is semver major.
      // For now when you opt-in to autoDestroy we allow
      // the error to be emitted nextTick. In a future
      // semver major update we should change the default to this.
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
    }
    
    module.exports = {
      destroy: destroy,
      undestroy: undestroy,
      errorOrDestroy: errorOrDestroy
    };
    }).call(this)}).call(this,require('_process'))
    },{"_process":388}],207:[function(require,module,exports){
    // Ported from https://github.com/mafintosh/end-of-stream with
    // permission from the author, Mathias Buus (@mafintosh).
    'use strict';
    
    var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;
    
    function once(callback) {
      var called = false;
      return function () {
        if (called) return;
        called = true;
    
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
    
        callback.apply(this, args);
      };
    }
    
    function noop() {}
    
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === 'function';
    }
    
    function eos(stream, opts, callback) {
      if (typeof opts === 'function') return eos(stream, null, opts);
      if (!opts) opts = {};
      callback = once(callback || noop);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
    
      var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
      };
    
      var writableEnded = stream._writableState && stream._writableState.finished;
    
      var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
      };
    
      var readableEnded = stream._readableState && stream._readableState.endEmitted;
    
      var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
      };
    
      var onerror = function onerror(err) {
        callback.call(stream, err);
      };
    
      var onclose = function onclose() {
        var err;
    
        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
    
        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };
    
      var onrequest = function onrequest() {
        stream.req.on('finish', onfinish);
      };
    
      if (isRequest(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();else stream.on('request', onrequest);
      } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
      }
    
      stream.on('end', onend);
      stream.on('finish', onfinish);
      if (opts.error !== false) stream.on('error', onerror);
      stream.on('close', onclose);
      return function () {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
      };
    }
    
    module.exports = eos;
    },{"../../../errors":198}],208:[function(require,module,exports){
    module.exports = function () {
      throw new Error('Readable.from is not available in the browser')
    };
    
    },{}],209:[function(require,module,exports){
    // Ported from https://github.com/mafintosh/pump with
    // permission from the author, Mathias Buus (@mafintosh).
    'use strict';
    
    var eos;
    
    function once(callback) {
      var called = false;
      return function () {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }
    
    var _require$codes = require('../../../errors').codes,
        ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
        ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    
    function noop(err) {
      // Rethrow the error if it exists to avoid swallowing it
      if (err) throw err;
    }
    
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === 'function';
    }
    
    function destroyer(stream, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream.on('close', function () {
        closed = true;
      });
      if (eos === undefined) eos = require('./end-of-stream');
      eos(stream, {
        readable: reading,
        writable: writing
      }, function (err) {
        if (err) return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function (err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
    
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED('pipe'));
      };
    }
    
    function call(fn) {
      fn();
    }
    
    function pipe(from, to) {
      return from.pipe(to);
    }
    
    function popCallback(streams) {
      if (!streams.length) return noop;
      if (typeof streams[streams.length - 1] !== 'function') return noop;
      return streams.pop();
    }
    
    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }
    
      var callback = popCallback(streams);
      if (Array.isArray(streams[0])) streams = streams[0];
    
      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS('streams');
      }
    
      var error;
      var destroys = streams.map(function (stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function (err) {
          if (!error) error = err;
          if (err) destroys.forEach(call);
          if (reading) return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    }
    
    module.exports = pipeline;
    },{"../../../errors":198,"./end-of-stream":207}],210:[function(require,module,exports){
    'use strict';
    
    var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;
    
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    
    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    
      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : 'highWaterMark';
          throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
    
        return Math.floor(hwm);
      } // Default value
    
    
      return state.objectMode ? 16 : 16 * 1024;
    }
    
    module.exports = {
      getHighWaterMark: getHighWaterMark
    };
    },{"../../../errors":198}],211:[function(require,module,exports){
    module.exports = require('events').EventEmitter;
    
    },{"events":338}],212:[function(require,module,exports){
    exports = module.exports = require('./lib/_stream_readable.js');
    exports.Stream = exports;
    exports.Readable = exports;
    exports.Writable = require('./lib/_stream_writable.js');
    exports.Duplex = require('./lib/_stream_duplex.js');
    exports.Transform = require('./lib/_stream_transform.js');
    exports.PassThrough = require('./lib/_stream_passthrough.js');
    exports.finished = require('./lib/internal/streams/end-of-stream.js');
    exports.pipeline = require('./lib/internal/streams/pipeline.js');
    
    },{"./lib/_stream_duplex.js":199,"./lib/_stream_passthrough.js":200,"./lib/_stream_readable.js":201,"./lib/_stream_transform.js":202,"./lib/_stream_writable.js":203,"./lib/internal/streams/end-of-stream.js":207,"./lib/internal/streams/pipeline.js":209}],213:[function(require,module,exports){
    'use strict'
    var Buffer = require('buffer').Buffer
    var inherits = require('inherits')
    var HashBase = require('hash-base')
    
    var ARRAY16 = new Array(16)
    
    var zl = [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
      3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
      1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
      4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
    ]
    
    var zr = [
      5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
      6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
      15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
      8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
      12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
    ]
    
    var sl = [
      11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
      7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
      11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
      11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
      9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
    ]
    
    var sr = [
      8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
      9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
      9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
      15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
      8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
    ]
    
    var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
    var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]
    
    function RIPEMD160 () {
      HashBase.call(this, 64)
    
      // state
      this._a = 0x67452301
      this._b = 0xefcdab89
      this._c = 0x98badcfe
      this._d = 0x10325476
      this._e = 0xc3d2e1f0
    }
    
    inherits(RIPEMD160, HashBase)
    
    RIPEMD160.prototype._update = function () {
      var words = ARRAY16
      for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)
    
      var al = this._a | 0
      var bl = this._b | 0
      var cl = this._c | 0
      var dl = this._d | 0
      var el = this._e | 0
    
      var ar = this._a | 0
      var br = this._b | 0
      var cr = this._c | 0
      var dr = this._d | 0
      var er = this._e | 0
    
      // computation
      for (var i = 0; i < 80; i += 1) {
        var tl
        var tr
        if (i < 16) {
          tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
          tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
        } else if (i < 32) {
          tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
          tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
        } else if (i < 48) {
          tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
          tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
        } else if (i < 64) {
          tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
          tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
        } else { // if (i<80) {
          tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
          tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
        }
    
        al = el
        el = dl
        dl = rotl(cl, 10)
        cl = bl
        bl = tl
    
        ar = er
        er = dr
        dr = rotl(cr, 10)
        cr = br
        br = tr
      }
    
      // update state
      var t = (this._b + cl + dr) | 0
      this._b = (this._c + dl + er) | 0
      this._c = (this._d + el + ar) | 0
      this._d = (this._e + al + br) | 0
      this._e = (this._a + bl + cr) | 0
      this._a = t
    }
    
    RIPEMD160.prototype._digest = function () {
      // create padding and handle blocks
      this._block[this._blockOffset++] = 0x80
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64)
        this._update()
        this._blockOffset = 0
      }
    
      this._block.fill(0, this._blockOffset, 56)
      this._block.writeUInt32LE(this._length[0], 56)
      this._block.writeUInt32LE(this._length[1], 60)
      this._update()
    
      // produce result
      var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
      buffer.writeInt32LE(this._a, 0)
      buffer.writeInt32LE(this._b, 4)
      buffer.writeInt32LE(this._c, 8)
      buffer.writeInt32LE(this._d, 12)
      buffer.writeInt32LE(this._e, 16)
      return buffer
    }
    
    function rotl (x, n) {
      return (x << n) | (x >>> (32 - n))
    }
    
    function fn1 (a, b, c, d, e, m, k, s) {
      return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
    }
    
    function fn2 (a, b, c, d, e, m, k, s) {
      return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
    }
    
    function fn3 (a, b, c, d, e, m, k, s) {
      return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
    }
    
    function fn4 (a, b, c, d, e, m, k, s) {
      return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
    }
    
    function fn5 (a, b, c, d, e, m, k, s) {
      return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
    }
    
    module.exports = RIPEMD160
    
    },{"buffer":301,"hash-base":170,"inherits":184}],214:[function(require,module,exports){
    (function (Buffer){(function (){
    "use strict";
    var __importDefault = (this && this.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLength = exports.decode = exports.encode = void 0;
    var bn_js_1 = __importDefault(require("bn.js"));
    /**
     * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP
     * This function takes in a data, convert it to buffer if not, and a length for recursion
     * @param input - will be converted to buffer
     * @returns returns buffer of encoded data
     **/
    function encode(input) {
        if (Array.isArray(input)) {
            var output = [];
            for (var i = 0; i < input.length; i++) {
                output.push(encode(input[i]));
            }
            var buf = Buffer.concat(output);
            return Buffer.concat([encodeLength(buf.length, 192), buf]);
        }
        else {
            var inputBuf = toBuffer(input);
            return inputBuf.length === 1 && inputBuf[0] < 128
                ? inputBuf
                : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);
        }
    }
    exports.encode = encode;
    /**
     * Parse integers. Check if there is no leading zeros
     * @param v The value to parse
     * @param base The base to parse the integer into
     */
    function safeParseInt(v, base) {
        if (v[0] === '0' && v[1] === '0') {
            throw new Error('invalid RLP: extra zeros');
        }
        return parseInt(v, base);
    }
    function encodeLength(len, offset) {
        if (len < 56) {
            return Buffer.from([len + offset]);
        }
        else {
            var hexLength = intToHex(len);
            var lLength = hexLength.length / 2;
            var firstByte = intToHex(offset + 55 + lLength);
            return Buffer.from(firstByte + hexLength, 'hex');
        }
    }
    function decode(input, stream) {
        if (stream === void 0) { stream = false; }
        if (!input || input.length === 0) {
            return Buffer.from([]);
        }
        var inputBuffer = toBuffer(input);
        var decoded = _decode(inputBuffer);
        if (stream) {
            return decoded;
        }
        if (decoded.remainder.length !== 0) {
            throw new Error('invalid remainder');
        }
        return decoded.data;
    }
    exports.decode = decode;
    /**
     * Get the length of the RLP input
     * @param input
     * @returns The length of the input or an empty Buffer if no input
     */
    function getLength(input) {
        if (!input || input.length === 0) {
            return Buffer.from([]);
        }
        var inputBuffer = toBuffer(input);
        var firstByte = inputBuffer[0];
        if (firstByte <= 0x7f) {
            return inputBuffer.length;
        }
        else if (firstByte <= 0xb7) {
            return firstByte - 0x7f;
        }
        else if (firstByte <= 0xbf) {
            return firstByte - 0xb6;
        }
        else if (firstByte <= 0xf7) {
            // a list between  0-55 bytes long
            return firstByte - 0xbf;
        }
        else {
            // a list  over 55 bytes long
            var llength = firstByte - 0xf6;
            var length_1 = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);
            return llength + length_1;
        }
    }
    exports.getLength = getLength;
    /** Decode an input with RLP */
    function _decode(input) {
        var length, llength, data, innerRemainder, d;
        var decoded = [];
        var firstByte = input[0];
        if (firstByte <= 0x7f) {
            // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
            return {
                data: input.slice(0, 1),
                remainder: input.slice(1),
            };
        }
        else if (firstByte <= 0xb7) {
            // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
            // The range of the first byte is [0x80, 0xb7]
            length = firstByte - 0x7f;
            // set 0x80 null to 0
            if (firstByte === 0x80) {
                data = Buffer.from([]);
            }
            else {
                data = input.slice(1, length);
            }
            if (length === 2 && data[0] < 0x80) {
                throw new Error('invalid rlp encoding: byte must be less 0x80');
            }
            return {
                data: data,
                remainder: input.slice(length),
            };
        }
        else if (firstByte <= 0xbf) {
            // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),
            // followed by the length, followed by the string
            llength = firstByte - 0xb6;
            if (input.length - 1 < llength) {
                throw new Error('invalid RLP: not enough bytes for string length');
            }
            length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
            if (length <= 55) {
                throw new Error('invalid RLP: expected string length to be greater than 55');
            }
            data = input.slice(llength, length + llength);
            if (data.length < length) {
                throw new Error('invalid RLP: not enough bytes for string');
            }
            return {
                data: data,
                remainder: input.slice(length + llength),
            };
        }
        else if (firstByte <= 0xf7) {
            // a list between  0-55 bytes long
            length = firstByte - 0xbf;
            innerRemainder = input.slice(1, length);
            while (innerRemainder.length) {
                d = _decode(innerRemainder);
                decoded.push(d.data);
                innerRemainder = d.remainder;
            }
            return {
                data: decoded,
                remainder: input.slice(length),
            };
        }
        else {
            // a list  over 55 bytes long
            llength = firstByte - 0xf6;
            length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
            var totalLength = llength + length;
            if (totalLength > input.length) {
                throw new Error('invalid rlp: total length is larger than the data');
            }
            innerRemainder = input.slice(llength, totalLength);
            if (innerRemainder.length === 0) {
                throw new Error('invalid rlp, List has a invalid length');
            }
            while (innerRemainder.length) {
                d = _decode(innerRemainder);
                decoded.push(d.data);
                innerRemainder = d.remainder;
            }
            return {
                data: decoded,
                remainder: input.slice(totalLength),
            };
        }
    }
    /** Check if a string is prefixed by 0x */
    function isHexPrefixed(str) {
        return str.slice(0, 2) === '0x';
    }
    /** Removes 0x from a given String */
    function stripHexPrefix(str) {
        if (typeof str !== 'string') {
            return str;
        }
        return isHexPrefixed(str) ? str.slice(2) : str;
    }
    /** Transform an integer into its hexadecimal value */
    function intToHex(integer) {
        if (integer < 0) {
            throw new Error('Invalid integer as argument, must be unsigned!');
        }
        var hex = integer.toString(16);
        return hex.length % 2 ? "0" + hex : hex;
    }
    /** Pad a string to be even */
    function padToEven(a) {
        return a.length % 2 ? "0" + a : a;
    }
    /** Transform an integer into a Buffer */
    function intToBuffer(integer) {
        var hex = intToHex(integer);
        return Buffer.from(hex, 'hex');
    }
    /** Transform anything into a Buffer */
    function toBuffer(v) {
        if (!Buffer.isBuffer(v)) {
            if (typeof v === 'string') {
                if (isHexPrefixed(v)) {
                    return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');
                }
                else {
                    return Buffer.from(v);
                }
            }
            else if (typeof v === 'number' || typeof v === 'bigint') {
                if (!v) {
                    return Buffer.from([]);
                }
                else {
                    return intToBuffer(v);
                }
            }
            else if (v === null || v === undefined) {
                return Buffer.from([]);
            }
            else if (v instanceof Uint8Array) {
                return Buffer.from(v);
            }
            else if (bn_js_1.default.isBN(v)) {
                // converts a BN to a Buffer
                return Buffer.from(v.toArray());
            }
            else {
                throw new Error('invalid type');
            }
        }
        return v;
    }
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"bn.js":215,"buffer":301}],215:[function(require,module,exports){
    (function (module, exports) {
      'use strict';
    
      // Utils
      function assert (val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }
    
      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits (ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    
      // BN
    
      function BN (number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
    
        this.negative = 0;
        this.words = null;
        this.length = 0;
    
        // Reduction context
        this.red = null;
    
        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }
    
          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }
    
      BN.BN = BN;
      BN.wordSize = 26;
    
      var Buffer;
      try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
          Buffer = window.Buffer;
        } else {
          Buffer = require('buffer').Buffer;
        }
      } catch (e) {
      }
    
      BN.isBN = function isBN (num) {
        if (num instanceof BN) {
          return true;
        }
    
        return num !== null && typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
    
      BN.max = function max (left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
    
      BN.min = function min (left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
    
      BN.prototype._init = function init (number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }
    
        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }
    
        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
    
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
          this.negative = 1;
        }
    
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === 'le') {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
    
      BN.prototype._initNumber = function _initNumber (number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [number & 0x3ffffff];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff
          ];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff,
            1
          ];
          this.length = 3;
        }
    
        if (endian !== 'le') return;
    
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };
    
      BN.prototype._initArray = function _initArray (number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
    
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
    
        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
    
      function parseHex4Bits (string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) {
          return c - 48;
        // 'A' - 'F'
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        // 'a' - 'f'
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert(false, 'Invalid character in ' + string);
        }
      }
    
      function parseHexByte (string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
    
      BN.prototype._parseHex = function _parseHex (number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
    
        // 24-bits chunks
        var off = 0;
        var j = 0;
    
        var w;
        if (endian === 'be') {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
    
        this._strip();
      };
    
      function parseBase (str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
    
          r *= mul;
    
          // 'a'
          if (c >= 49) {
            b = c - 49 + 0xa;
    
          // 'A'
          } else if (c >= 17) {
            b = c - 17 + 0xa;
    
          // '0' - '9'
          } else {
            b = c;
          }
          assert(c >= 0 && b < mul, 'Invalid character');
          r += b;
        }
        return r;
      }
    
      BN.prototype._parseBase = function _parseBase (number, base, start) {
        // Initialize as zero
        this.words = [0];
        this.length = 1;
    
        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;
    
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
    
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
    
          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
    
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
    
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
    
          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
    
        this._strip();
      };
    
      BN.prototype.copy = function copy (dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
    
      function move (dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
    
      BN.prototype._move = function _move (dest) {
        move(dest, this);
      };
    
      BN.prototype.clone = function clone () {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
    
      BN.prototype._expand = function _expand (size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
    
      // Remove leading `0` from `this`
      BN.prototype._strip = function strip () {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
    
      BN.prototype._normSign = function _normSign () {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
    
      // Check Symbol.for because not everywhere where Symbol defined
      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
      if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
        try {
          BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
        } catch (e) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }
    
      function inspect () {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      }
    
      /*
    
      var zeros = [];
      var groupSizes = [];
      var groupBases = [];
    
      var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }
    
      */
    
      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
      ];
    
      var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
      ];
    
      var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
      ];
    
      BN.prototype.toString = function toString (base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
    
        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 0xffffff).toString(16);
            carry = (w >>> (24 - off)) & 0xffffff;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }
    
        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
    
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }
    
        assert(false, 'Base should be between 2 and 36');
      };
    
      BN.prototype.toNumber = function toNumber () {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
      };
    
      BN.prototype.toJSON = function toJSON () {
        return this.toString(16, 2);
      };
    
      if (Buffer) {
        BN.prototype.toBuffer = function toBuffer (endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }
    
      BN.prototype.toArray = function toArray (endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
    
      var allocate = function allocate (ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
    
      BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
        this._strip();
    
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
    
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
      };
    
      BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
        var position = 0;
        var carry = 0;
    
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;
    
          res[position++] = word & 0xff;
          if (position < res.length) {
            res[position++] = (word >> 8) & 0xff;
          }
          if (position < res.length) {
            res[position++] = (word >> 16) & 0xff;
          }
    
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
    
        if (position < res.length) {
          res[position++] = carry;
    
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
    
      BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
    
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;
    
          res[position--] = word & 0xff;
          if (position >= 0) {
            res[position--] = (word >> 8) & 0xff;
          }
          if (position >= 0) {
            res[position--] = (word >> 16) & 0xff;
          }
    
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
    
        if (position >= 0) {
          res[position--] = carry;
    
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
    
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits (w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits (w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
    
      BN.prototype._zeroBits = function _zeroBits (w) {
        // Short-cut
        if (w === 0) return 26;
    
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };
    
      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength () {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
    
      function toBitArray (num) {
        var w = new Array(num.bitLength());
    
        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;
    
          w[bit] = (num.words[off] >>> wbit) & 0x01;
        }
    
        return w;
      }
    
      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits () {
        if (this.isZero()) return 0;
    
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };
    
      BN.prototype.byteLength = function byteLength () {
        return Math.ceil(this.bitLength() / 8);
      };
    
      BN.prototype.toTwos = function toTwos (width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
    
      BN.prototype.fromTwos = function fromTwos (width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
    
      BN.prototype.isNeg = function isNeg () {
        return this.negative !== 0;
      };
    
      // Return negative clone of `this`
      BN.prototype.neg = function neg () {
        return this.clone().ineg();
      };
    
      BN.prototype.ineg = function ineg () {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
    
        return this;
      };
    
      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor (num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
    
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
    
        return this._strip();
      };
    
      BN.prototype.ior = function ior (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
    
      // Or `num` with `this`
      BN.prototype.or = function or (num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
    
      BN.prototype.uor = function uor (num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
    
      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand (num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
    
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
    
        this.length = b.length;
    
        return this._strip();
      };
    
      BN.prototype.iand = function iand (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
    
      // And `num` with `this`
      BN.prototype.and = function and (num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
    
      BN.prototype.uand = function uand (num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
    
      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor (num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
    
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
    
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
    
        this.length = a.length;
    
        return this._strip();
      };
    
      BN.prototype.ixor = function ixor (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
    
      // Xor `num` with `this`
      BN.prototype.xor = function xor (num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
    
      BN.prototype.uxor = function uxor (num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
    
      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn (width) {
        assert(typeof width === 'number' && width >= 0);
    
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
    
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
    
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
    
        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }
    
        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }
    
        // And remove leading zeroes
        return this._strip();
      };
    
      BN.prototype.notn = function notn (width) {
        return this.clone().inotn(width);
      };
    
      // Set `bit` of `this`
      BN.prototype.setn = function setn (bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
    
        var off = (bit / 26) | 0;
        var wbit = bit % 26;
    
        this._expand(off + 1);
    
        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
    
        return this._strip();
      };
    
      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd (num) {
        var r;
    
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
    
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
    
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
    
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
    
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
    
        return this;
      };
    
      // Add `num` to `this`
      BN.prototype.add = function add (num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
    
        if (this.length > num.length) return this.clone().iadd(num);
    
        return num.clone().iadd(this);
      };
    
      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub (num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
    
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
    
        // At this point both numbers are positive
        var cmp = this.cmp(num);
    
        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
    
        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
    
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
    
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
    
        this.length = Math.max(this.length, i);
    
        if (a !== this) {
          this.negative = 1;
        }
    
        return this._strip();
      };
    
      // Subtract `num` from `this`
      BN.prototype.sub = function sub (num) {
        return this.clone().isub(num);
      };
    
      function smallMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;
    
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
    
        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;
    
        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 0x4000000) | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
    
        return out._strip();
      }
    
      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo (self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
    
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
    
      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
    
      function bigMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
    
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
    
            var lo = r & 0x3ffffff;
            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 0x3ffffff;
            ncarry = (ncarry + (lo >>> 26)) | 0;
    
            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
    
        return out._strip();
      }
    
      function jumboMulTo (self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
      }
    
      BN.prototype.mulTo = function mulTo (num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
    
        return res;
      };
    
      // Cooley-Tukey algorithm for FFT
      // slightly revisited to rely on looping instead of recursion
    
      function FFTM (x, y) {
        this.x = x;
        this.y = y;
      }
    
      FFTM.prototype.makeRBT = function makeRBT (N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
    
        return t;
      };
    
      // Returns binary-reversed representation of `x`
      FFTM.prototype.revBin = function revBin (x, l, N) {
        if (x === 0 || x === N - 1) return x;
    
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << (l - i - 1);
          x >>= 1;
        }
    
        return rb;
      };
    
      // Performs "tweedling" phase, therefore 'emulating'
      // behaviour of the recursive algorithm
      FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
    
      FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
    
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
    
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
    
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
    
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
    
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
    
              var rx = rtwdf_ * ro - itwdf_ * io;
    
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
    
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
    
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
    
              /* jshint maxdepth : false */
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
    
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
    
      FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
    
        return 1 << i + 1 + odd;
      };
    
      FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
        if (N <= 1) return;
    
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
    
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
    
          t = iws[i];
    
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
    
      FFTM.prototype.normalize13b = function normalize13b (ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
            Math.round(ws[2 * i] / N) +
            carry;
    
          ws[i] = w & 0x3ffffff;
    
          if (w < 0x4000000) {
            carry = 0;
          } else {
            carry = w / 0x4000000 | 0;
          }
        }
    
        return ws;
      };
    
      FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
    
          rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
          rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
        }
    
        // Pad with zeroes
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
    
        assert(carry === 0);
        assert((carry & ~0x1fff) === 0);
      };
    
      FFTM.prototype.stub = function stub (N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
    
        return ph;
      };
    
      FFTM.prototype.mulp = function mulp (x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
    
        var rbt = this.makeRBT(N);
    
        var _ = this.stub(N);
    
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
    
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
    
        var rmws = out.words;
        rmws.length = N;
    
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
    
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
    
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
    
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
    
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
    
      // Multiply `this` by `num`
      BN.prototype.mul = function mul (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
    
      // Multiply employing FFT
      BN.prototype.mulf = function mulf (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
    
      // In-place Multiplication
      BN.prototype.imul = function imul (num) {
        return this.clone().mulTo(num, this);
      };
    
      BN.prototype.imuln = function imuln (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
    
        assert(typeof num === 'number');
        assert(num < 0x4000000);
    
        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += (w / 0x4000000) | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }
    
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
    
        return isNegNum ? this.ineg() : this;
      };
    
      BN.prototype.muln = function muln (num) {
        return this.clone().imuln(num);
      };
    
      // `this` * `this`
      BN.prototype.sqr = function sqr () {
        return this.mul(this);
      };
    
      // `this` * `this` in-place
      BN.prototype.isqr = function isqr () {
        return this.imul(this.clone());
      };
    
      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow (num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
    
        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }
    
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
    
            res = res.mul(q);
          }
        }
    
        return res;
      };
    
      // Shift-left in-place
      BN.prototype.iushln = function iushln (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;
    
        if (r !== 0) {
          var carry = 0;
    
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }
    
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
    
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
    
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
    
          this.length += s;
        }
    
        return this._strip();
      };
    
      BN.prototype.ishln = function ishln (bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };
    
      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn (bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }
    
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;
    
        h -= s;
        h = Math.max(0, h);
    
        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
    
        if (s === 0) {
          // No-op, we should not move anything at all
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
    
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }
    
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
    
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
    
        return this._strip();
      };
    
      BN.prototype.ishrn = function ishrn (bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
    
      // Shift-left
      BN.prototype.shln = function shln (bits) {
        return this.clone().ishln(bits);
      };
    
      BN.prototype.ushln = function ushln (bits) {
        return this.clone().iushln(bits);
      };
    
      // Shift-right
      BN.prototype.shrn = function shrn (bits) {
        return this.clone().ishrn(bits);
      };
    
      BN.prototype.ushrn = function ushrn (bits) {
        return this.clone().iushrn(bits);
      };
    
      // Test if n bit is set
      BN.prototype.testn = function testn (bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
    
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
    
        // Check bit and return
        var w = this.words[s];
    
        return !!(w & q);
      };
    
      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
    
        assert(this.negative === 0, 'imaskn works only with positive numbers');
    
        if (this.length <= s) {
          return this;
        }
    
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
    
        if (r !== 0) {
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          this.words[this.length - 1] &= mask;
        }
    
        return this._strip();
      };
    
      // Return only lowers bits of number
      BN.prototype.maskn = function maskn (bits) {
        return this.clone().imaskn(bits);
      };
    
      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
    
        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
    
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
    
        // Add without checks
        return this._iaddn(num);
      };
    
      BN.prototype._iaddn = function _iaddn (num) {
        this.words[0] += num;
    
        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
    
        return this;
      };
    
      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
    
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
    
        this.words[0] -= num;
    
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }
    
        return this._strip();
      };
    
      BN.prototype.addn = function addn (num) {
        return this.clone().iaddn(num);
      };
    
      BN.prototype.subn = function subn (num) {
        return this.clone().isubn(num);
      };
    
      BN.prototype.iabs = function iabs () {
        this.negative = 0;
    
        return this;
      };
    
      BN.prototype.abs = function abs () {
        return this.clone().iabs();
      };
    
      BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
        var len = num.length + shift;
        var i;
    
        this._expand(len);
    
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - ((right / 0x4000000) | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }
    
        if (carry === 0) return this._strip();
    
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
    
        return this._strip();
      };
    
      BN.prototype._wordDiv = function _wordDiv (num, mode) {
        var shift = this.length - num.length;
    
        var a = this.clone();
        var b = num;
    
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
    
        // Initialize quotient
        var m = a.length - b.length;
        var q;
    
        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
    
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
    
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 +
            (a.words[b.length + j - 1] | 0);
    
          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min((qj / bhi) | 0, 0x3ffffff);
    
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
    
        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }
    
        return {
          div: q || null,
          mod: a
        };
      };
    
      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod (num, mode, positive) {
        assert(!num.isZero());
    
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
    
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
    
          if (mode !== 'mod') {
            div = res.div.neg();
          }
    
          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
    
          return {
            div: div,
            mod: mod
          };
        }
    
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
    
          if (mode !== 'mod') {
            div = res.div.neg();
          }
    
          return {
            div: div,
            mod: res.mod
          };
        }
    
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
    
          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
    
          return {
            div: res.div,
            mod: mod
          };
        }
    
        // Both numbers are positive at this point
    
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
    
        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
    
          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }
    
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }
    
        return this._wordDiv(num, mode);
      };
    
      // Find `this` / `num`
      BN.prototype.div = function div (num) {
        return this.divmod(num, 'div', false).div;
      };
    
      // Find `this` % `num`
      BN.prototype.mod = function mod (num) {
        return this.divmod(num, 'mod', false).mod;
      };
    
      BN.prototype.umod = function umod (num) {
        return this.divmod(num, 'mod', true).mod;
      };
    
      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound (num) {
        var dm = this.divmod(num);
    
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
    
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
    
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
    
        // Round down
        if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;
    
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
    
      BN.prototype.modrn = function modrn (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
    
        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;
    
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
    
        return isNegNum ? -acc : acc;
      };
    
      // WARNING: DEPRECATED
      BN.prototype.modn = function modn (num) {
        return this.modrn(num);
      };
    
      // In-place division by number
      BN.prototype.idivn = function idivn (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
    
        assert(num <= 0x3ffffff);
    
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }
    
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
    
      BN.prototype.divn = function divn (num) {
        return this.clone().idivn(num);
      };
    
      BN.prototype.egcd = function egcd (p) {
        assert(p.negative === 0);
        assert(!p.isZero());
    
        var x = this;
        var y = p.clone();
    
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
    
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
    
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
    
        var g = 0;
    
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
    
        var yp = y.clone();
        var xp = x.clone();
    
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
    
              A.iushrn(1);
              B.iushrn(1);
            }
          }
    
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
    
              C.iushrn(1);
              D.iushrn(1);
            }
          }
    
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
    
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
    
      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp (p) {
        assert(p.negative === 0);
        assert(!p.isZero());
    
        var a = this;
        var b = p.clone();
    
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
    
        var x1 = new BN(1);
        var x2 = new BN(0);
    
        var delta = b.clone();
    
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
    
              x1.iushrn(1);
            }
          }
    
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
    
              x2.iushrn(1);
            }
          }
    
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
    
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
    
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
    
        return res;
      };
    
      BN.prototype.gcd = function gcd (num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
    
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
    
        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
    
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
    
          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
    
          a.isub(b);
        } while (true);
    
        return b.iushln(shift);
      };
    
      // Invert number in the field F(num)
      BN.prototype.invm = function invm (num) {
        return this.egcd(num).a.umod(num);
      };
    
      BN.prototype.isEven = function isEven () {
        return (this.words[0] & 1) === 0;
      };
    
      BN.prototype.isOdd = function isOdd () {
        return (this.words[0] & 1) === 1;
      };
    
      // And first word and num
      BN.prototype.andln = function andln (num) {
        return this.words[0] & num;
      };
    
      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn (bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
    
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
    
        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
    
      BN.prototype.isZero = function isZero () {
        return this.length === 1 && this.words[0] === 0;
      };
    
      BN.prototype.cmpn = function cmpn (num) {
        var negative = num < 0;
    
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
    
        this._strip();
    
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
    
          assert(num <= 0x3ffffff, 'Number is too big');
    
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
    
      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp (num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
    
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
    
      // Unsigned comparison
      BN.prototype.ucmp = function ucmp (num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
    
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
    
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
    
      BN.prototype.gtn = function gtn (num) {
        return this.cmpn(num) === 1;
      };
    
      BN.prototype.gt = function gt (num) {
        return this.cmp(num) === 1;
      };
    
      BN.prototype.gten = function gten (num) {
        return this.cmpn(num) >= 0;
      };
    
      BN.prototype.gte = function gte (num) {
        return this.cmp(num) >= 0;
      };
    
      BN.prototype.ltn = function ltn (num) {
        return this.cmpn(num) === -1;
      };
    
      BN.prototype.lt = function lt (num) {
        return this.cmp(num) === -1;
      };
    
      BN.prototype.lten = function lten (num) {
        return this.cmpn(num) <= 0;
      };
    
      BN.prototype.lte = function lte (num) {
        return this.cmp(num) <= 0;
      };
    
      BN.prototype.eqn = function eqn (num) {
        return this.cmpn(num) === 0;
      };
    
      BN.prototype.eq = function eq (num) {
        return this.cmp(num) === 0;
      };
    
      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red (num) {
        return new Red(num);
      };
    
      BN.prototype.toRed = function toRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };
    
      BN.prototype.fromRed = function fromRed () {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };
    
      BN.prototype._forceRed = function _forceRed (ctx) {
        this.red = ctx;
        return this;
      };
    
      BN.prototype.forceRed = function forceRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };
    
      BN.prototype.redAdd = function redAdd (num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };
    
      BN.prototype.redIAdd = function redIAdd (num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };
    
      BN.prototype.redSub = function redSub (num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };
    
      BN.prototype.redISub = function redISub (num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };
    
      BN.prototype.redShl = function redShl (num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };
    
      BN.prototype.redMul = function redMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
    
      BN.prototype.redIMul = function redIMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
    
      BN.prototype.redSqr = function redSqr () {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };
    
      BN.prototype.redISqr = function redISqr () {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };
    
      // Square root over p
      BN.prototype.redSqrt = function redSqrt () {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
    
      BN.prototype.redInvm = function redInvm () {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };
    
      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg () {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };
    
      BN.prototype.redPow = function redPow (num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
    
      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
    
      // Pseudo-Mersenne prime
      function MPrime (name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
    
        this.tmp = this._tmp();
      }
    
      MPrime.prototype._tmp = function _tmp () {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
    
      MPrime.prototype.ireduce = function ireduce (num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
    
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
    
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is a BN v4 instance
            r.strip();
          } else {
            // r is a BN v5 instance
            r._strip();
          }
        }
    
        return r;
      };
    
      MPrime.prototype.split = function split (input, out) {
        input.iushrn(this.n, 0, out);
      };
    
      MPrime.prototype.imulK = function imulK (num) {
        return num.imul(this.k);
      };
    
      function K256 () {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);
    
      K256.prototype.split = function split (input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
    
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
    
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
    
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
    
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
    
      K256.prototype.imulK = function imulK (num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
    
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }
    
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
    
      function P224 () {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);
    
      function P192 () {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);
    
      function P25519 () {
        // 2 ^ 255 - 19
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);
    
      P25519.prototype.imulK = function imulK (num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;
    
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
    
      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime (name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
    
        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;
    
        return prime;
      };
    
      //
      // Base reduction engine
      //
      function Red (m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }
    
      Red.prototype._verify1 = function _verify1 (a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };
    
      Red.prototype._verify2 = function _verify2 (a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red,
          'red works only with red numbers');
      };
    
      Red.prototype.imod = function imod (a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
    
      Red.prototype.neg = function neg (a) {
        if (a.isZero()) {
          return a.clone();
        }
    
        return this.m.sub(a)._forceRed(this);
      };
    
      Red.prototype.add = function add (a, b) {
        this._verify2(a, b);
    
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
    
      Red.prototype.iadd = function iadd (a, b) {
        this._verify2(a, b);
    
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
    
      Red.prototype.sub = function sub (a, b) {
        this._verify2(a, b);
    
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
    
      Red.prototype.isub = function isub (a, b) {
        this._verify2(a, b);
    
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
    
      Red.prototype.shl = function shl (a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
    
      Red.prototype.imul = function imul (a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
    
      Red.prototype.mul = function mul (a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
    
      Red.prototype.isqr = function isqr (a) {
        return this.imul(a, a.clone());
      };
    
      Red.prototype.sqr = function sqr (a) {
        return this.mul(a, a);
      };
    
      Red.prototype.sqrt = function sqrt (a) {
        if (a.isZero()) return a.clone();
    
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
    
        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
    
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
    
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
    
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
    
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
    
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
    
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
    
        return r;
      };
    
      Red.prototype.invm = function invm (a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
    
      Red.prototype.pow = function pow (a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
    
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
    
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
    
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
    
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
    
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
    
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
    
        return res;
      };
    
      Red.prototype.convertTo = function convertTo (num) {
        var r = num.umod(this.m);
    
        return r === num ? r.clone() : r;
      };
    
      Red.prototype.convertFrom = function convertFrom (num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
    
      //
      // Montgomery method engine
      //
    
      BN.mont = function mont (num) {
        return new Mont(num);
      };
    
      function Mont (m) {
        Red.call(this, m);
    
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }
    
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
    
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
    
      Mont.prototype.convertTo = function convertTo (num) {
        return this.imod(num.ushln(this.shift));
      };
    
      Mont.prototype.convertFrom = function convertFrom (num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
    
      Mont.prototype.imul = function imul (a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
    
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
    
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
    
        return res._forceRed(this);
      };
    
      Mont.prototype.mul = function mul (a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
    
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
    
        return res._forceRed(this);
      };
    
      Mont.prototype.invm = function invm (a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === 'undefined' || module, this);
    
    },{"buffer":257}],216:[function(require,module,exports){
    /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
    /* eslint-disable node/no-deprecated-api */
    var buffer = require('buffer')
    var Buffer = buffer.Buffer
    
    // alternative to using Object.keys for old browsers
    function copyProps (src, dst) {
      for (var key in src) {
        dst[key] = src[key]
      }
    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer
    } else {
      // Copy properties from require('buffer')
      copyProps(buffer, exports)
      exports.Buffer = SafeBuffer
    }
    
    function SafeBuffer (arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length)
    }
    
    SafeBuffer.prototype = Object.create(Buffer.prototype)
    
    // Copy static methods from Buffer
    copyProps(Buffer, SafeBuffer)
    
    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number')
      }
      return Buffer(arg, encodingOrOffset, length)
    }
    
    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      var buf = Buffer(size)
      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding)
        } else {
          buf.fill(fill)
        }
      } else {
        buf.fill(0)
      }
      return buf
    }
    
    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return Buffer(size)
    }
    
    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return buffer.SlowBuffer(size)
    }
    
    },{"buffer":301}],217:[function(require,module,exports){
    (function (setImmediate){(function (){
    "use strict";
    
    (function(root) {
        const MAX_VALUE = 0x7fffffff;
    
        // The SHA256 and PBKDF2 implementation are from scrypt-async-js:
        // See: https://github.com/dchest/scrypt-async-js
        function SHA256(m) {
            const K = new Uint32Array([
               0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
               0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
               0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
               0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
               0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
               0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
               0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
               0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
               0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
               0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
               0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
               0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
               0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
           ]);
    
            let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;
            let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;
            const w = new Uint32Array(64);
    
            function blocks(p) {
                let off = 0, len = p.length;
                while (len >= 64) {
                    let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;
    
                    for (i = 0; i < 16; i++) {
                        j = off + i*4;
                        w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |
                        ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);
                    }
    
                    for (i = 16; i < 64; i++) {
                        u = w[i-2];
                        t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);
    
                        u = w[i-15];
                        t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);
    
                        w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;
                    }
    
                    for (i = 0; i < 64; i++) {
                        t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^
                                 ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +
                              ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;
    
                        t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^
                               ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;
    
                        h = g;
                        g = f;
                        f = e;
                        e = (d + t1) | 0;
                        d = c;
                        c = b;
                        b = a;
                        a = (t1 + t2) | 0;
                    }
    
                    h0 = (h0 + a) | 0;
                    h1 = (h1 + b) | 0;
                    h2 = (h2 + c) | 0;
                    h3 = (h3 + d) | 0;
                    h4 = (h4 + e) | 0;
                    h5 = (h5 + f) | 0;
                    h6 = (h6 + g) | 0;
                    h7 = (h7 + h) | 0;
    
                    off += 64;
                    len -= 64;
                }
            }
    
            blocks(m);
    
            let i, bytesLeft = m.length % 64,
            bitLenHi = (m.length / 0x20000000) | 0,
            bitLenLo = m.length << 3,
            numZeros = (bytesLeft < 56) ? 56 : 120,
            p = m.slice(m.length - bytesLeft, m.length);
    
            p.push(0x80);
            for (i = bytesLeft + 1; i < numZeros; i++) { p.push(0); }
            p.push((bitLenHi >>> 24) & 0xff);
            p.push((bitLenHi >>> 16) & 0xff);
            p.push((bitLenHi >>> 8)  & 0xff);
            p.push((bitLenHi >>> 0)  & 0xff);
            p.push((bitLenLo >>> 24) & 0xff);
            p.push((bitLenLo >>> 16) & 0xff);
            p.push((bitLenLo >>> 8)  & 0xff);
            p.push((bitLenLo >>> 0)  & 0xff);
    
            blocks(p);
    
            return [
                (h0 >>> 24) & 0xff, (h0 >>> 16) & 0xff, (h0 >>> 8) & 0xff, (h0 >>> 0) & 0xff,
                (h1 >>> 24) & 0xff, (h1 >>> 16) & 0xff, (h1 >>> 8) & 0xff, (h1 >>> 0) & 0xff,
                (h2 >>> 24) & 0xff, (h2 >>> 16) & 0xff, (h2 >>> 8) & 0xff, (h2 >>> 0) & 0xff,
                (h3 >>> 24) & 0xff, (h3 >>> 16) & 0xff, (h3 >>> 8) & 0xff, (h3 >>> 0) & 0xff,
                (h4 >>> 24) & 0xff, (h4 >>> 16) & 0xff, (h4 >>> 8) & 0xff, (h4 >>> 0) & 0xff,
                (h5 >>> 24) & 0xff, (h5 >>> 16) & 0xff, (h5 >>> 8) & 0xff, (h5 >>> 0) & 0xff,
                (h6 >>> 24) & 0xff, (h6 >>> 16) & 0xff, (h6 >>> 8) & 0xff, (h6 >>> 0) & 0xff,
                (h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, (h7 >>> 0) & 0xff
            ];
        }
    
        function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
            // compress password if it's longer than hash block length
            password = (password.length <= 64) ? password : SHA256(password);
    
            const innerLen = 64 + salt.length + 4;
            const inner = new Array(innerLen);
            const outerKey = new Array(64);
    
            let i;
            let dk = [];
    
            // inner = (password ^ ipad) || salt || counter
            for (i = 0; i < 64; i++) { inner[i] = 0x36; }
            for (i = 0; i < password.length; i++) { inner[i] ^= password[i]; }
            for (i = 0; i < salt.length; i++) { inner[64 + i] = salt[i]; }
            for (i = innerLen - 4; i < innerLen; i++) { inner[i] = 0; }
    
            // outerKey = password ^ opad
            for (i = 0; i < 64; i++) outerKey[i] = 0x5c;
            for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];
    
            // increments counter inside inner
            function incrementCounter() {
                for (let i = innerLen - 1; i >= innerLen - 4; i--) {
                    inner[i]++;
                    if (inner[i] <= 0xff) return;
                    inner[i] = 0;
                }
            }
    
            // output blocks = SHA256(outerKey || SHA256(inner)) ...
            while (dkLen >= 32) {
                incrementCounter();
                dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
                dkLen -= 32;
            }
            if (dkLen > 0) {
                incrementCounter();
                dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
            }
    
            return dk;
        }
    
        // The following is an adaptation of scryptsy
        // See: https://www.npmjs.com/package/scryptsy
        function blockmix_salsa8(BY, Yi, r, x, _X) {
            let i;
    
            arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
            for (i = 0; i < 2 * r; i++) {
                blockxor(BY, i * 16, _X, 16);
                salsa20_8(_X, x);
                arraycopy(_X, 0, BY, Yi + (i * 16), 16);
            }
    
            for (i = 0; i < r; i++) {
                arraycopy(BY, Yi + (i * 2) * 16, BY, (i * 16), 16);
            }
    
            for (i = 0; i < r; i++) {
                arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
            }
        }
    
        function R(a, b) {
            return (a << b) | (a >>> (32 - b));
        }
    
        function salsa20_8(B, x) {
            arraycopy(B, 0, x, 0, 16);
    
            for (let i = 8; i > 0; i -= 2) {
                x[ 4] ^= R(x[ 0] + x[12], 7);
                x[ 8] ^= R(x[ 4] + x[ 0], 9);
                x[12] ^= R(x[ 8] + x[ 4], 13);
                x[ 0] ^= R(x[12] + x[ 8], 18);
                x[ 9] ^= R(x[ 5] + x[ 1], 7);
                x[13] ^= R(x[ 9] + x[ 5], 9);
                x[ 1] ^= R(x[13] + x[ 9], 13);
                x[ 5] ^= R(x[ 1] + x[13], 18);
                x[14] ^= R(x[10] + x[ 6], 7);
                x[ 2] ^= R(x[14] + x[10], 9);
                x[ 6] ^= R(x[ 2] + x[14], 13);
                x[10] ^= R(x[ 6] + x[ 2], 18);
                x[ 3] ^= R(x[15] + x[11], 7);
                x[ 7] ^= R(x[ 3] + x[15], 9);
                x[11] ^= R(x[ 7] + x[ 3], 13);
                x[15] ^= R(x[11] + x[ 7], 18);
                x[ 1] ^= R(x[ 0] + x[ 3], 7);
                x[ 2] ^= R(x[ 1] + x[ 0], 9);
                x[ 3] ^= R(x[ 2] + x[ 1], 13);
                x[ 0] ^= R(x[ 3] + x[ 2], 18);
                x[ 6] ^= R(x[ 5] + x[ 4], 7);
                x[ 7] ^= R(x[ 6] + x[ 5], 9);
                x[ 4] ^= R(x[ 7] + x[ 6], 13);
                x[ 5] ^= R(x[ 4] + x[ 7], 18);
                x[11] ^= R(x[10] + x[ 9], 7);
                x[ 8] ^= R(x[11] + x[10], 9);
                x[ 9] ^= R(x[ 8] + x[11], 13);
                x[10] ^= R(x[ 9] + x[ 8], 18);
                x[12] ^= R(x[15] + x[14], 7);
                x[13] ^= R(x[12] + x[15], 9);
                x[14] ^= R(x[13] + x[12], 13);
                x[15] ^= R(x[14] + x[13], 18);
            }
    
            for (let i = 0; i < 16; ++i) {
                B[i] += x[i];
            }
        }
    
        // naive approach... going back to loop unrolling may yield additional performance
        function blockxor(S, Si, D, len) {
            for (let i = 0; i < len; i++) {
                D[i] ^= S[Si + i]
            }
        }
    
        function arraycopy(src, srcPos, dest, destPos, length) {
            while (length--) {
                dest[destPos++] = src[srcPos++];
            }
        }
    
        function checkBufferish(o) {
            if (!o || typeof(o.length) !== 'number') { return false; }
    
            for (let i = 0; i < o.length; i++) {
                const v = o[i];
                if (typeof(v) !== 'number' || v % 1 || v < 0 || v >= 256) {
                    return false;
                }
            }
    
            return true;
        }
    
        function ensureInteger(value, name) {
            if (typeof(value) !== "number" || (value % 1)) { throw new Error('invalid ' + name); }
            return value;
        }
    
        // N = Cpu cost, r = Memory cost, p = parallelization cost
        // callback(error, progress, key)
        function _scrypt(password, salt, N, r, p, dkLen, callback) {
    
            N = ensureInteger(N, 'N');
            r = ensureInteger(r, 'r');
            p = ensureInteger(p, 'p');
    
            dkLen = ensureInteger(dkLen, 'dkLen');
    
            if (N === 0 || (N & (N - 1)) !== 0) { throw new Error('N must be power of 2'); }
    
            if (N > MAX_VALUE / 128 / r) { throw new Error('N too large'); }
            if (r > MAX_VALUE / 128 / p) { throw new Error('r too large'); }
    
            if (!checkBufferish(password)) {
                throw new Error('password must be an array or buffer');
            }
            password = Array.prototype.slice.call(password);
    
            if (!checkBufferish(salt)) {
                throw new Error('salt must be an array or buffer');
            }
            salt = Array.prototype.slice.call(salt);
    
            let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);
            const B = new Uint32Array(p * 32 * r)
            for (let i = 0; i < B.length; i++) {
                const j = i * 4;
                B[i] = ((b[j + 3] & 0xff) << 24) |
                       ((b[j + 2] & 0xff) << 16) |
                       ((b[j + 1] & 0xff) << 8) |
                       ((b[j + 0] & 0xff) << 0);
            }
    
            const XY = new Uint32Array(64 * r);
            const V = new Uint32Array(32 * r * N);
    
            const Yi = 32 * r;
    
            // scratch space
            const x = new Uint32Array(16);       // salsa20_8
            const _X = new Uint32Array(16);      // blockmix_salsa8
    
            const totalOps = p * N * 2;
            let currentOp = 0;
            let lastPercent10 = null;
    
            // Set this to true to abandon the scrypt on the next step
            let stop = false;
    
            // State information
            let state = 0;
            let i0 = 0, i1;
            let Bi;
    
            // How many blockmix_salsa8 can we do per step?
            const limit = callback ? parseInt(1000 / r): 0xffffffff;
    
            // Trick from scrypt-async; if there is a setImmediate shim in place, use it
            const nextTick = (typeof(setImmediate) !== 'undefined') ? setImmediate : setTimeout;
    
            // This is really all I changed; making scryptsy a state machine so we occasionally
            // stop and give other evnts on the evnt loop a chance to run. ~RicMoo
            const incrementalSMix = function() {
                if (stop) {
                    return callback(new Error('cancelled'), currentOp / totalOps);
                }
    
                let steps;
    
                switch (state) {
                    case 0:
                        // for (var i = 0; i < p; i++)...
                        Bi = i0 * 32 * r;
    
                        arraycopy(B, Bi, XY, 0, Yi);                       // ROMix - 1
    
                        state = 1;                                         // Move to ROMix 2
                        i1 = 0;
    
                        // Fall through
    
                    case 1:
    
                        // Run up to 1000 steps of the first inner smix loop
                        steps = N - i1;
                        if (steps > limit) { steps = limit; }
                        for (let i = 0; i < steps; i++) {                  // ROMix - 2
                            arraycopy(XY, 0, V, (i1 + i) * Yi, Yi)         // ROMix - 3
                            blockmix_salsa8(XY, Yi, r, x, _X);             // ROMix - 4
                        }
    
                        // for (var i = 0; i < N; i++)
                        i1 += steps;
                        currentOp += steps;
    
                        if (callback) {
                            // Call the callback with the progress (optionally stopping us)
                            const percent10 = parseInt(1000 * currentOp / totalOps);
                            if (percent10 !== lastPercent10) {
                                stop = callback(null, currentOp / totalOps);
                                if (stop) { break; }
                                lastPercent10 = percent10;
                            }
                        }
    
                        if (i1 < N) { break; }
    
                        i1 = 0;                                          // Move to ROMix 6
                        state = 2;
    
                        // Fall through
    
                    case 2:
    
                        // Run up to 1000 steps of the second inner smix loop
                        steps = N - i1;
                        if (steps > limit) { steps = limit; }
                        for (let i = 0; i < steps; i++) {                // ROMix - 6
                            const offset = (2 * r - 1) * 16;             // ROMix - 7
                            const j = XY[offset] & (N - 1);
                            blockxor(V, j * Yi, XY, Yi);                 // ROMix - 8 (inner)
                            blockmix_salsa8(XY, Yi, r, x, _X);           // ROMix - 9 (outer)
                        }
    
                        // for (var i = 0; i < N; i++)...
                        i1 += steps;
                        currentOp += steps;
    
                        // Call the callback with the progress (optionally stopping us)
                        if (callback) {
                            const percent10 = parseInt(1000 * currentOp / totalOps);
                            if (percent10 !== lastPercent10) {
                                stop = callback(null, currentOp / totalOps);
                                if (stop) { break; }
                                lastPercent10 = percent10;
                            }
                        }
    
                        if (i1 < N) { break; }
    
                        arraycopy(XY, 0, B, Bi, Yi);                     // ROMix - 10
    
                        // for (var i = 0; i < p; i++)...
                        i0++;
                        if (i0 < p) {
                            state = 0;
                            break;
                        }
    
                        b = [];
                        for (let i = 0; i < B.length; i++) {
                            b.push((B[i] >>  0) & 0xff);
                            b.push((B[i] >>  8) & 0xff);
                            b.push((B[i] >> 16) & 0xff);
                            b.push((B[i] >> 24) & 0xff);
                        }
    
                        const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);
    
                        // Send the result to the callback
                        if (callback) { callback(null, 1.0, derivedKey); }
    
                        // Done; don't break (which would reschedule)
                        return derivedKey;
                }
    
                // Schedule the next steps
                if (callback) { nextTick(incrementalSMix); }
            }
    
            // Run the smix state machine until completion
            if (!callback) {
                while (true) {
                    const derivedKey = incrementalSMix();
                    if (derivedKey != undefined) { return derivedKey; }
                }
            }
    
            // Bootstrap the async incremental smix
            incrementalSMix();
        }
    
        const lib = {
            scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {
                return new Promise(function(resolve, reject) {
                    let lastProgress = 0;
                    if (progressCallback) { progressCallback(0); }
                    _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {
                        if (error) {
                            reject(error);
                        } else if (key) {
                            if (progressCallback && lastProgress !== 1) {
                                progressCallback(1);
                            }
                            resolve(new Uint8Array(key));
                        } else if (progressCallback && progress !== lastProgress) {
                            lastProgress = progress;
                            return progressCallback(progress);
                        }
                    });
                });
            },
            syncScrypt: function(password, salt, N, r, p, dkLen) {
                return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));
            }
        };
    
        // node.js
        if (typeof(exports) !== 'undefined') {
           module.exports = lib;
    
        // RequireJS/AMD
        // http://www.requirejs.org/docs/api.html
        // https://github.com/amdjs/amdjs-api/wiki/AMD
        } else if (typeof(define) === 'function' && define.amd) {
            define(lib);
    
        // Web Browsers
        } else if (root) {
    
            // If there was an existing library "scrypt", make sure it is still available
            if (root.scrypt) {
                root._scrypt = root.scrypt;
            }
    
            root.scrypt = lib;
        }
    
    })(this);
    
    }).call(this)}).call(this,require("timers").setImmediate)
    },{"timers":425}],218:[function(require,module,exports){
    module.exports = require('./lib')(require('./lib/elliptic'))
    
    },{"./lib":220,"./lib/elliptic":219}],219:[function(require,module,exports){
    const EC = require('elliptic').ec
    
    const ec = new EC('secp256k1')
    const ecparams = ec.curve
    
    // Hack, we can not use bn.js@5, while elliptic uses bn.js@4
    // See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758
    const BN = ecparams.n.constructor
    
    function loadCompressedPublicKey (first, xbuf) {
      let x = new BN(xbuf)
    
      // overflow
      if (x.cmp(ecparams.p) >= 0) return null
      x = x.toRed(ecparams.red)
    
      // compute corresponding Y
      let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()
      if ((first === 0x03) !== y.isOdd()) y = y.redNeg()
    
      return ec.keyPair({ pub: { x: x, y: y } })
    }
    
    function loadUncompressedPublicKey (first, xbuf, ybuf) {
      let x = new BN(xbuf)
      let y = new BN(ybuf)
    
      // overflow
      if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null
    
      x = x.toRed(ecparams.red)
      y = y.toRed(ecparams.red)
    
      // is odd flag
      if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null
    
      // x*x*x + b = y*y
      const x3 = x.redSqr().redIMul(x)
      if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null
    
      return ec.keyPair({ pub: { x: x, y: y } })
    }
    
    function loadPublicKey (pubkey) {
      // length should be validated in interface
      const first = pubkey[0]
      switch (first) {
        case 0x02:
        case 0x03:
          if (pubkey.length !== 33) return null
          return loadCompressedPublicKey(first, pubkey.subarray(1, 33))
        case 0x04:
        case 0x06:
        case 0x07:
          if (pubkey.length !== 65) return null
          return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))
        default:
          return null
      }
    }
    
    function savePublicKey (output, point) {
      const pubkey = point.encode(null, output.length === 33)
      // Loop should be faster because we do not need create extra Uint8Array
      // output.set(new Uint8Array(pubkey))
      for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]
    }
    
    module.exports = {
      contextRandomize () {
        return 0
      },
    
      privateKeyVerify (seckey) {
        const bn = new BN(seckey)
        return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1
      },
    
      privateKeyNegate (seckey) {
        const bn = new BN(seckey)
        const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)
        seckey.set(negate)
        return 0
      },
    
      privateKeyTweakAdd (seckey, tweak) {
        const bn = new BN(tweak)
        if (bn.cmp(ecparams.n) >= 0) return 1
    
        bn.iadd(new BN(seckey))
        if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)
        if (bn.isZero()) return 1
    
        const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)
        seckey.set(tweaked)
    
        return 0
      },
    
      privateKeyTweakMul (seckey, tweak) {
        let bn = new BN(tweak)
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1
    
        bn.imul(new BN(seckey))
        if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)
    
        const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)
        seckey.set(tweaked)
    
        return 0
      },
    
      publicKeyVerify (pubkey) {
        const pair = loadPublicKey(pubkey)
        return pair === null ? 1 : 0
      },
    
      publicKeyCreate (output, seckey) {
        const bn = new BN(seckey)
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1
    
        const point = ec.keyFromPrivate(seckey).getPublic()
        savePublicKey(output, point)
    
        return 0
      },
    
      publicKeyConvert (output, pubkey) {
        const pair = loadPublicKey(pubkey)
        if (pair === null) return 1
    
        const point = pair.getPublic()
        savePublicKey(output, point)
    
        return 0
      },
    
      publicKeyNegate (output, pubkey) {
        const pair = loadPublicKey(pubkey)
        if (pair === null) return 1
    
        const point = pair.getPublic()
        point.y = point.y.redNeg()
        savePublicKey(output, point)
    
        return 0
      },
    
      publicKeyCombine (output, pubkeys) {
        const pairs = new Array(pubkeys.length)
        for (let i = 0; i < pubkeys.length; ++i) {
          pairs[i] = loadPublicKey(pubkeys[i])
          if (pairs[i] === null) return 1
        }
    
        let point = pairs[0].getPublic()
        for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)
        if (point.isInfinity()) return 2
    
        savePublicKey(output, point)
    
        return 0
      },
    
      publicKeyTweakAdd (output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey)
        if (pair === null) return 1
    
        tweak = new BN(tweak)
        if (tweak.cmp(ecparams.n) >= 0) return 2
    
        const point = pair.getPublic().add(ecparams.g.mul(tweak))
        if (point.isInfinity()) return 2
    
        savePublicKey(output, point)
    
        return 0
      },
    
      publicKeyTweakMul (output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey)
        if (pair === null) return 1
    
        tweak = new BN(tweak)
        if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2
    
        const point = pair.getPublic().mul(tweak)
        savePublicKey(output, point)
    
        return 0
      },
    
      signatureNormalize (sig) {
        const r = new BN(sig.subarray(0, 32))
        const s = new BN(sig.subarray(32, 64))
        if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1
    
        if (s.cmp(ec.nh) === 1) {
          sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)
        }
    
        return 0
      },
    
      // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
      // Adapted for Uint8Array instead Buffer
      signatureExport (obj, sig) {
        const sigR = sig.subarray(0, 32)
        const sigS = sig.subarray(32, 64)
        if (new BN(sigR).cmp(ecparams.n) >= 0) return 1
        if (new BN(sigS).cmp(ecparams.n) >= 0) return 1
    
        const { output } = obj
    
        // Prepare R
        let r = output.subarray(4, 4 + 33)
        r[0] = 0x00
        r.set(sigR, 1)
    
        let lenR = 33
        let posR = 0
        for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);
    
        r = r.subarray(posR)
        if (r[0] & 0x80) return 1
        if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1
    
        // Prepare S
        let s = output.subarray(6 + 33, 6 + 33 + 33)
        s[0] = 0x00
        s.set(sigS, 1)
    
        let lenS = 33
        let posS = 0
        for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);
    
        s = s.subarray(posS)
        if (s[0] & 0x80) return 1
        if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1
    
        // Set output length for return
        obj.outputlen = 6 + lenR + lenS
    
        // Output in specified format
        // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
        output[0] = 0x30
        output[1] = obj.outputlen - 2
        output[2] = 0x02
        output[3] = r.length
        output.set(r, 4)
        output[4 + lenR] = 0x02
        output[5 + lenR] = s.length
        output.set(s, 6 + lenR)
    
        return 0
      },
    
      // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
      // Adapted for Uint8Array instead Buffer
      signatureImport (output, sig) {
        if (sig.length < 8) return 1
        if (sig.length > 72) return 1
        if (sig[0] !== 0x30) return 1
        if (sig[1] !== sig.length - 2) return 1
        if (sig[2] !== 0x02) return 1
    
        const lenR = sig[3]
        if (lenR === 0) return 1
        if (5 + lenR >= sig.length) return 1
        if (sig[4 + lenR] !== 0x02) return 1
    
        const lenS = sig[5 + lenR]
        if (lenS === 0) return 1
        if ((6 + lenR + lenS) !== sig.length) return 1
    
        if (sig[4] & 0x80) return 1
        if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1
    
        if (sig[lenR + 6] & 0x80) return 1
        if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1
    
        let sigR = sig.subarray(4, 4 + lenR)
        if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)
        if (sigR.length > 32) return 1
    
        let sigS = sig.subarray(6 + lenR)
        if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)
        if (sigS.length > 32) throw new Error('S length is too long')
    
        let r = new BN(sigR)
        if (r.cmp(ecparams.n) >= 0) r = new BN(0)
    
        let s = new BN(sig.subarray(6 + lenR))
        if (s.cmp(ecparams.n) >= 0) s = new BN(0)
    
        output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)
        output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)
    
        return 0
      },
    
      ecdsaSign (obj, message, seckey, data, noncefn) {
        if (noncefn) {
          const _noncefn = noncefn
          noncefn = (counter) => {
            const nonce = _noncefn(message, seckey, null, data, counter)
    
            const isValid = nonce instanceof Uint8Array && nonce.length === 32
            if (!isValid) throw new Error('This is the way')
    
            return new BN(nonce)
          }
        }
    
        const d = new BN(seckey)
        if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1
    
        let sig
        try {
          sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })
        } catch (err) {
          return 1
        }
    
        obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)
        obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)
        obj.recid = sig.recoveryParam
    
        return 0
      },
    
      ecdsaVerify (sig, msg32, pubkey) {
        const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }
    
        const sigr = new BN(sigObj.r)
        const sigs = new BN(sigObj.s)
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1
        if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3
    
        const pair = loadPublicKey(pubkey)
        if (pair === null) return 2
    
        const point = pair.getPublic()
        const isValid = ec.verify(msg32, sigObj, point)
        return isValid ? 0 : 3
      },
    
      ecdsaRecover (output, sig, recid, msg32) {
        const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }
    
        const sigr = new BN(sigObj.r)
        const sigs = new BN(sigObj.s)
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1
    
        if (sigr.isZero() || sigs.isZero()) return 2
    
        // Can throw `throw new Error('Unable to find sencond key candinate');`
        let point
        try {
          point = ec.recoverPubKey(msg32, sigObj, recid)
        } catch (err) {
          return 2
        }
    
        savePublicKey(output, point)
    
        return 0
      },
    
      ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
        const pair = loadPublicKey(pubkey)
        if (pair === null) return 1
    
        const scalar = new BN(seckey)
        if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2
    
        const point = pair.getPublic().mul(scalar)
    
        if (hashfn === undefined) {
          const data = point.encode(null, true)
          const sha256 = ec.hash().update(data).digest()
          for (let i = 0; i < 32; ++i) output[i] = sha256[i]
        } else {
          if (!xbuf) xbuf = new Uint8Array(32)
          const x = point.getX().toArray('be', 32)
          for (let i = 0; i < 32; ++i) xbuf[i] = x[i]
    
          if (!ybuf) ybuf = new Uint8Array(32)
          const y = point.getY().toArray('be', 32)
          for (let i = 0; i < 32; ++i) ybuf[i] = y[i]
    
          const hash = hashfn(xbuf, ybuf, data)
    
          const isValid = hash instanceof Uint8Array && hash.length === output.length
          if (!isValid) return 2
    
          output.set(hash)
        }
    
        return 0
      }
    }
    
    },{"elliptic":127}],220:[function(require,module,exports){
    const errors = {
      IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',
      TWEAK_ADD:
        'The tweak was out of range or the resulted private key is invalid',
      TWEAK_MUL: 'The tweak was out of range or equal to zero',
      CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',
      SECKEY_INVALID: 'Private Key is invalid',
      PUBKEY_PARSE: 'Public Key could not be parsed',
      PUBKEY_SERIALIZE: 'Public Key serialization error',
      PUBKEY_COMBINE: 'The sum of the public keys is not valid',
      SIG_PARSE: 'Signature could not be parsed',
      SIGN: 'The nonce generation function failed, or the private key was invalid',
      RECOVER: 'Public key could not be recover',
      ECDH: 'Scalar was invalid (zero or overflow)'
    }
    
    function assert (cond, msg) {
      if (!cond) throw new Error(msg)
    }
    
    function isUint8Array (name, value, length) {
      assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)
    
      if (length !== undefined) {
        if (Array.isArray(length)) {
          const numbers = length.join(', ')
          const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`
          assert(length.includes(value.length), msg)
        } else {
          const msg = `Expected ${name} to be an Uint8Array with length ${length}`
          assert(value.length === length, msg)
        }
      }
    }
    
    function isCompressed (value) {
      assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')
    }
    
    function getAssertedOutput (output = (len) => new Uint8Array(len), length) {
      if (typeof output === 'function') output = output(length)
      isUint8Array('output', output, length)
      return output
    }
    
    function toTypeString (value) {
      return Object.prototype.toString.call(value).slice(8, -1)
    }
    
    module.exports = (secp256k1) => {
      return {
        contextRandomize (seed) {
          assert(
            seed === null || seed instanceof Uint8Array,
            'Expected seed to be an Uint8Array or null'
          )
          if (seed !== null) isUint8Array('seed', seed, 32)
    
          switch (secp256k1.contextRandomize(seed)) {
            case 1:
              throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)
          }
        },
    
        privateKeyVerify (seckey) {
          isUint8Array('private key', seckey, 32)
    
          return secp256k1.privateKeyVerify(seckey) === 0
        },
    
        privateKeyNegate (seckey) {
          isUint8Array('private key', seckey, 32)
    
          switch (secp256k1.privateKeyNegate(seckey)) {
            case 0:
              return seckey
            case 1:
              throw new Error(errors.IMPOSSIBLE_CASE)
          }
        },
    
        privateKeyTweakAdd (seckey, tweak) {
          isUint8Array('private key', seckey, 32)
          isUint8Array('tweak', tweak, 32)
    
          switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
            case 0:
              return seckey
            case 1:
              throw new Error(errors.TWEAK_ADD)
          }
        },
    
        privateKeyTweakMul (seckey, tweak) {
          isUint8Array('private key', seckey, 32)
          isUint8Array('tweak', tweak, 32)
    
          switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
            case 0:
              return seckey
            case 1:
              throw new Error(errors.TWEAK_MUL)
          }
        },
    
        publicKeyVerify (pubkey) {
          isUint8Array('public key', pubkey, [33, 65])
    
          return secp256k1.publicKeyVerify(pubkey) === 0
        },
    
        publicKeyCreate (seckey, compressed = true, output) {
          isUint8Array('private key', seckey, 32)
          isCompressed(compressed)
          output = getAssertedOutput(output, compressed ? 33 : 65)
    
          switch (secp256k1.publicKeyCreate(output, seckey)) {
            case 0:
              return output
            case 1:
              throw new Error(errors.SECKEY_INVALID)
            case 2:
              throw new Error(errors.PUBKEY_SERIALIZE)
          }
        },
    
        publicKeyConvert (pubkey, compressed = true, output) {
          isUint8Array('public key', pubkey, [33, 65])
          isCompressed(compressed)
          output = getAssertedOutput(output, compressed ? 33 : 65)
    
          switch (secp256k1.publicKeyConvert(output, pubkey)) {
            case 0:
              return output
            case 1:
              throw new Error(errors.PUBKEY_PARSE)
            case 2:
              throw new Error(errors.PUBKEY_SERIALIZE)
          }
        },
    
        publicKeyNegate (pubkey, compressed = true, output) {
          isUint8Array('public key', pubkey, [33, 65])
          isCompressed(compressed)
          output = getAssertedOutput(output, compressed ? 33 : 65)
    
          switch (secp256k1.publicKeyNegate(output, pubkey)) {
            case 0:
              return output
            case 1:
              throw new Error(errors.PUBKEY_PARSE)
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE)
            case 3:
              throw new Error(errors.PUBKEY_SERIALIZE)
          }
        },
    
        publicKeyCombine (pubkeys, compressed = true, output) {
          assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')
          assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')
          for (const pubkey of pubkeys) {
            isUint8Array('public key', pubkey, [33, 65])
          }
          isCompressed(compressed)
          output = getAssertedOutput(output, compressed ? 33 : 65)
    
          switch (secp256k1.publicKeyCombine(output, pubkeys)) {
            case 0:
              return output
            case 1:
              throw new Error(errors.PUBKEY_PARSE)
            case 2:
              throw new Error(errors.PUBKEY_COMBINE)
            case 3:
              throw new Error(errors.PUBKEY_SERIALIZE)
          }
        },
    
        publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {
          isUint8Array('public key', pubkey, [33, 65])
          isUint8Array('tweak', tweak, 32)
          isCompressed(compressed)
          output = getAssertedOutput(output, compressed ? 33 : 65)
    
          switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
            case 0:
              return output
            case 1:
              throw new Error(errors.PUBKEY_PARSE)
            case 2:
              throw new Error(errors.TWEAK_ADD)
          }
        },
    
        publicKeyTweakMul (pubkey, tweak, compressed = true, output) {
          isUint8Array('public key', pubkey, [33, 65])
          isUint8Array('tweak', tweak, 32)
          isCompressed(compressed)
          output = getAssertedOutput(output, compressed ? 33 : 65)
    
          switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
            case 0:
              return output
            case 1:
              throw new Error(errors.PUBKEY_PARSE)
            case 2:
              throw new Error(errors.TWEAK_MUL)
          }
        },
    
        signatureNormalize (sig) {
          isUint8Array('signature', sig, 64)
    
          switch (secp256k1.signatureNormalize(sig)) {
            case 0:
              return sig
            case 1:
              throw new Error(errors.SIG_PARSE)
          }
        },
    
        signatureExport (sig, output) {
          isUint8Array('signature', sig, 64)
          output = getAssertedOutput(output, 72)
    
          const obj = { output, outputlen: 72 }
          switch (secp256k1.signatureExport(obj, sig)) {
            case 0:
              return output.slice(0, obj.outputlen)
            case 1:
              throw new Error(errors.SIG_PARSE)
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE)
          }
        },
    
        signatureImport (sig, output) {
          isUint8Array('signature', sig)
          output = getAssertedOutput(output, 64)
    
          switch (secp256k1.signatureImport(output, sig)) {
            case 0:
              return output
            case 1:
              throw new Error(errors.SIG_PARSE)
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE)
          }
        },
    
        ecdsaSign (msg32, seckey, options = {}, output) {
          isUint8Array('message', msg32, 32)
          isUint8Array('private key', seckey, 32)
          assert(toTypeString(options) === 'Object', 'Expected options to be an Object')
          if (options.data !== undefined) isUint8Array('options.data', options.data)
          if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')
          output = getAssertedOutput(output, 64)
    
          const obj = { signature: output, recid: null }
          switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
            case 0:
              return obj
            case 1:
              throw new Error(errors.SIGN)
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE)
          }
        },
    
        ecdsaVerify (sig, msg32, pubkey) {
          isUint8Array('signature', sig, 64)
          isUint8Array('message', msg32, 32)
          isUint8Array('public key', pubkey, [33, 65])
    
          switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
            case 0:
              return true
            case 3:
              return false
            case 1:
              throw new Error(errors.SIG_PARSE)
            case 2:
              throw new Error(errors.PUBKEY_PARSE)
          }
        },
    
        ecdsaRecover (sig, recid, msg32, compressed = true, output) {
          isUint8Array('signature', sig, 64)
          assert(
            toTypeString(recid) === 'Number' &&
              recid >= 0 &&
              recid <= 3,
            'Expected recovery id to be a Number within interval [0, 3]'
          )
          isUint8Array('message', msg32, 32)
          isCompressed(compressed)
          output = getAssertedOutput(output, compressed ? 33 : 65)
    
          switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
            case 0:
              return output
            case 1:
              throw new Error(errors.SIG_PARSE)
            case 2:
              throw new Error(errors.RECOVER)
            case 3:
              throw new Error(errors.IMPOSSIBLE_CASE)
          }
        },
    
        ecdh (pubkey, seckey, options = {}, output) {
          isUint8Array('public key', pubkey, [33, 65])
          isUint8Array('private key', seckey, 32)
          assert(toTypeString(options) === 'Object', 'Expected options to be an Object')
          if (options.data !== undefined) isUint8Array('options.data', options.data)
          if (options.hashfn !== undefined) {
            assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')
            if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)
            if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)
            isUint8Array('output', output)
          } else {
            output = getAssertedOutput(output, 32)
          }
    
          switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
            case 0:
              return output
            case 1:
              throw new Error(errors.PUBKEY_PARSE)
            case 2:
              throw new Error(errors.ECDH)
          }
        }
      }
    }
    
    },{}],221:[function(require,module,exports){
    var Buffer = require('safe-buffer').Buffer
    
    // prototype class for hash functions
    function Hash (blockSize, finalSize) {
      this._block = Buffer.alloc(blockSize)
      this._finalSize = finalSize
      this._blockSize = blockSize
      this._len = 0
    }
    
    Hash.prototype.update = function (data, enc) {
      if (typeof data === 'string') {
        enc = enc || 'utf8'
        data = Buffer.from(data, enc)
      }
    
      var block = this._block
      var blockSize = this._blockSize
      var length = data.length
      var accum = this._len
    
      for (var offset = 0; offset < length;) {
        var assigned = accum % blockSize
        var remainder = Math.min(length - offset, blockSize - assigned)
    
        for (var i = 0; i < remainder; i++) {
          block[assigned + i] = data[offset + i]
        }
    
        accum += remainder
        offset += remainder
    
        if ((accum % blockSize) === 0) {
          this._update(block)
        }
      }
    
      this._len += length
      return this
    }
    
    Hash.prototype.digest = function (enc) {
      var rem = this._len % this._blockSize
    
      this._block[rem] = 0x80
    
      // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
      // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
      this._block.fill(0, rem + 1)
    
      if (rem >= this._finalSize) {
        this._update(this._block)
        this._block.fill(0)
      }
    
      var bits = this._len * 8
    
      // uint32
      if (bits <= 0xffffffff) {
        this._block.writeUInt32BE(bits, this._blockSize - 4)
    
      // uint64
      } else {
        var lowBits = (bits & 0xffffffff) >>> 0
        var highBits = (bits - lowBits) / 0x100000000
    
        this._block.writeUInt32BE(highBits, this._blockSize - 8)
        this._block.writeUInt32BE(lowBits, this._blockSize - 4)
      }
    
      this._update(this._block)
      var hash = this._hash()
    
      return enc ? hash.toString(enc) : hash
    }
    
    Hash.prototype._update = function () {
      throw new Error('_update must be implemented by subclass')
    }
    
    module.exports = Hash
    
    },{"safe-buffer":216}],222:[function(require,module,exports){
    var exports = module.exports = function SHA (algorithm) {
      algorithm = algorithm.toLowerCase()
    
      var Algorithm = exports[algorithm]
      if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')
    
      return new Algorithm()
    }
    
    exports.sha = require('./sha')
    exports.sha1 = require('./sha1')
    exports.sha224 = require('./sha224')
    exports.sha256 = require('./sha256')
    exports.sha384 = require('./sha384')
    exports.sha512 = require('./sha512')
    
    },{"./sha":223,"./sha1":224,"./sha224":225,"./sha256":226,"./sha384":227,"./sha512":228}],223:[function(require,module,exports){
    /*
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
     * in FIPS PUB 180-1
     * This source code is derived from sha1.js of the same repository.
     * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
     * operation was added.
     */
    
    var inherits = require('inherits')
    var Hash = require('./hash')
    var Buffer = require('safe-buffer').Buffer
    
    var K = [
      0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
    ]
    
    var W = new Array(80)
    
    function Sha () {
      this.init()
      this._w = W
    
      Hash.call(this, 64, 56)
    }
    
    inherits(Sha, Hash)
    
    Sha.prototype.init = function () {
      this._a = 0x67452301
      this._b = 0xefcdab89
      this._c = 0x98badcfe
      this._d = 0x10325476
      this._e = 0xc3d2e1f0
    
      return this
    }
    
    function rotl5 (num) {
      return (num << 5) | (num >>> 27)
    }
    
    function rotl30 (num) {
      return (num << 30) | (num >>> 2)
    }
    
    function ft (s, b, c, d) {
      if (s === 0) return (b & c) | ((~b) & d)
      if (s === 2) return (b & c) | (b & d) | (c & d)
      return b ^ c ^ d
    }
    
    Sha.prototype._update = function (M) {
      var W = this._w
    
      var a = this._a | 0
      var b = this._b | 0
      var c = this._c | 0
      var d = this._d | 0
      var e = this._e | 0
    
      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
      for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]
    
      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20)
        var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0
    
        e = d
        d = c
        c = rotl30(b)
        b = a
        a = t
      }
    
      this._a = (a + this._a) | 0
      this._b = (b + this._b) | 0
      this._c = (c + this._c) | 0
      this._d = (d + this._d) | 0
      this._e = (e + this._e) | 0
    }
    
    Sha.prototype._hash = function () {
      var H = Buffer.allocUnsafe(20)
    
      H.writeInt32BE(this._a | 0, 0)
      H.writeInt32BE(this._b | 0, 4)
      H.writeInt32BE(this._c | 0, 8)
      H.writeInt32BE(this._d | 0, 12)
      H.writeInt32BE(this._e | 0, 16)
    
      return H
    }
    
    module.exports = Sha
    
    },{"./hash":221,"inherits":184,"safe-buffer":216}],224:[function(require,module,exports){
    /*
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
     * in FIPS PUB 180-1
     * Version 2.1a Copyright Paul Johnston 2000 - 2002.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     * Distributed under the BSD License
     * See http://pajhome.org.uk/crypt/md5 for details.
     */
    
    var inherits = require('inherits')
    var Hash = require('./hash')
    var Buffer = require('safe-buffer').Buffer
    
    var K = [
      0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
    ]
    
    var W = new Array(80)
    
    function Sha1 () {
      this.init()
      this._w = W
    
      Hash.call(this, 64, 56)
    }
    
    inherits(Sha1, Hash)
    
    Sha1.prototype.init = function () {
      this._a = 0x67452301
      this._b = 0xefcdab89
      this._c = 0x98badcfe
      this._d = 0x10325476
      this._e = 0xc3d2e1f0
    
      return this
    }
    
    function rotl1 (num) {
      return (num << 1) | (num >>> 31)
    }
    
    function rotl5 (num) {
      return (num << 5) | (num >>> 27)
    }
    
    function rotl30 (num) {
      return (num << 30) | (num >>> 2)
    }
    
    function ft (s, b, c, d) {
      if (s === 0) return (b & c) | ((~b) & d)
      if (s === 2) return (b & c) | (b & d) | (c & d)
      return b ^ c ^ d
    }
    
    Sha1.prototype._update = function (M) {
      var W = this._w
    
      var a = this._a | 0
      var b = this._b | 0
      var c = this._c | 0
      var d = this._d | 0
      var e = this._e | 0
    
      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
      for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])
    
      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20)
        var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0
    
        e = d
        d = c
        c = rotl30(b)
        b = a
        a = t
      }
    
      this._a = (a + this._a) | 0
      this._b = (b + this._b) | 0
      this._c = (c + this._c) | 0
      this._d = (d + this._d) | 0
      this._e = (e + this._e) | 0
    }
    
    Sha1.prototype._hash = function () {
      var H = Buffer.allocUnsafe(20)
    
      H.writeInt32BE(this._a | 0, 0)
      H.writeInt32BE(this._b | 0, 4)
      H.writeInt32BE(this._c | 0, 8)
      H.writeInt32BE(this._d | 0, 12)
      H.writeInt32BE(this._e | 0, 16)
    
      return H
    }
    
    module.exports = Sha1
    
    },{"./hash":221,"inherits":184,"safe-buffer":216}],225:[function(require,module,exports){
    /**
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
     * in FIPS 180-2
     * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     *
     */
    
    var inherits = require('inherits')
    var Sha256 = require('./sha256')
    var Hash = require('./hash')
    var Buffer = require('safe-buffer').Buffer
    
    var W = new Array(64)
    
    function Sha224 () {
      this.init()
    
      this._w = W // new Array(64)
    
      Hash.call(this, 64, 56)
    }
    
    inherits(Sha224, Sha256)
    
    Sha224.prototype.init = function () {
      this._a = 0xc1059ed8
      this._b = 0x367cd507
      this._c = 0x3070dd17
      this._d = 0xf70e5939
      this._e = 0xffc00b31
      this._f = 0x68581511
      this._g = 0x64f98fa7
      this._h = 0xbefa4fa4
    
      return this
    }
    
    Sha224.prototype._hash = function () {
      var H = Buffer.allocUnsafe(28)
    
      H.writeInt32BE(this._a, 0)
      H.writeInt32BE(this._b, 4)
      H.writeInt32BE(this._c, 8)
      H.writeInt32BE(this._d, 12)
      H.writeInt32BE(this._e, 16)
      H.writeInt32BE(this._f, 20)
      H.writeInt32BE(this._g, 24)
    
      return H
    }
    
    module.exports = Sha224
    
    },{"./hash":221,"./sha256":226,"inherits":184,"safe-buffer":216}],226:[function(require,module,exports){
    /**
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
     * in FIPS 180-2
     * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     *
     */
    
    var inherits = require('inherits')
    var Hash = require('./hash')
    var Buffer = require('safe-buffer').Buffer
    
    var K = [
      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
    ]
    
    var W = new Array(64)
    
    function Sha256 () {
      this.init()
    
      this._w = W // new Array(64)
    
      Hash.call(this, 64, 56)
    }
    
    inherits(Sha256, Hash)
    
    Sha256.prototype.init = function () {
      this._a = 0x6a09e667
      this._b = 0xbb67ae85
      this._c = 0x3c6ef372
      this._d = 0xa54ff53a
      this._e = 0x510e527f
      this._f = 0x9b05688c
      this._g = 0x1f83d9ab
      this._h = 0x5be0cd19
    
      return this
    }
    
    function ch (x, y, z) {
      return z ^ (x & (y ^ z))
    }
    
    function maj (x, y, z) {
      return (x & y) | (z & (x | y))
    }
    
    function sigma0 (x) {
      return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
    }
    
    function sigma1 (x) {
      return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
    }
    
    function gamma0 (x) {
      return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
    }
    
    function gamma1 (x) {
      return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
    }
    
    Sha256.prototype._update = function (M) {
      var W = this._w
    
      var a = this._a | 0
      var b = this._b | 0
      var c = this._c | 0
      var d = this._d | 0
      var e = this._e | 0
      var f = this._f | 0
      var g = this._g | 0
      var h = this._h | 0
    
      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
      for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0
    
      for (var j = 0; j < 64; ++j) {
        var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
        var T2 = (sigma0(a) + maj(a, b, c)) | 0
    
        h = g
        g = f
        f = e
        e = (d + T1) | 0
        d = c
        c = b
        b = a
        a = (T1 + T2) | 0
      }
    
      this._a = (a + this._a) | 0
      this._b = (b + this._b) | 0
      this._c = (c + this._c) | 0
      this._d = (d + this._d) | 0
      this._e = (e + this._e) | 0
      this._f = (f + this._f) | 0
      this._g = (g + this._g) | 0
      this._h = (h + this._h) | 0
    }
    
    Sha256.prototype._hash = function () {
      var H = Buffer.allocUnsafe(32)
    
      H.writeInt32BE(this._a, 0)
      H.writeInt32BE(this._b, 4)
      H.writeInt32BE(this._c, 8)
      H.writeInt32BE(this._d, 12)
      H.writeInt32BE(this._e, 16)
      H.writeInt32BE(this._f, 20)
      H.writeInt32BE(this._g, 24)
      H.writeInt32BE(this._h, 28)
    
      return H
    }
    
    module.exports = Sha256
    
    },{"./hash":221,"inherits":184,"safe-buffer":216}],227:[function(require,module,exports){
    var inherits = require('inherits')
    var SHA512 = require('./sha512')
    var Hash = require('./hash')
    var Buffer = require('safe-buffer').Buffer
    
    var W = new Array(160)
    
    function Sha384 () {
      this.init()
      this._w = W
    
      Hash.call(this, 128, 112)
    }
    
    inherits(Sha384, SHA512)
    
    Sha384.prototype.init = function () {
      this._ah = 0xcbbb9d5d
      this._bh = 0x629a292a
      this._ch = 0x9159015a
      this._dh = 0x152fecd8
      this._eh = 0x67332667
      this._fh = 0x8eb44a87
      this._gh = 0xdb0c2e0d
      this._hh = 0x47b5481d
    
      this._al = 0xc1059ed8
      this._bl = 0x367cd507
      this._cl = 0x3070dd17
      this._dl = 0xf70e5939
      this._el = 0xffc00b31
      this._fl = 0x68581511
      this._gl = 0x64f98fa7
      this._hl = 0xbefa4fa4
    
      return this
    }
    
    Sha384.prototype._hash = function () {
      var H = Buffer.allocUnsafe(48)
    
      function writeInt64BE (h, l, offset) {
        H.writeInt32BE(h, offset)
        H.writeInt32BE(l, offset + 4)
      }
    
      writeInt64BE(this._ah, this._al, 0)
      writeInt64BE(this._bh, this._bl, 8)
      writeInt64BE(this._ch, this._cl, 16)
      writeInt64BE(this._dh, this._dl, 24)
      writeInt64BE(this._eh, this._el, 32)
      writeInt64BE(this._fh, this._fl, 40)
    
      return H
    }
    
    module.exports = Sha384
    
    },{"./hash":221,"./sha512":228,"inherits":184,"safe-buffer":216}],228:[function(require,module,exports){
    var inherits = require('inherits')
    var Hash = require('./hash')
    var Buffer = require('safe-buffer').Buffer
    
    var K = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ]
    
    var W = new Array(160)
    
    function Sha512 () {
      this.init()
      this._w = W
    
      Hash.call(this, 128, 112)
    }
    
    inherits(Sha512, Hash)
    
    Sha512.prototype.init = function () {
      this._ah = 0x6a09e667
      this._bh = 0xbb67ae85
      this._ch = 0x3c6ef372
      this._dh = 0xa54ff53a
      this._eh = 0x510e527f
      this._fh = 0x9b05688c
      this._gh = 0x1f83d9ab
      this._hh = 0x5be0cd19
    
      this._al = 0xf3bcc908
      this._bl = 0x84caa73b
      this._cl = 0xfe94f82b
      this._dl = 0x5f1d36f1
      this._el = 0xade682d1
      this._fl = 0x2b3e6c1f
      this._gl = 0xfb41bd6b
      this._hl = 0x137e2179
    
      return this
    }
    
    function Ch (x, y, z) {
      return z ^ (x & (y ^ z))
    }
    
    function maj (x, y, z) {
      return (x & y) | (z & (x | y))
    }
    
    function sigma0 (x, xl) {
      return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
    }
    
    function sigma1 (x, xl) {
      return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
    }
    
    function Gamma0 (x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
    }
    
    function Gamma0l (x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
    }
    
    function Gamma1 (x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
    }
    
    function Gamma1l (x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
    }
    
    function getCarry (a, b) {
      return (a >>> 0) < (b >>> 0) ? 1 : 0
    }
    
    Sha512.prototype._update = function (M) {
      var W = this._w
    
      var ah = this._ah | 0
      var bh = this._bh | 0
      var ch = this._ch | 0
      var dh = this._dh | 0
      var eh = this._eh | 0
      var fh = this._fh | 0
      var gh = this._gh | 0
      var hh = this._hh | 0
    
      var al = this._al | 0
      var bl = this._bl | 0
      var cl = this._cl | 0
      var dl = this._dl | 0
      var el = this._el | 0
      var fl = this._fl | 0
      var gl = this._gl | 0
      var hl = this._hl | 0
    
      for (var i = 0; i < 32; i += 2) {
        W[i] = M.readInt32BE(i * 4)
        W[i + 1] = M.readInt32BE(i * 4 + 4)
      }
      for (; i < 160; i += 2) {
        var xh = W[i - 15 * 2]
        var xl = W[i - 15 * 2 + 1]
        var gamma0 = Gamma0(xh, xl)
        var gamma0l = Gamma0l(xl, xh)
    
        xh = W[i - 2 * 2]
        xl = W[i - 2 * 2 + 1]
        var gamma1 = Gamma1(xh, xl)
        var gamma1l = Gamma1l(xl, xh)
    
        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7h = W[i - 7 * 2]
        var Wi7l = W[i - 7 * 2 + 1]
    
        var Wi16h = W[i - 16 * 2]
        var Wi16l = W[i - 16 * 2 + 1]
    
        var Wil = (gamma0l + Wi7l) | 0
        var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
        Wil = (Wil + gamma1l) | 0
        Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
        Wil = (Wil + Wi16l) | 0
        Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0
    
        W[i] = Wih
        W[i + 1] = Wil
      }
    
      for (var j = 0; j < 160; j += 2) {
        Wih = W[j]
        Wil = W[j + 1]
    
        var majh = maj(ah, bh, ch)
        var majl = maj(al, bl, cl)
    
        var sigma0h = sigma0(ah, al)
        var sigma0l = sigma0(al, ah)
        var sigma1h = sigma1(eh, el)
        var sigma1l = sigma1(el, eh)
    
        // t1 = h + sigma1 + ch + K[j] + W[j]
        var Kih = K[j]
        var Kil = K[j + 1]
    
        var chh = Ch(eh, fh, gh)
        var chl = Ch(el, fl, gl)
    
        var t1l = (hl + sigma1l) | 0
        var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
        t1l = (t1l + chl) | 0
        t1h = (t1h + chh + getCarry(t1l, chl)) | 0
        t1l = (t1l + Kil) | 0
        t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
        t1l = (t1l + Wil) | 0
        t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0
    
        // t2 = sigma0 + maj
        var t2l = (sigma0l + majl) | 0
        var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0
    
        hh = gh
        hl = gl
        gh = fh
        gl = fl
        fh = eh
        fl = el
        el = (dl + t1l) | 0
        eh = (dh + t1h + getCarry(el, dl)) | 0
        dh = ch
        dl = cl
        ch = bh
        cl = bl
        bh = ah
        bl = al
        al = (t1l + t2l) | 0
        ah = (t1h + t2h + getCarry(al, t1l)) | 0
      }
    
      this._al = (this._al + al) | 0
      this._bl = (this._bl + bl) | 0
      this._cl = (this._cl + cl) | 0
      this._dl = (this._dl + dl) | 0
      this._el = (this._el + el) | 0
      this._fl = (this._fl + fl) | 0
      this._gl = (this._gl + gl) | 0
      this._hl = (this._hl + hl) | 0
    
      this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
      this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
      this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
      this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
      this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
      this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
      this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
      this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
    }
    
    Sha512.prototype._hash = function () {
      var H = Buffer.allocUnsafe(64)
    
      function writeInt64BE (h, l, offset) {
        H.writeInt32BE(h, offset)
        H.writeInt32BE(l, offset + 4)
      }
    
      writeInt64BE(this._ah, this._al, 0)
      writeInt64BE(this._bh, this._bl, 8)
      writeInt64BE(this._ch, this._cl, 16)
      writeInt64BE(this._dh, this._dl, 24)
      writeInt64BE(this._eh, this._el, 32)
      writeInt64BE(this._fh, this._fl, 40)
      writeInt64BE(this._gh, this._gl, 48)
      writeInt64BE(this._hh, this._hl, 56)
    
      return H
    }
    
    module.exports = Sha512
    
    },{"./hash":221,"inherits":184,"safe-buffer":216}],229:[function(require,module,exports){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    'use strict';
    
    /*<replacement>*/
    
    var Buffer = require('safe-buffer').Buffer;
    /*</replacement>*/
    
    var isEncoding = Buffer.isEncoding || function (encoding) {
      encoding = '' + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
          return true;
        default:
          return false;
      }
    };
    
    function _normalizeEncoding(enc) {
      if (!enc) return 'utf8';
      var retried;
      while (true) {
        switch (enc) {
          case 'utf8':
          case 'utf-8':
            return 'utf8';
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return 'utf16le';
          case 'latin1':
          case 'binary':
            return 'latin1';
          case 'base64':
          case 'ascii':
          case 'hex':
            return enc;
          default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
        }
      }
    };
    
    // Do not cache `Buffer.isEncoding` when checking encoding names as some
    // modules monkey-patch it to support additional encodings
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
      return nenc || enc;
    }
    
    // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters.
    exports.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case 'utf16le':
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case 'utf8':
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case 'base64':
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer.allocUnsafe(nb);
    }
    
    StringDecoder.prototype.write = function (buf) {
      if (buf.length === 0) return '';
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || '';
    };
    
    StringDecoder.prototype.end = utf8End;
    
    // Returns only complete characters in a Buffer
    StringDecoder.prototype.text = utf8Text;
    
    // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
    StringDecoder.prototype.fillLast = function (buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };
    
    // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
    // continuation byte. If an invalid byte is detected, -2 is returned.
    function utf8CheckByte(byte) {
      if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
      return byte >> 6 === 0x02 ? -1 : -2;
    }
    
    // Checks at most 3 bytes at the end of a Buffer in order to detect an
    // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
    // needed to complete the UTF-8 character (if applicable) are returned.
    function utf8CheckIncomplete(self, buf, i) {
      var j = buf.length - 1;
      if (j < i) return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }
    
    // Validates as many continuation bytes for a multi-byte UTF-8 character as
    // needed or are available. If we see a non-continuation byte where we expect
    // one, we "replace" the validated continuation bytes we've seen so far with
    // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
    // behavior. The continuation byte check is included three times in the case
    // where all of the continuation bytes for a character exist in the same buffer.
    // It is also done this way as a slight performance increase instead of using a
    // loop.
    function utf8CheckExtraBytes(self, buf, p) {
      if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return '\ufffd';
      }
      if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
          self.lastNeed = 1;
          return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 0xC0) !== 0x80) {
            self.lastNeed = 2;
            return '\ufffd';
          }
        }
      }
    }
    
    // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf, p);
      if (r !== undefined) return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }
    
    // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
    // partial character, the character's bytes are buffered until the required
    // number of bytes are available.
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed) return buf.toString('utf8', i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString('utf8', i, end);
    }
    
    // For UTF-8, a replacement character is added when ending on a partial
    // character.
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + '\ufffd';
      return r;
    }
    
    // UTF-16LE typically needs two bytes per character, but even if we have an even
    // number of bytes available, we need to check if we end on a leading/high
    // surrogate. In that case, we need to wait for the next two bytes in order to
    // decode the last character properly.
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 0xD800 && c <= 0xDBFF) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString('utf16le', i, buf.length - 1);
    }
    
    // For UTF-16LE we do not explicitly append special replacement characters if we
    // end on a partial character, we simply let v8 handle that.
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
      }
      return r;
    }
    
    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0) return buf.toString('base64', i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString('base64', i, buf.length - n);
    }
    
    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
      return r;
    }
    
    // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : '';
    }
    },{"safe-buffer":216}],230:[function(require,module,exports){
    var isHexPrefixed = require('is-hex-prefixed');
    
    /**
     * Removes '0x' from a given `String` is present
     * @param {String} str the string value
     * @return {String|Optional} a string by pass if necessary
     */
    module.exports = function stripHexPrefix(str) {
      if (typeof str !== 'string') {
        return str;
      }
    
      return isHexPrefixed(str) ? str.slice(2) : str;
    }
    
    },{"is-hex-prefixed":185}],231:[function(require,module,exports){
    (function (Buffer){(function (){
    // Written in 2014-2016 by Dmitry Chestnykh and Devi Mandiri.
    // Public domain.
    (function(root, f) {
      'use strict';
      if (typeof module !== 'undefined' && module.exports) module.exports = f();
      else if (root.nacl) root.nacl.util = f();
      else {
        root.nacl = {};
        root.nacl.util = f();
      }
    }(this, function() {
      'use strict';
    
      var util = {};
    
      function validateBase64(s) {
        if (!(/^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.test(s))) {
          throw new TypeError('invalid encoding');
        }
      }
    
      util.decodeUTF8 = function(s) {
        if (typeof s !== 'string') throw new TypeError('expected string');
        var i, d = unescape(encodeURIComponent(s)), b = new Uint8Array(d.length);
        for (i = 0; i < d.length; i++) b[i] = d.charCodeAt(i);
        return b;
      };
    
      util.encodeUTF8 = function(arr) {
        var i, s = [];
        for (i = 0; i < arr.length; i++) s.push(String.fromCharCode(arr[i]));
        return decodeURIComponent(escape(s.join('')));
      };
    
      if (typeof atob === 'undefined') {
        // Node.js
    
        if (typeof Buffer.from !== 'undefined') {
           // Node v6 and later
          util.encodeBase64 = function (arr) { // v6 and later
              return Buffer.from(arr).toString('base64');
          };
    
          util.decodeBase64 = function (s) {
            validateBase64(s);
            return new Uint8Array(Array.prototype.slice.call(Buffer.from(s, 'base64'), 0));
          };
    
        } else {
          // Node earlier than v6
          util.encodeBase64 = function (arr) { // v6 and later
            return (new Buffer(arr)).toString('base64');
          };
    
          util.decodeBase64 = function(s) {
            validateBase64(s);
            return new Uint8Array(Array.prototype.slice.call(new Buffer(s, 'base64'), 0));
          };
        }
    
      } else {
        // Browsers
    
        util.encodeBase64 = function(arr) {
          var i, s = [], len = arr.length;
          for (i = 0; i < len; i++) s.push(String.fromCharCode(arr[i]));
          return btoa(s.join(''));
        };
    
        util.decodeBase64 = function(s) {
          validateBase64(s);
          var i, d = atob(s), b = new Uint8Array(d.length);
          for (i = 0; i < d.length; i++) b[i] = d.charCodeAt(i);
          return b;
        };
    
      }
    
      return util;
    
    }));
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"buffer":257}],232:[function(require,module,exports){
    (function(nacl) {
    'use strict';
    
    // Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
    // Public domain.
    //
    // Implementation derived from TweetNaCl version 20140427.
    // See for details: http://tweetnacl.cr.yp.to/
    
    var gf = function(init) {
      var i, r = new Float64Array(16);
      if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
      return r;
    };
    
    //  Pluggable, initialized in high-level API below.
    var randombytes = function(/* x, n */) { throw new Error('no PRNG'); };
    
    var _0 = new Uint8Array(16);
    var _9 = new Uint8Array(32); _9[0] = 9;
    
    var gf0 = gf(),
        gf1 = gf([1]),
        _121665 = gf([0xdb41, 1]),
        D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
        D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
        X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
        Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
        I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);
    
    function ts64(x, i, h, l) {
      x[i]   = (h >> 24) & 0xff;
      x[i+1] = (h >> 16) & 0xff;
      x[i+2] = (h >>  8) & 0xff;
      x[i+3] = h & 0xff;
      x[i+4] = (l >> 24)  & 0xff;
      x[i+5] = (l >> 16)  & 0xff;
      x[i+6] = (l >>  8)  & 0xff;
      x[i+7] = l & 0xff;
    }
    
    function vn(x, xi, y, yi, n) {
      var i,d = 0;
      for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];
      return (1 & ((d - 1) >>> 8)) - 1;
    }
    
    function crypto_verify_16(x, xi, y, yi) {
      return vn(x,xi,y,yi,16);
    }
    
    function crypto_verify_32(x, xi, y, yi) {
      return vn(x,xi,y,yi,32);
    }
    
    function core_salsa20(o, p, k, c) {
      var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
          j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
          j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
          j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
          j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
          j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
          j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
          j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
          j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
          j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
          j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
          j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
          j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
          j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
          j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
          j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;
    
      var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
          x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
          x15 = j15, u;
    
      for (var i = 0; i < 20; i += 2) {
        u = x0 + x12 | 0;
        x4 ^= u<<7 | u>>>(32-7);
        u = x4 + x0 | 0;
        x8 ^= u<<9 | u>>>(32-9);
        u = x8 + x4 | 0;
        x12 ^= u<<13 | u>>>(32-13);
        u = x12 + x8 | 0;
        x0 ^= u<<18 | u>>>(32-18);
    
        u = x5 + x1 | 0;
        x9 ^= u<<7 | u>>>(32-7);
        u = x9 + x5 | 0;
        x13 ^= u<<9 | u>>>(32-9);
        u = x13 + x9 | 0;
        x1 ^= u<<13 | u>>>(32-13);
        u = x1 + x13 | 0;
        x5 ^= u<<18 | u>>>(32-18);
    
        u = x10 + x6 | 0;
        x14 ^= u<<7 | u>>>(32-7);
        u = x14 + x10 | 0;
        x2 ^= u<<9 | u>>>(32-9);
        u = x2 + x14 | 0;
        x6 ^= u<<13 | u>>>(32-13);
        u = x6 + x2 | 0;
        x10 ^= u<<18 | u>>>(32-18);
    
        u = x15 + x11 | 0;
        x3 ^= u<<7 | u>>>(32-7);
        u = x3 + x15 | 0;
        x7 ^= u<<9 | u>>>(32-9);
        u = x7 + x3 | 0;
        x11 ^= u<<13 | u>>>(32-13);
        u = x11 + x7 | 0;
        x15 ^= u<<18 | u>>>(32-18);
    
        u = x0 + x3 | 0;
        x1 ^= u<<7 | u>>>(32-7);
        u = x1 + x0 | 0;
        x2 ^= u<<9 | u>>>(32-9);
        u = x2 + x1 | 0;
        x3 ^= u<<13 | u>>>(32-13);
        u = x3 + x2 | 0;
        x0 ^= u<<18 | u>>>(32-18);
    
        u = x5 + x4 | 0;
        x6 ^= u<<7 | u>>>(32-7);
        u = x6 + x5 | 0;
        x7 ^= u<<9 | u>>>(32-9);
        u = x7 + x6 | 0;
        x4 ^= u<<13 | u>>>(32-13);
        u = x4 + x7 | 0;
        x5 ^= u<<18 | u>>>(32-18);
    
        u = x10 + x9 | 0;
        x11 ^= u<<7 | u>>>(32-7);
        u = x11 + x10 | 0;
        x8 ^= u<<9 | u>>>(32-9);
        u = x8 + x11 | 0;
        x9 ^= u<<13 | u>>>(32-13);
        u = x9 + x8 | 0;
        x10 ^= u<<18 | u>>>(32-18);
    
        u = x15 + x14 | 0;
        x12 ^= u<<7 | u>>>(32-7);
        u = x12 + x15 | 0;
        x13 ^= u<<9 | u>>>(32-9);
        u = x13 + x12 | 0;
        x14 ^= u<<13 | u>>>(32-13);
        u = x14 + x13 | 0;
        x15 ^= u<<18 | u>>>(32-18);
      }
       x0 =  x0 +  j0 | 0;
       x1 =  x1 +  j1 | 0;
       x2 =  x2 +  j2 | 0;
       x3 =  x3 +  j3 | 0;
       x4 =  x4 +  j4 | 0;
       x5 =  x5 +  j5 | 0;
       x6 =  x6 +  j6 | 0;
       x7 =  x7 +  j7 | 0;
       x8 =  x8 +  j8 | 0;
       x9 =  x9 +  j9 | 0;
      x10 = x10 + j10 | 0;
      x11 = x11 + j11 | 0;
      x12 = x12 + j12 | 0;
      x13 = x13 + j13 | 0;
      x14 = x14 + j14 | 0;
      x15 = x15 + j15 | 0;
    
      o[ 0] = x0 >>>  0 & 0xff;
      o[ 1] = x0 >>>  8 & 0xff;
      o[ 2] = x0 >>> 16 & 0xff;
      o[ 3] = x0 >>> 24 & 0xff;
    
      o[ 4] = x1 >>>  0 & 0xff;
      o[ 5] = x1 >>>  8 & 0xff;
      o[ 6] = x1 >>> 16 & 0xff;
      o[ 7] = x1 >>> 24 & 0xff;
    
      o[ 8] = x2 >>>  0 & 0xff;
      o[ 9] = x2 >>>  8 & 0xff;
      o[10] = x2 >>> 16 & 0xff;
      o[11] = x2 >>> 24 & 0xff;
    
      o[12] = x3 >>>  0 & 0xff;
      o[13] = x3 >>>  8 & 0xff;
      o[14] = x3 >>> 16 & 0xff;
      o[15] = x3 >>> 24 & 0xff;
    
      o[16] = x4 >>>  0 & 0xff;
      o[17] = x4 >>>  8 & 0xff;
      o[18] = x4 >>> 16 & 0xff;
      o[19] = x4 >>> 24 & 0xff;
    
      o[20] = x5 >>>  0 & 0xff;
      o[21] = x5 >>>  8 & 0xff;
      o[22] = x5 >>> 16 & 0xff;
      o[23] = x5 >>> 24 & 0xff;
    
      o[24] = x6 >>>  0 & 0xff;
      o[25] = x6 >>>  8 & 0xff;
      o[26] = x6 >>> 16 & 0xff;
      o[27] = x6 >>> 24 & 0xff;
    
      o[28] = x7 >>>  0 & 0xff;
      o[29] = x7 >>>  8 & 0xff;
      o[30] = x7 >>> 16 & 0xff;
      o[31] = x7 >>> 24 & 0xff;
    
      o[32] = x8 >>>  0 & 0xff;
      o[33] = x8 >>>  8 & 0xff;
      o[34] = x8 >>> 16 & 0xff;
      o[35] = x8 >>> 24 & 0xff;
    
      o[36] = x9 >>>  0 & 0xff;
      o[37] = x9 >>>  8 & 0xff;
      o[38] = x9 >>> 16 & 0xff;
      o[39] = x9 >>> 24 & 0xff;
    
      o[40] = x10 >>>  0 & 0xff;
      o[41] = x10 >>>  8 & 0xff;
      o[42] = x10 >>> 16 & 0xff;
      o[43] = x10 >>> 24 & 0xff;
    
      o[44] = x11 >>>  0 & 0xff;
      o[45] = x11 >>>  8 & 0xff;
      o[46] = x11 >>> 16 & 0xff;
      o[47] = x11 >>> 24 & 0xff;
    
      o[48] = x12 >>>  0 & 0xff;
      o[49] = x12 >>>  8 & 0xff;
      o[50] = x12 >>> 16 & 0xff;
      o[51] = x12 >>> 24 & 0xff;
    
      o[52] = x13 >>>  0 & 0xff;
      o[53] = x13 >>>  8 & 0xff;
      o[54] = x13 >>> 16 & 0xff;
      o[55] = x13 >>> 24 & 0xff;
    
      o[56] = x14 >>>  0 & 0xff;
      o[57] = x14 >>>  8 & 0xff;
      o[58] = x14 >>> 16 & 0xff;
      o[59] = x14 >>> 24 & 0xff;
    
      o[60] = x15 >>>  0 & 0xff;
      o[61] = x15 >>>  8 & 0xff;
      o[62] = x15 >>> 16 & 0xff;
      o[63] = x15 >>> 24 & 0xff;
    }
    
    function core_hsalsa20(o,p,k,c) {
      var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
          j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
          j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
          j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
          j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
          j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
          j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
          j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
          j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
          j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
          j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
          j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
          j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
          j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
          j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
          j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;
    
      var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
          x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
          x15 = j15, u;
    
      for (var i = 0; i < 20; i += 2) {
        u = x0 + x12 | 0;
        x4 ^= u<<7 | u>>>(32-7);
        u = x4 + x0 | 0;
        x8 ^= u<<9 | u>>>(32-9);
        u = x8 + x4 | 0;
        x12 ^= u<<13 | u>>>(32-13);
        u = x12 + x8 | 0;
        x0 ^= u<<18 | u>>>(32-18);
    
        u = x5 + x1 | 0;
        x9 ^= u<<7 | u>>>(32-7);
        u = x9 + x5 | 0;
        x13 ^= u<<9 | u>>>(32-9);
        u = x13 + x9 | 0;
        x1 ^= u<<13 | u>>>(32-13);
        u = x1 + x13 | 0;
        x5 ^= u<<18 | u>>>(32-18);
    
        u = x10 + x6 | 0;
        x14 ^= u<<7 | u>>>(32-7);
        u = x14 + x10 | 0;
        x2 ^= u<<9 | u>>>(32-9);
        u = x2 + x14 | 0;
        x6 ^= u<<13 | u>>>(32-13);
        u = x6 + x2 | 0;
        x10 ^= u<<18 | u>>>(32-18);
    
        u = x15 + x11 | 0;
        x3 ^= u<<7 | u>>>(32-7);
        u = x3 + x15 | 0;
        x7 ^= u<<9 | u>>>(32-9);
        u = x7 + x3 | 0;
        x11 ^= u<<13 | u>>>(32-13);
        u = x11 + x7 | 0;
        x15 ^= u<<18 | u>>>(32-18);
    
        u = x0 + x3 | 0;
        x1 ^= u<<7 | u>>>(32-7);
        u = x1 + x0 | 0;
        x2 ^= u<<9 | u>>>(32-9);
        u = x2 + x1 | 0;
        x3 ^= u<<13 | u>>>(32-13);
        u = x3 + x2 | 0;
        x0 ^= u<<18 | u>>>(32-18);
    
        u = x5 + x4 | 0;
        x6 ^= u<<7 | u>>>(32-7);
        u = x6 + x5 | 0;
        x7 ^= u<<9 | u>>>(32-9);
        u = x7 + x6 | 0;
        x4 ^= u<<13 | u>>>(32-13);
        u = x4 + x7 | 0;
        x5 ^= u<<18 | u>>>(32-18);
    
        u = x10 + x9 | 0;
        x11 ^= u<<7 | u>>>(32-7);
        u = x11 + x10 | 0;
        x8 ^= u<<9 | u>>>(32-9);
        u = x8 + x11 | 0;
        x9 ^= u<<13 | u>>>(32-13);
        u = x9 + x8 | 0;
        x10 ^= u<<18 | u>>>(32-18);
    
        u = x15 + x14 | 0;
        x12 ^= u<<7 | u>>>(32-7);
        u = x12 + x15 | 0;
        x13 ^= u<<9 | u>>>(32-9);
        u = x13 + x12 | 0;
        x14 ^= u<<13 | u>>>(32-13);
        u = x14 + x13 | 0;
        x15 ^= u<<18 | u>>>(32-18);
      }
    
      o[ 0] = x0 >>>  0 & 0xff;
      o[ 1] = x0 >>>  8 & 0xff;
      o[ 2] = x0 >>> 16 & 0xff;
      o[ 3] = x0 >>> 24 & 0xff;
    
      o[ 4] = x5 >>>  0 & 0xff;
      o[ 5] = x5 >>>  8 & 0xff;
      o[ 6] = x5 >>> 16 & 0xff;
      o[ 7] = x5 >>> 24 & 0xff;
    
      o[ 8] = x10 >>>  0 & 0xff;
      o[ 9] = x10 >>>  8 & 0xff;
      o[10] = x10 >>> 16 & 0xff;
      o[11] = x10 >>> 24 & 0xff;
    
      o[12] = x15 >>>  0 & 0xff;
      o[13] = x15 >>>  8 & 0xff;
      o[14] = x15 >>> 16 & 0xff;
      o[15] = x15 >>> 24 & 0xff;
    
      o[16] = x6 >>>  0 & 0xff;
      o[17] = x6 >>>  8 & 0xff;
      o[18] = x6 >>> 16 & 0xff;
      o[19] = x6 >>> 24 & 0xff;
    
      o[20] = x7 >>>  0 & 0xff;
      o[21] = x7 >>>  8 & 0xff;
      o[22] = x7 >>> 16 & 0xff;
      o[23] = x7 >>> 24 & 0xff;
    
      o[24] = x8 >>>  0 & 0xff;
      o[25] = x8 >>>  8 & 0xff;
      o[26] = x8 >>> 16 & 0xff;
      o[27] = x8 >>> 24 & 0xff;
    
      o[28] = x9 >>>  0 & 0xff;
      o[29] = x9 >>>  8 & 0xff;
      o[30] = x9 >>> 16 & 0xff;
      o[31] = x9 >>> 24 & 0xff;
    }
    
    function crypto_core_salsa20(out,inp,k,c) {
      core_salsa20(out,inp,k,c);
    }
    
    function crypto_core_hsalsa20(out,inp,k,c) {
      core_hsalsa20(out,inp,k,c);
    }
    
    var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
                // "expand 32-byte k"
    
    function crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {
      var z = new Uint8Array(16), x = new Uint8Array(64);
      var u, i;
      for (i = 0; i < 16; i++) z[i] = 0;
      for (i = 0; i < 8; i++) z[i] = n[i];
      while (b >= 64) {
        crypto_core_salsa20(x,z,k,sigma);
        for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];
        u = 1;
        for (i = 8; i < 16; i++) {
          u = u + (z[i] & 0xff) | 0;
          z[i] = u & 0xff;
          u >>>= 8;
        }
        b -= 64;
        cpos += 64;
        mpos += 64;
      }
      if (b > 0) {
        crypto_core_salsa20(x,z,k,sigma);
        for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];
      }
      return 0;
    }
    
    function crypto_stream_salsa20(c,cpos,b,n,k) {
      var z = new Uint8Array(16), x = new Uint8Array(64);
      var u, i;
      for (i = 0; i < 16; i++) z[i] = 0;
      for (i = 0; i < 8; i++) z[i] = n[i];
      while (b >= 64) {
        crypto_core_salsa20(x,z,k,sigma);
        for (i = 0; i < 64; i++) c[cpos+i] = x[i];
        u = 1;
        for (i = 8; i < 16; i++) {
          u = u + (z[i] & 0xff) | 0;
          z[i] = u & 0xff;
          u >>>= 8;
        }
        b -= 64;
        cpos += 64;
      }
      if (b > 0) {
        crypto_core_salsa20(x,z,k,sigma);
        for (i = 0; i < b; i++) c[cpos+i] = x[i];
      }
      return 0;
    }
    
    function crypto_stream(c,cpos,d,n,k) {
      var s = new Uint8Array(32);
      crypto_core_hsalsa20(s,n,k,sigma);
      var sn = new Uint8Array(8);
      for (var i = 0; i < 8; i++) sn[i] = n[i+16];
      return crypto_stream_salsa20(c,cpos,d,sn,s);
    }
    
    function crypto_stream_xor(c,cpos,m,mpos,d,n,k) {
      var s = new Uint8Array(32);
      crypto_core_hsalsa20(s,n,k,sigma);
      var sn = new Uint8Array(8);
      for (var i = 0; i < 8; i++) sn[i] = n[i+16];
      return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);
    }
    
    /*
    * Port of Andrew Moon's Poly1305-donna-16. Public domain.
    * https://github.com/floodyberry/poly1305-donna
    */
    
    var poly1305 = function(key) {
      this.buffer = new Uint8Array(16);
      this.r = new Uint16Array(10);
      this.h = new Uint16Array(10);
      this.pad = new Uint16Array(8);
      this.leftover = 0;
      this.fin = 0;
    
      var t0, t1, t2, t3, t4, t5, t6, t7;
    
      t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
      t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
      t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
      t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
      t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
      this.r[5] = ((t4 >>>  1)) & 0x1ffe;
      t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
      t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
      t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
      this.r[9] = ((t7 >>>  5)) & 0x007f;
    
      this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
      this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
      this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
      this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
      this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
      this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
      this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
      this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
    };
    
    poly1305.prototype.blocks = function(m, mpos, bytes) {
      var hibit = this.fin ? 0 : (1 << 11);
      var t0, t1, t2, t3, t4, t5, t6, t7, c;
      var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
    
      var h0 = this.h[0],
          h1 = this.h[1],
          h2 = this.h[2],
          h3 = this.h[3],
          h4 = this.h[4],
          h5 = this.h[5],
          h6 = this.h[6],
          h7 = this.h[7],
          h8 = this.h[8],
          h9 = this.h[9];
    
      var r0 = this.r[0],
          r1 = this.r[1],
          r2 = this.r[2],
          r3 = this.r[3],
          r4 = this.r[4],
          r5 = this.r[5],
          r6 = this.r[6],
          r7 = this.r[7],
          r8 = this.r[8],
          r9 = this.r[9];
    
      while (bytes >= 16) {
        t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
        t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
        t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
        t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
        t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
        h5 += ((t4 >>>  1)) & 0x1fff;
        t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
        t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
        t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
        h9 += ((t7 >>> 5)) | hibit;
    
        c = 0;
    
        d0 = c;
        d0 += h0 * r0;
        d0 += h1 * (5 * r9);
        d0 += h2 * (5 * r8);
        d0 += h3 * (5 * r7);
        d0 += h4 * (5 * r6);
        c = (d0 >>> 13); d0 &= 0x1fff;
        d0 += h5 * (5 * r5);
        d0 += h6 * (5 * r4);
        d0 += h7 * (5 * r3);
        d0 += h8 * (5 * r2);
        d0 += h9 * (5 * r1);
        c += (d0 >>> 13); d0 &= 0x1fff;
    
        d1 = c;
        d1 += h0 * r1;
        d1 += h1 * r0;
        d1 += h2 * (5 * r9);
        d1 += h3 * (5 * r8);
        d1 += h4 * (5 * r7);
        c = (d1 >>> 13); d1 &= 0x1fff;
        d1 += h5 * (5 * r6);
        d1 += h6 * (5 * r5);
        d1 += h7 * (5 * r4);
        d1 += h8 * (5 * r3);
        d1 += h9 * (5 * r2);
        c += (d1 >>> 13); d1 &= 0x1fff;
    
        d2 = c;
        d2 += h0 * r2;
        d2 += h1 * r1;
        d2 += h2 * r0;
        d2 += h3 * (5 * r9);
        d2 += h4 * (5 * r8);
        c = (d2 >>> 13); d2 &= 0x1fff;
        d2 += h5 * (5 * r7);
        d2 += h6 * (5 * r6);
        d2 += h7 * (5 * r5);
        d2 += h8 * (5 * r4);
        d2 += h9 * (5 * r3);
        c += (d2 >>> 13); d2 &= 0x1fff;
    
        d3 = c;
        d3 += h0 * r3;
        d3 += h1 * r2;
        d3 += h2 * r1;
        d3 += h3 * r0;
        d3 += h4 * (5 * r9);
        c = (d3 >>> 13); d3 &= 0x1fff;
        d3 += h5 * (5 * r8);
        d3 += h6 * (5 * r7);
        d3 += h7 * (5 * r6);
        d3 += h8 * (5 * r5);
        d3 += h9 * (5 * r4);
        c += (d3 >>> 13); d3 &= 0x1fff;
    
        d4 = c;
        d4 += h0 * r4;
        d4 += h1 * r3;
        d4 += h2 * r2;
        d4 += h3 * r1;
        d4 += h4 * r0;
        c = (d4 >>> 13); d4 &= 0x1fff;
        d4 += h5 * (5 * r9);
        d4 += h6 * (5 * r8);
        d4 += h7 * (5 * r7);
        d4 += h8 * (5 * r6);
        d4 += h9 * (5 * r5);
        c += (d4 >>> 13); d4 &= 0x1fff;
    
        d5 = c;
        d5 += h0 * r5;
        d5 += h1 * r4;
        d5 += h2 * r3;
        d5 += h3 * r2;
        d5 += h4 * r1;
        c = (d5 >>> 13); d5 &= 0x1fff;
        d5 += h5 * r0;
        d5 += h6 * (5 * r9);
        d5 += h7 * (5 * r8);
        d5 += h8 * (5 * r7);
        d5 += h9 * (5 * r6);
        c += (d5 >>> 13); d5 &= 0x1fff;
    
        d6 = c;
        d6 += h0 * r6;
        d6 += h1 * r5;
        d6 += h2 * r4;
        d6 += h3 * r3;
        d6 += h4 * r2;
        c = (d6 >>> 13); d6 &= 0x1fff;
        d6 += h5 * r1;
        d6 += h6 * r0;
        d6 += h7 * (5 * r9);
        d6 += h8 * (5 * r8);
        d6 += h9 * (5 * r7);
        c += (d6 >>> 13); d6 &= 0x1fff;
    
        d7 = c;
        d7 += h0 * r7;
        d7 += h1 * r6;
        d7 += h2 * r5;
        d7 += h3 * r4;
        d7 += h4 * r3;
        c = (d7 >>> 13); d7 &= 0x1fff;
        d7 += h5 * r2;
        d7 += h6 * r1;
        d7 += h7 * r0;
        d7 += h8 * (5 * r9);
        d7 += h9 * (5 * r8);
        c += (d7 >>> 13); d7 &= 0x1fff;
    
        d8 = c;
        d8 += h0 * r8;
        d8 += h1 * r7;
        d8 += h2 * r6;
        d8 += h3 * r5;
        d8 += h4 * r4;
        c = (d8 >>> 13); d8 &= 0x1fff;
        d8 += h5 * r3;
        d8 += h6 * r2;
        d8 += h7 * r1;
        d8 += h8 * r0;
        d8 += h9 * (5 * r9);
        c += (d8 >>> 13); d8 &= 0x1fff;
    
        d9 = c;
        d9 += h0 * r9;
        d9 += h1 * r8;
        d9 += h2 * r7;
        d9 += h3 * r6;
        d9 += h4 * r5;
        c = (d9 >>> 13); d9 &= 0x1fff;
        d9 += h5 * r4;
        d9 += h6 * r3;
        d9 += h7 * r2;
        d9 += h8 * r1;
        d9 += h9 * r0;
        c += (d9 >>> 13); d9 &= 0x1fff;
    
        c = (((c << 2) + c)) | 0;
        c = (c + d0) | 0;
        d0 = c & 0x1fff;
        c = (c >>> 13);
        d1 += c;
    
        h0 = d0;
        h1 = d1;
        h2 = d2;
        h3 = d3;
        h4 = d4;
        h5 = d5;
        h6 = d6;
        h7 = d7;
        h8 = d8;
        h9 = d9;
    
        mpos += 16;
        bytes -= 16;
      }
      this.h[0] = h0;
      this.h[1] = h1;
      this.h[2] = h2;
      this.h[3] = h3;
      this.h[4] = h4;
      this.h[5] = h5;
      this.h[6] = h6;
      this.h[7] = h7;
      this.h[8] = h8;
      this.h[9] = h9;
    };
    
    poly1305.prototype.finish = function(mac, macpos) {
      var g = new Uint16Array(10);
      var c, mask, f, i;
    
      if (this.leftover) {
        i = this.leftover;
        this.buffer[i++] = 1;
        for (; i < 16; i++) this.buffer[i] = 0;
        this.fin = 1;
        this.blocks(this.buffer, 0, 16);
      }
    
      c = this.h[1] >>> 13;
      this.h[1] &= 0x1fff;
      for (i = 2; i < 10; i++) {
        this.h[i] += c;
        c = this.h[i] >>> 13;
        this.h[i] &= 0x1fff;
      }
      this.h[0] += (c * 5);
      c = this.h[0] >>> 13;
      this.h[0] &= 0x1fff;
      this.h[1] += c;
      c = this.h[1] >>> 13;
      this.h[1] &= 0x1fff;
      this.h[2] += c;
    
      g[0] = this.h[0] + 5;
      c = g[0] >>> 13;
      g[0] &= 0x1fff;
      for (i = 1; i < 10; i++) {
        g[i] = this.h[i] + c;
        c = g[i] >>> 13;
        g[i] &= 0x1fff;
      }
      g[9] -= (1 << 13);
    
      mask = (c ^ 1) - 1;
      for (i = 0; i < 10; i++) g[i] &= mask;
      mask = ~mask;
      for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];
    
      this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
      this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
      this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
      this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
      this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
      this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
      this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
      this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;
    
      f = this.h[0] + this.pad[0];
      this.h[0] = f & 0xffff;
      for (i = 1; i < 8; i++) {
        f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
        this.h[i] = f & 0xffff;
      }
    
      mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
      mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
      mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
      mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
      mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
      mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
      mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
      mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
      mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
      mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
      mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
      mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
      mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
      mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
      mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
      mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
    };
    
    poly1305.prototype.update = function(m, mpos, bytes) {
      var i, want;
    
      if (this.leftover) {
        want = (16 - this.leftover);
        if (want > bytes)
          want = bytes;
        for (i = 0; i < want; i++)
          this.buffer[this.leftover + i] = m[mpos+i];
        bytes -= want;
        mpos += want;
        this.leftover += want;
        if (this.leftover < 16)
          return;
        this.blocks(this.buffer, 0, 16);
        this.leftover = 0;
      }
    
      if (bytes >= 16) {
        want = bytes - (bytes % 16);
        this.blocks(m, mpos, want);
        mpos += want;
        bytes -= want;
      }
    
      if (bytes) {
        for (i = 0; i < bytes; i++)
          this.buffer[this.leftover + i] = m[mpos+i];
        this.leftover += bytes;
      }
    };
    
    function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
      var s = new poly1305(k);
      s.update(m, mpos, n);
      s.finish(out, outpos);
      return 0;
    }
    
    function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
      var x = new Uint8Array(16);
      crypto_onetimeauth(x,0,m,mpos,n,k);
      return crypto_verify_16(h,hpos,x,0);
    }
    
    function crypto_secretbox(c,m,d,n,k) {
      var i;
      if (d < 32) return -1;
      crypto_stream_xor(c,0,m,0,d,n,k);
      crypto_onetimeauth(c, 16, c, 32, d - 32, c);
      for (i = 0; i < 16; i++) c[i] = 0;
      return 0;
    }
    
    function crypto_secretbox_open(m,c,d,n,k) {
      var i;
      var x = new Uint8Array(32);
      if (d < 32) return -1;
      crypto_stream(x,0,32,n,k);
      if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;
      crypto_stream_xor(m,0,c,0,d,n,k);
      for (i = 0; i < 32; i++) m[i] = 0;
      return 0;
    }
    
    function set25519(r, a) {
      var i;
      for (i = 0; i < 16; i++) r[i] = a[i]|0;
    }
    
    function car25519(o) {
      var i, v, c = 1;
      for (i = 0; i < 16; i++) {
        v = o[i] + c + 65535;
        c = Math.floor(v / 65536);
        o[i] = v - c * 65536;
      }
      o[0] += c-1 + 37 * (c-1);
    }
    
    function sel25519(p, q, b) {
      var t, c = ~(b-1);
      for (var i = 0; i < 16; i++) {
        t = c & (p[i] ^ q[i]);
        p[i] ^= t;
        q[i] ^= t;
      }
    }
    
    function pack25519(o, n) {
      var i, j, b;
      var m = gf(), t = gf();
      for (i = 0; i < 16; i++) t[i] = n[i];
      car25519(t);
      car25519(t);
      car25519(t);
      for (j = 0; j < 2; j++) {
        m[0] = t[0] - 0xffed;
        for (i = 1; i < 15; i++) {
          m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
          m[i-1] &= 0xffff;
        }
        m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
        b = (m[15]>>16) & 1;
        m[14] &= 0xffff;
        sel25519(t, m, 1-b);
      }
      for (i = 0; i < 16; i++) {
        o[2*i] = t[i] & 0xff;
        o[2*i+1] = t[i]>>8;
      }
    }
    
    function neq25519(a, b) {
      var c = new Uint8Array(32), d = new Uint8Array(32);
      pack25519(c, a);
      pack25519(d, b);
      return crypto_verify_32(c, 0, d, 0);
    }
    
    function par25519(a) {
      var d = new Uint8Array(32);
      pack25519(d, a);
      return d[0] & 1;
    }
    
    function unpack25519(o, n) {
      var i;
      for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
      o[15] &= 0x7fff;
    }
    
    function A(o, a, b) {
      for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
    }
    
    function Z(o, a, b) {
      for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
    }
    
    function M(o, a, b) {
      var v, c,
         t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
         t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
        t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
        t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
        b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3],
        b4 = b[4],
        b5 = b[5],
        b6 = b[6],
        b7 = b[7],
        b8 = b[8],
        b9 = b[9],
        b10 = b[10],
        b11 = b[11],
        b12 = b[12],
        b13 = b[13],
        b14 = b[14],
        b15 = b[15];
    
      v = a[0];
      t0 += v * b0;
      t1 += v * b1;
      t2 += v * b2;
      t3 += v * b3;
      t4 += v * b4;
      t5 += v * b5;
      t6 += v * b6;
      t7 += v * b7;
      t8 += v * b8;
      t9 += v * b9;
      t10 += v * b10;
      t11 += v * b11;
      t12 += v * b12;
      t13 += v * b13;
      t14 += v * b14;
      t15 += v * b15;
      v = a[1];
      t1 += v * b0;
      t2 += v * b1;
      t3 += v * b2;
      t4 += v * b3;
      t5 += v * b4;
      t6 += v * b5;
      t7 += v * b6;
      t8 += v * b7;
      t9 += v * b8;
      t10 += v * b9;
      t11 += v * b10;
      t12 += v * b11;
      t13 += v * b12;
      t14 += v * b13;
      t15 += v * b14;
      t16 += v * b15;
      v = a[2];
      t2 += v * b0;
      t3 += v * b1;
      t4 += v * b2;
      t5 += v * b3;
      t6 += v * b4;
      t7 += v * b5;
      t8 += v * b6;
      t9 += v * b7;
      t10 += v * b8;
      t11 += v * b9;
      t12 += v * b10;
      t13 += v * b11;
      t14 += v * b12;
      t15 += v * b13;
      t16 += v * b14;
      t17 += v * b15;
      v = a[3];
      t3 += v * b0;
      t4 += v * b1;
      t5 += v * b2;
      t6 += v * b3;
      t7 += v * b4;
      t8 += v * b5;
      t9 += v * b6;
      t10 += v * b7;
      t11 += v * b8;
      t12 += v * b9;
      t13 += v * b10;
      t14 += v * b11;
      t15 += v * b12;
      t16 += v * b13;
      t17 += v * b14;
      t18 += v * b15;
      v = a[4];
      t4 += v * b0;
      t5 += v * b1;
      t6 += v * b2;
      t7 += v * b3;
      t8 += v * b4;
      t9 += v * b5;
      t10 += v * b6;
      t11 += v * b7;
      t12 += v * b8;
      t13 += v * b9;
      t14 += v * b10;
      t15 += v * b11;
      t16 += v * b12;
      t17 += v * b13;
      t18 += v * b14;
      t19 += v * b15;
      v = a[5];
      t5 += v * b0;
      t6 += v * b1;
      t7 += v * b2;
      t8 += v * b3;
      t9 += v * b4;
      t10 += v * b5;
      t11 += v * b6;
      t12 += v * b7;
      t13 += v * b8;
      t14 += v * b9;
      t15 += v * b10;
      t16 += v * b11;
      t17 += v * b12;
      t18 += v * b13;
      t19 += v * b14;
      t20 += v * b15;
      v = a[6];
      t6 += v * b0;
      t7 += v * b1;
      t8 += v * b2;
      t9 += v * b3;
      t10 += v * b4;
      t11 += v * b5;
      t12 += v * b6;
      t13 += v * b7;
      t14 += v * b8;
      t15 += v * b9;
      t16 += v * b10;
      t17 += v * b11;
      t18 += v * b12;
      t19 += v * b13;
      t20 += v * b14;
      t21 += v * b15;
      v = a[7];
      t7 += v * b0;
      t8 += v * b1;
      t9 += v * b2;
      t10 += v * b3;
      t11 += v * b4;
      t12 += v * b5;
      t13 += v * b6;
      t14 += v * b7;
      t15 += v * b8;
      t16 += v * b9;
      t17 += v * b10;
      t18 += v * b11;
      t19 += v * b12;
      t20 += v * b13;
      t21 += v * b14;
      t22 += v * b15;
      v = a[8];
      t8 += v * b0;
      t9 += v * b1;
      t10 += v * b2;
      t11 += v * b3;
      t12 += v * b4;
      t13 += v * b5;
      t14 += v * b6;
      t15 += v * b7;
      t16 += v * b8;
      t17 += v * b9;
      t18 += v * b10;
      t19 += v * b11;
      t20 += v * b12;
      t21 += v * b13;
      t22 += v * b14;
      t23 += v * b15;
      v = a[9];
      t9 += v * b0;
      t10 += v * b1;
      t11 += v * b2;
      t12 += v * b3;
      t13 += v * b4;
      t14 += v * b5;
      t15 += v * b6;
      t16 += v * b7;
      t17 += v * b8;
      t18 += v * b9;
      t19 += v * b10;
      t20 += v * b11;
      t21 += v * b12;
      t22 += v * b13;
      t23 += v * b14;
      t24 += v * b15;
      v = a[10];
      t10 += v * b0;
      t11 += v * b1;
      t12 += v * b2;
      t13 += v * b3;
      t14 += v * b4;
      t15 += v * b5;
      t16 += v * b6;
      t17 += v * b7;
      t18 += v * b8;
      t19 += v * b9;
      t20 += v * b10;
      t21 += v * b11;
      t22 += v * b12;
      t23 += v * b13;
      t24 += v * b14;
      t25 += v * b15;
      v = a[11];
      t11 += v * b0;
      t12 += v * b1;
      t13 += v * b2;
      t14 += v * b3;
      t15 += v * b4;
      t16 += v * b5;
      t17 += v * b6;
      t18 += v * b7;
      t19 += v * b8;
      t20 += v * b9;
      t21 += v * b10;
      t22 += v * b11;
      t23 += v * b12;
      t24 += v * b13;
      t25 += v * b14;
      t26 += v * b15;
      v = a[12];
      t12 += v * b0;
      t13 += v * b1;
      t14 += v * b2;
      t15 += v * b3;
      t16 += v * b4;
      t17 += v * b5;
      t18 += v * b6;
      t19 += v * b7;
      t20 += v * b8;
      t21 += v * b9;
      t22 += v * b10;
      t23 += v * b11;
      t24 += v * b12;
      t25 += v * b13;
      t26 += v * b14;
      t27 += v * b15;
      v = a[13];
      t13 += v * b0;
      t14 += v * b1;
      t15 += v * b2;
      t16 += v * b3;
      t17 += v * b4;
      t18 += v * b5;
      t19 += v * b6;
      t20 += v * b7;
      t21 += v * b8;
      t22 += v * b9;
      t23 += v * b10;
      t24 += v * b11;
      t25 += v * b12;
      t26 += v * b13;
      t27 += v * b14;
      t28 += v * b15;
      v = a[14];
      t14 += v * b0;
      t15 += v * b1;
      t16 += v * b2;
      t17 += v * b3;
      t18 += v * b4;
      t19 += v * b5;
      t20 += v * b6;
      t21 += v * b7;
      t22 += v * b8;
      t23 += v * b9;
      t24 += v * b10;
      t25 += v * b11;
      t26 += v * b12;
      t27 += v * b13;
      t28 += v * b14;
      t29 += v * b15;
      v = a[15];
      t15 += v * b0;
      t16 += v * b1;
      t17 += v * b2;
      t18 += v * b3;
      t19 += v * b4;
      t20 += v * b5;
      t21 += v * b6;
      t22 += v * b7;
      t23 += v * b8;
      t24 += v * b9;
      t25 += v * b10;
      t26 += v * b11;
      t27 += v * b12;
      t28 += v * b13;
      t29 += v * b14;
      t30 += v * b15;
    
      t0  += 38 * t16;
      t1  += 38 * t17;
      t2  += 38 * t18;
      t3  += 38 * t19;
      t4  += 38 * t20;
      t5  += 38 * t21;
      t6  += 38 * t22;
      t7  += 38 * t23;
      t8  += 38 * t24;
      t9  += 38 * t25;
      t10 += 38 * t26;
      t11 += 38 * t27;
      t12 += 38 * t28;
      t13 += 38 * t29;
      t14 += 38 * t30;
      // t15 left as is
    
      // first car
      c = 1;
      v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
      v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
      v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
      v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
      v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
      v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
      v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
      v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
      v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
      v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
      v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
      v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
      v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
      v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
      v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
      v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
      t0 += c-1 + 37 * (c-1);
    
      // second car
      c = 1;
      v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
      v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
      v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
      v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
      v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
      v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
      v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
      v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
      v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
      v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
      v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
      v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
      v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
      v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
      v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
      v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
      t0 += c-1 + 37 * (c-1);
    
      o[ 0] = t0;
      o[ 1] = t1;
      o[ 2] = t2;
      o[ 3] = t3;
      o[ 4] = t4;
      o[ 5] = t5;
      o[ 6] = t6;
      o[ 7] = t7;
      o[ 8] = t8;
      o[ 9] = t9;
      o[10] = t10;
      o[11] = t11;
      o[12] = t12;
      o[13] = t13;
      o[14] = t14;
      o[15] = t15;
    }
    
    function S(o, a) {
      M(o, a, a);
    }
    
    function inv25519(o, i) {
      var c = gf();
      var a;
      for (a = 0; a < 16; a++) c[a] = i[a];
      for (a = 253; a >= 0; a--) {
        S(c, c);
        if(a !== 2 && a !== 4) M(c, c, i);
      }
      for (a = 0; a < 16; a++) o[a] = c[a];
    }
    
    function pow2523(o, i) {
      var c = gf();
      var a;
      for (a = 0; a < 16; a++) c[a] = i[a];
      for (a = 250; a >= 0; a--) {
          S(c, c);
          if(a !== 1) M(c, c, i);
      }
      for (a = 0; a < 16; a++) o[a] = c[a];
    }
    
    function crypto_scalarmult(q, n, p) {
      var z = new Uint8Array(32);
      var x = new Float64Array(80), r, i;
      var a = gf(), b = gf(), c = gf(),
          d = gf(), e = gf(), f = gf();
      for (i = 0; i < 31; i++) z[i] = n[i];
      z[31]=(n[31]&127)|64;
      z[0]&=248;
      unpack25519(x,p);
      for (i = 0; i < 16; i++) {
        b[i]=x[i];
        d[i]=a[i]=c[i]=0;
      }
      a[0]=d[0]=1;
      for (i=254; i>=0; --i) {
        r=(z[i>>>3]>>>(i&7))&1;
        sel25519(a,b,r);
        sel25519(c,d,r);
        A(e,a,c);
        Z(a,a,c);
        A(c,b,d);
        Z(b,b,d);
        S(d,e);
        S(f,a);
        M(a,c,a);
        M(c,b,e);
        A(e,a,c);
        Z(a,a,c);
        S(b,a);
        Z(c,d,f);
        M(a,c,_121665);
        A(a,a,d);
        M(c,c,a);
        M(a,d,f);
        M(d,b,x);
        S(b,e);
        sel25519(a,b,r);
        sel25519(c,d,r);
      }
      for (i = 0; i < 16; i++) {
        x[i+16]=a[i];
        x[i+32]=c[i];
        x[i+48]=b[i];
        x[i+64]=d[i];
      }
      var x32 = x.subarray(32);
      var x16 = x.subarray(16);
      inv25519(x32,x32);
      M(x16,x16,x32);
      pack25519(q,x16);
      return 0;
    }
    
    function crypto_scalarmult_base(q, n) {
      return crypto_scalarmult(q, n, _9);
    }
    
    function crypto_box_keypair(y, x) {
      randombytes(x, 32);
      return crypto_scalarmult_base(y, x);
    }
    
    function crypto_box_beforenm(k, y, x) {
      var s = new Uint8Array(32);
      crypto_scalarmult(s, x, y);
      return crypto_core_hsalsa20(k, _0, s, sigma);
    }
    
    var crypto_box_afternm = crypto_secretbox;
    var crypto_box_open_afternm = crypto_secretbox_open;
    
    function crypto_box(c, m, d, n, y, x) {
      var k = new Uint8Array(32);
      crypto_box_beforenm(k, y, x);
      return crypto_box_afternm(c, m, d, n, k);
    }
    
    function crypto_box_open(m, c, d, n, y, x) {
      var k = new Uint8Array(32);
      crypto_box_beforenm(k, y, x);
      return crypto_box_open_afternm(m, c, d, n, k);
    }
    
    var K = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ];
    
    function crypto_hashblocks_hl(hh, hl, m, n) {
      var wh = new Int32Array(16), wl = new Int32Array(16),
          bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
          bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
          th, tl, i, j, h, l, a, b, c, d;
    
      var ah0 = hh[0],
          ah1 = hh[1],
          ah2 = hh[2],
          ah3 = hh[3],
          ah4 = hh[4],
          ah5 = hh[5],
          ah6 = hh[6],
          ah7 = hh[7],
    
          al0 = hl[0],
          al1 = hl[1],
          al2 = hl[2],
          al3 = hl[3],
          al4 = hl[4],
          al5 = hl[5],
          al6 = hl[6],
          al7 = hl[7];
    
      var pos = 0;
      while (n >= 128) {
        for (i = 0; i < 16; i++) {
          j = 8 * i + pos;
          wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
          wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
        }
        for (i = 0; i < 80; i++) {
          bh0 = ah0;
          bh1 = ah1;
          bh2 = ah2;
          bh3 = ah3;
          bh4 = ah4;
          bh5 = ah5;
          bh6 = ah6;
          bh7 = ah7;
    
          bl0 = al0;
          bl1 = al1;
          bl2 = al2;
          bl3 = al3;
          bl4 = al4;
          bl5 = al5;
          bl6 = al6;
          bl7 = al7;
    
          // add
          h = ah7;
          l = al7;
    
          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;
    
          // Sigma1
          h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
          l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));
    
          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;
    
          // Ch
          h = (ah4 & ah5) ^ (~ah4 & ah6);
          l = (al4 & al5) ^ (~al4 & al6);
    
          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;
    
          // K
          h = K[i*2];
          l = K[i*2+1];
    
          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;
    
          // w
          h = wh[i%16];
          l = wl[i%16];
    
          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;
    
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
    
          th = c & 0xffff | d << 16;
          tl = a & 0xffff | b << 16;
    
          // add
          h = th;
          l = tl;
    
          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;
    
          // Sigma0
          h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
          l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));
    
          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;
    
          // Maj
          h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
          l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);
    
          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;
    
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
    
          bh7 = (c & 0xffff) | (d << 16);
          bl7 = (a & 0xffff) | (b << 16);
    
          // add
          h = bh3;
          l = bl3;
    
          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;
    
          h = th;
          l = tl;
    
          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;
    
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
    
          bh3 = (c & 0xffff) | (d << 16);
          bl3 = (a & 0xffff) | (b << 16);
    
          ah1 = bh0;
          ah2 = bh1;
          ah3 = bh2;
          ah4 = bh3;
          ah5 = bh4;
          ah6 = bh5;
          ah7 = bh6;
          ah0 = bh7;
    
          al1 = bl0;
          al2 = bl1;
          al3 = bl2;
          al4 = bl3;
          al5 = bl4;
          al6 = bl5;
          al7 = bl6;
          al0 = bl7;
    
          if (i%16 === 15) {
            for (j = 0; j < 16; j++) {
              // add
              h = wh[j];
              l = wl[j];
    
              a = l & 0xffff; b = l >>> 16;
              c = h & 0xffff; d = h >>> 16;
    
              h = wh[(j+9)%16];
              l = wl[(j+9)%16];
    
              a += l & 0xffff; b += l >>> 16;
              c += h & 0xffff; d += h >>> 16;
    
              // sigma0
              th = wh[(j+1)%16];
              tl = wl[(j+1)%16];
              h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
              l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));
    
              a += l & 0xffff; b += l >>> 16;
              c += h & 0xffff; d += h >>> 16;
    
              // sigma1
              th = wh[(j+14)%16];
              tl = wl[(j+14)%16];
              h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
              l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));
    
              a += l & 0xffff; b += l >>> 16;
              c += h & 0xffff; d += h >>> 16;
    
              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;
    
              wh[j] = (c & 0xffff) | (d << 16);
              wl[j] = (a & 0xffff) | (b << 16);
            }
          }
        }
    
        // add
        h = ah0;
        l = al0;
    
        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;
    
        h = hh[0];
        l = hl[0];
    
        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;
    
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
    
        hh[0] = ah0 = (c & 0xffff) | (d << 16);
        hl[0] = al0 = (a & 0xffff) | (b << 16);
    
        h = ah1;
        l = al1;
    
        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;
    
        h = hh[1];
        l = hl[1];
    
        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;
    
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
    
        hh[1] = ah1 = (c & 0xffff) | (d << 16);
        hl[1] = al1 = (a & 0xffff) | (b << 16);
    
        h = ah2;
        l = al2;
    
        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;
    
        h = hh[2];
        l = hl[2];
    
        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;
    
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
    
        hh[2] = ah2 = (c & 0xffff) | (d << 16);
        hl[2] = al2 = (a & 0xffff) | (b << 16);
    
        h = ah3;
        l = al3;
    
        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;
    
        h = hh[3];
        l = hl[3];
    
        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;
    
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
    
        hh[3] = ah3 = (c & 0xffff) | (d << 16);
        hl[3] = al3 = (a & 0xffff) | (b << 16);
    
        h = ah4;
        l = al4;
    
        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;
    
        h = hh[4];
        l = hl[4];
    
        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;
    
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
    
        hh[4] = ah4 = (c & 0xffff) | (d << 16);
        hl[4] = al4 = (a & 0xffff) | (b << 16);
    
        h = ah5;
        l = al5;
    
        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;
    
        h = hh[5];
        l = hl[5];
    
        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;
    
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
    
        hh[5] = ah5 = (c & 0xffff) | (d << 16);
        hl[5] = al5 = (a & 0xffff) | (b << 16);
    
        h = ah6;
        l = al6;
    
        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;
    
        h = hh[6];
        l = hl[6];
    
        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;
    
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
    
        hh[6] = ah6 = (c & 0xffff) | (d << 16);
        hl[6] = al6 = (a & 0xffff) | (b << 16);
    
        h = ah7;
        l = al7;
    
        a = l & 0xffff; b = l >>> 16;
        c = h & 0xffff; d = h >>> 16;
    
        h = hh[7];
        l = hl[7];
    
        a += l & 0xffff; b += l >>> 16;
        c += h & 0xffff; d += h >>> 16;
    
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
    
        hh[7] = ah7 = (c & 0xffff) | (d << 16);
        hl[7] = al7 = (a & 0xffff) | (b << 16);
    
        pos += 128;
        n -= 128;
      }
    
      return n;
    }
    
    function crypto_hash(out, m, n) {
      var hh = new Int32Array(8),
          hl = new Int32Array(8),
          x = new Uint8Array(256),
          i, b = n;
    
      hh[0] = 0x6a09e667;
      hh[1] = 0xbb67ae85;
      hh[2] = 0x3c6ef372;
      hh[3] = 0xa54ff53a;
      hh[4] = 0x510e527f;
      hh[5] = 0x9b05688c;
      hh[6] = 0x1f83d9ab;
      hh[7] = 0x5be0cd19;
    
      hl[0] = 0xf3bcc908;
      hl[1] = 0x84caa73b;
      hl[2] = 0xfe94f82b;
      hl[3] = 0x5f1d36f1;
      hl[4] = 0xade682d1;
      hl[5] = 0x2b3e6c1f;
      hl[6] = 0xfb41bd6b;
      hl[7] = 0x137e2179;
    
      crypto_hashblocks_hl(hh, hl, m, n);
      n %= 128;
    
      for (i = 0; i < n; i++) x[i] = m[b-n+i];
      x[n] = 128;
    
      n = 256-128*(n<112?1:0);
      x[n-9] = 0;
      ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);
      crypto_hashblocks_hl(hh, hl, x, n);
    
      for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);
    
      return 0;
    }
    
    function add(p, q) {
      var a = gf(), b = gf(), c = gf(),
          d = gf(), e = gf(), f = gf(),
          g = gf(), h = gf(), t = gf();
    
      Z(a, p[1], p[0]);
      Z(t, q[1], q[0]);
      M(a, a, t);
      A(b, p[0], p[1]);
      A(t, q[0], q[1]);
      M(b, b, t);
      M(c, p[3], q[3]);
      M(c, c, D2);
      M(d, p[2], q[2]);
      A(d, d, d);
      Z(e, b, a);
      Z(f, d, c);
      A(g, d, c);
      A(h, b, a);
    
      M(p[0], e, f);
      M(p[1], h, g);
      M(p[2], g, f);
      M(p[3], e, h);
    }
    
    function cswap(p, q, b) {
      var i;
      for (i = 0; i < 4; i++) {
        sel25519(p[i], q[i], b);
      }
    }
    
    function pack(r, p) {
      var tx = gf(), ty = gf(), zi = gf();
      inv25519(zi, p[2]);
      M(tx, p[0], zi);
      M(ty, p[1], zi);
      pack25519(r, ty);
      r[31] ^= par25519(tx) << 7;
    }
    
    function scalarmult(p, q, s) {
      var b, i;
      set25519(p[0], gf0);
      set25519(p[1], gf1);
      set25519(p[2], gf1);
      set25519(p[3], gf0);
      for (i = 255; i >= 0; --i) {
        b = (s[(i/8)|0] >> (i&7)) & 1;
        cswap(p, q, b);
        add(q, p);
        add(p, p);
        cswap(p, q, b);
      }
    }
    
    function scalarbase(p, s) {
      var q = [gf(), gf(), gf(), gf()];
      set25519(q[0], X);
      set25519(q[1], Y);
      set25519(q[2], gf1);
      M(q[3], X, Y);
      scalarmult(p, q, s);
    }
    
    function crypto_sign_keypair(pk, sk, seeded) {
      var d = new Uint8Array(64);
      var p = [gf(), gf(), gf(), gf()];
      var i;
    
      if (!seeded) randombytes(sk, 32);
      crypto_hash(d, sk, 32);
      d[0] &= 248;
      d[31] &= 127;
      d[31] |= 64;
    
      scalarbase(p, d);
      pack(pk, p);
    
      for (i = 0; i < 32; i++) sk[i+32] = pk[i];
      return 0;
    }
    
    var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);
    
    function modL(r, x) {
      var carry, i, j, k;
      for (i = 63; i >= 32; --i) {
        carry = 0;
        for (j = i - 32, k = i - 12; j < k; ++j) {
          x[j] += carry - 16 * x[i] * L[j - (i - 32)];
          carry = Math.floor((x[j] + 128) / 256);
          x[j] -= carry * 256;
        }
        x[j] += carry;
        x[i] = 0;
      }
      carry = 0;
      for (j = 0; j < 32; j++) {
        x[j] += carry - (x[31] >> 4) * L[j];
        carry = x[j] >> 8;
        x[j] &= 255;
      }
      for (j = 0; j < 32; j++) x[j] -= carry * L[j];
      for (i = 0; i < 32; i++) {
        x[i+1] += x[i] >> 8;
        r[i] = x[i] & 255;
      }
    }
    
    function reduce(r) {
      var x = new Float64Array(64), i;
      for (i = 0; i < 64; i++) x[i] = r[i];
      for (i = 0; i < 64; i++) r[i] = 0;
      modL(r, x);
    }
    
    // Note: difference from C - smlen returned, not passed as argument.
    function crypto_sign(sm, m, n, sk) {
      var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
      var i, j, x = new Float64Array(64);
      var p = [gf(), gf(), gf(), gf()];
    
      crypto_hash(d, sk, 32);
      d[0] &= 248;
      d[31] &= 127;
      d[31] |= 64;
    
      var smlen = n + 64;
      for (i = 0; i < n; i++) sm[64 + i] = m[i];
      for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];
    
      crypto_hash(r, sm.subarray(32), n+32);
      reduce(r);
      scalarbase(p, r);
      pack(sm, p);
    
      for (i = 32; i < 64; i++) sm[i] = sk[i];
      crypto_hash(h, sm, n + 64);
      reduce(h);
    
      for (i = 0; i < 64; i++) x[i] = 0;
      for (i = 0; i < 32; i++) x[i] = r[i];
      for (i = 0; i < 32; i++) {
        for (j = 0; j < 32; j++) {
          x[i+j] += h[i] * d[j];
        }
      }
    
      modL(sm.subarray(32), x);
      return smlen;
    }
    
    function unpackneg(r, p) {
      var t = gf(), chk = gf(), num = gf(),
          den = gf(), den2 = gf(), den4 = gf(),
          den6 = gf();
    
      set25519(r[2], gf1);
      unpack25519(r[1], p);
      S(num, r[1]);
      M(den, num, D);
      Z(num, num, r[2]);
      A(den, r[2], den);
    
      S(den2, den);
      S(den4, den2);
      M(den6, den4, den2);
      M(t, den6, num);
      M(t, t, den);
    
      pow2523(t, t);
      M(t, t, num);
      M(t, t, den);
      M(t, t, den);
      M(r[0], t, den);
    
      S(chk, r[0]);
      M(chk, chk, den);
      if (neq25519(chk, num)) M(r[0], r[0], I);
    
      S(chk, r[0]);
      M(chk, chk, den);
      if (neq25519(chk, num)) return -1;
    
      if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);
    
      M(r[3], r[0], r[1]);
      return 0;
    }
    
    function crypto_sign_open(m, sm, n, pk) {
      var i;
      var t = new Uint8Array(32), h = new Uint8Array(64);
      var p = [gf(), gf(), gf(), gf()],
          q = [gf(), gf(), gf(), gf()];
    
      if (n < 64) return -1;
    
      if (unpackneg(q, pk)) return -1;
    
      for (i = 0; i < n; i++) m[i] = sm[i];
      for (i = 0; i < 32; i++) m[i+32] = pk[i];
      crypto_hash(h, m, n);
      reduce(h);
      scalarmult(p, q, h);
    
      scalarbase(q, sm.subarray(32));
      add(p, q);
      pack(t, p);
    
      n -= 64;
      if (crypto_verify_32(sm, 0, t, 0)) {
        for (i = 0; i < n; i++) m[i] = 0;
        return -1;
      }
    
      for (i = 0; i < n; i++) m[i] = sm[i + 64];
      return n;
    }
    
    var crypto_secretbox_KEYBYTES = 32,
        crypto_secretbox_NONCEBYTES = 24,
        crypto_secretbox_ZEROBYTES = 32,
        crypto_secretbox_BOXZEROBYTES = 16,
        crypto_scalarmult_BYTES = 32,
        crypto_scalarmult_SCALARBYTES = 32,
        crypto_box_PUBLICKEYBYTES = 32,
        crypto_box_SECRETKEYBYTES = 32,
        crypto_box_BEFORENMBYTES = 32,
        crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
        crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
        crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
        crypto_sign_BYTES = 64,
        crypto_sign_PUBLICKEYBYTES = 32,
        crypto_sign_SECRETKEYBYTES = 64,
        crypto_sign_SEEDBYTES = 32,
        crypto_hash_BYTES = 64;
    
    nacl.lowlevel = {
      crypto_core_hsalsa20: crypto_core_hsalsa20,
      crypto_stream_xor: crypto_stream_xor,
      crypto_stream: crypto_stream,
      crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
      crypto_stream_salsa20: crypto_stream_salsa20,
      crypto_onetimeauth: crypto_onetimeauth,
      crypto_onetimeauth_verify: crypto_onetimeauth_verify,
      crypto_verify_16: crypto_verify_16,
      crypto_verify_32: crypto_verify_32,
      crypto_secretbox: crypto_secretbox,
      crypto_secretbox_open: crypto_secretbox_open,
      crypto_scalarmult: crypto_scalarmult,
      crypto_scalarmult_base: crypto_scalarmult_base,
      crypto_box_beforenm: crypto_box_beforenm,
      crypto_box_afternm: crypto_box_afternm,
      crypto_box: crypto_box,
      crypto_box_open: crypto_box_open,
      crypto_box_keypair: crypto_box_keypair,
      crypto_hash: crypto_hash,
      crypto_sign: crypto_sign,
      crypto_sign_keypair: crypto_sign_keypair,
      crypto_sign_open: crypto_sign_open,
    
      crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
      crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
      crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
      crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
      crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
      crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
      crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
      crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
      crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
      crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
      crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
      crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
      crypto_sign_BYTES: crypto_sign_BYTES,
      crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
      crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
      crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
      crypto_hash_BYTES: crypto_hash_BYTES,
    
      gf: gf,
      D: D,
      L: L,
      pack25519: pack25519,
      unpack25519: unpack25519,
      M: M,
      A: A,
      S: S,
      Z: Z,
      pow2523: pow2523,
      add: add,
      set25519: set25519,
      modL: modL,
      scalarmult: scalarmult,
      scalarbase: scalarbase,
    };
    
    /* High-level API */
    
    function checkLengths(k, n) {
      if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
      if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
    }
    
    function checkBoxLengths(pk, sk) {
      if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
      if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
    }
    
    function checkArrayTypes() {
      for (var i = 0; i < arguments.length; i++) {
        if (!(arguments[i] instanceof Uint8Array))
          throw new TypeError('unexpected type, use Uint8Array');
      }
    }
    
    function cleanup(arr) {
      for (var i = 0; i < arr.length; i++) arr[i] = 0;
    }
    
    nacl.randomBytes = function(n) {
      var b = new Uint8Array(n);
      randombytes(b, n);
      return b;
    };
    
    nacl.secretbox = function(msg, nonce, key) {
      checkArrayTypes(msg, nonce, key);
      checkLengths(key, nonce);
      var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
      var c = new Uint8Array(m.length);
      for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];
      crypto_secretbox(c, m, m.length, nonce, key);
      return c.subarray(crypto_secretbox_BOXZEROBYTES);
    };
    
    nacl.secretbox.open = function(box, nonce, key) {
      checkArrayTypes(box, nonce, key);
      checkLengths(key, nonce);
      var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
      var m = new Uint8Array(c.length);
      for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];
      if (c.length < 32) return null;
      if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
      return m.subarray(crypto_secretbox_ZEROBYTES);
    };
    
    nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
    nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
    nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;
    
    nacl.scalarMult = function(n, p) {
      checkArrayTypes(n, p);
      if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
      if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
      var q = new Uint8Array(crypto_scalarmult_BYTES);
      crypto_scalarmult(q, n, p);
      return q;
    };
    
    nacl.scalarMult.base = function(n) {
      checkArrayTypes(n);
      if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
      var q = new Uint8Array(crypto_scalarmult_BYTES);
      crypto_scalarmult_base(q, n);
      return q;
    };
    
    nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
    nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;
    
    nacl.box = function(msg, nonce, publicKey, secretKey) {
      var k = nacl.box.before(publicKey, secretKey);
      return nacl.secretbox(msg, nonce, k);
    };
    
    nacl.box.before = function(publicKey, secretKey) {
      checkArrayTypes(publicKey, secretKey);
      checkBoxLengths(publicKey, secretKey);
      var k = new Uint8Array(crypto_box_BEFORENMBYTES);
      crypto_box_beforenm(k, publicKey, secretKey);
      return k;
    };
    
    nacl.box.after = nacl.secretbox;
    
    nacl.box.open = function(msg, nonce, publicKey, secretKey) {
      var k = nacl.box.before(publicKey, secretKey);
      return nacl.secretbox.open(msg, nonce, k);
    };
    
    nacl.box.open.after = nacl.secretbox.open;
    
    nacl.box.keyPair = function() {
      var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
      crypto_box_keypair(pk, sk);
      return {publicKey: pk, secretKey: sk};
    };
    
    nacl.box.keyPair.fromSecretKey = function(secretKey) {
      checkArrayTypes(secretKey);
      if (secretKey.length !== crypto_box_SECRETKEYBYTES)
        throw new Error('bad secret key size');
      var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
      crypto_scalarmult_base(pk, secretKey);
      return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
    };
    
    nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
    nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
    nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
    nacl.box.nonceLength = crypto_box_NONCEBYTES;
    nacl.box.overheadLength = nacl.secretbox.overheadLength;
    
    nacl.sign = function(msg, secretKey) {
      checkArrayTypes(msg, secretKey);
      if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
        throw new Error('bad secret key size');
      var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
      crypto_sign(signedMsg, msg, msg.length, secretKey);
      return signedMsg;
    };
    
    nacl.sign.open = function(signedMsg, publicKey) {
      checkArrayTypes(signedMsg, publicKey);
      if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
        throw new Error('bad public key size');
      var tmp = new Uint8Array(signedMsg.length);
      var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
      if (mlen < 0) return null;
      var m = new Uint8Array(mlen);
      for (var i = 0; i < m.length; i++) m[i] = tmp[i];
      return m;
    };
    
    nacl.sign.detached = function(msg, secretKey) {
      var signedMsg = nacl.sign(msg, secretKey);
      var sig = new Uint8Array(crypto_sign_BYTES);
      for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
      return sig;
    };
    
    nacl.sign.detached.verify = function(msg, sig, publicKey) {
      checkArrayTypes(msg, sig, publicKey);
      if (sig.length !== crypto_sign_BYTES)
        throw new Error('bad signature size');
      if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
        throw new Error('bad public key size');
      var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
      var m = new Uint8Array(crypto_sign_BYTES + msg.length);
      var i;
      for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
      for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];
      return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
    };
    
    nacl.sign.keyPair = function() {
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
      crypto_sign_keypair(pk, sk);
      return {publicKey: pk, secretKey: sk};
    };
    
    nacl.sign.keyPair.fromSecretKey = function(secretKey) {
      checkArrayTypes(secretKey);
      if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
        throw new Error('bad secret key size');
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];
      return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
    };
    
    nacl.sign.keyPair.fromSeed = function(seed) {
      checkArrayTypes(seed);
      if (seed.length !== crypto_sign_SEEDBYTES)
        throw new Error('bad seed size');
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
      for (var i = 0; i < 32; i++) sk[i] = seed[i];
      crypto_sign_keypair(pk, sk, true);
      return {publicKey: pk, secretKey: sk};
    };
    
    nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
    nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
    nacl.sign.seedLength = crypto_sign_SEEDBYTES;
    nacl.sign.signatureLength = crypto_sign_BYTES;
    
    nacl.hash = function(msg) {
      checkArrayTypes(msg);
      var h = new Uint8Array(crypto_hash_BYTES);
      crypto_hash(h, msg, msg.length);
      return h;
    };
    
    nacl.hash.hashLength = crypto_hash_BYTES;
    
    nacl.verify = function(x, y) {
      checkArrayTypes(x, y);
      // Zero length arguments are considered not equal.
      if (x.length === 0 || y.length === 0) return false;
      if (x.length !== y.length) return false;
      return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
    };
    
    nacl.setPRNG = function(fn) {
      randombytes = fn;
    };
    
    (function() {
      // Initialize PRNG if environment provides CSPRNG.
      // If not, methods calling randombytes will throw.
      var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
      if (crypto && crypto.getRandomValues) {
        // Browsers.
        var QUOTA = 65536;
        nacl.setPRNG(function(x, n) {
          var i, v = new Uint8Array(n);
          for (i = 0; i < n; i += QUOTA) {
            crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
          }
          for (i = 0; i < n; i++) x[i] = v[i];
          cleanup(v);
        });
      } else if (typeof require !== 'undefined') {
        // Node.js.
        crypto = require('crypto');
        if (crypto && crypto.randomBytes) {
          nacl.setPRNG(function(x, n) {
            var i, v = crypto.randomBytes(n);
            for (i = 0; i < n; i++) x[i] = v[i];
            cleanup(v);
          });
        }
      }
    })();
    
    })(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));
    
    },{"crypto":257}],233:[function(require,module,exports){
    (function (global){(function (){
    
    /**
     * Module exports.
     */
    
    module.exports = deprecate;
    
    /**
     * Mark that a method should not be used.
     * Returns a modified function which warns once by default.
     *
     * If `localStorage.noDeprecation = true` is set, then it is a no-op.
     *
     * If `localStorage.throwDeprecation = true` is set, then deprecated functions
     * will throw an Error when invoked.
     *
     * If `localStorage.traceDeprecation = true` is set, then deprecated functions
     * will invoke `console.trace()` instead of `console.error()`.
     *
     * @param {Function} fn - the function to deprecate
     * @param {String} msg - the string to print to the console when `fn` is invoked
     * @returns {Function} a new "deprecated" version of `fn`
     * @api public
     */
    
    function deprecate (fn, msg) {
      if (config('noDeprecation')) {
        return fn;
      }
    
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (config('throwDeprecation')) {
            throw new Error(msg);
          } else if (config('traceDeprecation')) {
            console.trace(msg);
          } else {
            console.warn(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
    
      return deprecated;
    }
    
    /**
     * Checks `localStorage` for boolean values for the given `name`.
     *
     * @param {String} name
     * @returns {Boolean}
     * @api private
     */
    
    function config (name) {
      // accessing global.localStorage can trigger a DOMException in sandboxed iframes
      try {
        if (!global.localStorage) return false;
      } catch (_) {
        return false;
      }
      var val = global.localStorage[name];
      if (null == val) return false;
      return String(val).toLowerCase() === 'true';
    }
    
    }).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{}],234:[function(require,module,exports){
    (function (global){(function (){
    var Buffer = require('buffer').Buffer
    var elliptic = require('elliptic');
    var ecies = require("eth-ecies");
    var {encrypt } = require("eth-sig-util")
    var {KEYUTIL} = require('jsrsasign');
    var {ethers} = require("ethers")
    
    const EC = elliptic.ec;
    const ecdsaCurve = elliptic.curves['p256'];
    const ecdsa = new EC(ecdsaCurve);
    
    function encrypt(publicKey, data) {
        console.log(publicKey)
        console.log(data)
        let userPublicKey = Buffer.from(publicKey, 'hex');
        let bufferData = Buffer.from(data);
        let encryptedData = ecies.encrypt(userPublicKey, bufferData);
        return encryptedData.toString('base64')
    }
    
    
    
    /*
    function decrypt(privateKey, encryptedData) {
        let userPrivateKey = Buffer.from(privateKey, 'hex');
        let bufferEncryptedData = Buffer.from(encryptedData, 'base64');
        let decryptedData = ecies.decrypt(userPrivateKey, bufferEncryptedData);
        
        return decryptedData.toString('utf8');
    }*/
    global.window.Buffer = Buffer
    global.window.ecdsa = ecdsa
    global.window.encrypt_s = encrypt
    global.window.KEYUTIL = KEYUTIL
    global.window.ethers = ethers
    
    
    
    
    
    }).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"buffer":301,"elliptic":127,"eth-ecies":143,"eth-sig-util":144,"ethers":167,"jsrsasign":187}],235:[function(require,module,exports){
    'use strict';
    
    const asn1 = exports;
    
    asn1.bignum = require('bn.js');
    
    asn1.define = require('./asn1/api').define;
    asn1.base = require('./asn1/base');
    asn1.constants = require('./asn1/constants');
    asn1.decoders = require('./asn1/decoders');
    asn1.encoders = require('./asn1/encoders');
    
    },{"./asn1/api":236,"./asn1/base":238,"./asn1/constants":242,"./asn1/decoders":244,"./asn1/encoders":247,"bn.js":249}],236:[function(require,module,exports){
    'use strict';
    
    const encoders = require('./encoders');
    const decoders = require('./decoders');
    const inherits = require('inherits');
    
    const api = exports;
    
    api.define = function define(name, body) {
      return new Entity(name, body);
    };
    
    function Entity(name, body) {
      this.name = name;
      this.body = body;
    
      this.decoders = {};
      this.encoders = {};
    }
    
    Entity.prototype._createNamed = function createNamed(Base) {
      const name = this.name;
    
      function Generated(entity) {
        this._initNamed(entity, name);
      }
      inherits(Generated, Base);
      Generated.prototype._initNamed = function _initNamed(entity, name) {
        Base.call(this, entity, name);
      };
    
      return new Generated(this);
    };
    
    Entity.prototype._getDecoder = function _getDecoder(enc) {
      enc = enc || 'der';
      // Lazily create decoder
      if (!this.decoders.hasOwnProperty(enc))
        this.decoders[enc] = this._createNamed(decoders[enc]);
      return this.decoders[enc];
    };
    
    Entity.prototype.decode = function decode(data, enc, options) {
      return this._getDecoder(enc).decode(data, options);
    };
    
    Entity.prototype._getEncoder = function _getEncoder(enc) {
      enc = enc || 'der';
      // Lazily create encoder
      if (!this.encoders.hasOwnProperty(enc))
        this.encoders[enc] = this._createNamed(encoders[enc]);
      return this.encoders[enc];
    };
    
    Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
      return this._getEncoder(enc).encode(data, reporter);
    };
    
    },{"./decoders":244,"./encoders":247,"inherits":370}],237:[function(require,module,exports){
    'use strict';
    
    const inherits = require('inherits');
    const Reporter = require('../base/reporter').Reporter;
    const Buffer = require('safer-buffer').Buffer;
    
    function DecoderBuffer(base, options) {
      Reporter.call(this, options);
      if (!Buffer.isBuffer(base)) {
        this.error('Input not Buffer');
        return;
      }
    
      this.base = base;
      this.offset = 0;
      this.length = base.length;
    }
    inherits(DecoderBuffer, Reporter);
    exports.DecoderBuffer = DecoderBuffer;
    
    DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
      if (data instanceof DecoderBuffer) {
        return true;
      }
    
      // Or accept compatible API
      const isCompatible = typeof data === 'object' &&
        Buffer.isBuffer(data.base) &&
        data.constructor.name === 'DecoderBuffer' &&
        typeof data.offset === 'number' &&
        typeof data.length === 'number' &&
        typeof data.save === 'function' &&
        typeof data.restore === 'function' &&
        typeof data.isEmpty === 'function' &&
        typeof data.readUInt8 === 'function' &&
        typeof data.skip === 'function' &&
        typeof data.raw === 'function';
    
      return isCompatible;
    };
    
    DecoderBuffer.prototype.save = function save() {
      return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
    };
    
    DecoderBuffer.prototype.restore = function restore(save) {
      // Return skipped data
      const res = new DecoderBuffer(this.base);
      res.offset = save.offset;
      res.length = this.offset;
    
      this.offset = save.offset;
      Reporter.prototype.restore.call(this, save.reporter);
    
      return res;
    };
    
    DecoderBuffer.prototype.isEmpty = function isEmpty() {
      return this.offset === this.length;
    };
    
    DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
      if (this.offset + 1 <= this.length)
        return this.base.readUInt8(this.offset++, true);
      else
        return this.error(fail || 'DecoderBuffer overrun');
    };
    
    DecoderBuffer.prototype.skip = function skip(bytes, fail) {
      if (!(this.offset + bytes <= this.length))
        return this.error(fail || 'DecoderBuffer overrun');
    
      const res = new DecoderBuffer(this.base);
    
      // Share reporter state
      res._reporterState = this._reporterState;
    
      res.offset = this.offset;
      res.length = this.offset + bytes;
      this.offset += bytes;
      return res;
    };
    
    DecoderBuffer.prototype.raw = function raw(save) {
      return this.base.slice(save ? save.offset : this.offset, this.length);
    };
    
    function EncoderBuffer(value, reporter) {
      if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
          if (!EncoderBuffer.isEncoderBuffer(item))
            item = new EncoderBuffer(item, reporter);
          this.length += item.length;
          return item;
        }, this);
      } else if (typeof value === 'number') {
        if (!(0 <= value && value <= 0xff))
          return reporter.error('non-byte EncoderBuffer value');
        this.value = value;
        this.length = 1;
      } else if (typeof value === 'string') {
        this.value = value;
        this.length = Buffer.byteLength(value);
      } else if (Buffer.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
      } else {
        return reporter.error('Unsupported type: ' + typeof value);
      }
    }
    exports.EncoderBuffer = EncoderBuffer;
    
    EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
      if (data instanceof EncoderBuffer) {
        return true;
      }
    
      // Or accept compatible API
      const isCompatible = typeof data === 'object' &&
        data.constructor.name === 'EncoderBuffer' &&
        typeof data.length === 'number' &&
        typeof data.join === 'function';
    
      return isCompatible;
    };
    
    EncoderBuffer.prototype.join = function join(out, offset) {
      if (!out)
        out = Buffer.alloc(this.length);
      if (!offset)
        offset = 0;
    
      if (this.length === 0)
        return out;
    
      if (Array.isArray(this.value)) {
        this.value.forEach(function(item) {
          item.join(out, offset);
          offset += item.length;
        });
      } else {
        if (typeof this.value === 'number')
          out[offset] = this.value;
        else if (typeof this.value === 'string')
          out.write(this.value, offset);
        else if (Buffer.isBuffer(this.value))
          this.value.copy(out, offset);
        offset += this.length;
      }
    
      return out;
    };
    
    },{"../base/reporter":240,"inherits":370,"safer-buffer":400}],238:[function(require,module,exports){
    'use strict';
    
    const base = exports;
    
    base.Reporter = require('./reporter').Reporter;
    base.DecoderBuffer = require('./buffer').DecoderBuffer;
    base.EncoderBuffer = require('./buffer').EncoderBuffer;
    base.Node = require('./node');
    
    },{"./buffer":237,"./node":239,"./reporter":240}],239:[function(require,module,exports){
    'use strict';
    
    const Reporter = require('../base/reporter').Reporter;
    const EncoderBuffer = require('../base/buffer').EncoderBuffer;
    const DecoderBuffer = require('../base/buffer').DecoderBuffer;
    const assert = require('minimalistic-assert');
    
    // Supported tags
    const tags = [
      'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
      'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
      'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
      'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
    ];
    
    // Public methods list
    const methods = [
      'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
      'any', 'contains'
    ].concat(tags);
    
    // Overrided methods list
    const overrided = [
      '_peekTag', '_decodeTag', '_use',
      '_decodeStr', '_decodeObjid', '_decodeTime',
      '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',
    
      '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
      '_encodeNull', '_encodeInt', '_encodeBool'
    ];
    
    function Node(enc, parent, name) {
      const state = {};
      this._baseState = state;
    
      state.name = name;
      state.enc = enc;
    
      state.parent = parent || null;
      state.children = null;
    
      // State
      state.tag = null;
      state.args = null;
      state.reverseArgs = null;
      state.choice = null;
      state.optional = false;
      state.any = false;
      state.obj = false;
      state.use = null;
      state.useDecoder = null;
      state.key = null;
      state['default'] = null;
      state.explicit = null;
      state.implicit = null;
      state.contains = null;
    
      // Should create new instance on each method
      if (!state.parent) {
        state.children = [];
        this._wrap();
      }
    }
    module.exports = Node;
    
    const stateProps = [
      'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
      'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
      'implicit', 'contains'
    ];
    
    Node.prototype.clone = function clone() {
      const state = this._baseState;
      const cstate = {};
      stateProps.forEach(function(prop) {
        cstate[prop] = state[prop];
      });
      const res = new this.constructor(cstate.parent);
      res._baseState = cstate;
      return res;
    };
    
    Node.prototype._wrap = function wrap() {
      const state = this._baseState;
      methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
          const clone = new this.constructor(this);
          state.children.push(clone);
          return clone[method].apply(clone, arguments);
        };
      }, this);
    };
    
    Node.prototype._init = function init(body) {
      const state = this._baseState;
    
      assert(state.parent === null);
      body.call(this);
    
      // Filter children
      state.children = state.children.filter(function(child) {
        return child._baseState.parent === this;
      }, this);
      assert.equal(state.children.length, 1, 'Root node can have only one child');
    };
    
    Node.prototype._useArgs = function useArgs(args) {
      const state = this._baseState;
    
      // Filter children and args
      const children = args.filter(function(arg) {
        return arg instanceof this.constructor;
      }, this);
      args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
      }, this);
    
      if (children.length !== 0) {
        assert(state.children === null);
        state.children = children;
    
        // Replace parent to maintain backward link
        children.forEach(function(child) {
          child._baseState.parent = this;
        }, this);
      }
      if (args.length !== 0) {
        assert(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function(arg) {
          if (typeof arg !== 'object' || arg.constructor !== Object)
            return arg;
    
          const res = {};
          Object.keys(arg).forEach(function(key) {
            if (key == (key | 0))
              key |= 0;
            const value = arg[key];
            res[value] = key;
          });
          return res;
        });
      }
    };
    
    //
    // Overrided methods
    //
    
    overrided.forEach(function(method) {
      Node.prototype[method] = function _overrided() {
        const state = this._baseState;
        throw new Error(method + ' not implemented for encoding: ' + state.enc);
      };
    });
    
    //
    // Public methods
    //
    
    tags.forEach(function(tag) {
      Node.prototype[tag] = function _tagMethod() {
        const state = this._baseState;
        const args = Array.prototype.slice.call(arguments);
    
        assert(state.tag === null);
        state.tag = tag;
    
        this._useArgs(args);
    
        return this;
      };
    });
    
    Node.prototype.use = function use(item) {
      assert(item);
      const state = this._baseState;
    
      assert(state.use === null);
      state.use = item;
    
      return this;
    };
    
    Node.prototype.optional = function optional() {
      const state = this._baseState;
    
      state.optional = true;
    
      return this;
    };
    
    Node.prototype.def = function def(val) {
      const state = this._baseState;
    
      assert(state['default'] === null);
      state['default'] = val;
      state.optional = true;
    
      return this;
    };
    
    Node.prototype.explicit = function explicit(num) {
      const state = this._baseState;
    
      assert(state.explicit === null && state.implicit === null);
      state.explicit = num;
    
      return this;
    };
    
    Node.prototype.implicit = function implicit(num) {
      const state = this._baseState;
    
      assert(state.explicit === null && state.implicit === null);
      state.implicit = num;
    
      return this;
    };
    
    Node.prototype.obj = function obj() {
      const state = this._baseState;
      const args = Array.prototype.slice.call(arguments);
    
      state.obj = true;
    
      if (args.length !== 0)
        this._useArgs(args);
    
      return this;
    };
    
    Node.prototype.key = function key(newKey) {
      const state = this._baseState;
    
      assert(state.key === null);
      state.key = newKey;
    
      return this;
    };
    
    Node.prototype.any = function any() {
      const state = this._baseState;
    
      state.any = true;
    
      return this;
    };
    
    Node.prototype.choice = function choice(obj) {
      const state = this._baseState;
    
      assert(state.choice === null);
      state.choice = obj;
      this._useArgs(Object.keys(obj).map(function(key) {
        return obj[key];
      }));
    
      return this;
    };
    
    Node.prototype.contains = function contains(item) {
      const state = this._baseState;
    
      assert(state.use === null);
      state.contains = item;
    
      return this;
    };
    
    //
    // Decoding
    //
    
    Node.prototype._decode = function decode(input, options) {
      const state = this._baseState;
    
      // Decode root node
      if (state.parent === null)
        return input.wrapResult(state.children[0]._decode(input, options));
    
      let result = state['default'];
      let present = true;
    
      let prevKey = null;
      if (state.key !== null)
        prevKey = input.enterKey(state.key);
    
      // Check if tag is there
      if (state.optional) {
        let tag = null;
        if (state.explicit !== null)
          tag = state.explicit;
        else if (state.implicit !== null)
          tag = state.implicit;
        else if (state.tag !== null)
          tag = state.tag;
    
        if (tag === null && !state.any) {
          // Trial and Error
          const save = input.save();
          try {
            if (state.choice === null)
              this._decodeGeneric(state.tag, input, options);
            else
              this._decodeChoice(input, options);
            present = true;
          } catch (e) {
            present = false;
          }
          input.restore(save);
        } else {
          present = this._peekTag(input, tag, state.any);
    
          if (input.isError(present))
            return present;
        }
      }
    
      // Push object on stack
      let prevObj;
      if (state.obj && present)
        prevObj = input.enterObject();
    
      if (present) {
        // Unwrap explicit values
        if (state.explicit !== null) {
          const explicit = this._decodeTag(input, state.explicit);
          if (input.isError(explicit))
            return explicit;
          input = explicit;
        }
    
        const start = input.offset;
    
        // Unwrap implicit and normal values
        if (state.use === null && state.choice === null) {
          let save;
          if (state.any)
            save = input.save();
          const body = this._decodeTag(
            input,
            state.implicit !== null ? state.implicit : state.tag,
            state.any
          );
          if (input.isError(body))
            return body;
    
          if (state.any)
            result = input.raw(save);
          else
            input = body;
        }
    
        if (options && options.track && state.tag !== null)
          options.track(input.path(), start, input.length, 'tagged');
    
        if (options && options.track && state.tag !== null)
          options.track(input.path(), input.offset, input.length, 'content');
    
        // Select proper method for tag
        if (state.any) {
          // no-op
        } else if (state.choice === null) {
          result = this._decodeGeneric(state.tag, input, options);
        } else {
          result = this._decodeChoice(input, options);
        }
    
        if (input.isError(result))
          return result;
    
        // Decode children
        if (!state.any && state.choice === null && state.children !== null) {
          state.children.forEach(function decodeChildren(child) {
            // NOTE: We are ignoring errors here, to let parser continue with other
            // parts of encoded data
            child._decode(input, options);
          });
        }
    
        // Decode contained/encoded by schema, only in bit or octet strings
        if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
          const data = new DecoderBuffer(result);
          result = this._getUse(state.contains, input._reporterState.obj)
            ._decode(data, options);
        }
      }
    
      // Pop object
      if (state.obj && present)
        result = input.leaveObject(prevObj);
    
      // Set key
      if (state.key !== null && (result !== null || present === true))
        input.leaveKey(prevKey, state.key, result);
      else if (prevKey !== null)
        input.exitKey(prevKey);
    
      return result;
    };
    
    Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
      const state = this._baseState;
    
      if (tag === 'seq' || tag === 'set')
        return null;
      if (tag === 'seqof' || tag === 'setof')
        return this._decodeList(input, tag, state.args[0], options);
      else if (/str$/.test(tag))
        return this._decodeStr(input, tag, options);
      else if (tag === 'objid' && state.args)
        return this._decodeObjid(input, state.args[0], state.args[1], options);
      else if (tag === 'objid')
        return this._decodeObjid(input, null, null, options);
      else if (tag === 'gentime' || tag === 'utctime')
        return this._decodeTime(input, tag, options);
      else if (tag === 'null_')
        return this._decodeNull(input, options);
      else if (tag === 'bool')
        return this._decodeBool(input, options);
      else if (tag === 'objDesc')
        return this._decodeStr(input, tag, options);
      else if (tag === 'int' || tag === 'enum')
        return this._decodeInt(input, state.args && state.args[0], options);
    
      if (state.use !== null) {
        return this._getUse(state.use, input._reporterState.obj)
          ._decode(input, options);
      } else {
        return input.error('unknown tag: ' + tag);
      }
    };
    
    Node.prototype._getUse = function _getUse(entity, obj) {
    
      const state = this._baseState;
      // Create altered use decoder if implicit is set
      state.useDecoder = this._use(entity, obj);
      assert(state.useDecoder._baseState.parent === null);
      state.useDecoder = state.useDecoder._baseState.children[0];
      if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
      }
      return state.useDecoder;
    };
    
    Node.prototype._decodeChoice = function decodeChoice(input, options) {
      const state = this._baseState;
      let result = null;
      let match = false;
    
      Object.keys(state.choice).some(function(key) {
        const save = input.save();
        const node = state.choice[key];
        try {
          const value = node._decode(input, options);
          if (input.isError(value))
            return false;
    
          result = { type: key, value: value };
          match = true;
        } catch (e) {
          input.restore(save);
          return false;
        }
        return true;
      }, this);
    
      if (!match)
        return input.error('Choice not matched');
    
      return result;
    };
    
    //
    // Encoding
    //
    
    Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
      return new EncoderBuffer(data, this.reporter);
    };
    
    Node.prototype._encode = function encode(data, reporter, parent) {
      const state = this._baseState;
      if (state['default'] !== null && state['default'] === data)
        return;
    
      const result = this._encodeValue(data, reporter, parent);
      if (result === undefined)
        return;
    
      if (this._skipDefault(result, reporter, parent))
        return;
    
      return result;
    };
    
    Node.prototype._encodeValue = function encode(data, reporter, parent) {
      const state = this._baseState;
    
      // Decode root node
      if (state.parent === null)
        return state.children[0]._encode(data, reporter || new Reporter());
    
      let result = null;
    
      // Set reporter to share it with a child class
      this.reporter = reporter;
    
      // Check if data is there
      if (state.optional && data === undefined) {
        if (state['default'] !== null)
          data = state['default'];
        else
          return;
      }
    
      // Encode children first
      let content = null;
      let primitive = false;
      if (state.any) {
        // Anything that was given is translated to buffer
        result = this._createEncoderBuffer(data);
      } else if (state.choice) {
        result = this._encodeChoice(data, reporter);
      } else if (state.contains) {
        content = this._getUse(state.contains, parent)._encode(data, reporter);
        primitive = true;
      } else if (state.children) {
        content = state.children.map(function(child) {
          if (child._baseState.tag === 'null_')
            return child._encode(null, reporter, data);
    
          if (child._baseState.key === null)
            return reporter.error('Child should have a key');
          const prevKey = reporter.enterKey(child._baseState.key);
    
          if (typeof data !== 'object')
            return reporter.error('Child expected, but input is not object');
    
          const res = child._encode(data[child._baseState.key], reporter, data);
          reporter.leaveKey(prevKey);
    
          return res;
        }, this).filter(function(child) {
          return child;
        });
        content = this._createEncoderBuffer(content);
      } else {
        if (state.tag === 'seqof' || state.tag === 'setof') {
          // TODO(indutny): this should be thrown on DSL level
          if (!(state.args && state.args.length === 1))
            return reporter.error('Too many args for : ' + state.tag);
    
          if (!Array.isArray(data))
            return reporter.error('seqof/setof, but data is not Array');
    
          const child = this.clone();
          child._baseState.implicit = null;
          content = this._createEncoderBuffer(data.map(function(item) {
            const state = this._baseState;
    
            return this._getUse(state.args[0], data)._encode(item, reporter);
          }, child));
        } else if (state.use !== null) {
          result = this._getUse(state.use, parent)._encode(data, reporter);
        } else {
          content = this._encodePrimitive(state.tag, data);
          primitive = true;
        }
      }
    
      // Encode data itself
      if (!state.any && state.choice === null) {
        const tag = state.implicit !== null ? state.implicit : state.tag;
        const cls = state.implicit === null ? 'universal' : 'context';
    
        if (tag === null) {
          if (state.use === null)
            reporter.error('Tag could be omitted only for .use()');
        } else {
          if (state.use === null)
            result = this._encodeComposite(tag, primitive, cls, content);
        }
      }
    
      // Wrap in explicit
      if (state.explicit !== null)
        result = this._encodeComposite(state.explicit, false, 'context', result);
    
      return result;
    };
    
    Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
      const state = this._baseState;
    
      const node = state.choice[data.type];
      if (!node) {
        assert(
          false,
          data.type + ' not found in ' +
                JSON.stringify(Object.keys(state.choice)));
      }
      return node._encode(data.value, reporter);
    };
    
    Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
      const state = this._baseState;
    
      if (/str$/.test(tag))
        return this._encodeStr(data, tag);
      else if (tag === 'objid' && state.args)
        return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
      else if (tag === 'objid')
        return this._encodeObjid(data, null, null);
      else if (tag === 'gentime' || tag === 'utctime')
        return this._encodeTime(data, tag);
      else if (tag === 'null_')
        return this._encodeNull();
      else if (tag === 'int' || tag === 'enum')
        return this._encodeInt(data, state.args && state.reverseArgs[0]);
      else if (tag === 'bool')
        return this._encodeBool(data);
      else if (tag === 'objDesc')
        return this._encodeStr(data, tag);
      else
        throw new Error('Unsupported tag: ' + tag);
    };
    
    Node.prototype._isNumstr = function isNumstr(str) {
      return /^[0-9 ]*$/.test(str);
    };
    
    Node.prototype._isPrintstr = function isPrintstr(str) {
      return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
    };
    
    },{"../base/buffer":237,"../base/reporter":240,"minimalistic-assert":374}],240:[function(require,module,exports){
    'use strict';
    
    const inherits = require('inherits');
    
    function Reporter(options) {
      this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: []
      };
    }
    exports.Reporter = Reporter;
    
    Reporter.prototype.isError = function isError(obj) {
      return obj instanceof ReporterError;
    };
    
    Reporter.prototype.save = function save() {
      const state = this._reporterState;
    
      return { obj: state.obj, pathLen: state.path.length };
    };
    
    Reporter.prototype.restore = function restore(data) {
      const state = this._reporterState;
    
      state.obj = data.obj;
      state.path = state.path.slice(0, data.pathLen);
    };
    
    Reporter.prototype.enterKey = function enterKey(key) {
      return this._reporterState.path.push(key);
    };
    
    Reporter.prototype.exitKey = function exitKey(index) {
      const state = this._reporterState;
    
      state.path = state.path.slice(0, index - 1);
    };
    
    Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
      const state = this._reporterState;
    
      this.exitKey(index);
      if (state.obj !== null)
        state.obj[key] = value;
    };
    
    Reporter.prototype.path = function path() {
      return this._reporterState.path.join('/');
    };
    
    Reporter.prototype.enterObject = function enterObject() {
      const state = this._reporterState;
    
      const prev = state.obj;
      state.obj = {};
      return prev;
    };
    
    Reporter.prototype.leaveObject = function leaveObject(prev) {
      const state = this._reporterState;
    
      const now = state.obj;
      state.obj = prev;
      return now;
    };
    
    Reporter.prototype.error = function error(msg) {
      let err;
      const state = this._reporterState;
    
      const inherited = msg instanceof ReporterError;
      if (inherited) {
        err = msg;
      } else {
        err = new ReporterError(state.path.map(function(elem) {
          return '[' + JSON.stringify(elem) + ']';
        }).join(''), msg.message || msg, msg.stack);
      }
    
      if (!state.options.partial)
        throw err;
    
      if (!inherited)
        state.errors.push(err);
    
      return err;
    };
    
    Reporter.prototype.wrapResult = function wrapResult(result) {
      const state = this._reporterState;
      if (!state.options.partial)
        return result;
    
      return {
        result: this.isError(result) ? null : result,
        errors: state.errors
      };
    };
    
    function ReporterError(path, msg) {
      this.path = path;
      this.rethrow(msg);
    }
    inherits(ReporterError, Error);
    
    ReporterError.prototype.rethrow = function rethrow(msg) {
      this.message = msg + ' at: ' + (this.path || '(shallow)');
      if (Error.captureStackTrace)
        Error.captureStackTrace(this, ReporterError);
    
      if (!this.stack) {
        try {
          // IE only adds stack when thrown
          throw new Error(this.message);
        } catch (e) {
          this.stack = e.stack;
        }
      }
      return this;
    };
    
    },{"inherits":370}],241:[function(require,module,exports){
    'use strict';
    
    // Helper
    function reverse(map) {
      const res = {};
    
      Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key)
          key = key | 0;
    
        const value = map[key];
        res[value] = key;
      });
    
      return res;
    }
    
    exports.tagClass = {
      0: 'universal',
      1: 'application',
      2: 'context',
      3: 'private'
    };
    exports.tagClassByName = reverse(exports.tagClass);
    
    exports.tag = {
      0x00: 'end',
      0x01: 'bool',
      0x02: 'int',
      0x03: 'bitstr',
      0x04: 'octstr',
      0x05: 'null_',
      0x06: 'objid',
      0x07: 'objDesc',
      0x08: 'external',
      0x09: 'real',
      0x0a: 'enum',
      0x0b: 'embed',
      0x0c: 'utf8str',
      0x0d: 'relativeOid',
      0x10: 'seq',
      0x11: 'set',
      0x12: 'numstr',
      0x13: 'printstr',
      0x14: 't61str',
      0x15: 'videostr',
      0x16: 'ia5str',
      0x17: 'utctime',
      0x18: 'gentime',
      0x19: 'graphstr',
      0x1a: 'iso646str',
      0x1b: 'genstr',
      0x1c: 'unistr',
      0x1d: 'charstr',
      0x1e: 'bmpstr'
    };
    exports.tagByName = reverse(exports.tag);
    
    },{}],242:[function(require,module,exports){
    'use strict';
    
    const constants = exports;
    
    // Helper
    constants._reverse = function reverse(map) {
      const res = {};
    
      Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key)
          key = key | 0;
    
        const value = map[key];
        res[value] = key;
      });
    
      return res;
    };
    
    constants.der = require('./der');
    
    },{"./der":241}],243:[function(require,module,exports){
    'use strict';
    
    const inherits = require('inherits');
    
    const bignum = require('bn.js');
    const DecoderBuffer = require('../base/buffer').DecoderBuffer;
    const Node = require('../base/node');
    
    // Import DER constants
    const der = require('../constants/der');
    
    function DERDecoder(entity) {
      this.enc = 'der';
      this.name = entity.name;
      this.entity = entity;
    
      // Construct base tree
      this.tree = new DERNode();
      this.tree._init(entity.body);
    }
    module.exports = DERDecoder;
    
    DERDecoder.prototype.decode = function decode(data, options) {
      if (!DecoderBuffer.isDecoderBuffer(data)) {
        data = new DecoderBuffer(data, options);
      }
    
      return this.tree._decode(data, options);
    };
    
    // Tree methods
    
    function DERNode(parent) {
      Node.call(this, 'der', parent);
    }
    inherits(DERNode, Node);
    
    DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
      if (buffer.isEmpty())
        return false;
    
      const state = buffer.save();
      const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
      if (buffer.isError(decodedTag))
        return decodedTag;
    
      buffer.restore(state);
    
      return decodedTag.tag === tag || decodedTag.tagStr === tag ||
        (decodedTag.tagStr + 'of') === tag || any;
    };
    
    DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
      const decodedTag = derDecodeTag(buffer,
        'Failed to decode tag of "' + tag + '"');
      if (buffer.isError(decodedTag))
        return decodedTag;
    
      let len = derDecodeLen(buffer,
        decodedTag.primitive,
        'Failed to get length of "' + tag + '"');
    
      // Failure
      if (buffer.isError(len))
        return len;
    
      if (!any &&
          decodedTag.tag !== tag &&
          decodedTag.tagStr !== tag &&
          decodedTag.tagStr + 'of' !== tag) {
        return buffer.error('Failed to match tag: "' + tag + '"');
      }
    
      if (decodedTag.primitive || len !== null)
        return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    
      // Indefinite length... find END tag
      const state = buffer.save();
      const res = this._skipUntilEnd(
        buffer,
        'Failed to skip indefinite length body: "' + this.tag + '"');
      if (buffer.isError(res))
        return res;
    
      len = buffer.offset - state.offset;
      buffer.restore(state);
      return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    };
    
    DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
      for (;;) {
        const tag = derDecodeTag(buffer, fail);
        if (buffer.isError(tag))
          return tag;
        const len = derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len))
          return len;
    
        let res;
        if (tag.primitive || len !== null)
          res = buffer.skip(len);
        else
          res = this._skipUntilEnd(buffer, fail);
    
        // Failure
        if (buffer.isError(res))
          return res;
    
        if (tag.tagStr === 'end')
          break;
      }
    };
    
    DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
      options) {
      const result = [];
      while (!buffer.isEmpty()) {
        const possibleEnd = this._peekTag(buffer, 'end');
        if (buffer.isError(possibleEnd))
          return possibleEnd;
    
        const res = decoder.decode(buffer, 'der', options);
        if (buffer.isError(res) && possibleEnd)
          break;
        result.push(res);
      }
      return result;
    };
    
    DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
      if (tag === 'bitstr') {
        const unused = buffer.readUInt8();
        if (buffer.isError(unused))
          return unused;
        return { unused: unused, data: buffer.raw() };
      } else if (tag === 'bmpstr') {
        const raw = buffer.raw();
        if (raw.length % 2 === 1)
          return buffer.error('Decoding of string type: bmpstr length mismatch');
    
        let str = '';
        for (let i = 0; i < raw.length / 2; i++) {
          str += String.fromCharCode(raw.readUInt16BE(i * 2));
        }
        return str;
      } else if (tag === 'numstr') {
        const numstr = buffer.raw().toString('ascii');
        if (!this._isNumstr(numstr)) {
          return buffer.error('Decoding of string type: ' +
                              'numstr unsupported characters');
        }
        return numstr;
      } else if (tag === 'octstr') {
        return buffer.raw();
      } else if (tag === 'objDesc') {
        return buffer.raw();
      } else if (tag === 'printstr') {
        const printstr = buffer.raw().toString('ascii');
        if (!this._isPrintstr(printstr)) {
          return buffer.error('Decoding of string type: ' +
                              'printstr unsupported characters');
        }
        return printstr;
      } else if (/str$/.test(tag)) {
        return buffer.raw().toString();
      } else {
        return buffer.error('Decoding of string type: ' + tag + ' unsupported');
      }
    };
    
    DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
      let result;
      const identifiers = [];
      let ident = 0;
      let subident = 0;
      while (!buffer.isEmpty()) {
        subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 0x7f;
        if ((subident & 0x80) === 0) {
          identifiers.push(ident);
          ident = 0;
        }
      }
      if (subident & 0x80)
        identifiers.push(ident);
    
      const first = (identifiers[0] / 40) | 0;
      const second = identifiers[0] % 40;
    
      if (relative)
        result = identifiers;
      else
        result = [first, second].concat(identifiers.slice(1));
    
      if (values) {
        let tmp = values[result.join(' ')];
        if (tmp === undefined)
          tmp = values[result.join('.')];
        if (tmp !== undefined)
          result = tmp;
      }
    
      return result;
    };
    
    DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
      const str = buffer.raw().toString();
    
      let year;
      let mon;
      let day;
      let hour;
      let min;
      let sec;
      if (tag === 'gentime') {
        year = str.slice(0, 4) | 0;
        mon = str.slice(4, 6) | 0;
        day = str.slice(6, 8) | 0;
        hour = str.slice(8, 10) | 0;
        min = str.slice(10, 12) | 0;
        sec = str.slice(12, 14) | 0;
      } else if (tag === 'utctime') {
        year = str.slice(0, 2) | 0;
        mon = str.slice(2, 4) | 0;
        day = str.slice(4, 6) | 0;
        hour = str.slice(6, 8) | 0;
        min = str.slice(8, 10) | 0;
        sec = str.slice(10, 12) | 0;
        if (year < 70)
          year = 2000 + year;
        else
          year = 1900 + year;
      } else {
        return buffer.error('Decoding ' + tag + ' time is not supported yet');
      }
    
      return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
    };
    
    DERNode.prototype._decodeNull = function decodeNull() {
      return null;
    };
    
    DERNode.prototype._decodeBool = function decodeBool(buffer) {
      const res = buffer.readUInt8();
      if (buffer.isError(res))
        return res;
      else
        return res !== 0;
    };
    
    DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
      // Bigint, return as it is (assume big endian)
      const raw = buffer.raw();
      let res = new bignum(raw);
    
      if (values)
        res = values[res.toString(10)] || res;
    
      return res;
    };
    
    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === 'function')
        entity = entity(obj);
      return entity._getDecoder('der').tree;
    };
    
    // Utility methods
    
    function derDecodeTag(buf, fail) {
      let tag = buf.readUInt8(fail);
      if (buf.isError(tag))
        return tag;
    
      const cls = der.tagClass[tag >> 6];
      const primitive = (tag & 0x20) === 0;
    
      // Multi-octet tag - load
      if ((tag & 0x1f) === 0x1f) {
        let oct = tag;
        tag = 0;
        while ((oct & 0x80) === 0x80) {
          oct = buf.readUInt8(fail);
          if (buf.isError(oct))
            return oct;
    
          tag <<= 7;
          tag |= oct & 0x7f;
        }
      } else {
        tag &= 0x1f;
      }
      const tagStr = der.tag[tag];
    
      return {
        cls: cls,
        primitive: primitive,
        tag: tag,
        tagStr: tagStr
      };
    }
    
    function derDecodeLen(buf, primitive, fail) {
      let len = buf.readUInt8(fail);
      if (buf.isError(len))
        return len;
    
      // Indefinite form
      if (!primitive && len === 0x80)
        return null;
    
      // Definite form
      if ((len & 0x80) === 0) {
        // Short form
        return len;
      }
    
      // Long form
      const num = len & 0x7f;
      if (num > 4)
        return buf.error('length octect is too long');
    
      len = 0;
      for (let i = 0; i < num; i++) {
        len <<= 8;
        const j = buf.readUInt8(fail);
        if (buf.isError(j))
          return j;
        len |= j;
      }
    
      return len;
    }
    
    },{"../base/buffer":237,"../base/node":239,"../constants/der":241,"bn.js":249,"inherits":370}],244:[function(require,module,exports){
    'use strict';
    
    const decoders = exports;
    
    decoders.der = require('./der');
    decoders.pem = require('./pem');
    
    },{"./der":243,"./pem":245}],245:[function(require,module,exports){
    'use strict';
    
    const inherits = require('inherits');
    const Buffer = require('safer-buffer').Buffer;
    
    const DERDecoder = require('./der');
    
    function PEMDecoder(entity) {
      DERDecoder.call(this, entity);
      this.enc = 'pem';
    }
    inherits(PEMDecoder, DERDecoder);
    module.exports = PEMDecoder;
    
    PEMDecoder.prototype.decode = function decode(data, options) {
      const lines = data.toString().split(/[\r\n]+/g);
    
      const label = options.label.toUpperCase();
    
      const re = /^-----(BEGIN|END) ([^-]+)-----$/;
      let start = -1;
      let end = -1;
      for (let i = 0; i < lines.length; i++) {
        const match = lines[i].match(re);
        if (match === null)
          continue;
    
        if (match[2] !== label)
          continue;
    
        if (start === -1) {
          if (match[1] !== 'BEGIN')
            break;
          start = i;
        } else {
          if (match[1] !== 'END')
            break;
          end = i;
          break;
        }
      }
      if (start === -1 || end === -1)
        throw new Error('PEM section not found for: ' + label);
    
      const base64 = lines.slice(start + 1, end).join('');
      // Remove excessive symbols
      base64.replace(/[^a-z0-9+/=]+/gi, '');
    
      const input = Buffer.from(base64, 'base64');
      return DERDecoder.prototype.decode.call(this, input, options);
    };
    
    },{"./der":243,"inherits":370,"safer-buffer":400}],246:[function(require,module,exports){
    'use strict';
    
    const inherits = require('inherits');
    const Buffer = require('safer-buffer').Buffer;
    const Node = require('../base/node');
    
    // Import DER constants
    const der = require('../constants/der');
    
    function DEREncoder(entity) {
      this.enc = 'der';
      this.name = entity.name;
      this.entity = entity;
    
      // Construct base tree
      this.tree = new DERNode();
      this.tree._init(entity.body);
    }
    module.exports = DEREncoder;
    
    DEREncoder.prototype.encode = function encode(data, reporter) {
      return this.tree._encode(data, reporter).join();
    };
    
    // Tree methods
    
    function DERNode(parent) {
      Node.call(this, 'der', parent);
    }
    inherits(DERNode, Node);
    
    DERNode.prototype._encodeComposite = function encodeComposite(tag,
      primitive,
      cls,
      content) {
      const encodedTag = encodeTag(tag, primitive, cls, this.reporter);
    
      // Short form
      if (content.length < 0x80) {
        const header = Buffer.alloc(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([ header, content ]);
      }
    
      // Long form
      // Count octets required to store length
      let lenOctets = 1;
      for (let i = content.length; i >= 0x100; i >>= 8)
        lenOctets++;
    
      const header = Buffer.alloc(1 + 1 + lenOctets);
      header[0] = encodedTag;
      header[1] = 0x80 | lenOctets;
    
      for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
        header[i] = j & 0xff;
    
      return this._createEncoderBuffer([ header, content ]);
    };
    
    DERNode.prototype._encodeStr = function encodeStr(str, tag) {
      if (tag === 'bitstr') {
        return this._createEncoderBuffer([ str.unused | 0, str.data ]);
      } else if (tag === 'bmpstr') {
        const buf = Buffer.alloc(str.length * 2);
        for (let i = 0; i < str.length; i++) {
          buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        }
        return this._createEncoderBuffer(buf);
      } else if (tag === 'numstr') {
        if (!this._isNumstr(str)) {
          return this.reporter.error('Encoding of string type: numstr supports ' +
                                     'only digits and space');
        }
        return this._createEncoderBuffer(str);
      } else if (tag === 'printstr') {
        if (!this._isPrintstr(str)) {
          return this.reporter.error('Encoding of string type: printstr supports ' +
                                     'only latin upper and lower case letters, ' +
                                     'digits, space, apostrophe, left and rigth ' +
                                     'parenthesis, plus sign, comma, hyphen, ' +
                                     'dot, slash, colon, equal sign, ' +
                                     'question mark');
        }
        return this._createEncoderBuffer(str);
      } else if (/str$/.test(tag)) {
        return this._createEncoderBuffer(str);
      } else if (tag === 'objDesc') {
        return this._createEncoderBuffer(str);
      } else {
        return this.reporter.error('Encoding of string type: ' + tag +
                                   ' unsupported');
      }
    };
    
    DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
      if (typeof id === 'string') {
        if (!values)
          return this.reporter.error('string objid given, but no values map found');
        if (!values.hasOwnProperty(id))
          return this.reporter.error('objid not found in values map');
        id = values[id].split(/[\s.]+/g);
        for (let i = 0; i < id.length; i++)
          id[i] |= 0;
      } else if (Array.isArray(id)) {
        id = id.slice();
        for (let i = 0; i < id.length; i++)
          id[i] |= 0;
      }
    
      if (!Array.isArray(id)) {
        return this.reporter.error('objid() should be either array or string, ' +
                                   'got: ' + JSON.stringify(id));
      }
    
      if (!relative) {
        if (id[1] >= 40)
          return this.reporter.error('Second objid identifier OOB');
        id.splice(0, 2, id[0] * 40 + id[1]);
      }
    
      // Count number of octets
      let size = 0;
      for (let i = 0; i < id.length; i++) {
        let ident = id[i];
        for (size++; ident >= 0x80; ident >>= 7)
          size++;
      }
    
      const objid = Buffer.alloc(size);
      let offset = objid.length - 1;
      for (let i = id.length - 1; i >= 0; i--) {
        let ident = id[i];
        objid[offset--] = ident & 0x7f;
        while ((ident >>= 7) > 0)
          objid[offset--] = 0x80 | (ident & 0x7f);
      }
    
      return this._createEncoderBuffer(objid);
    };
    
    function two(num) {
      if (num < 10)
        return '0' + num;
      else
        return num;
    }
    
    DERNode.prototype._encodeTime = function encodeTime(time, tag) {
      let str;
      const date = new Date(time);
    
      if (tag === 'gentime') {
        str = [
          two(date.getUTCFullYear()),
          two(date.getUTCMonth() + 1),
          two(date.getUTCDate()),
          two(date.getUTCHours()),
          two(date.getUTCMinutes()),
          two(date.getUTCSeconds()),
          'Z'
        ].join('');
      } else if (tag === 'utctime') {
        str = [
          two(date.getUTCFullYear() % 100),
          two(date.getUTCMonth() + 1),
          two(date.getUTCDate()),
          two(date.getUTCHours()),
          two(date.getUTCMinutes()),
          two(date.getUTCSeconds()),
          'Z'
        ].join('');
      } else {
        this.reporter.error('Encoding ' + tag + ' time is not supported yet');
      }
    
      return this._encodeStr(str, 'octstr');
    };
    
    DERNode.prototype._encodeNull = function encodeNull() {
      return this._createEncoderBuffer('');
    };
    
    DERNode.prototype._encodeInt = function encodeInt(num, values) {
      if (typeof num === 'string') {
        if (!values)
          return this.reporter.error('String int or enum given, but no values map');
        if (!values.hasOwnProperty(num)) {
          return this.reporter.error('Values map doesn\'t contain: ' +
                                     JSON.stringify(num));
        }
        num = values[num];
      }
    
      // Bignum, assume big endian
      if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
        const numArray = num.toArray();
        if (!num.sign && numArray[0] & 0x80) {
          numArray.unshift(0);
        }
        num = Buffer.from(numArray);
      }
    
      if (Buffer.isBuffer(num)) {
        let size = num.length;
        if (num.length === 0)
          size++;
    
        const out = Buffer.alloc(size);
        num.copy(out);
        if (num.length === 0)
          out[0] = 0;
        return this._createEncoderBuffer(out);
      }
    
      if (num < 0x80)
        return this._createEncoderBuffer(num);
    
      if (num < 0x100)
        return this._createEncoderBuffer([0, num]);
    
      let size = 1;
      for (let i = num; i >= 0x100; i >>= 8)
        size++;
    
      const out = new Array(size);
      for (let i = out.length - 1; i >= 0; i--) {
        out[i] = num & 0xff;
        num >>= 8;
      }
      if(out[0] & 0x80) {
        out.unshift(0);
      }
    
      return this._createEncoderBuffer(Buffer.from(out));
    };
    
    DERNode.prototype._encodeBool = function encodeBool(value) {
      return this._createEncoderBuffer(value ? 0xff : 0);
    };
    
    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === 'function')
        entity = entity(obj);
      return entity._getEncoder('der').tree;
    };
    
    DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
      const state = this._baseState;
      let i;
      if (state['default'] === null)
        return false;
    
      const data = dataBuffer.join();
      if (state.defaultBuffer === undefined)
        state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();
    
      if (data.length !== state.defaultBuffer.length)
        return false;
    
      for (i=0; i < data.length; i++)
        if (data[i] !== state.defaultBuffer[i])
          return false;
    
      return true;
    };
    
    // Utility methods
    
    function encodeTag(tag, primitive, cls, reporter) {
      let res;
    
      if (tag === 'seqof')
        tag = 'seq';
      else if (tag === 'setof')
        tag = 'set';
    
      if (der.tagByName.hasOwnProperty(tag))
        res = der.tagByName[tag];
      else if (typeof tag === 'number' && (tag | 0) === tag)
        res = tag;
      else
        return reporter.error('Unknown tag: ' + tag);
    
      if (res >= 0x1f)
        return reporter.error('Multi-octet tag encoding unsupported');
    
      if (!primitive)
        res |= 0x20;
    
      res |= (der.tagClassByName[cls || 'universal'] << 6);
    
      return res;
    }
    
    },{"../base/node":239,"../constants/der":241,"inherits":370,"safer-buffer":400}],247:[function(require,module,exports){
    'use strict';
    
    const encoders = exports;
    
    encoders.der = require('./der');
    encoders.pem = require('./pem');
    
    },{"./der":246,"./pem":248}],248:[function(require,module,exports){
    'use strict';
    
    const inherits = require('inherits');
    
    const DEREncoder = require('./der');
    
    function PEMEncoder(entity) {
      DEREncoder.call(this, entity);
      this.enc = 'pem';
    }
    inherits(PEMEncoder, DEREncoder);
    module.exports = PEMEncoder;
    
    PEMEncoder.prototype.encode = function encode(data, options) {
      const buf = DEREncoder.prototype.encode.call(this, data);
    
      const p = buf.toString('base64');
      const out = [ '-----BEGIN ' + options.label + '-----' ];
      for (let i = 0; i < p.length; i += 64)
        out.push(p.slice(i, i + 64));
      out.push('-----END ' + options.label + '-----');
      return out.join('\n');
    };
    
    },{"./der":246,"inherits":370}],249:[function(require,module,exports){
    arguments[4][123][0].apply(exports,arguments)
    },{"buffer":257,"dup":123}],250:[function(require,module,exports){
    (function (global){(function (){
    'use strict';
    
    var objectAssign = require('object-assign');
    
    // compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
    // original notice:
    
    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
     * @license  MIT
     */
    function compare(a, b) {
      if (a === b) {
        return 0;
      }
    
      var x = a.length;
      var y = b.length;
    
      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }
    
      if (x < y) {
        return -1;
      }
      if (y < x) {
        return 1;
      }
      return 0;
    }
    function isBuffer(b) {
      if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
        return global.Buffer.isBuffer(b);
      }
      return !!(b != null && b._isBuffer);
    }
    
    // based on node assert, original notice:
    // NB: The URL to the CommonJS spec is kept just for tradition.
    //     node-assert has evolved a lot since then, both in API and behavior.
    
    // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
    //
    // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
    //
    // Originally from narwhal.js (http://narwhaljs.org)
    // Copyright (c) 2009 Thomas Robinson <280north.com>
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the 'Software'), to
    // deal in the Software without restriction, including without limitation the
    // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
    // sell copies of the Software, and to permit persons to whom the Software is
    // furnished to do so, subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
    // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    var util = require('util/');
    var hasOwn = Object.prototype.hasOwnProperty;
    var pSlice = Array.prototype.slice;
    var functionsHaveNames = (function () {
      return function foo() {}.name === 'foo';
    }());
    function pToString (obj) {
      return Object.prototype.toString.call(obj);
    }
    function isView(arrbuf) {
      if (isBuffer(arrbuf)) {
        return false;
      }
      if (typeof global.ArrayBuffer !== 'function') {
        return false;
      }
      if (typeof ArrayBuffer.isView === 'function') {
        return ArrayBuffer.isView(arrbuf);
      }
      if (!arrbuf) {
        return false;
      }
      if (arrbuf instanceof DataView) {
        return true;
      }
      if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
        return true;
      }
      return false;
    }
    // 1. The assert module provides functions that throw
    // AssertionError's when particular conditions are not met. The
    // assert module must conform to the following interface.
    
    var assert = module.exports = ok;
    
    // 2. The AssertionError is defined in assert.
    // new assert.AssertionError({ message: message,
    //                             actual: actual,
    //                             expected: expected })
    
    var regex = /\s*function\s+([^\(\s]*)\s*/;
    // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
    function getName(func) {
      if (!util.isFunction(func)) {
        return;
      }
      if (functionsHaveNames) {
        return func.name;
      }
      var str = func.toString();
      var match = str.match(regex);
      return match && match[1];
    }
    assert.AssertionError = function AssertionError(options) {
      this.name = 'AssertionError';
      this.actual = options.actual;
      this.expected = options.expected;
      this.operator = options.operator;
      if (options.message) {
        this.message = options.message;
        this.generatedMessage = false;
      } else {
        this.message = getMessage(this);
        this.generatedMessage = true;
      }
      var stackStartFunction = options.stackStartFunction || fail;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, stackStartFunction);
      } else {
        // non v8 browsers so we can have a stacktrace
        var err = new Error();
        if (err.stack) {
          var out = err.stack;
    
          // try to strip useless frames
          var fn_name = getName(stackStartFunction);
          var idx = out.indexOf('\n' + fn_name);
          if (idx >= 0) {
            // once we have located the function frame
            // we need to strip out everything before it (and its line)
            var next_line = out.indexOf('\n', idx + 1);
            out = out.substring(next_line + 1);
          }
    
          this.stack = out;
        }
      }
    };
    
    // assert.AssertionError instanceof Error
    util.inherits(assert.AssertionError, Error);
    
    function truncate(s, n) {
      if (typeof s === 'string') {
        return s.length < n ? s : s.slice(0, n);
      } else {
        return s;
      }
    }
    function inspect(something) {
      if (functionsHaveNames || !util.isFunction(something)) {
        return util.inspect(something);
      }
      var rawname = getName(something);
      var name = rawname ? ': ' + rawname : '';
      return '[Function' +  name + ']';
    }
    function getMessage(self) {
      return truncate(inspect(self.actual), 128) + ' ' +
             self.operator + ' ' +
             truncate(inspect(self.expected), 128);
    }
    
    // At present only the three keys mentioned above are used and
    // understood by the spec. Implementations or sub modules can pass
    // other keys to the AssertionError's constructor - they will be
    // ignored.
    
    // 3. All of the following functions must throw an AssertionError
    // when a corresponding condition is not met, with a message that
    // may be undefined if not provided.  All assertion methods provide
    // both the actual and expected values to the assertion error for
    // display purposes.
    
    function fail(actual, expected, message, operator, stackStartFunction) {
      throw new assert.AssertionError({
        message: message,
        actual: actual,
        expected: expected,
        operator: operator,
        stackStartFunction: stackStartFunction
      });
    }
    
    // EXTENSION! allows for well behaved errors defined elsewhere.
    assert.fail = fail;
    
    // 4. Pure assertion tests whether a value is truthy, as determined
    // by !!guard.
    // assert.ok(guard, message_opt);
    // This statement is equivalent to assert.equal(true, !!guard,
    // message_opt);. To test strictly for the value true, use
    // assert.strictEqual(true, guard, message_opt);.
    
    function ok(value, message) {
      if (!value) fail(value, true, message, '==', assert.ok);
    }
    assert.ok = ok;
    
    // 5. The equality assertion tests shallow, coercive equality with
    // ==.
    // assert.equal(actual, expected, message_opt);
    
    assert.equal = function equal(actual, expected, message) {
      if (actual != expected) fail(actual, expected, message, '==', assert.equal);
    };
    
    // 6. The non-equality assertion tests for whether two objects are not equal
    // with != assert.notEqual(actual, expected, message_opt);
    
    assert.notEqual = function notEqual(actual, expected, message) {
      if (actual == expected) {
        fail(actual, expected, message, '!=', assert.notEqual);
      }
    };
    
    // 7. The equivalence assertion tests a deep equality relation.
    // assert.deepEqual(actual, expected, message_opt);
    
    assert.deepEqual = function deepEqual(actual, expected, message) {
      if (!_deepEqual(actual, expected, false)) {
        fail(actual, expected, message, 'deepEqual', assert.deepEqual);
      }
    };
    
    assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
      if (!_deepEqual(actual, expected, true)) {
        fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
      }
    };
    
    function _deepEqual(actual, expected, strict, memos) {
      // 7.1. All identical values are equivalent, as determined by ===.
      if (actual === expected) {
        return true;
      } else if (isBuffer(actual) && isBuffer(expected)) {
        return compare(actual, expected) === 0;
    
      // 7.2. If the expected value is a Date object, the actual value is
      // equivalent if it is also a Date object that refers to the same time.
      } else if (util.isDate(actual) && util.isDate(expected)) {
        return actual.getTime() === expected.getTime();
    
      // 7.3 If the expected value is a RegExp object, the actual value is
      // equivalent if it is also a RegExp object with the same source and
      // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
      } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
        return actual.source === expected.source &&
               actual.global === expected.global &&
               actual.multiline === expected.multiline &&
               actual.lastIndex === expected.lastIndex &&
               actual.ignoreCase === expected.ignoreCase;
    
      // 7.4. Other pairs that do not both pass typeof value == 'object',
      // equivalence is determined by ==.
      } else if ((actual === null || typeof actual !== 'object') &&
                 (expected === null || typeof expected !== 'object')) {
        return strict ? actual === expected : actual == expected;
    
      // If both values are instances of typed arrays, wrap their underlying
      // ArrayBuffers in a Buffer each to increase performance
      // This optimization requires the arrays to have the same type as checked by
      // Object.prototype.toString (aka pToString). Never perform binary
      // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
      // bit patterns are not identical.
      } else if (isView(actual) && isView(expected) &&
                 pToString(actual) === pToString(expected) &&
                 !(actual instanceof Float32Array ||
                   actual instanceof Float64Array)) {
        return compare(new Uint8Array(actual.buffer),
                       new Uint8Array(expected.buffer)) === 0;
    
      // 7.5 For all other Object pairs, including Array objects, equivalence is
      // determined by having the same number of owned properties (as verified
      // with Object.prototype.hasOwnProperty.call), the same set of keys
      // (although not necessarily the same order), equivalent values for every
      // corresponding key, and an identical 'prototype' property. Note: this
      // accounts for both named and indexed properties on Arrays.
      } else if (isBuffer(actual) !== isBuffer(expected)) {
        return false;
      } else {
        memos = memos || {actual: [], expected: []};
    
        var actualIndex = memos.actual.indexOf(actual);
        if (actualIndex !== -1) {
          if (actualIndex === memos.expected.indexOf(expected)) {
            return true;
          }
        }
    
        memos.actual.push(actual);
        memos.expected.push(expected);
    
        return objEquiv(actual, expected, strict, memos);
      }
    }
    
    function isArguments(object) {
      return Object.prototype.toString.call(object) == '[object Arguments]';
    }
    
    function objEquiv(a, b, strict, actualVisitedObjects) {
      if (a === null || a === undefined || b === null || b === undefined)
        return false;
      // if one is a primitive, the other must be same
      if (util.isPrimitive(a) || util.isPrimitive(b))
        return a === b;
      if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
        return false;
      var aIsArgs = isArguments(a);
      var bIsArgs = isArguments(b);
      if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
        return false;
      if (aIsArgs) {
        a = pSlice.call(a);
        b = pSlice.call(b);
        return _deepEqual(a, b, strict);
      }
      var ka = objectKeys(a);
      var kb = objectKeys(b);
      var key, i;
      // having the same number of owned properties (keys incorporates
      // hasOwnProperty)
      if (ka.length !== kb.length)
        return false;
      //the same set of keys (although not necessarily the same order),
      ka.sort();
      kb.sort();
      //~~~cheap key test
      for (i = ka.length - 1; i >= 0; i--) {
        if (ka[i] !== kb[i])
          return false;
      }
      //equivalent values for every corresponding key, and
      //~~~possibly expensive deep test
      for (i = ka.length - 1; i >= 0; i--) {
        key = ka[i];
        if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
          return false;
      }
      return true;
    }
    
    // 8. The non-equivalence assertion tests for any deep inequality.
    // assert.notDeepEqual(actual, expected, message_opt);
    
    assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
      if (_deepEqual(actual, expected, false)) {
        fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
      }
    };
    
    assert.notDeepStrictEqual = notDeepStrictEqual;
    function notDeepStrictEqual(actual, expected, message) {
      if (_deepEqual(actual, expected, true)) {
        fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
      }
    }
    
    
    // 9. The strict equality assertion tests strict equality, as determined by ===.
    // assert.strictEqual(actual, expected, message_opt);
    
    assert.strictEqual = function strictEqual(actual, expected, message) {
      if (actual !== expected) {
        fail(actual, expected, message, '===', assert.strictEqual);
      }
    };
    
    // 10. The strict non-equality assertion tests for strict inequality, as
    // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
    
    assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
      if (actual === expected) {
        fail(actual, expected, message, '!==', assert.notStrictEqual);
      }
    };
    
    function expectedException(actual, expected) {
      if (!actual || !expected) {
        return false;
      }
    
      if (Object.prototype.toString.call(expected) == '[object RegExp]') {
        return expected.test(actual);
      }
    
      try {
        if (actual instanceof expected) {
          return true;
        }
      } catch (e) {
        // Ignore.  The instanceof check doesn't work for arrow functions.
      }
    
      if (Error.isPrototypeOf(expected)) {
        return false;
      }
    
      return expected.call({}, actual) === true;
    }
    
    function _tryBlock(block) {
      var error;
      try {
        block();
      } catch (e) {
        error = e;
      }
      return error;
    }
    
    function _throws(shouldThrow, block, expected, message) {
      var actual;
    
      if (typeof block !== 'function') {
        throw new TypeError('"block" argument must be a function');
      }
    
      if (typeof expected === 'string') {
        message = expected;
        expected = null;
      }
    
      actual = _tryBlock(block);
    
      message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
                (message ? ' ' + message : '.');
    
      if (shouldThrow && !actual) {
        fail(actual, expected, 'Missing expected exception' + message);
      }
    
      var userProvidedMessage = typeof message === 'string';
      var isUnwantedException = !shouldThrow && util.isError(actual);
      var isUnexpectedException = !shouldThrow && actual && !expected;
    
      if ((isUnwantedException &&
          userProvidedMessage &&
          expectedException(actual, expected)) ||
          isUnexpectedException) {
        fail(actual, expected, 'Got unwanted exception' + message);
      }
    
      if ((shouldThrow && actual && expected &&
          !expectedException(actual, expected)) || (!shouldThrow && actual)) {
        throw actual;
      }
    }
    
    // 11. Expected to throw an error:
    // assert.throws(block, Error_opt, message_opt);
    
    assert.throws = function(block, /*optional*/error, /*optional*/message) {
      _throws(true, block, error, message);
    };
    
    // EXTENSION! This is annoying to write outside this module.
    assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
      _throws(false, block, error, message);
    };
    
    assert.ifError = function(err) { if (err) throw err; };
    
    // Expose a strict only variant of assert
    function strict(value, message) {
      if (!value) fail(value, true, message, '==', strict);
    }
    assert.strict = objectAssign(strict, assert, {
      equal: assert.strictEqual,
      deepEqual: assert.deepStrictEqual,
      notEqual: assert.notStrictEqual,
      notDeepEqual: assert.notDeepStrictEqual
    });
    assert.strict.strict = assert.strict;
    
    var objectKeys = Object.keys || function (obj) {
      var keys = [];
      for (var key in obj) {
        if (hasOwn.call(obj, key)) keys.push(key);
      }
      return keys;
    };
    
    }).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"object-assign":376,"util/":253}],251:[function(require,module,exports){
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor
        var TempCtor = function () {}
        TempCtor.prototype = superCtor.prototype
        ctor.prototype = new TempCtor()
        ctor.prototype.constructor = ctor
      }
    }
    
    },{}],252:[function(require,module,exports){
    module.exports = function isBuffer(arg) {
      return arg && typeof arg === 'object'
        && typeof arg.copy === 'function'
        && typeof arg.fill === 'function'
        && typeof arg.readUInt8 === 'function';
    }
    },{}],253:[function(require,module,exports){
    (function (process,global){(function (){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    var formatRegExp = /%[sdj%]/g;
    exports.format = function(f) {
      if (!isString(f)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(' ');
      }
    
      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f).replace(formatRegExp, function(x) {
        if (x === '%%') return '%';
        if (i >= len) return x;
        switch (x) {
          case '%s': return String(args[i++]);
          case '%d': return Number(args[i++]);
          case '%j':
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return '[Circular]';
            }
          default:
            return x;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject(x)) {
          str += ' ' + x;
        } else {
          str += ' ' + inspect(x);
        }
      }
      return str;
    };
    
    
    // Mark that a method should not be used.
    // Returns a modified function which warns once by default.
    // If --no-deprecation is set, then it is a no-op.
    exports.deprecate = function(fn, msg) {
      // Allow for deprecating things in the process of starting up.
      if (isUndefined(global.process)) {
        return function() {
          return exports.deprecate(fn, msg).apply(this, arguments);
        };
      }
    
      if (process.noDeprecation === true) {
        return fn;
      }
    
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (process.throwDeprecation) {
            throw new Error(msg);
          } else if (process.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
    
      return deprecated;
    };
    
    
    var debugs = {};
    var debugEnviron;
    exports.debuglog = function(set) {
      if (isUndefined(debugEnviron))
        debugEnviron = process.env.NODE_DEBUG || '';
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
          var pid = process.pid;
          debugs[set] = function() {
            var msg = exports.format.apply(exports, arguments);
            console.error('%s %d: %s', set, pid, msg);
          };
        } else {
          debugs[set] = function() {};
        }
      }
      return debugs[set];
    };
    
    
    /**
     * Echos the value of a value. Trys to print the value out
     * in the best way possible given the different types.
     *
     * @param {Object} obj The object to print out.
     * @param {Object} opts Optional options object that alters the output.
     */
    /* legacy: obj, showHidden, depth, colors*/
    function inspect(obj, opts) {
      // default options
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      // legacy...
      if (arguments.length >= 3) ctx.depth = arguments[2];
      if (arguments.length >= 4) ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        // legacy...
        ctx.showHidden = opts;
      } else if (opts) {
        // got an "options" object
        exports._extend(ctx, opts);
      }
      // set default options
      if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
      if (isUndefined(ctx.depth)) ctx.depth = 2;
      if (isUndefined(ctx.colors)) ctx.colors = false;
      if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
      if (ctx.colors) ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }
    exports.inspect = inspect;
    
    
    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
    inspect.colors = {
      'bold' : [1, 22],
      'italic' : [3, 23],
      'underline' : [4, 24],
      'inverse' : [7, 27],
      'white' : [37, 39],
      'grey' : [90, 39],
      'black' : [30, 39],
      'blue' : [34, 39],
      'cyan' : [36, 39],
      'green' : [32, 39],
      'magenta' : [35, 39],
      'red' : [31, 39],
      'yellow' : [33, 39]
    };
    
    // Don't use 'blue' not visible on cmd.exe
    inspect.styles = {
      'special': 'cyan',
      'number': 'yellow',
      'boolean': 'yellow',
      'undefined': 'grey',
      'null': 'bold',
      'string': 'green',
      'date': 'magenta',
      // "name": intentionally not styling
      'regexp': 'red'
    };
    
    
    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];
    
      if (style) {
        return '\u001b[' + inspect.colors[style][0] + 'm' + str +
               '\u001b[' + inspect.colors[style][1] + 'm';
      } else {
        return str;
      }
    }
    
    
    function stylizeNoColor(str, styleType) {
      return str;
    }
    
    
    function arrayToHash(array) {
      var hash = {};
    
      array.forEach(function(val, idx) {
        hash[val] = true;
      });
    
      return hash;
    }
    
    
    function formatValue(ctx, value, recurseTimes) {
      // Provide a hook for user-specified inspect functions.
      // Check that value is an object with an inspect function on it
      if (ctx.customInspect &&
          value &&
          isFunction(value.inspect) &&
          // Filter out the util module, it's inspect function is special
          value.inspect !== exports.inspect &&
          // Also filter out any prototype objects using the circular check.
          !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }
    
      // Primitive types cannot have properties
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }
    
      // Look up the keys of the object.
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);
    
      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }
    
      // IE doesn't make error fields non-enumerable
      // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
      if (isError(value)
          && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }
    
      // Some type of object without properties can be shortcutted.
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }
        if (isError(value)) {
          return formatError(value);
        }
      }
    
      var base = '', array = false, braces = ['{', '}'];
    
      // Make Array say that they are Array
      if (isArray(value)) {
        array = true;
        braces = ['[', ']'];
      }
    
      // Make functions say that they are functions
      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }
    
      // Make RegExps say that they are RegExps
      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }
    
      // Make dates with properties first say the date
      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }
    
      // Make error with message first say the error
      if (isError(value)) {
        base = ' ' + formatError(value);
      }
    
      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }
    
      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }
    
      ctx.seen.push(value);
    
      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }
    
      ctx.seen.pop();
    
      return reduceToSingleString(output, base, braces);
    }
    
    
    function formatPrimitive(ctx, value) {
      if (isUndefined(value))
        return ctx.stylize('undefined', 'undefined');
      if (isString(value)) {
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                                 .replace(/'/g, "\\'")
                                                 .replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');
      }
      if (isNumber(value))
        return ctx.stylize('' + value, 'number');
      if (isBoolean(value))
        return ctx.stylize('' + value, 'boolean');
      // For some reason typeof null is "object", so special case here.
      if (isNull(value))
        return ctx.stylize('null', 'null');
    }
    
    
    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }
    
    
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              String(i), true));
        } else {
          output.push('');
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              key, true));
        }
      });
      return output;
    }
    
    
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function(line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function(line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }
      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'")
                     .replace(/\\"/g, '"')
                     .replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }
    
      return name + ': ' + str;
    }
    
    
    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf('\n') >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);
    
      if (length > 60) {
        return braces[0] +
               (base === '' ? '' : base + '\n ') +
               ' ' +
               output.join(',\n  ') +
               ' ' +
               braces[1];
      }
    
      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }
    
    
    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.
    function isArray(ar) {
      return Array.isArray(ar);
    }
    exports.isArray = isArray;
    
    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }
    exports.isBoolean = isBoolean;
    
    function isNull(arg) {
      return arg === null;
    }
    exports.isNull = isNull;
    
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports.isNullOrUndefined = isNullOrUndefined;
    
    function isNumber(arg) {
      return typeof arg === 'number';
    }
    exports.isNumber = isNumber;
    
    function isString(arg) {
      return typeof arg === 'string';
    }
    exports.isString = isString;
    
    function isSymbol(arg) {
      return typeof arg === 'symbol';
    }
    exports.isSymbol = isSymbol;
    
    function isUndefined(arg) {
      return arg === void 0;
    }
    exports.isUndefined = isUndefined;
    
    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }
    exports.isRegExp = isRegExp;
    
    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }
    exports.isObject = isObject;
    
    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }
    exports.isDate = isDate;
    
    function isError(e) {
      return isObject(e) &&
          (objectToString(e) === '[object Error]' || e instanceof Error);
    }
    exports.isError = isError;
    
    function isFunction(arg) {
      return typeof arg === 'function';
    }
    exports.isFunction = isFunction;
    
    function isPrimitive(arg) {
      return arg === null ||
             typeof arg === 'boolean' ||
             typeof arg === 'number' ||
             typeof arg === 'string' ||
             typeof arg === 'symbol' ||  // ES6 symbol
             typeof arg === 'undefined';
    }
    exports.isPrimitive = isPrimitive;
    
    exports.isBuffer = require('./support/isBuffer');
    
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
    
    
    function pad(n) {
      return n < 10 ? '0' + n.toString(10) : n.toString(10);
    }
    
    
    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                  'Oct', 'Nov', 'Dec'];
    
    // 26 Feb 16:19:34
    function timestamp() {
      var d = new Date();
      var time = [pad(d.getHours()),
                  pad(d.getMinutes()),
                  pad(d.getSeconds())].join(':');
      return [d.getDate(), months[d.getMonth()], time].join(' ');
    }
    
    
    // log is just a thin wrapper to console.log that prepends a timestamp
    exports.log = function() {
      console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
    };
    
    
    /**
     * Inherit the prototype methods from one constructor into another.
     *
     * The Function.prototype.inherits from lang.js rewritten as a standalone
     * function (not on Function.prototype). NOTE: If this file is to be loaded
     * during bootstrapping this function needs to be rewritten using some native
     * functions as prototype setup using normal JavaScript does not work as
     * expected during bootstrapping (see mirror.js in r114903).
     *
     * @param {function} ctor Constructor function which needs to inherit the
     *     prototype.
     * @param {function} superCtor Constructor function to inherit prototype from.
     */
    exports.inherits = require('inherits');
    
    exports._extend = function(origin, add) {
      // Don't do anything if add isn't an object
      if (!add || !isObject(add)) return origin;
    
      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    };
    
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    
    }).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"./support/isBuffer":252,"_process":388,"inherits":251}],254:[function(require,module,exports){
    'use strict'
    
    exports.byteLength = byteLength
    exports.toByteArray = toByteArray
    exports.fromByteArray = fromByteArray
    
    var lookup = []
    var revLookup = []
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
    
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i]
      revLookup[code.charCodeAt(i)] = i
    }
    
    // Support decoding URL-safe base64 strings, as Node.js does.
    // See: https://en.wikipedia.org/wiki/Base64#URL_applications
    revLookup['-'.charCodeAt(0)] = 62
    revLookup['_'.charCodeAt(0)] = 63
    
    function getLens (b64) {
      var len = b64.length
    
      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }
    
      // Trim off extra bytes after placeholder bytes are found
      // See: https://github.com/beatgammit/base64-js/issues/42
      var validLen = b64.indexOf('=')
      if (validLen === -1) validLen = len
    
      var placeHoldersLen = validLen === len
        ? 0
        : 4 - (validLen % 4)
    
      return [validLen, placeHoldersLen]
    }
    
    // base64 is 4/3 + up to two characters of the original data
    function byteLength (b64) {
      var lens = getLens(b64)
      var validLen = lens[0]
      var placeHoldersLen = lens[1]
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }
    
    function _byteLength (b64, validLen, placeHoldersLen) {
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }
    
    function toByteArray (b64) {
      var tmp
      var lens = getLens(b64)
      var validLen = lens[0]
      var placeHoldersLen = lens[1]
    
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))
    
      var curByte = 0
    
      // if there are placeholders, only get up to the last complete 4 chars
      var len = placeHoldersLen > 0
        ? validLen - 4
        : validLen
    
      var i
      for (i = 0; i < len; i += 4) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 18) |
          (revLookup[b64.charCodeAt(i + 1)] << 12) |
          (revLookup[b64.charCodeAt(i + 2)] << 6) |
          revLookup[b64.charCodeAt(i + 3)]
        arr[curByte++] = (tmp >> 16) & 0xFF
        arr[curByte++] = (tmp >> 8) & 0xFF
        arr[curByte++] = tmp & 0xFF
      }
    
      if (placeHoldersLen === 2) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 2) |
          (revLookup[b64.charCodeAt(i + 1)] >> 4)
        arr[curByte++] = tmp & 0xFF
      }
    
      if (placeHoldersLen === 1) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 10) |
          (revLookup[b64.charCodeAt(i + 1)] << 4) |
          (revLookup[b64.charCodeAt(i + 2)] >> 2)
        arr[curByte++] = (tmp >> 8) & 0xFF
        arr[curByte++] = tmp & 0xFF
      }
    
      return arr
    }
    
    function tripletToBase64 (num) {
      return lookup[num >> 18 & 0x3F] +
        lookup[num >> 12 & 0x3F] +
        lookup[num >> 6 & 0x3F] +
        lookup[num & 0x3F]
    }
    
    function encodeChunk (uint8, start, end) {
      var tmp
      var output = []
      for (var i = start; i < end; i += 3) {
        tmp =
          ((uint8[i] << 16) & 0xFF0000) +
          ((uint8[i + 1] << 8) & 0xFF00) +
          (uint8[i + 2] & 0xFF)
        output.push(tripletToBase64(tmp))
      }
      return output.join('')
    }
    
    function fromByteArray (uint8) {
      var tmp
      var len = uint8.length
      var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
      var parts = []
      var maxChunkLength = 16383 // must be multiple of 3
    
      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
      }
    
      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1]
        parts.push(
          lookup[tmp >> 2] +
          lookup[(tmp << 4) & 0x3F] +
          '=='
        )
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1]
        parts.push(
          lookup[tmp >> 10] +
          lookup[(tmp >> 4) & 0x3F] +
          lookup[(tmp << 2) & 0x3F] +
          '='
        )
      }
    
      return parts.join('')
    }
    
    },{}],255:[function(require,module,exports){
    arguments[4][215][0].apply(exports,arguments)
    },{"buffer":257,"dup":215}],256:[function(require,module,exports){
    arguments[4][124][0].apply(exports,arguments)
    },{"crypto":257,"dup":124}],257:[function(require,module,exports){
    
    },{}],258:[function(require,module,exports){
    // based on the aes implimentation in triple sec
    // https://github.com/keybase/triplesec
    // which is in turn based on the one from crypto-js
    // https://code.google.com/p/crypto-js/
    
    var Buffer = require('safe-buffer').Buffer
    
    function asUInt32Array (buf) {
      if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)
    
      var len = (buf.length / 4) | 0
      var out = new Array(len)
    
      for (var i = 0; i < len; i++) {
        out[i] = buf.readUInt32BE(i * 4)
      }
    
      return out
    }
    
    function scrubVec (v) {
      for (var i = 0; i < v.length; v++) {
        v[i] = 0
      }
    }
    
    function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
      var SUB_MIX0 = SUB_MIX[0]
      var SUB_MIX1 = SUB_MIX[1]
      var SUB_MIX2 = SUB_MIX[2]
      var SUB_MIX3 = SUB_MIX[3]
    
      var s0 = M[0] ^ keySchedule[0]
      var s1 = M[1] ^ keySchedule[1]
      var s2 = M[2] ^ keySchedule[2]
      var s3 = M[3] ^ keySchedule[3]
      var t0, t1, t2, t3
      var ksRow = 4
    
      for (var round = 1; round < nRounds; round++) {
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
        s0 = t0
        s1 = t1
        s2 = t2
        s3 = t3
      }
    
      t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
      t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
      t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
      t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
      t0 = t0 >>> 0
      t1 = t1 >>> 0
      t2 = t2 >>> 0
      t3 = t3 >>> 0
    
      return [t0, t1, t2, t3]
    }
    
    // AES constants
    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
    var G = (function () {
      // Compute double table
      var d = new Array(256)
      for (var j = 0; j < 256; j++) {
        if (j < 128) {
          d[j] = j << 1
        } else {
          d[j] = (j << 1) ^ 0x11b
        }
      }
    
      var SBOX = []
      var INV_SBOX = []
      var SUB_MIX = [[], [], [], []]
      var INV_SUB_MIX = [[], [], [], []]
    
      // Walk GF(2^8)
      var x = 0
      var xi = 0
      for (var i = 0; i < 256; ++i) {
        // Compute sbox
        var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
        sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
        SBOX[x] = sx
        INV_SBOX[sx] = x
    
        // Compute multiplication
        var x2 = d[x]
        var x4 = d[x2]
        var x8 = d[x4]
    
        // Compute sub bytes, mix columns tables
        var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
        SUB_MIX[0][x] = (t << 24) | (t >>> 8)
        SUB_MIX[1][x] = (t << 16) | (t >>> 16)
        SUB_MIX[2][x] = (t << 8) | (t >>> 24)
        SUB_MIX[3][x] = t
    
        // Compute inv sub bytes, inv mix columns tables
        t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
        INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
        INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
        INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
        INV_SUB_MIX[3][sx] = t
    
        if (x === 0) {
          x = xi = 1
        } else {
          x = x2 ^ d[d[d[x8 ^ x2]]]
          xi ^= d[d[xi]]
        }
      }
    
      return {
        SBOX: SBOX,
        INV_SBOX: INV_SBOX,
        SUB_MIX: SUB_MIX,
        INV_SUB_MIX: INV_SUB_MIX
      }
    })()
    
    function AES (key) {
      this._key = asUInt32Array(key)
      this._reset()
    }
    
    AES.blockSize = 4 * 4
    AES.keySize = 256 / 8
    AES.prototype.blockSize = AES.blockSize
    AES.prototype.keySize = AES.keySize
    AES.prototype._reset = function () {
      var keyWords = this._key
      var keySize = keyWords.length
      var nRounds = keySize + 6
      var ksRows = (nRounds + 1) * 4
    
      var keySchedule = []
      for (var k = 0; k < keySize; k++) {
        keySchedule[k] = keyWords[k]
      }
    
      for (k = keySize; k < ksRows; k++) {
        var t = keySchedule[k - 1]
    
        if (k % keySize === 0) {
          t = (t << 8) | (t >>> 24)
          t =
            (G.SBOX[t >>> 24] << 24) |
            (G.SBOX[(t >>> 16) & 0xff] << 16) |
            (G.SBOX[(t >>> 8) & 0xff] << 8) |
            (G.SBOX[t & 0xff])
    
          t ^= RCON[(k / keySize) | 0] << 24
        } else if (keySize > 6 && k % keySize === 4) {
          t =
            (G.SBOX[t >>> 24] << 24) |
            (G.SBOX[(t >>> 16) & 0xff] << 16) |
            (G.SBOX[(t >>> 8) & 0xff] << 8) |
            (G.SBOX[t & 0xff])
        }
    
        keySchedule[k] = keySchedule[k - keySize] ^ t
      }
    
      var invKeySchedule = []
      for (var ik = 0; ik < ksRows; ik++) {
        var ksR = ksRows - ik
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]
    
        if (ik < 4 || ksR <= 4) {
          invKeySchedule[ik] = tt
        } else {
          invKeySchedule[ik] =
            G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
            G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
            G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
            G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
        }
      }
    
      this._nRounds = nRounds
      this._keySchedule = keySchedule
      this._invKeySchedule = invKeySchedule
    }
    
    AES.prototype.encryptBlockRaw = function (M) {
      M = asUInt32Array(M)
      return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
    }
    
    AES.prototype.encryptBlock = function (M) {
      var out = this.encryptBlockRaw(M)
      var buf = Buffer.allocUnsafe(16)
      buf.writeUInt32BE(out[0], 0)
      buf.writeUInt32BE(out[1], 4)
      buf.writeUInt32BE(out[2], 8)
      buf.writeUInt32BE(out[3], 12)
      return buf
    }
    
    AES.prototype.decryptBlock = function (M) {
      M = asUInt32Array(M)
    
      // swap
      var m1 = M[1]
      M[1] = M[3]
      M[3] = m1
    
      var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
      var buf = Buffer.allocUnsafe(16)
      buf.writeUInt32BE(out[0], 0)
      buf.writeUInt32BE(out[3], 4)
      buf.writeUInt32BE(out[2], 8)
      buf.writeUInt32BE(out[1], 12)
      return buf
    }
    
    AES.prototype.scrub = function () {
      scrubVec(this._keySchedule)
      scrubVec(this._invKeySchedule)
      scrubVec(this._key)
    }
    
    module.exports.AES = AES
    
    },{"safe-buffer":399}],259:[function(require,module,exports){
    var aes = require('./aes')
    var Buffer = require('safe-buffer').Buffer
    var Transform = require('cipher-base')
    var inherits = require('inherits')
    var GHASH = require('./ghash')
    var xor = require('buffer-xor')
    var incr32 = require('./incr32')
    
    function xorTest (a, b) {
      var out = 0
      if (a.length !== b.length) out++
    
      var len = Math.min(a.length, b.length)
      for (var i = 0; i < len; ++i) {
        out += (a[i] ^ b[i])
      }
    
      return out
    }
    
    function calcIv (self, iv, ck) {
      if (iv.length === 12) {
        self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
        return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
      }
      var ghash = new GHASH(ck)
      var len = iv.length
      var toPad = len % 16
      ghash.update(iv)
      if (toPad) {
        toPad = 16 - toPad
        ghash.update(Buffer.alloc(toPad, 0))
      }
      ghash.update(Buffer.alloc(8, 0))
      var ivBits = len * 8
      var tail = Buffer.alloc(8)
      tail.writeUIntBE(ivBits, 0, 8)
      ghash.update(tail)
      self._finID = ghash.state
      var out = Buffer.from(self._finID)
      incr32(out)
      return out
    }
    function StreamCipher (mode, key, iv, decrypt) {
      Transform.call(this)
    
      var h = Buffer.alloc(4, 0)
    
      this._cipher = new aes.AES(key)
      var ck = this._cipher.encryptBlock(h)
      this._ghash = new GHASH(ck)
      iv = calcIv(this, iv, ck)
    
      this._prev = Buffer.from(iv)
      this._cache = Buffer.allocUnsafe(0)
      this._secCache = Buffer.allocUnsafe(0)
      this._decrypt = decrypt
      this._alen = 0
      this._len = 0
      this._mode = mode
    
      this._authTag = null
      this._called = false
    }
    
    inherits(StreamCipher, Transform)
    
    StreamCipher.prototype._update = function (chunk) {
      if (!this._called && this._alen) {
        var rump = 16 - (this._alen % 16)
        if (rump < 16) {
          rump = Buffer.alloc(rump, 0)
          this._ghash.update(rump)
        }
      }
    
      this._called = true
      var out = this._mode.encrypt(this, chunk)
      if (this._decrypt) {
        this._ghash.update(chunk)
      } else {
        this._ghash.update(out)
      }
      this._len += chunk.length
      return out
    }
    
    StreamCipher.prototype._final = function () {
      if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')
    
      var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
      if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')
    
      this._authTag = tag
      this._cipher.scrub()
    }
    
    StreamCipher.prototype.getAuthTag = function getAuthTag () {
      if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')
    
      return this._authTag
    }
    
    StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
      if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')
    
      this._authTag = tag
    }
    
    StreamCipher.prototype.setAAD = function setAAD (buf) {
      if (this._called) throw new Error('Attempting to set AAD in unsupported state')
    
      this._ghash.update(buf)
      this._alen += buf.length
    }
    
    module.exports = StreamCipher
    
    },{"./aes":258,"./ghash":263,"./incr32":264,"buffer-xor":300,"cipher-base":302,"inherits":370,"safe-buffer":399}],260:[function(require,module,exports){
    var ciphers = require('./encrypter')
    var deciphers = require('./decrypter')
    var modes = require('./modes/list.json')
    
    function getCiphers () {
      return Object.keys(modes)
    }
    
    exports.createCipher = exports.Cipher = ciphers.createCipher
    exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
    exports.createDecipher = exports.Decipher = deciphers.createDecipher
    exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
    exports.listCiphers = exports.getCiphers = getCiphers
    
    },{"./decrypter":261,"./encrypter":262,"./modes/list.json":272}],261:[function(require,module,exports){
    var AuthCipher = require('./authCipher')
    var Buffer = require('safe-buffer').Buffer
    var MODES = require('./modes')
    var StreamCipher = require('./streamCipher')
    var Transform = require('cipher-base')
    var aes = require('./aes')
    var ebtk = require('evp_bytestokey')
    var inherits = require('inherits')
    
    function Decipher (mode, key, iv) {
      Transform.call(this)
    
      this._cache = new Splitter()
      this._last = void 0
      this._cipher = new aes.AES(key)
      this._prev = Buffer.from(iv)
      this._mode = mode
      this._autopadding = true
    }
    
    inherits(Decipher, Transform)
    
    Decipher.prototype._update = function (data) {
      this._cache.add(data)
      var chunk
      var thing
      var out = []
      while ((chunk = this._cache.get(this._autopadding))) {
        thing = this._mode.decrypt(this, chunk)
        out.push(thing)
      }
      return Buffer.concat(out)
    }
    
    Decipher.prototype._final = function () {
      var chunk = this._cache.flush()
      if (this._autopadding) {
        return unpad(this._mode.decrypt(this, chunk))
      } else if (chunk) {
        throw new Error('data not multiple of block length')
      }
    }
    
    Decipher.prototype.setAutoPadding = function (setTo) {
      this._autopadding = !!setTo
      return this
    }
    
    function Splitter () {
      this.cache = Buffer.allocUnsafe(0)
    }
    
    Splitter.prototype.add = function (data) {
      this.cache = Buffer.concat([this.cache, data])
    }
    
    Splitter.prototype.get = function (autoPadding) {
      var out
      if (autoPadding) {
        if (this.cache.length > 16) {
          out = this.cache.slice(0, 16)
          this.cache = this.cache.slice(16)
          return out
        }
      } else {
        if (this.cache.length >= 16) {
          out = this.cache.slice(0, 16)
          this.cache = this.cache.slice(16)
          return out
        }
      }
    
      return null
    }
    
    Splitter.prototype.flush = function () {
      if (this.cache.length) return this.cache
    }
    
    function unpad (last) {
      var padded = last[15]
      if (padded < 1 || padded > 16) {
        throw new Error('unable to decrypt data')
      }
      var i = -1
      while (++i < padded) {
        if (last[(i + (16 - padded))] !== padded) {
          throw new Error('unable to decrypt data')
        }
      }
      if (padded === 16) return
    
      return last.slice(0, 16 - padded)
    }
    
    function createDecipheriv (suite, password, iv) {
      var config = MODES[suite.toLowerCase()]
      if (!config) throw new TypeError('invalid suite type')
    
      if (typeof iv === 'string') iv = Buffer.from(iv)
      if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)
    
      if (typeof password === 'string') password = Buffer.from(password)
      if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)
    
      if (config.type === 'stream') {
        return new StreamCipher(config.module, password, iv, true)
      } else if (config.type === 'auth') {
        return new AuthCipher(config.module, password, iv, true)
      }
    
      return new Decipher(config.module, password, iv)
    }
    
    function createDecipher (suite, password) {
      var config = MODES[suite.toLowerCase()]
      if (!config) throw new TypeError('invalid suite type')
    
      var keys = ebtk(password, false, config.key, config.iv)
      return createDecipheriv(suite, keys.key, keys.iv)
    }
    
    exports.createDecipher = createDecipher
    exports.createDecipheriv = createDecipheriv
    
    },{"./aes":258,"./authCipher":259,"./modes":271,"./streamCipher":274,"cipher-base":302,"evp_bytestokey":339,"inherits":370,"safe-buffer":399}],262:[function(require,module,exports){
    var MODES = require('./modes')
    var AuthCipher = require('./authCipher')
    var Buffer = require('safe-buffer').Buffer
    var StreamCipher = require('./streamCipher')
    var Transform = require('cipher-base')
    var aes = require('./aes')
    var ebtk = require('evp_bytestokey')
    var inherits = require('inherits')
    
    function Cipher (mode, key, iv) {
      Transform.call(this)
    
      this._cache = new Splitter()
      this._cipher = new aes.AES(key)
      this._prev = Buffer.from(iv)
      this._mode = mode
      this._autopadding = true
    }
    
    inherits(Cipher, Transform)
    
    Cipher.prototype._update = function (data) {
      this._cache.add(data)
      var chunk
      var thing
      var out = []
    
      while ((chunk = this._cache.get())) {
        thing = this._mode.encrypt(this, chunk)
        out.push(thing)
      }
    
      return Buffer.concat(out)
    }
    
    var PADDING = Buffer.alloc(16, 0x10)
    
    Cipher.prototype._final = function () {
      var chunk = this._cache.flush()
      if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk)
        this._cipher.scrub()
        return chunk
      }
    
      if (!chunk.equals(PADDING)) {
        this._cipher.scrub()
        throw new Error('data not multiple of block length')
      }
    }
    
    Cipher.prototype.setAutoPadding = function (setTo) {
      this._autopadding = !!setTo
      return this
    }
    
    function Splitter () {
      this.cache = Buffer.allocUnsafe(0)
    }
    
    Splitter.prototype.add = function (data) {
      this.cache = Buffer.concat([this.cache, data])
    }
    
    Splitter.prototype.get = function () {
      if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16)
        this.cache = this.cache.slice(16)
        return out
      }
      return null
    }
    
    Splitter.prototype.flush = function () {
      var len = 16 - this.cache.length
      var padBuff = Buffer.allocUnsafe(len)
    
      var i = -1
      while (++i < len) {
        padBuff.writeUInt8(len, i)
      }
    
      return Buffer.concat([this.cache, padBuff])
    }
    
    function createCipheriv (suite, password, iv) {
      var config = MODES[suite.toLowerCase()]
      if (!config) throw new TypeError('invalid suite type')
    
      if (typeof password === 'string') password = Buffer.from(password)
      if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)
    
      if (typeof iv === 'string') iv = Buffer.from(iv)
      if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)
    
      if (config.type === 'stream') {
        return new StreamCipher(config.module, password, iv)
      } else if (config.type === 'auth') {
        return new AuthCipher(config.module, password, iv)
      }
    
      return new Cipher(config.module, password, iv)
    }
    
    function createCipher (suite, password) {
      var config = MODES[suite.toLowerCase()]
      if (!config) throw new TypeError('invalid suite type')
    
      var keys = ebtk(password, false, config.key, config.iv)
      return createCipheriv(suite, keys.key, keys.iv)
    }
    
    exports.createCipheriv = createCipheriv
    exports.createCipher = createCipher
    
    },{"./aes":258,"./authCipher":259,"./modes":271,"./streamCipher":274,"cipher-base":302,"evp_bytestokey":339,"inherits":370,"safe-buffer":399}],263:[function(require,module,exports){
    var Buffer = require('safe-buffer').Buffer
    var ZEROES = Buffer.alloc(16, 0)
    
    function toArray (buf) {
      return [
        buf.readUInt32BE(0),
        buf.readUInt32BE(4),
        buf.readUInt32BE(8),
        buf.readUInt32BE(12)
      ]
    }
    
    function fromArray (out) {
      var buf = Buffer.allocUnsafe(16)
      buf.writeUInt32BE(out[0] >>> 0, 0)
      buf.writeUInt32BE(out[1] >>> 0, 4)
      buf.writeUInt32BE(out[2] >>> 0, 8)
      buf.writeUInt32BE(out[3] >>> 0, 12)
      return buf
    }
    
    function GHASH (key) {
      this.h = key
      this.state = Buffer.alloc(16, 0)
      this.cache = Buffer.allocUnsafe(0)
    }
    
    // from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
    // by Juho Vähä-Herttua
    GHASH.prototype.ghash = function (block) {
      var i = -1
      while (++i < block.length) {
        this.state[i] ^= block[i]
      }
      this._multiply()
    }
    
    GHASH.prototype._multiply = function () {
      var Vi = toArray(this.h)
      var Zi = [0, 0, 0, 0]
      var j, xi, lsbVi
      var i = -1
      while (++i < 128) {
        xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
        if (xi) {
          // Z_i+1 = Z_i ^ V_i
          Zi[0] ^= Vi[0]
          Zi[1] ^= Vi[1]
          Zi[2] ^= Vi[2]
          Zi[3] ^= Vi[3]
        }
    
        // Store the value of LSB(V_i)
        lsbVi = (Vi[3] & 1) !== 0
    
        // V_i+1 = V_i >> 1
        for (j = 3; j > 0; j--) {
          Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
        }
        Vi[0] = Vi[0] >>> 1
    
        // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
        if (lsbVi) {
          Vi[0] = Vi[0] ^ (0xe1 << 24)
        }
      }
      this.state = fromArray(Zi)
    }
    
    GHASH.prototype.update = function (buf) {
      this.cache = Buffer.concat([this.cache, buf])
      var chunk
      while (this.cache.length >= 16) {
        chunk = this.cache.slice(0, 16)
        this.cache = this.cache.slice(16)
        this.ghash(chunk)
      }
    }
    
    GHASH.prototype.final = function (abl, bl) {
      if (this.cache.length) {
        this.ghash(Buffer.concat([this.cache, ZEROES], 16))
      }
    
      this.ghash(fromArray([0, abl, 0, bl]))
      return this.state
    }
    
    module.exports = GHASH
    
    },{"safe-buffer":399}],264:[function(require,module,exports){
    function incr32 (iv) {
      var len = iv.length
      var item
      while (len--) {
        item = iv.readUInt8(len)
        if (item === 255) {
          iv.writeUInt8(0, len)
        } else {
          item++
          iv.writeUInt8(item, len)
          break
        }
      }
    }
    module.exports = incr32
    
    },{}],265:[function(require,module,exports){
    var xor = require('buffer-xor')
    
    exports.encrypt = function (self, block) {
      var data = xor(block, self._prev)
    
      self._prev = self._cipher.encryptBlock(data)
      return self._prev
    }
    
    exports.decrypt = function (self, block) {
      var pad = self._prev
    
      self._prev = block
      var out = self._cipher.decryptBlock(block)
    
      return xor(out, pad)
    }
    
    },{"buffer-xor":300}],266:[function(require,module,exports){
    var Buffer = require('safe-buffer').Buffer
    var xor = require('buffer-xor')
    
    function encryptStart (self, data, decrypt) {
      var len = data.length
      var out = xor(data, self._cache)
      self._cache = self._cache.slice(len)
      self._prev = Buffer.concat([self._prev, decrypt ? data : out])
      return out
    }
    
    exports.encrypt = function (self, data, decrypt) {
      var out = Buffer.allocUnsafe(0)
      var len
    
      while (data.length) {
        if (self._cache.length === 0) {
          self._cache = self._cipher.encryptBlock(self._prev)
          self._prev = Buffer.allocUnsafe(0)
        }
    
        if (self._cache.length <= data.length) {
          len = self._cache.length
          out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
          data = data.slice(len)
        } else {
          out = Buffer.concat([out, encryptStart(self, data, decrypt)])
          break
        }
      }
    
      return out
    }
    
    },{"buffer-xor":300,"safe-buffer":399}],267:[function(require,module,exports){
    var Buffer = require('safe-buffer').Buffer
    
    function encryptByte (self, byteParam, decrypt) {
      var pad
      var i = -1
      var len = 8
      var out = 0
      var bit, value
      while (++i < len) {
        pad = self._cipher.encryptBlock(self._prev)
        bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
        value = pad[0] ^ bit
        out += ((value & 0x80) >> (i % 8))
        self._prev = shiftIn(self._prev, decrypt ? bit : value)
      }
      return out
    }
    
    function shiftIn (buffer, value) {
      var len = buffer.length
      var i = -1
      var out = Buffer.allocUnsafe(buffer.length)
      buffer = Buffer.concat([buffer, Buffer.from([value])])
    
      while (++i < len) {
        out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
      }
    
      return out
    }
    
    exports.encrypt = function (self, chunk, decrypt) {
      var len = chunk.length
      var out = Buffer.allocUnsafe(len)
      var i = -1
    
      while (++i < len) {
        out[i] = encryptByte(self, chunk[i], decrypt)
      }
    
      return out
    }
    
    },{"safe-buffer":399}],268:[function(require,module,exports){
    var Buffer = require('safe-buffer').Buffer
    
    function encryptByte (self, byteParam, decrypt) {
      var pad = self._cipher.encryptBlock(self._prev)
      var out = pad[0] ^ byteParam
    
      self._prev = Buffer.concat([
        self._prev.slice(1),
        Buffer.from([decrypt ? byteParam : out])
      ])
    
      return out
    }
    
    exports.encrypt = function (self, chunk, decrypt) {
      var len = chunk.length
      var out = Buffer.allocUnsafe(len)
      var i = -1
    
      while (++i < len) {
        out[i] = encryptByte(self, chunk[i], decrypt)
      }
    
      return out
    }
    
    },{"safe-buffer":399}],269:[function(require,module,exports){
    var xor = require('buffer-xor')
    var Buffer = require('safe-buffer').Buffer
    var incr32 = require('../incr32')
    
    function getBlock (self) {
      var out = self._cipher.encryptBlockRaw(self._prev)
      incr32(self._prev)
      return out
    }
    
    var blockSize = 16
    exports.encrypt = function (self, chunk) {
      var chunkNum = Math.ceil(chunk.length / blockSize)
      var start = self._cache.length
      self._cache = Buffer.concat([
        self._cache,
        Buffer.allocUnsafe(chunkNum * blockSize)
      ])
      for (var i = 0; i < chunkNum; i++) {
        var out = getBlock(self)
        var offset = start + i * blockSize
        self._cache.writeUInt32BE(out[0], offset + 0)
        self._cache.writeUInt32BE(out[1], offset + 4)
        self._cache.writeUInt32BE(out[2], offset + 8)
        self._cache.writeUInt32BE(out[3], offset + 12)
      }
      var pad = self._cache.slice(0, chunk.length)
      self._cache = self._cache.slice(chunk.length)
      return xor(chunk, pad)
    }
    
    },{"../incr32":264,"buffer-xor":300,"safe-buffer":399}],270:[function(require,module,exports){
    exports.encrypt = function (self, block) {
      return self._cipher.encryptBlock(block)
    }
    
    exports.decrypt = function (self, block) {
      return self._cipher.decryptBlock(block)
    }
    
    },{}],271:[function(require,module,exports){
    var modeModules = {
      ECB: require('./ecb'),
      CBC: require('./cbc'),
      CFB: require('./cfb'),
      CFB8: require('./cfb8'),
      CFB1: require('./cfb1'),
      OFB: require('./ofb'),
      CTR: require('./ctr'),
      GCM: require('./ctr')
    }
    
    var modes = require('./list.json')
    
    for (var key in modes) {
      modes[key].module = modeModules[modes[key].mode]
    }
    
    module.exports = modes
    
    },{"./cbc":265,"./cfb":266,"./cfb1":267,"./cfb8":268,"./ctr":269,"./ecb":270,"./list.json":272,"./ofb":273}],272:[function(require,module,exports){
    module.exports={
      "aes-128-ecb": {
        "cipher": "AES",
        "key": 128,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-192-ecb": {
        "cipher": "AES",
        "key": 192,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-256-ecb": {
        "cipher": "AES",
        "key": 256,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-128-cbc": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-192-cbc": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-256-cbc": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes128": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes192": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes256": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-128-cfb": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-192-cfb": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-256-cfb": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-128-cfb8": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-192-cfb8": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-256-cfb8": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-128-cfb1": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-192-cfb1": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-256-cfb1": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-128-ofb": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-192-ofb": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-256-ofb": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-128-ctr": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-192-ctr": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-256-ctr": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-128-gcm": {
        "cipher": "AES",
        "key": 128,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      },
      "aes-192-gcm": {
        "cipher": "AES",
        "key": 192,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      },
      "aes-256-gcm": {
        "cipher": "AES",
        "key": 256,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      }
    }
    
    },{}],273:[function(require,module,exports){
    (function (Buffer){(function (){
    var xor = require('buffer-xor')
    
    function getBlock (self) {
      self._prev = self._cipher.encryptBlock(self._prev)
      return self._prev
    }
    
    exports.encrypt = function (self, chunk) {
      while (self._cache.length < chunk.length) {
        self._cache = Buffer.concat([self._cache, getBlock(self)])
      }
    
      var pad = self._cache.slice(0, chunk.length)
      self._cache = self._cache.slice(chunk.length)
      return xor(chunk, pad)
    }
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"buffer":301,"buffer-xor":300}],274:[function(require,module,exports){
    var aes = require('./aes')
    var Buffer = require('safe-buffer').Buffer
    var Transform = require('cipher-base')
    var inherits = require('inherits')
    
    function StreamCipher (mode, key, iv, decrypt) {
      Transform.call(this)
    
      this._cipher = new aes.AES(key)
      this._prev = Buffer.from(iv)
      this._cache = Buffer.allocUnsafe(0)
      this._secCache = Buffer.allocUnsafe(0)
      this._decrypt = decrypt
      this._mode = mode
    }
    
    inherits(StreamCipher, Transform)
    
    StreamCipher.prototype._update = function (chunk) {
      return this._mode.encrypt(this, chunk, this._decrypt)
    }
    
    StreamCipher.prototype._final = function () {
      this._cipher.scrub()
    }
    
    module.exports = StreamCipher
    
    },{"./aes":258,"cipher-base":302,"inherits":370,"safe-buffer":399}],275:[function(require,module,exports){
    var DES = require('browserify-des')
    var aes = require('browserify-aes/browser')
    var aesModes = require('browserify-aes/modes')
    var desModes = require('browserify-des/modes')
    var ebtk = require('evp_bytestokey')
    
    function createCipher (suite, password) {
      suite = suite.toLowerCase()
    
      var keyLen, ivLen
      if (aesModes[suite]) {
        keyLen = aesModes[suite].key
        ivLen = aesModes[suite].iv
      } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8
        ivLen = desModes[suite].iv
      } else {
        throw new TypeError('invalid suite type')
      }
    
      var keys = ebtk(password, false, keyLen, ivLen)
      return createCipheriv(suite, keys.key, keys.iv)
    }
    
    function createDecipher (suite, password) {
      suite = suite.toLowerCase()
    
      var keyLen, ivLen
      if (aesModes[suite]) {
        keyLen = aesModes[suite].key
        ivLen = aesModes[suite].iv
      } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8
        ivLen = desModes[suite].iv
      } else {
        throw new TypeError('invalid suite type')
      }
    
      var keys = ebtk(password, false, keyLen, ivLen)
      return createDecipheriv(suite, keys.key, keys.iv)
    }
    
    function createCipheriv (suite, key, iv) {
      suite = suite.toLowerCase()
      if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
      if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })
    
      throw new TypeError('invalid suite type')
    }
    
    function createDecipheriv (suite, key, iv) {
      suite = suite.toLowerCase()
      if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
      if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })
    
      throw new TypeError('invalid suite type')
    }
    
    function getCiphers () {
      return Object.keys(desModes).concat(aes.getCiphers())
    }
    
    exports.createCipher = exports.Cipher = createCipher
    exports.createCipheriv = exports.Cipheriv = createCipheriv
    exports.createDecipher = exports.Decipher = createDecipher
    exports.createDecipheriv = exports.Decipheriv = createDecipheriv
    exports.listCiphers = exports.getCiphers = getCiphers
    
    },{"browserify-aes/browser":260,"browserify-aes/modes":271,"browserify-des":276,"browserify-des/modes":277,"evp_bytestokey":339}],276:[function(require,module,exports){
    var CipherBase = require('cipher-base')
    var des = require('des.js')
    var inherits = require('inherits')
    var Buffer = require('safe-buffer').Buffer
    
    var modes = {
      'des-ede3-cbc': des.CBC.instantiate(des.EDE),
      'des-ede3': des.EDE,
      'des-ede-cbc': des.CBC.instantiate(des.EDE),
      'des-ede': des.EDE,
      'des-cbc': des.CBC.instantiate(des.DES),
      'des-ecb': des.DES
    }
    modes.des = modes['des-cbc']
    modes.des3 = modes['des-ede3-cbc']
    module.exports = DES
    inherits(DES, CipherBase)
    function DES (opts) {
      CipherBase.call(this)
      var modeName = opts.mode.toLowerCase()
      var mode = modes[modeName]
      var type
      if (opts.decrypt) {
        type = 'decrypt'
      } else {
        type = 'encrypt'
      }
      var key = opts.key
      if (!Buffer.isBuffer(key)) {
        key = Buffer.from(key)
      }
      if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
        key = Buffer.concat([key, key.slice(0, 8)])
      }
      var iv = opts.iv
      if (!Buffer.isBuffer(iv)) {
        iv = Buffer.from(iv)
      }
      this._des = mode.create({
        key: key,
        iv: iv,
        type: type
      })
    }
    DES.prototype._update = function (data) {
      return Buffer.from(this._des.update(data))
    }
    DES.prototype._final = function () {
      return Buffer.from(this._des.final())
    }
    
    },{"cipher-base":302,"des.js":310,"inherits":370,"safe-buffer":399}],277:[function(require,module,exports){
    exports['des-ecb'] = {
      key: 8,
      iv: 0
    }
    exports['des-cbc'] = exports.des = {
      key: 8,
      iv: 8
    }
    exports['des-ede3-cbc'] = exports.des3 = {
      key: 24,
      iv: 8
    }
    exports['des-ede3'] = {
      key: 24,
      iv: 0
    }
    exports['des-ede-cbc'] = {
      key: 16,
      iv: 8
    }
    exports['des-ede'] = {
      key: 16,
      iv: 0
    }
    
    },{}],278:[function(require,module,exports){
    (function (Buffer){(function (){
    var BN = require('bn.js')
    var randomBytes = require('randombytes')
    
    function blind (priv) {
      var r = getr(priv)
      var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed()
      return { blinder: blinder, unblinder: r.invm(priv.modulus) }
    }
    
    function getr (priv) {
      var len = priv.modulus.byteLength()
      var r
      do {
        r = new BN(randomBytes(len))
      } while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2))
      return r
    }
    
    function crt (msg, priv) {
      var blinds = blind(priv)
      var len = priv.modulus.byteLength()
      var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus)
      var c1 = blinded.toRed(BN.mont(priv.prime1))
      var c2 = blinded.toRed(BN.mont(priv.prime2))
      var qinv = priv.coefficient
      var p = priv.prime1
      var q = priv.prime2
      var m1 = c1.redPow(priv.exponent1).fromRed()
      var m2 = c2.redPow(priv.exponent2).fromRed()
      var h = m1.isub(m2).imul(qinv).umod(p).imul(q)
      return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer, 'be', len)
    }
    crt.getr = getr
    
    module.exports = crt
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"bn.js":255,"buffer":301,"randombytes":396}],279:[function(require,module,exports){
    module.exports = require('./browser/algorithms.json')
    
    },{"./browser/algorithms.json":280}],280:[function(require,module,exports){
    module.exports={
      "sha224WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha224",
        "id": "302d300d06096086480165030402040500041c"
      },
      "RSA-SHA224": {
        "sign": "ecdsa/rsa",
        "hash": "sha224",
        "id": "302d300d06096086480165030402040500041c"
      },
      "sha256WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha256",
        "id": "3031300d060960864801650304020105000420"
      },
      "RSA-SHA256": {
        "sign": "ecdsa/rsa",
        "hash": "sha256",
        "id": "3031300d060960864801650304020105000420"
      },
      "sha384WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha384",
        "id": "3041300d060960864801650304020205000430"
      },
      "RSA-SHA384": {
        "sign": "ecdsa/rsa",
        "hash": "sha384",
        "id": "3041300d060960864801650304020205000430"
      },
      "sha512WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha512",
        "id": "3051300d060960864801650304020305000440"
      },
      "RSA-SHA512": {
        "sign": "ecdsa/rsa",
        "hash": "sha512",
        "id": "3051300d060960864801650304020305000440"
      },
      "RSA-SHA1": {
        "sign": "rsa",
        "hash": "sha1",
        "id": "3021300906052b0e03021a05000414"
      },
      "ecdsa-with-SHA1": {
        "sign": "ecdsa",
        "hash": "sha1",
        "id": ""
      },
      "sha256": {
        "sign": "ecdsa",
        "hash": "sha256",
        "id": ""
      },
      "sha224": {
        "sign": "ecdsa",
        "hash": "sha224",
        "id": ""
      },
      "sha384": {
        "sign": "ecdsa",
        "hash": "sha384",
        "id": ""
      },
      "sha512": {
        "sign": "ecdsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-SHA": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA-SHA1": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA-WITH-SHA224": {
        "sign": "dsa",
        "hash": "sha224",
        "id": ""
      },
      "DSA-SHA224": {
        "sign": "dsa",
        "hash": "sha224",
        "id": ""
      },
      "DSA-WITH-SHA256": {
        "sign": "dsa",
        "hash": "sha256",
        "id": ""
      },
      "DSA-SHA256": {
        "sign": "dsa",
        "hash": "sha256",
        "id": ""
      },
      "DSA-WITH-SHA384": {
        "sign": "dsa",
        "hash": "sha384",
        "id": ""
      },
      "DSA-SHA384": {
        "sign": "dsa",
        "hash": "sha384",
        "id": ""
      },
      "DSA-WITH-SHA512": {
        "sign": "dsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-SHA512": {
        "sign": "dsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-RIPEMD160": {
        "sign": "dsa",
        "hash": "rmd160",
        "id": ""
      },
      "ripemd160WithRSA": {
        "sign": "rsa",
        "hash": "rmd160",
        "id": "3021300906052b2403020105000414"
      },
      "RSA-RIPEMD160": {
        "sign": "rsa",
        "hash": "rmd160",
        "id": "3021300906052b2403020105000414"
      },
      "md5WithRSAEncryption": {
        "sign": "rsa",
        "hash": "md5",
        "id": "3020300c06082a864886f70d020505000410"
      },
      "RSA-MD5": {
        "sign": "rsa",
        "hash": "md5",
        "id": "3020300c06082a864886f70d020505000410"
      }
    }
    
    },{}],281:[function(require,module,exports){
    module.exports={
      "1.3.132.0.10": "secp256k1",
      "1.3.132.0.33": "p224",
      "1.2.840.10045.3.1.1": "p192",
      "1.2.840.10045.3.1.7": "p256",
      "1.3.132.0.34": "p384",
      "1.3.132.0.35": "p521"
    }
    
    },{}],282:[function(require,module,exports){
    var Buffer = require('safe-buffer').Buffer
    var createHash = require('create-hash')
    var stream = require('readable-stream')
    var inherits = require('inherits')
    var sign = require('./sign')
    var verify = require('./verify')
    
    var algorithms = require('./algorithms.json')
    Object.keys(algorithms).forEach(function (key) {
      algorithms[key].id = Buffer.from(algorithms[key].id, 'hex')
      algorithms[key.toLowerCase()] = algorithms[key]
    })
    
    function Sign (algorithm) {
      stream.Writable.call(this)
    
      var data = algorithms[algorithm]
      if (!data) throw new Error('Unknown message digest')
    
      this._hashType = data.hash
      this._hash = createHash(data.hash)
      this._tag = data.id
      this._signType = data.sign
    }
    inherits(Sign, stream.Writable)
    
    Sign.prototype._write = function _write (data, _, done) {
      this._hash.update(data)
      done()
    }
    
    Sign.prototype.update = function update (data, enc) {
      if (typeof data === 'string') data = Buffer.from(data, enc)
    
      this._hash.update(data)
      return this
    }
    
    Sign.prototype.sign = function signMethod (key, enc) {
      this.end()
      var hash = this._hash.digest()
      var sig = sign(hash, key, this._hashType, this._signType, this._tag)
    
      return enc ? sig.toString(enc) : sig
    }
    
    function Verify (algorithm) {
      stream.Writable.call(this)
    
      var data = algorithms[algorithm]
      if (!data) throw new Error('Unknown message digest')
    
      this._hash = createHash(data.hash)
      this._tag = data.id
      this._signType = data.sign
    }
    inherits(Verify, stream.Writable)
    
    Verify.prototype._write = function _write (data, _, done) {
      this._hash.update(data)
      done()
    }
    
    Verify.prototype.update = function update (data, enc) {
      if (typeof data === 'string') data = Buffer.from(data, enc)
    
      this._hash.update(data)
      return this
    }
    
    Verify.prototype.verify = function verifyMethod (key, sig, enc) {
      if (typeof sig === 'string') sig = Buffer.from(sig, enc)
    
      this.end()
      var hash = this._hash.digest()
      return verify(sig, hash, key, this._signType, this._tag)
    }
    
    function createSign (algorithm) {
      return new Sign(algorithm)
    }
    
    function createVerify (algorithm) {
      return new Verify(algorithm)
    }
    
    module.exports = {
      Sign: createSign,
      Verify: createVerify,
      createSign: createSign,
      createVerify: createVerify
    }
    
    },{"./algorithms.json":280,"./sign":283,"./verify":284,"create-hash":305,"inherits":370,"readable-stream":299,"safe-buffer":399}],283:[function(require,module,exports){
    // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
    var Buffer = require('safe-buffer').Buffer
    var createHmac = require('create-hmac')
    var crt = require('browserify-rsa')
    var EC = require('elliptic').ec
    var BN = require('bn.js')
    var parseKeys = require('parse-asn1')
    var curves = require('./curves.json')
    
    function sign (hash, key, hashType, signType, tag) {
      var priv = parseKeys(key)
      if (priv.curve) {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
        return ecSign(hash, priv)
      } else if (priv.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong private key type')
        return dsaSign(hash, priv, hashType)
      } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
      }
      hash = Buffer.concat([tag, hash])
      var len = priv.modulus.byteLength()
      var pad = [0, 1]
      while (hash.length + pad.length + 1 < len) pad.push(0xff)
      pad.push(0x00)
      var i = -1
      while (++i < hash.length) pad.push(hash[i])
    
      var out = crt(pad, priv)
      return out
    }
    
    function ecSign (hash, priv) {
      var curveId = curves[priv.curve.join('.')]
      if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))
    
      var curve = new EC(curveId)
      var key = curve.keyFromPrivate(priv.privateKey)
      var out = key.sign(hash)
    
      return Buffer.from(out.toDER())
    }
    
    function dsaSign (hash, priv, algo) {
      var x = priv.params.priv_key
      var p = priv.params.p
      var q = priv.params.q
      var g = priv.params.g
      var r = new BN(0)
      var k
      var H = bits2int(hash, q).mod(q)
      var s = false
      var kv = getKey(x, q, hash, algo)
      while (s === false) {
        k = makeKey(q, kv, algo)
        r = makeR(g, k, p, q)
        s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
        if (s.cmpn(0) === 0) {
          s = false
          r = new BN(0)
        }
      }
      return toDER(r, s)
    }
    
    function toDER (r, s) {
      r = r.toArray()
      s = s.toArray()
    
      // Pad values
      if (r[0] & 0x80) r = [0].concat(r)
      if (s[0] & 0x80) s = [0].concat(s)
    
      var total = r.length + s.length + 4
      var res = [0x30, total, 0x02, r.length]
      res = res.concat(r, [0x02, s.length], s)
      return Buffer.from(res)
    }
    
    function getKey (x, q, hash, algo) {
      x = Buffer.from(x.toArray())
      if (x.length < q.byteLength()) {
        var zeros = Buffer.alloc(q.byteLength() - x.length)
        x = Buffer.concat([zeros, x])
      }
      var hlen = hash.length
      var hbits = bits2octets(hash, q)
      var v = Buffer.alloc(hlen)
      v.fill(1)
      var k = Buffer.alloc(hlen)
      k = createHmac(algo, k).update(v).update(Buffer.from([0])).update(x).update(hbits).digest()
      v = createHmac(algo, k).update(v).digest()
      k = createHmac(algo, k).update(v).update(Buffer.from([1])).update(x).update(hbits).digest()
      v = createHmac(algo, k).update(v).digest()
      return { k: k, v: v }
    }
    
    function bits2int (obits, q) {
      var bits = new BN(obits)
      var shift = (obits.length << 3) - q.bitLength()
      if (shift > 0) bits.ishrn(shift)
      return bits
    }
    
    function bits2octets (bits, q) {
      bits = bits2int(bits, q)
      bits = bits.mod(q)
      var out = Buffer.from(bits.toArray())
      if (out.length < q.byteLength()) {
        var zeros = Buffer.alloc(q.byteLength() - out.length)
        out = Buffer.concat([zeros, out])
      }
      return out
    }
    
    function makeKey (q, kv, algo) {
      var t
      var k
    
      do {
        t = Buffer.alloc(0)
    
        while (t.length * 8 < q.bitLength()) {
          kv.v = createHmac(algo, kv.k).update(kv.v).digest()
          t = Buffer.concat([t, kv.v])
        }
    
        k = bits2int(t, q)
        kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([0])).digest()
        kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      } while (k.cmp(q) !== -1)
    
      return k
    }
    
    function makeR (g, k, p, q) {
      return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
    }
    
    module.exports = sign
    module.exports.getKey = getKey
    module.exports.makeKey = makeKey
    
    },{"./curves.json":281,"bn.js":255,"browserify-rsa":278,"create-hmac":307,"elliptic":321,"parse-asn1":381,"safe-buffer":399}],284:[function(require,module,exports){
    // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
    var Buffer = require('safe-buffer').Buffer
    var BN = require('bn.js')
    var EC = require('elliptic').ec
    var parseKeys = require('parse-asn1')
    var curves = require('./curves.json')
    
    function verify (sig, hash, key, signType, tag) {
      var pub = parseKeys(key)
      if (pub.type === 'ec') {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
        return ecVerify(sig, hash, pub)
      } else if (pub.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong public key type')
        return dsaVerify(sig, hash, pub)
      } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
      }
      hash = Buffer.concat([tag, hash])
      var len = pub.modulus.byteLength()
      var pad = [1]
      var padNum = 0
      while (hash.length + pad.length + 2 < len) {
        pad.push(0xff)
        padNum++
      }
      pad.push(0x00)
      var i = -1
      while (++i < hash.length) {
        pad.push(hash[i])
      }
      pad = Buffer.from(pad)
      var red = BN.mont(pub.modulus)
      sig = new BN(sig).toRed(red)
    
      sig = sig.redPow(new BN(pub.publicExponent))
      sig = Buffer.from(sig.fromRed().toArray())
      var out = padNum < 8 ? 1 : 0
      len = Math.min(sig.length, pad.length)
      if (sig.length !== pad.length) out = 1
    
      i = -1
      while (++i < len) out |= sig[i] ^ pad[i]
      return out === 0
    }
    
    function ecVerify (sig, hash, pub) {
      var curveId = curves[pub.data.algorithm.curve.join('.')]
      if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))
    
      var curve = new EC(curveId)
      var pubkey = pub.data.subjectPrivateKey.data
    
      return curve.verify(hash, sig, pubkey)
    }
    
    function dsaVerify (sig, hash, pub) {
      var p = pub.data.p
      var q = pub.data.q
      var g = pub.data.g
      var y = pub.data.pub_key
      var unpacked = parseKeys.signature.decode(sig, 'der')
      var s = unpacked.s
      var r = unpacked.r
      checkValue(s, q)
      checkValue(r, q)
      var montp = BN.mont(p)
      var w = s.invm(q)
      var v = g.toRed(montp)
        .redPow(new BN(hash).mul(w).mod(q))
        .fromRed()
        .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
        .mod(p)
        .mod(q)
      return v.cmp(r) === 0
    }
    
    function checkValue (b, q) {
      if (b.cmpn(0) <= 0) throw new Error('invalid sig')
      if (b.cmp(q) >= q) throw new Error('invalid sig')
    }
    
    module.exports = verify
    
    },{"./curves.json":281,"bn.js":255,"elliptic":321,"parse-asn1":381,"safe-buffer":399}],285:[function(require,module,exports){
    arguments[4][198][0].apply(exports,arguments)
    },{"dup":198}],286:[function(require,module,exports){
    arguments[4][199][0].apply(exports,arguments)
    },{"./_stream_readable":288,"./_stream_writable":290,"_process":388,"dup":199,"inherits":370}],287:[function(require,module,exports){
    arguments[4][200][0].apply(exports,arguments)
    },{"./_stream_transform":289,"dup":200,"inherits":370}],288:[function(require,module,exports){
    arguments[4][201][0].apply(exports,arguments)
    },{"../errors":285,"./_stream_duplex":286,"./internal/streams/async_iterator":291,"./internal/streams/buffer_list":292,"./internal/streams/destroy":293,"./internal/streams/from":295,"./internal/streams/state":297,"./internal/streams/stream":298,"_process":388,"buffer":301,"dup":201,"events":338,"inherits":370,"string_decoder/":424,"util":257}],289:[function(require,module,exports){
    arguments[4][202][0].apply(exports,arguments)
    },{"../errors":285,"./_stream_duplex":286,"dup":202,"inherits":370}],290:[function(require,module,exports){
    arguments[4][203][0].apply(exports,arguments)
    },{"../errors":285,"./_stream_duplex":286,"./internal/streams/destroy":293,"./internal/streams/state":297,"./internal/streams/stream":298,"_process":388,"buffer":301,"dup":203,"inherits":370,"util-deprecate":426}],291:[function(require,module,exports){
    arguments[4][204][0].apply(exports,arguments)
    },{"./end-of-stream":294,"_process":388,"dup":204}],292:[function(require,module,exports){
    arguments[4][205][0].apply(exports,arguments)
    },{"buffer":301,"dup":205,"util":257}],293:[function(require,module,exports){
    arguments[4][206][0].apply(exports,arguments)
    },{"_process":388,"dup":206}],294:[function(require,module,exports){
    arguments[4][207][0].apply(exports,arguments)
    },{"../../../errors":285,"dup":207}],295:[function(require,module,exports){
    arguments[4][208][0].apply(exports,arguments)
    },{"dup":208}],296:[function(require,module,exports){
    arguments[4][209][0].apply(exports,arguments)
    },{"../../../errors":285,"./end-of-stream":294,"dup":209}],297:[function(require,module,exports){
    arguments[4][210][0].apply(exports,arguments)
    },{"../../../errors":285,"dup":210}],298:[function(require,module,exports){
    arguments[4][211][0].apply(exports,arguments)
    },{"dup":211,"events":338}],299:[function(require,module,exports){
    arguments[4][212][0].apply(exports,arguments)
    },{"./lib/_stream_duplex.js":286,"./lib/_stream_passthrough.js":287,"./lib/_stream_readable.js":288,"./lib/_stream_transform.js":289,"./lib/_stream_writable.js":290,"./lib/internal/streams/end-of-stream.js":294,"./lib/internal/streams/pipeline.js":296,"dup":212}],300:[function(require,module,exports){
    (function (Buffer){(function (){
    module.exports = function xor (a, b) {
      var length = Math.min(a.length, b.length)
      var buffer = new Buffer(length)
    
      for (var i = 0; i < length; ++i) {
        buffer[i] = a[i] ^ b[i]
      }
    
      return buffer
    }
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"buffer":301}],301:[function(require,module,exports){
    (function (Buffer){(function (){
    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */
    /* eslint-disable no-proto */
    
    'use strict'
    
    var base64 = require('base64-js')
    var ieee754 = require('ieee754')
    
    exports.Buffer = Buffer
    exports.SlowBuffer = SlowBuffer
    exports.INSPECT_MAX_BYTES = 50
    
    var K_MAX_LENGTH = 0x7fffffff
    exports.kMaxLength = K_MAX_LENGTH
    
    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Print warning and recommend using `buffer` v4.x which has an Object
     *               implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * We report that the browser does not support typed arrays if the are not subclassable
     * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
     * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
     * for __proto__ and has a buggy typed array implementation.
     */
    Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()
    
    if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
        typeof console.error === 'function') {
      console.error(
        'This browser lacks typed array (Uint8Array) support which is required by ' +
        '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
      )
    }
    
    function typedArraySupport () {
      // Can typed array instances can be augmented?
      try {
        var arr = new Uint8Array(1)
        arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
        return arr.foo() === 42
      } catch (e) {
        return false
      }
    }
    
    Object.defineProperty(Buffer.prototype, 'parent', {
      enumerable: true,
      get: function () {
        if (!Buffer.isBuffer(this)) return undefined
        return this.buffer
      }
    })
    
    Object.defineProperty(Buffer.prototype, 'offset', {
      enumerable: true,
      get: function () {
        if (!Buffer.isBuffer(this)) return undefined
        return this.byteOffset
      }
    })
    
    function createBuffer (length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"')
      }
      // Return an augmented `Uint8Array` instance
      var buf = new Uint8Array(length)
      buf.__proto__ = Buffer.prototype
      return buf
    }
    
    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */
    
    function Buffer (arg, encodingOrOffset, length) {
      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          )
        }
        return allocUnsafe(arg)
      }
      return from(arg, encodingOrOffset, length)
    }
    
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    if (typeof Symbol !== 'undefined' && Symbol.species != null &&
        Buffer[Symbol.species] === Buffer) {
      Object.defineProperty(Buffer, Symbol.species, {
        value: null,
        configurable: true,
        enumerable: false,
        writable: false
      })
    }
    
    Buffer.poolSize = 8192 // not used by this implementation
    
    function from (value, encodingOrOffset, length) {
      if (typeof value === 'string') {
        return fromString(value, encodingOrOffset)
      }
    
      if (ArrayBuffer.isView(value)) {
        return fromArrayLike(value)
      }
    
      if (value == null) {
        throw TypeError(
          'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
          'or Array-like Object. Received type ' + (typeof value)
        )
      }
    
      if (isInstance(value, ArrayBuffer) ||
          (value && isInstance(value.buffer, ArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length)
      }
    
      if (typeof value === 'number') {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        )
      }
    
      var valueOf = value.valueOf && value.valueOf()
      if (valueOf != null && valueOf !== value) {
        return Buffer.from(valueOf, encodingOrOffset, length)
      }
    
      var b = fromObject(value)
      if (b) return b
    
      if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
          typeof value[Symbol.toPrimitive] === 'function') {
        return Buffer.from(
          value[Symbol.toPrimitive]('string'), encodingOrOffset, length
        )
      }
    
      throw new TypeError(
        'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
        'or Array-like Object. Received type ' + (typeof value)
      )
    }
    
    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer.from = function (value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length)
    }
    
    // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
    // https://github.com/feross/buffer/pull/148
    Buffer.prototype.__proto__ = Uint8Array.prototype
    Buffer.__proto__ = Uint8Array
    
    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be of type number')
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"')
      }
    }
    
    function alloc (size, fill, encoding) {
      assertSize(size)
      if (size <= 0) {
        return createBuffer(size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(size).fill(fill, encoding)
          : createBuffer(size).fill(fill)
      }
      return createBuffer(size)
    }
    
    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer.alloc = function (size, fill, encoding) {
      return alloc(size, fill, encoding)
    }
    
    function allocUnsafe (size) {
      assertSize(size)
      return createBuffer(size < 0 ? 0 : checked(size) | 0)
    }
    
    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer.allocUnsafe = function (size) {
      return allocUnsafe(size)
    }
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer.allocUnsafeSlow = function (size) {
      return allocUnsafe(size)
    }
    
    function fromString (string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8'
      }
    
      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    
      var length = byteLength(string, encoding) | 0
      var buf = createBuffer(length)
    
      var actual = buf.write(string, encoding)
    
      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        buf = buf.slice(0, actual)
      }
    
      return buf
    }
    
    function fromArrayLike (array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0
      var buf = createBuffer(length)
      for (var i = 0; i < length; i += 1) {
        buf[i] = array[i] & 255
      }
      return buf
    }
    
    function fromArrayBuffer (array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds')
      }
    
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds')
      }
    
      var buf
      if (byteOffset === undefined && length === undefined) {
        buf = new Uint8Array(array)
      } else if (length === undefined) {
        buf = new Uint8Array(array, byteOffset)
      } else {
        buf = new Uint8Array(array, byteOffset, length)
      }
    
      // Return an augmented `Uint8Array` instance
      buf.__proto__ = Buffer.prototype
      return buf
    }
    
    function fromObject (obj) {
      if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0
        var buf = createBuffer(len)
    
        if (buf.length === 0) {
          return buf
        }
    
        obj.copy(buf, 0, 0, len)
        return buf
      }
    
      if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
          return createBuffer(0)
        }
        return fromArrayLike(obj)
      }
    
      if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data)
      }
    }
    
    function checked (length) {
      // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= K_MAX_LENGTH) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
      }
      return length | 0
    }
    
    function SlowBuffer (length) {
      if (+length != length) { // eslint-disable-line eqeqeq
        length = 0
      }
      return Buffer.alloc(+length)
    }
    
    Buffer.isBuffer = function isBuffer (b) {
      return b != null && b._isBuffer === true &&
        b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    }
    
    Buffer.compare = function compare (a, b) {
      if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
      if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
      if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        )
      }
    
      if (a === b) return 0
    
      var x = a.length
      var y = b.length
    
      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i]
          y = b[i]
          break
        }
      }
    
      if (x < y) return -1
      if (y < x) return 1
      return 0
    }
    
    Buffer.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    }
    
    Buffer.concat = function concat (list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
    
      if (list.length === 0) {
        return Buffer.alloc(0)
      }
    
      var i
      if (length === undefined) {
        length = 0
        for (i = 0; i < list.length; ++i) {
          length += list[i].length
        }
      }
    
      var buffer = Buffer.allocUnsafe(length)
      var pos = 0
      for (i = 0; i < list.length; ++i) {
        var buf = list[i]
        if (isInstance(buf, Uint8Array)) {
          buf = Buffer.from(buf)
        }
        if (!Buffer.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos)
        pos += buf.length
      }
      return buffer
    }
    
    function byteLength (string, encoding) {
      if (Buffer.isBuffer(string)) {
        return string.length
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
          'Received type ' + typeof string
        )
      }
    
      var len = string.length
      var mustMatch = (arguments.length > 2 && arguments[2] === true)
      if (!mustMatch && len === 0) return 0
    
      // Use a for loop to avoid recursion
      var loweredCase = false
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            }
            encoding = ('' + encoding).toLowerCase()
            loweredCase = true
        }
      }
    }
    Buffer.byteLength = byteLength
    
    function slowToString (encoding, start, end) {
      var loweredCase = false
    
      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.
    
      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }
    
      if (end === undefined || end > this.length) {
        end = this.length
      }
    
      if (end <= 0) {
        return ''
      }
    
      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0
      start >>>= 0
    
      if (end <= start) {
        return ''
      }
    
      if (!encoding) encoding = 'utf8'
    
      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)
    
          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)
    
          case 'ascii':
            return asciiSlice(this, start, end)
    
          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)
    
          case 'base64':
            return base64Slice(this, start, end)
    
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)
    
          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase()
            loweredCase = true
        }
      }
    }
    
    // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
    // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
    // reliably in a browserify context because there could be multiple different
    // copies of the 'buffer' package in use. This method works even for Buffer
    // instances that were created from another copy of the `buffer` package.
    // See: https://github.com/feross/buffer/issues/154
    Buffer.prototype._isBuffer = true
    
    function swap (b, n, m) {
      var i = b[n]
      b[n] = b[m]
      b[m] = i
    }
    
    Buffer.prototype.swap16 = function swap16 () {
      var len = this.length
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1)
      }
      return this
    }
    
    Buffer.prototype.swap32 = function swap32 () {
      var len = this.length
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3)
        swap(this, i + 1, i + 2)
      }
      return this
    }
    
    Buffer.prototype.swap64 = function swap64 () {
      var len = this.length
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7)
        swap(this, i + 1, i + 6)
        swap(this, i + 2, i + 5)
        swap(this, i + 3, i + 4)
      }
      return this
    }
    
    Buffer.prototype.toString = function toString () {
      var length = this.length
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    }
    
    Buffer.prototype.toLocaleString = Buffer.prototype.toString
    
    Buffer.prototype.equals = function equals (b) {
      if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer.compare(this, b) === 0
    }
    
    Buffer.prototype.inspect = function inspect () {
      var str = ''
      var max = exports.INSPECT_MAX_BYTES
      str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
      if (this.length > max) str += ' ... '
      return '<Buffer ' + str + '>'
    }
    
    Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer.from(target, target.offset, target.byteLength)
      }
      if (!Buffer.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. ' +
          'Received type ' + (typeof target)
        )
      }
    
      if (start === undefined) {
        start = 0
      }
      if (end === undefined) {
        end = target ? target.length : 0
      }
      if (thisStart === undefined) {
        thisStart = 0
      }
      if (thisEnd === undefined) {
        thisEnd = this.length
      }
    
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }
    
      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }
    
      start >>>= 0
      end >>>= 0
      thisStart >>>= 0
      thisEnd >>>= 0
    
      if (this === target) return 0
    
      var x = thisEnd - thisStart
      var y = end - start
      var len = Math.min(x, y)
    
      var thisCopy = this.slice(thisStart, thisEnd)
      var targetCopy = target.slice(start, end)
    
      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i]
          y = targetCopy[i]
          break
        }
      }
    
      if (x < y) return -1
      if (y < x) return 1
      return 0
    }
    
    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1
    
      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset
        byteOffset = 0
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000
      }
      byteOffset = +byteOffset // Coerce to Number.
      if (numberIsNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1)
      }
    
      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0
        else return -1
      }
    
      // Normalize val
      if (typeof val === 'string') {
        val = Buffer.from(val, encoding)
      }
    
      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF // Search for a byte value [0-255]
        if (typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
      }
    
      throw new TypeError('val must be string, number or Buffer')
    }
    
    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1
      var arrLength = arr.length
      var valLength = val.length
    
      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase()
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2
          arrLength /= 2
          valLength /= 2
          byteOffset /= 2
        }
      }
    
      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }
    
      var i
      if (dir) {
        var foundIndex = -1
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex
            foundIndex = -1
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
        for (i = byteOffset; i >= 0; i--) {
          var found = true
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false
              break
            }
          }
          if (found) return i
        }
      }
    
      return -1
    }
    
    Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    }
    
    Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    }
    
    Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    }
    
    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0
      var remaining = buf.length - offset
      if (!length) {
        length = remaining
      } else {
        length = Number(length)
        if (length > remaining) {
          length = remaining
        }
      }
    
      var strLen = string.length
    
      if (length > strLen / 2) {
        length = strLen / 2
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16)
        if (numberIsNaN(parsed)) return i
        buf[offset + i] = parsed
      }
      return i
    }
    
    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }
    
    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }
    
    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }
    
    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }
    
    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }
    
    Buffer.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8'
        length = this.length
        offset = 0
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset
        length = this.length
        offset = 0
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset >>> 0
        if (isFinite(length)) {
          length = length >>> 0
          if (encoding === undefined) encoding = 'utf8'
        } else {
          encoding = length
          length = undefined
        }
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }
    
      var remaining = this.length - offset
      if (length === undefined || length > remaining) length = remaining
    
      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }
    
      if (!encoding) encoding = 'utf8'
    
      var loweredCase = false
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)
    
          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)
    
          case 'ascii':
            return asciiWrite(this, string, offset, length)
    
          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)
    
          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)
    
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)
    
          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase()
            loweredCase = true
        }
      }
    }
    
    Buffer.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    }
    
    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf)
      } else {
        return base64.fromByteArray(buf.slice(start, end))
      }
    }
    
    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end)
      var res = []
    
      var i = start
      while (i < end) {
        var firstByte = buf[i]
        var codePoint = null
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
            : (firstByte > 0xBF) ? 2
              : 1
    
        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint
    
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte
              }
              break
            case 2:
              secondByte = buf[i + 1]
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint
                }
              }
              break
            case 3:
              secondByte = buf[i + 1]
              thirdByte = buf[i + 2]
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint
                }
              }
              break
            case 4:
              secondByte = buf[i + 1]
              thirdByte = buf[i + 2]
              fourthByte = buf[i + 3]
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint
                }
              }
          }
        }
    
        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD
          bytesPerSequence = 1
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000
          res.push(codePoint >>> 10 & 0x3FF | 0xD800)
          codePoint = 0xDC00 | codePoint & 0x3FF
        }
    
        res.push(codePoint)
        i += bytesPerSequence
      }
    
      return decodeCodePointsArray(res)
    }
    
    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000
    
    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }
    
      // Decode in chunks to avoid "call stack size exceeded".
      var res = ''
      var i = 0
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        )
      }
      return res
    }
    
    function asciiSlice (buf, start, end) {
      var ret = ''
      end = Math.min(buf.length, end)
    
      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F)
      }
      return ret
    }
    
    function latin1Slice (buf, start, end) {
      var ret = ''
      end = Math.min(buf.length, end)
    
      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i])
      }
      return ret
    }
    
    function hexSlice (buf, start, end) {
      var len = buf.length
    
      if (!start || start < 0) start = 0
      if (!end || end < 0 || end > len) end = len
    
      var out = ''
      for (var i = start; i < end; ++i) {
        out += toHex(buf[i])
      }
      return out
    }
    
    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end)
      var res = ''
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
      }
      return res
    }
    
    Buffer.prototype.slice = function slice (start, end) {
      var len = this.length
      start = ~~start
      end = end === undefined ? len : ~~end
    
      if (start < 0) {
        start += len
        if (start < 0) start = 0
      } else if (start > len) {
        start = len
      }
    
      if (end < 0) {
        end += len
        if (end < 0) end = 0
      } else if (end > len) {
        end = len
      }
    
      if (end < start) end = start
    
      var newBuf = this.subarray(start, end)
      // Return an augmented `Uint8Array` instance
      newBuf.__proto__ = Buffer.prototype
      return newBuf
    }
    
    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }
    
    Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) checkOffset(offset, byteLength, this.length)
    
      var val = this[offset]
      var mul = 1
      var i = 0
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul
      }
    
      return val
    }
    
    Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length)
      }
    
      var val = this[offset + --byteLength]
      var mul = 1
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul
      }
    
      return val
    }
    
    Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 1, this.length)
      return this[offset]
    }
    
    Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 2, this.length)
      return this[offset] | (this[offset + 1] << 8)
    }
    
    Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 2, this.length)
      return (this[offset] << 8) | this[offset + 1]
    }
    
    Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
    
      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    }
    
    Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
    
      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    }
    
    Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) checkOffset(offset, byteLength, this.length)
    
      var val = this[offset]
      var mul = 1
      var i = 0
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul
      }
      mul *= 0x80
    
      if (val >= mul) val -= Math.pow(2, 8 * byteLength)
    
      return val
    }
    
    Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) checkOffset(offset, byteLength, this.length)
    
      var i = byteLength
      var mul = 1
      var val = this[offset + --i]
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul
      }
      mul *= 0x80
    
      if (val >= mul) val -= Math.pow(2, 8 * byteLength)
    
      return val
    }
    
    Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 1, this.length)
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    }
    
    Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 2, this.length)
      var val = this[offset] | (this[offset + 1] << 8)
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    }
    
    Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 2, this.length)
      var val = this[offset + 1] | (this[offset] << 8)
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    }
    
    Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
    
      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    }
    
    Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
    
      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    }
    
    Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
      return ieee754.read(this, offset, true, 23, 4)
    }
    
    Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 4, this.length)
      return ieee754.read(this, offset, false, 23, 4)
    }
    
    Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 8, this.length)
      return ieee754.read(this, offset, true, 52, 8)
    }
    
    Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      offset = offset >>> 0
      if (!noAssert) checkOffset(offset, 8, this.length)
      return ieee754.read(this, offset, false, 52, 8)
    }
    
    function checkInt (buf, value, offset, ext, max, min) {
      if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }
    
    Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1
        checkInt(this, value, offset, byteLength, maxBytes, 0)
      }
    
      var mul = 1
      var i = 0
      this[offset] = value & 0xFF
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF
      }
    
      return offset + byteLength
    }
    
    Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value
      offset = offset >>> 0
      byteLength = byteLength >>> 0
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1
        checkInt(this, value, offset, byteLength, maxBytes, 0)
      }
    
      var i = byteLength - 1
      var mul = 1
      this[offset + i] = value & 0xFF
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF
      }
    
      return offset + byteLength
    }
    
    Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
      this[offset] = (value & 0xff)
      return offset + 1
    }
    
    Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
      return offset + 2
    }
    
    Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
      this[offset] = (value >>> 8)
      this[offset + 1] = (value & 0xff)
      return offset + 2
    }
    
    Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
      this[offset + 3] = (value >>> 24)
      this[offset + 2] = (value >>> 16)
      this[offset + 1] = (value >>> 8)
      this[offset] = (value & 0xff)
      return offset + 4
    }
    
    Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
      this[offset] = (value >>> 24)
      this[offset + 1] = (value >>> 16)
      this[offset + 2] = (value >>> 8)
      this[offset + 3] = (value & 0xff)
      return offset + 4
    }
    
    Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) {
        var limit = Math.pow(2, (8 * byteLength) - 1)
    
        checkInt(this, value, offset, byteLength, limit - 1, -limit)
      }
    
      var i = 0
      var mul = 1
      var sub = 0
      this[offset] = value & 0xFF
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
      }
    
      return offset + byteLength
    }
    
    Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) {
        var limit = Math.pow(2, (8 * byteLength) - 1)
    
        checkInt(this, value, offset, byteLength, limit - 1, -limit)
      }
    
      var i = byteLength - 1
      var mul = 1
      var sub = 0
      this[offset + i] = value & 0xFF
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
      }
    
      return offset + byteLength
    }
    
    Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
      if (value < 0) value = 0xff + value + 1
      this[offset] = (value & 0xff)
      return offset + 1
    }
    
    Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
      return offset + 2
    }
    
    Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
      this[offset] = (value >>> 8)
      this[offset + 1] = (value & 0xff)
      return offset + 2
    }
    
    Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
      this[offset + 2] = (value >>> 16)
      this[offset + 3] = (value >>> 24)
      return offset + 4
    }
    
    Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
      if (value < 0) value = 0xffffffff + value + 1
      this[offset] = (value >>> 24)
      this[offset + 1] = (value >>> 16)
      this[offset + 2] = (value >>> 8)
      this[offset + 3] = (value & 0xff)
      return offset + 4
    }
    
    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }
    
    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4)
      return offset + 4
    }
    
    Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    }
    
    Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    }
    
    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      value = +value
      offset = offset >>> 0
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8)
      return offset + 8
    }
    
    Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    }
    
    Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    }
    
    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer.prototype.copy = function copy (target, targetStart, start, end) {
      if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
      if (!start) start = 0
      if (!end && end !== 0) end = this.length
      if (targetStart >= target.length) targetStart = target.length
      if (!targetStart) targetStart = 0
      if (end > 0 && end < start) end = start
    
      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0
    
      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')
    
      // Are we oob?
      if (end > this.length) end = this.length
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start
      }
    
      var len = end - start
    
      if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
        // Use built-in when available, missing from IE11
        this.copyWithin(targetStart, start, end)
      } else if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (var i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start]
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        )
      }
    
      return len
    }
    
    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start
          start = 0
          end = this.length
        } else if (typeof end === 'string') {
          encoding = end
          end = this.length
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0)
          if ((encoding === 'utf8' && code < 128) ||
              encoding === 'latin1') {
            // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code
          }
        }
      } else if (typeof val === 'number') {
        val = val & 255
      }
    
      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }
    
      if (end <= start) {
        return this
      }
    
      start = start >>> 0
      end = end === undefined ? this.length : end >>> 0
    
      if (!val) val = 0
    
      var i
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val
        }
      } else {
        var bytes = Buffer.isBuffer(val)
          ? val
          : Buffer.from(val, encoding)
        var len = bytes.length
        if (len === 0) {
          throw new TypeError('The value "' + val +
            '" is invalid for argument "value"')
        }
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len]
        }
      }
    
      return this
    }
    
    // HELPER FUNCTIONS
    // ================
    
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g
    
    function base64clean (str) {
      // Node takes equal signs as end of the Base64 encoding
      str = str.split('=')[0]
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = str.trim().replace(INVALID_BASE64_RE, '')
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '='
      }
      return str
    }
    
    function toHex (n) {
      if (n < 16) return '0' + n.toString(16)
      return n.toString(16)
    }
    
    function utf8ToBytes (string, units) {
      units = units || Infinity
      var codePoint
      var length = string.length
      var leadSurrogate = null
      var bytes = []
    
      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i)
    
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
              continue
            }
    
            // valid lead
            leadSurrogate = codePoint
    
            continue
          }
    
          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            leadSurrogate = codePoint
            continue
          }
    
          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        }
    
        leadSurrogate = null
    
        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint)
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          )
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          )
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          )
        } else {
          throw new Error('Invalid code point')
        }
      }
    
      return bytes
    }
    
    function asciiToBytes (str) {
      var byteArray = []
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF)
      }
      return byteArray
    }
    
    function utf16leToBytes (str, units) {
      var c, hi, lo
      var byteArray = []
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break
    
        c = str.charCodeAt(i)
        hi = c >> 8
        lo = c % 256
        byteArray.push(lo)
        byteArray.push(hi)
      }
    
      return byteArray
    }
    
    function base64ToBytes (str) {
      return base64.toByteArray(base64clean(str))
    }
    
    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i]
      }
      return i
    }
    
    // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
    // the `instanceof` check but they should be treated as of that type.
    // See: https://github.com/feross/buffer/issues/166
    function isInstance (obj, type) {
      return obj instanceof type ||
        (obj != null && obj.constructor != null && obj.constructor.name != null &&
          obj.constructor.name === type.name)
    }
    function numberIsNaN (obj) {
      // For IE11 support
      return obj !== obj // eslint-disable-line no-self-compare
    }
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"base64-js":254,"buffer":301,"ieee754":369}],302:[function(require,module,exports){
    arguments[4][125][0].apply(exports,arguments)
    },{"dup":125,"inherits":370,"safe-buffer":399,"stream":409,"string_decoder":424}],303:[function(require,module,exports){
    (function (Buffer){(function (){
    var elliptic = require('elliptic')
    var BN = require('bn.js')
    
    module.exports = function createECDH (curve) {
      return new ECDH(curve)
    }
    
    var aliases = {
      secp256k1: {
        name: 'secp256k1',
        byteLength: 32
      },
      secp224r1: {
        name: 'p224',
        byteLength: 28
      },
      prime256v1: {
        name: 'p256',
        byteLength: 32
      },
      prime192v1: {
        name: 'p192',
        byteLength: 24
      },
      ed25519: {
        name: 'ed25519',
        byteLength: 32
      },
      secp384r1: {
        name: 'p384',
        byteLength: 48
      },
      secp521r1: {
        name: 'p521',
        byteLength: 66
      }
    }
    
    aliases.p224 = aliases.secp224r1
    aliases.p256 = aliases.secp256r1 = aliases.prime256v1
    aliases.p192 = aliases.secp192r1 = aliases.prime192v1
    aliases.p384 = aliases.secp384r1
    aliases.p521 = aliases.secp521r1
    
    function ECDH (curve) {
      this.curveType = aliases[curve]
      if (!this.curveType) {
        this.curveType = {
          name: curve
        }
      }
      this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
      this.keys = void 0
    }
    
    ECDH.prototype.generateKeys = function (enc, format) {
      this.keys = this.curve.genKeyPair()
      return this.getPublicKey(enc, format)
    }
    
    ECDH.prototype.computeSecret = function (other, inenc, enc) {
      inenc = inenc || 'utf8'
      if (!Buffer.isBuffer(other)) {
        other = new Buffer(other, inenc)
      }
      var otherPub = this.curve.keyFromPublic(other).getPublic()
      var out = otherPub.mul(this.keys.getPrivate()).getX()
      return formatReturnValue(out, enc, this.curveType.byteLength)
    }
    
    ECDH.prototype.getPublicKey = function (enc, format) {
      var key = this.keys.getPublic(format === 'compressed', true)
      if (format === 'hybrid') {
        if (key[key.length - 1] % 2) {
          key[0] = 7
        } else {
          key[0] = 6
        }
      }
      return formatReturnValue(key, enc)
    }
    
    ECDH.prototype.getPrivateKey = function (enc) {
      return formatReturnValue(this.keys.getPrivate(), enc)
    }
    
    ECDH.prototype.setPublicKey = function (pub, enc) {
      enc = enc || 'utf8'
      if (!Buffer.isBuffer(pub)) {
        pub = new Buffer(pub, enc)
      }
      this.keys._importPublic(pub)
      return this
    }
    
    ECDH.prototype.setPrivateKey = function (priv, enc) {
      enc = enc || 'utf8'
      if (!Buffer.isBuffer(priv)) {
        priv = new Buffer(priv, enc)
      }
    
      var _priv = new BN(priv)
      _priv = _priv.toString(16)
      this.keys = this.curve.genKeyPair()
      this.keys._importPrivate(_priv)
      return this
    }
    
    function formatReturnValue (bn, enc, len) {
      if (!Array.isArray(bn)) {
        bn = bn.toArray()
      }
      var buf = new Buffer(bn)
      if (len && buf.length < len) {
        var zeros = new Buffer(len - buf.length)
        zeros.fill(0)
        buf = Buffer.concat([zeros, buf])
      }
      if (!enc) {
        return buf
      } else {
        return buf.toString(enc)
      }
    }
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"bn.js":304,"buffer":301,"elliptic":321}],304:[function(require,module,exports){
    arguments[4][123][0].apply(exports,arguments)
    },{"buffer":257,"dup":123}],305:[function(require,module,exports){
    arguments[4][126][0].apply(exports,arguments)
    },{"cipher-base":302,"dup":126,"inherits":370,"md5.js":371,"ripemd160":398,"sha.js":402}],306:[function(require,module,exports){
    var MD5 = require('md5.js')
    
    module.exports = function (buffer) {
      return new MD5().update(buffer).digest()
    }
    
    },{"md5.js":371}],307:[function(require,module,exports){
    'use strict'
    var inherits = require('inherits')
    var Legacy = require('./legacy')
    var Base = require('cipher-base')
    var Buffer = require('safe-buffer').Buffer
    var md5 = require('create-hash/md5')
    var RIPEMD160 = require('ripemd160')
    
    var sha = require('sha.js')
    
    var ZEROS = Buffer.alloc(128)
    
    function Hmac (alg, key) {
      Base.call(this, 'digest')
      if (typeof key === 'string') {
        key = Buffer.from(key)
      }
    
      var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64
    
      this._alg = alg
      this._key = key
      if (key.length > blocksize) {
        var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
        key = hash.update(key).digest()
      } else if (key.length < blocksize) {
        key = Buffer.concat([key, ZEROS], blocksize)
      }
    
      var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
      var opad = this._opad = Buffer.allocUnsafe(blocksize)
    
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36
        opad[i] = key[i] ^ 0x5C
      }
      this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
      this._hash.update(ipad)
    }
    
    inherits(Hmac, Base)
    
    Hmac.prototype._update = function (data) {
      this._hash.update(data)
    }
    
    Hmac.prototype._final = function () {
      var h = this._hash.digest()
      var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
      return hash.update(this._opad).update(h).digest()
    }
    
    module.exports = function createHmac (alg, key) {
      alg = alg.toLowerCase()
      if (alg === 'rmd160' || alg === 'ripemd160') {
        return new Hmac('rmd160', key)
      }
      if (alg === 'md5') {
        return new Legacy(md5, key)
      }
      return new Hmac(alg, key)
    }
    
    },{"./legacy":308,"cipher-base":302,"create-hash/md5":306,"inherits":370,"ripemd160":398,"safe-buffer":399,"sha.js":402}],308:[function(require,module,exports){
    'use strict'
    var inherits = require('inherits')
    var Buffer = require('safe-buffer').Buffer
    
    var Base = require('cipher-base')
    
    var ZEROS = Buffer.alloc(128)
    var blocksize = 64
    
    function Hmac (alg, key) {
      Base.call(this, 'digest')
      if (typeof key === 'string') {
        key = Buffer.from(key)
      }
    
      this._alg = alg
      this._key = key
    
      if (key.length > blocksize) {
        key = alg(key)
      } else if (key.length < blocksize) {
        key = Buffer.concat([key, ZEROS], blocksize)
      }
    
      var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
      var opad = this._opad = Buffer.allocUnsafe(blocksize)
    
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36
        opad[i] = key[i] ^ 0x5C
      }
    
      this._hash = [ipad]
    }
    
    inherits(Hmac, Base)
    
    Hmac.prototype._update = function (data) {
      this._hash.push(data)
    }
    
    Hmac.prototype._final = function () {
      var h = this._alg(Buffer.concat(this._hash))
      return this._alg(Buffer.concat([this._opad, h]))
    }
    module.exports = Hmac
    
    },{"cipher-base":302,"inherits":370,"safe-buffer":399}],309:[function(require,module,exports){
    'use strict'
    
    exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
    exports.createHash = exports.Hash = require('create-hash')
    exports.createHmac = exports.Hmac = require('create-hmac')
    
    var algos = require('browserify-sign/algos')
    var algoKeys = Object.keys(algos)
    var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
    exports.getHashes = function () {
      return hashes
    }
    
    var p = require('pbkdf2')
    exports.pbkdf2 = p.pbkdf2
    exports.pbkdf2Sync = p.pbkdf2Sync
    
    var aes = require('browserify-cipher')
    
    exports.Cipher = aes.Cipher
    exports.createCipher = aes.createCipher
    exports.Cipheriv = aes.Cipheriv
    exports.createCipheriv = aes.createCipheriv
    exports.Decipher = aes.Decipher
    exports.createDecipher = aes.createDecipher
    exports.Decipheriv = aes.Decipheriv
    exports.createDecipheriv = aes.createDecipheriv
    exports.getCiphers = aes.getCiphers
    exports.listCiphers = aes.listCiphers
    
    var dh = require('diffie-hellman')
    
    exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
    exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
    exports.getDiffieHellman = dh.getDiffieHellman
    exports.createDiffieHellman = dh.createDiffieHellman
    exports.DiffieHellman = dh.DiffieHellman
    
    var sign = require('browserify-sign')
    
    exports.createSign = sign.createSign
    exports.Sign = sign.Sign
    exports.createVerify = sign.createVerify
    exports.Verify = sign.Verify
    
    exports.createECDH = require('create-ecdh')
    
    var publicEncrypt = require('public-encrypt')
    
    exports.publicEncrypt = publicEncrypt.publicEncrypt
    exports.privateEncrypt = publicEncrypt.privateEncrypt
    exports.publicDecrypt = publicEncrypt.publicDecrypt
    exports.privateDecrypt = publicEncrypt.privateDecrypt
    
    // the least I can do is make error messages for the rest of the node.js/crypto api.
    // ;[
    //   'createCredentials'
    // ].forEach(function (name) {
    //   exports[name] = function () {
    //     throw new Error([
    //       'sorry, ' + name + ' is not implemented yet',
    //       'we accept pull requests',
    //       'https://github.com/crypto-browserify/crypto-browserify'
    //     ].join('\n'))
    //   }
    // })
    
    var rf = require('randomfill')
    
    exports.randomFill = rf.randomFill
    exports.randomFillSync = rf.randomFillSync
    
    exports.createCredentials = function () {
      throw new Error([
        'sorry, createCredentials is not implemented yet',
        'we accept pull requests',
        'https://github.com/crypto-browserify/crypto-browserify'
      ].join('\n'))
    }
    
    exports.constants = {
      'DH_CHECK_P_NOT_SAFE_PRIME': 2,
      'DH_CHECK_P_NOT_PRIME': 1,
      'DH_UNABLE_TO_CHECK_GENERATOR': 4,
      'DH_NOT_SUITABLE_GENERATOR': 8,
      'NPN_ENABLED': 1,
      'ALPN_ENABLED': 1,
      'RSA_PKCS1_PADDING': 1,
      'RSA_SSLV23_PADDING': 2,
      'RSA_NO_PADDING': 3,
      'RSA_PKCS1_OAEP_PADDING': 4,
      'RSA_X931_PADDING': 5,
      'RSA_PKCS1_PSS_PADDING': 6,
      'POINT_CONVERSION_COMPRESSED': 2,
      'POINT_CONVERSION_UNCOMPRESSED': 4,
      'POINT_CONVERSION_HYBRID': 6
    }
    
    },{"browserify-cipher":275,"browserify-sign":282,"browserify-sign/algos":279,"create-ecdh":303,"create-hash":305,"create-hmac":307,"diffie-hellman":316,"pbkdf2":382,"public-encrypt":389,"randombytes":396,"randomfill":397}],310:[function(require,module,exports){
    'use strict';
    
    exports.utils = require('./des/utils');
    exports.Cipher = require('./des/cipher');
    exports.DES = require('./des/des');
    exports.CBC = require('./des/cbc');
    exports.EDE = require('./des/ede');
    
    },{"./des/cbc":311,"./des/cipher":312,"./des/des":313,"./des/ede":314,"./des/utils":315}],311:[function(require,module,exports){
    'use strict';
    
    var assert = require('minimalistic-assert');
    var inherits = require('inherits');
    
    var proto = {};
    
    function CBCState(iv) {
      assert.equal(iv.length, 8, 'Invalid IV length');
    
      this.iv = new Array(8);
      for (var i = 0; i < this.iv.length; i++)
        this.iv[i] = iv[i];
    }
    
    function instantiate(Base) {
      function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
      }
      inherits(CBC, Base);
    
      var keys = Object.keys(proto);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        CBC.prototype[key] = proto[key];
      }
    
      CBC.create = function create(options) {
        return new CBC(options);
      };
    
      return CBC;
    }
    
    exports.instantiate = instantiate;
    
    proto._cbcInit = function _cbcInit() {
      var state = new CBCState(this.options.iv);
      this._cbcState = state;
    };
    
    proto._update = function _update(inp, inOff, out, outOff) {
      var state = this._cbcState;
      var superProto = this.constructor.super_.prototype;
    
      var iv = state.iv;
      if (this.type === 'encrypt') {
        for (var i = 0; i < this.blockSize; i++)
          iv[i] ^= inp[inOff + i];
    
        superProto._update.call(this, iv, 0, out, outOff);
    
        for (var i = 0; i < this.blockSize; i++)
          iv[i] = out[outOff + i];
      } else {
        superProto._update.call(this, inp, inOff, out, outOff);
    
        for (var i = 0; i < this.blockSize; i++)
          out[outOff + i] ^= iv[i];
    
        for (var i = 0; i < this.blockSize; i++)
          iv[i] = inp[inOff + i];
      }
    };
    
    },{"inherits":370,"minimalistic-assert":374}],312:[function(require,module,exports){
    'use strict';
    
    var assert = require('minimalistic-assert');
    
    function Cipher(options) {
      this.options = options;
    
      this.type = this.options.type;
      this.blockSize = 8;
      this._init();
    
      this.buffer = new Array(this.blockSize);
      this.bufferOff = 0;
    }
    module.exports = Cipher;
    
    Cipher.prototype._init = function _init() {
      // Might be overrided
    };
    
    Cipher.prototype.update = function update(data) {
      if (data.length === 0)
        return [];
    
      if (this.type === 'decrypt')
        return this._updateDecrypt(data);
      else
        return this._updateEncrypt(data);
    };
    
    Cipher.prototype._buffer = function _buffer(data, off) {
      // Append data to buffer
      var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
      for (var i = 0; i < min; i++)
        this.buffer[this.bufferOff + i] = data[off + i];
      this.bufferOff += min;
    
      // Shift next
      return min;
    };
    
    Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
      this._update(this.buffer, 0, out, off);
      this.bufferOff = 0;
      return this.blockSize;
    };
    
    Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
      var inputOff = 0;
      var outputOff = 0;
    
      var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
      var out = new Array(count * this.blockSize);
    
      if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
    
        if (this.bufferOff === this.buffer.length)
          outputOff += this._flushBuffer(out, outputOff);
      }
    
      // Write blocks
      var max = data.length - ((data.length - inputOff) % this.blockSize);
      for (; inputOff < max; inputOff += this.blockSize) {
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
      }
    
      // Queue rest
      for (; inputOff < data.length; inputOff++, this.bufferOff++)
        this.buffer[this.bufferOff] = data[inputOff];
    
      return out;
    };
    
    Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
      var inputOff = 0;
      var outputOff = 0;
    
      var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
      var out = new Array(count * this.blockSize);
    
      // TODO(indutny): optimize it, this is far from optimal
      for (; count > 0; count--) {
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
      }
    
      // Buffer rest of the input
      inputOff += this._buffer(data, inputOff);
    
      return out;
    };
    
    Cipher.prototype.final = function final(buffer) {
      var first;
      if (buffer)
        first = this.update(buffer);
    
      var last;
      if (this.type === 'encrypt')
        last = this._finalEncrypt();
      else
        last = this._finalDecrypt();
    
      if (first)
        return first.concat(last);
      else
        return last;
    };
    
    Cipher.prototype._pad = function _pad(buffer, off) {
      if (off === 0)
        return false;
    
      while (off < buffer.length)
        buffer[off++] = 0;
    
      return true;
    };
    
    Cipher.prototype._finalEncrypt = function _finalEncrypt() {
      if (!this._pad(this.buffer, this.bufferOff))
        return [];
    
      var out = new Array(this.blockSize);
      this._update(this.buffer, 0, out, 0);
      return out;
    };
    
    Cipher.prototype._unpad = function _unpad(buffer) {
      return buffer;
    };
    
    Cipher.prototype._finalDecrypt = function _finalDecrypt() {
      assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
      var out = new Array(this.blockSize);
      this._flushBuffer(out, 0);
    
      return this._unpad(out);
    };
    
    },{"minimalistic-assert":374}],313:[function(require,module,exports){
    'use strict';
    
    var assert = require('minimalistic-assert');
    var inherits = require('inherits');
    
    var utils = require('./utils');
    var Cipher = require('./cipher');
    
    function DESState() {
      this.tmp = new Array(2);
      this.keys = null;
    }
    
    function DES(options) {
      Cipher.call(this, options);
    
      var state = new DESState();
      this._desState = state;
    
      this.deriveKeys(state, options.key);
    }
    inherits(DES, Cipher);
    module.exports = DES;
    
    DES.create = function create(options) {
      return new DES(options);
    };
    
    var shiftTable = [
      1, 1, 2, 2, 2, 2, 2, 2,
      1, 2, 2, 2, 2, 2, 2, 1
    ];
    
    DES.prototype.deriveKeys = function deriveKeys(state, key) {
      state.keys = new Array(16 * 2);
    
      assert.equal(key.length, this.blockSize, 'Invalid key length');
    
      var kL = utils.readUInt32BE(key, 0);
      var kR = utils.readUInt32BE(key, 4);
    
      utils.pc1(kL, kR, state.tmp, 0);
      kL = state.tmp[0];
      kR = state.tmp[1];
      for (var i = 0; i < state.keys.length; i += 2) {
        var shift = shiftTable[i >>> 1];
        kL = utils.r28shl(kL, shift);
        kR = utils.r28shl(kR, shift);
        utils.pc2(kL, kR, state.keys, i);
      }
    };
    
    DES.prototype._update = function _update(inp, inOff, out, outOff) {
      var state = this._desState;
    
      var l = utils.readUInt32BE(inp, inOff);
      var r = utils.readUInt32BE(inp, inOff + 4);
    
      // Initial Permutation
      utils.ip(l, r, state.tmp, 0);
      l = state.tmp[0];
      r = state.tmp[1];
    
      if (this.type === 'encrypt')
        this._encrypt(state, l, r, state.tmp, 0);
      else
        this._decrypt(state, l, r, state.tmp, 0);
    
      l = state.tmp[0];
      r = state.tmp[1];
    
      utils.writeUInt32BE(out, l, outOff);
      utils.writeUInt32BE(out, r, outOff + 4);
    };
    
    DES.prototype._pad = function _pad(buffer, off) {
      var value = buffer.length - off;
      for (var i = off; i < buffer.length; i++)
        buffer[i] = value;
    
      return true;
    };
    
    DES.prototype._unpad = function _unpad(buffer) {
      var pad = buffer[buffer.length - 1];
      for (var i = buffer.length - pad; i < buffer.length; i++)
        assert.equal(buffer[i], pad);
    
      return buffer.slice(0, buffer.length - pad);
    };
    
    DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
      var l = lStart;
      var r = rStart;
    
      // Apply f() x16 times
      for (var i = 0; i < state.keys.length; i += 2) {
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
    
        // f(r, k)
        utils.expand(r, state.tmp, 0);
    
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
    
        var t = r;
        r = (l ^ f) >>> 0;
        l = t;
      }
    
      // Reverse Initial Permutation
      utils.rip(r, l, out, off);
    };
    
    DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
      var l = rStart;
      var r = lStart;
    
      // Apply f() x16 times
      for (var i = state.keys.length - 2; i >= 0; i -= 2) {
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
    
        // f(r, k)
        utils.expand(l, state.tmp, 0);
    
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
    
        var t = l;
        l = (r ^ f) >>> 0;
        r = t;
      }
    
      // Reverse Initial Permutation
      utils.rip(l, r, out, off);
    };
    
    },{"./cipher":312,"./utils":315,"inherits":370,"minimalistic-assert":374}],314:[function(require,module,exports){
    'use strict';
    
    var assert = require('minimalistic-assert');
    var inherits = require('inherits');
    
    var Cipher = require('./cipher');
    var DES = require('./des');
    
    function EDEState(type, key) {
      assert.equal(key.length, 24, 'Invalid key length');
    
      var k1 = key.slice(0, 8);
      var k2 = key.slice(8, 16);
      var k3 = key.slice(16, 24);
    
      if (type === 'encrypt') {
        this.ciphers = [
          DES.create({ type: 'encrypt', key: k1 }),
          DES.create({ type: 'decrypt', key: k2 }),
          DES.create({ type: 'encrypt', key: k3 })
        ];
      } else {
        this.ciphers = [
          DES.create({ type: 'decrypt', key: k3 }),
          DES.create({ type: 'encrypt', key: k2 }),
          DES.create({ type: 'decrypt', key: k1 })
        ];
      }
    }
    
    function EDE(options) {
      Cipher.call(this, options);
    
      var state = new EDEState(this.type, this.options.key);
      this._edeState = state;
    }
    inherits(EDE, Cipher);
    
    module.exports = EDE;
    
    EDE.create = function create(options) {
      return new EDE(options);
    };
    
    EDE.prototype._update = function _update(inp, inOff, out, outOff) {
      var state = this._edeState;
    
      state.ciphers[0]._update(inp, inOff, out, outOff);
      state.ciphers[1]._update(out, outOff, out, outOff);
      state.ciphers[2]._update(out, outOff, out, outOff);
    };
    
    EDE.prototype._pad = DES.prototype._pad;
    EDE.prototype._unpad = DES.prototype._unpad;
    
    },{"./cipher":312,"./des":313,"inherits":370,"minimalistic-assert":374}],315:[function(require,module,exports){
    'use strict';
    
    exports.readUInt32BE = function readUInt32BE(bytes, off) {
      var res =  (bytes[0 + off] << 24) |
                 (bytes[1 + off] << 16) |
                 (bytes[2 + off] << 8) |
                 bytes[3 + off];
      return res >>> 0;
    };
    
    exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
      bytes[0 + off] = value >>> 24;
      bytes[1 + off] = (value >>> 16) & 0xff;
      bytes[2 + off] = (value >>> 8) & 0xff;
      bytes[3 + off] = value & 0xff;
    };
    
    exports.ip = function ip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
    
      for (var i = 6; i >= 0; i -= 2) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= (inR >>> (j + i)) & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= (inL >>> (j + i)) & 1;
        }
      }
    
      for (var i = 6; i >= 0; i -= 2) {
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= (inR >>> (j + i)) & 1;
        }
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= (inL >>> (j + i)) & 1;
        }
      }
    
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    
    exports.rip = function rip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
    
      for (var i = 0; i < 4; i++) {
        for (var j = 24; j >= 0; j -= 8) {
          outL <<= 1;
          outL |= (inR >>> (j + i)) & 1;
          outL <<= 1;
          outL |= (inL >>> (j + i)) & 1;
        }
      }
      for (var i = 4; i < 8; i++) {
        for (var j = 24; j >= 0; j -= 8) {
          outR <<= 1;
          outR |= (inR >>> (j + i)) & 1;
          outR <<= 1;
          outR |= (inL >>> (j + i)) & 1;
        }
      }
    
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    
    exports.pc1 = function pc1(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
    
      // 7, 15, 23, 31, 39, 47, 55, 63
      // 6, 14, 22, 30, 39, 47, 55, 63
      // 5, 13, 21, 29, 39, 47, 55, 63
      // 4, 12, 20, 28
      for (var i = 7; i >= 5; i--) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= (inR >> (j + i)) & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= (inL >> (j + i)) & 1;
        }
      }
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= (inR >> (j + i)) & 1;
      }
    
      // 1, 9, 17, 25, 33, 41, 49, 57
      // 2, 10, 18, 26, 34, 42, 50, 58
      // 3, 11, 19, 27, 35, 43, 51, 59
      // 36, 44, 52, 60
      for (var i = 1; i <= 3; i++) {
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= (inR >> (j + i)) & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= (inL >> (j + i)) & 1;
        }
      }
      for (var j = 0; j <= 24; j += 8) {
        outR <<= 1;
        outR |= (inL >> (j + i)) & 1;
      }
    
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    
    exports.r28shl = function r28shl(num, shift) {
      return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
    };
    
    var pc2table = [
      // inL => outL
      14, 11, 17, 4, 27, 23, 25, 0,
      13, 22, 7, 18, 5, 9, 16, 24,
      2, 20, 12, 21, 1, 8, 15, 26,
    
      // inR => outR
      15, 4, 25, 19, 9, 1, 26, 16,
      5, 11, 23, 8, 12, 7, 17, 0,
      22, 3, 10, 14, 6, 20, 27, 24
    ];
    
    exports.pc2 = function pc2(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
    
      var len = pc2table.length >>> 1;
      for (var i = 0; i < len; i++) {
        outL <<= 1;
        outL |= (inL >>> pc2table[i]) & 0x1;
      }
      for (var i = len; i < pc2table.length; i++) {
        outR <<= 1;
        outR |= (inR >>> pc2table[i]) & 0x1;
      }
    
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    
    exports.expand = function expand(r, out, off) {
      var outL = 0;
      var outR = 0;
    
      outL = ((r & 1) << 5) | (r >>> 27);
      for (var i = 23; i >= 15; i -= 4) {
        outL <<= 6;
        outL |= (r >>> i) & 0x3f;
      }
      for (var i = 11; i >= 3; i -= 4) {
        outR |= (r >>> i) & 0x3f;
        outR <<= 6;
      }
      outR |= ((r & 0x1f) << 1) | (r >>> 31);
    
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    
    var sTable = [
      14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
      3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
      4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
      15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,
    
      15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
      9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
      0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
      5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,
    
      10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
      1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
      13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
      11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,
    
      7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
      1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
      10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
      15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,
    
      2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
      8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
      4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
      15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,
    
      12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
      0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
      9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
      7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,
    
      4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
      3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
      1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
      10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,
    
      13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
      10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
      7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
      0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
    ];
    
    exports.substitute = function substitute(inL, inR) {
      var out = 0;
      for (var i = 0; i < 4; i++) {
        var b = (inL >>> (18 - i * 6)) & 0x3f;
        var sb = sTable[i * 0x40 + b];
    
        out <<= 4;
        out |= sb;
      }
      for (var i = 0; i < 4; i++) {
        var b = (inR >>> (18 - i * 6)) & 0x3f;
        var sb = sTable[4 * 0x40 + i * 0x40 + b];
    
        out <<= 4;
        out |= sb;
      }
      return out >>> 0;
    };
    
    var permuteTable = [
      16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
      30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
    ];
    
    exports.permute = function permute(num) {
      var out = 0;
      for (var i = 0; i < permuteTable.length; i++) {
        out <<= 1;
        out |= (num >>> permuteTable[i]) & 0x1;
      }
      return out >>> 0;
    };
    
    exports.padSplit = function padSplit(num, size, group) {
      var str = num.toString(2);
      while (str.length < size)
        str = '0' + str;
    
      var out = [];
      for (var i = 0; i < size; i += group)
        out.push(str.slice(i, i + group));
      return out.join(' ');
    };
    
    },{}],316:[function(require,module,exports){
    (function (Buffer){(function (){
    var generatePrime = require('./lib/generatePrime')
    var primes = require('./lib/primes.json')
    
    var DH = require('./lib/dh')
    
    function getDiffieHellman (mod) {
      var prime = new Buffer(primes[mod].prime, 'hex')
      var gen = new Buffer(primes[mod].gen, 'hex')
    
      return new DH(prime, gen)
    }
    
    var ENCODINGS = {
      'binary': true, 'hex': true, 'base64': true
    }
    
    function createDiffieHellman (prime, enc, generator, genc) {
      if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
        return createDiffieHellman(prime, 'binary', enc, generator)
      }
    
      enc = enc || 'binary'
      genc = genc || 'binary'
      generator = generator || new Buffer([2])
    
      if (!Buffer.isBuffer(generator)) {
        generator = new Buffer(generator, genc)
      }
    
      if (typeof prime === 'number') {
        return new DH(generatePrime(prime, generator), generator, true)
      }
    
      if (!Buffer.isBuffer(prime)) {
        prime = new Buffer(prime, enc)
      }
    
      return new DH(prime, generator, true)
    }
    
    exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
    exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"./lib/dh":317,"./lib/generatePrime":318,"./lib/primes.json":319,"buffer":301}],317:[function(require,module,exports){
    (function (Buffer){(function (){
    var BN = require('bn.js');
    var MillerRabin = require('miller-rabin');
    var millerRabin = new MillerRabin();
    var TWENTYFOUR = new BN(24);
    var ELEVEN = new BN(11);
    var TEN = new BN(10);
    var THREE = new BN(3);
    var SEVEN = new BN(7);
    var primes = require('./generatePrime');
    var randomBytes = require('randombytes');
    module.exports = DH;
    
    function setPublicKey(pub, enc) {
      enc = enc || 'utf8';
      if (!Buffer.isBuffer(pub)) {
        pub = new Buffer(pub, enc);
      }
      this._pub = new BN(pub);
      return this;
    }
    
    function setPrivateKey(priv, enc) {
      enc = enc || 'utf8';
      if (!Buffer.isBuffer(priv)) {
        priv = new Buffer(priv, enc);
      }
      this._priv = new BN(priv);
      return this;
    }
    
    var primeCache = {};
    function checkPrime(prime, generator) {
      var gen = generator.toString('hex');
      var hex = [gen, prime.toString(16)].join('_');
      if (hex in primeCache) {
        return primeCache[hex];
      }
      var error = 0;
    
      if (prime.isEven() ||
        !primes.simpleSieve ||
        !primes.fermatTest(prime) ||
        !millerRabin.test(prime)) {
        //not a prime so +1
        error += 1;
    
        if (gen === '02' || gen === '05') {
          // we'd be able to check the generator
          // it would fail so +8
          error += 8;
        } else {
          //we wouldn't be able to test the generator
          // so +4
          error += 4;
        }
        primeCache[hex] = error;
        return error;
      }
      if (!millerRabin.test(prime.shrn(1))) {
        //not a safe prime
        error += 2;
      }
      var rem;
      switch (gen) {
        case '02':
          if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
            // unsuidable generator
            error += 8;
          }
          break;
        case '05':
          rem = prime.mod(TEN);
          if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
            // prime mod 10 needs to equal 3 or 7
            error += 8;
          }
          break;
        default:
          error += 4;
      }
      primeCache[hex] = error;
      return error;
    }
    
    function DH(prime, generator, malleable) {
      this.setGenerator(generator);
      this.__prime = new BN(prime);
      this._prime = BN.mont(this.__prime);
      this._primeLen = prime.length;
      this._pub = undefined;
      this._priv = undefined;
      this._primeCode = undefined;
      if (malleable) {
        this.setPublicKey = setPublicKey;
        this.setPrivateKey = setPrivateKey;
      } else {
        this._primeCode = 8;
      }
    }
    Object.defineProperty(DH.prototype, 'verifyError', {
      enumerable: true,
      get: function () {
        if (typeof this._primeCode !== 'number') {
          this._primeCode = checkPrime(this.__prime, this.__gen);
        }
        return this._primeCode;
      }
    });
    DH.prototype.generateKeys = function () {
      if (!this._priv) {
        this._priv = new BN(randomBytes(this._primeLen));
      }
      this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
      return this.getPublicKey();
    };
    
    DH.prototype.computeSecret = function (other) {
      other = new BN(other);
      other = other.toRed(this._prime);
      var secret = other.redPow(this._priv).fromRed();
      var out = new Buffer(secret.toArray());
      var prime = this.getPrime();
      if (out.length < prime.length) {
        var front = new Buffer(prime.length - out.length);
        front.fill(0);
        out = Buffer.concat([front, out]);
      }
      return out;
    };
    
    DH.prototype.getPublicKey = function getPublicKey(enc) {
      return formatReturnValue(this._pub, enc);
    };
    
    DH.prototype.getPrivateKey = function getPrivateKey(enc) {
      return formatReturnValue(this._priv, enc);
    };
    
    DH.prototype.getPrime = function (enc) {
      return formatReturnValue(this.__prime, enc);
    };
    
    DH.prototype.getGenerator = function (enc) {
      return formatReturnValue(this._gen, enc);
    };
    
    DH.prototype.setGenerator = function (gen, enc) {
      enc = enc || 'utf8';
      if (!Buffer.isBuffer(gen)) {
        gen = new Buffer(gen, enc);
      }
      this.__gen = gen;
      this._gen = new BN(gen);
      return this;
    };
    
    function formatReturnValue(bn, enc) {
      var buf = new Buffer(bn.toArray());
      if (!enc) {
        return buf;
      } else {
        return buf.toString(enc);
      }
    }
    
    }).call(this)}).call(this,require("buffer").Buffer)
    },{"./generatePrime":318,"bn.js":320,"buffer":301,"miller-rabin":372,"randombytes":396}],318:[function(require,module,exports){
    var randomBytes = require('randombytes');
    module.exports = findPrime;
    findPrime.simpleSieve = simpleSieve;
    findPrime.fermatTest = fermatTest;
    var BN = require('bn.js');
    var TWENTYFOUR = new BN(24);
    var MillerRabin = require('miller-rabin');
    var millerRabin = new MillerRabin();
    var ONE = new BN(1);
    var TWO = new BN(2);
    var FIVE = new BN(5);
    var SIXTEEN = new BN(16);
    var EIGHT = new BN(8);
    var TEN = new BN(10);
    var THREE = new BN(3);
    var SEVEN = new BN(7);
    var ELEVEN = new BN(11);
    var FOUR = new BN(4);
    var TWELVE = new BN(12);
    var primes = null;
    
    function _getPrimes() {
      if (primes !== null)
        return primes;
    
      var limit = 0x100000;
      var res = [];
      res[0] = 2;
      for (var i = 1, k = 3; k < limit; k += 2) {
        var sqrt = Math.ceil(Math.sqrt(k));
        for (var j = 0; j < i && res[j] <= sqrt; j++)
          if (k % res[j] === 0)
            break;
    
        if (i !== j && res[j] <= sqrt)
          continue;
    
        res[i++] = k;
      }
      primes = res;
      return res;
    }
    
    function simpleSieve(p) {
      var primes = _getPrimes();
    
      for (var i = 0; i < primes.length; i++)
        if (p.modn(primes[i]) === 0) {
          if (p.cmpn(primes[i]) === 0) {
            return true;
          } else {
            return false;
          }
        }
    
      return true;
    }
    
    function fermatTest(p) {
      var red = BN.mont(p);
      return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
    }
    
    function findPrime(bits, gen) {
      if (bits < 16) {
        // this is what openssl does
        if (gen === 2 || gen === 5) {
          return new BN([0x8c, 0x7b]);
        } else {
          return new BN([0x8c, 0x27]);
        }
      }
      gen = new BN(gen);
    
      var num, n2;
    
      while (true) {
        num = new BN(randomBytes(Math.ceil(bits / 8)));
        while (num.bitLength() > bits) {
          num.ishrn(1);
        }
        if (num.isEven()) {
          num.iadd(ONE);
        }
        if (!num.testn(1)) {
          num.iadd(TWO);
        }
        if (!gen.cmp(TWO)) {
          while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
            num.iadd(FOUR);
          }
        } else if (!gen.cmp(FIVE)) {
          while (num.mod(TEN).cmp(THREE)) {
            num.iadd(FOUR);
          }
        }
        n2 = num.shrn(1);
        if (simpleSieve(n2) && simpleSieve(num) &&
          fermatTest(n2) && fermatTest(num) &&
          millerRabin.test(n2) && millerRabin.test(num)) {
          return num;
        }
      }
    
    }
    
    },{"bn.js":320,"miller-rabin":372,"randombytes":396}],319:[function(require,module,exports){
    module.exports={
        "modp1": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
        },
        "modp2": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
        },
        "modp5": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
        },
        "modp14": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
        },
        "modp15": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
        },
        "modp16": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
        },
        "modp17": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
        },
        "modp18": {
            "gen": "02",
            "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
        }
    }
    },{}],320:[function(require,module,exports){
    arguments[4][123][0].apply(exports,arguments)
    },{"buffer":257,"dup":123}],321:[function(require,module,exports){
    arguments[4][127][0].apply(exports,arguments)
    },{"../package.json":337,"./elliptic/curve":324,"./elliptic/curves":327,"./elliptic/ec":328,"./elliptic/eddsa":331,"./elliptic/utils":335,"brorand":256,"dup":127}],322:[function(require,module,exports){
    arguments[4][128][0].apply(exports,arguments)
    },{"../utils":335,"bn.js":336,"dup":128}],323:[function(require,module,exports){
    arguments[4][129][0].apply(exports,arguments)
    },{"../utils":335,"./base":322,"bn.js":336,"dup":129,"inherits":370}],324:[function(require,module,exports){
    arguments[4][130][0].apply(exports,arguments)
    },{"./base":322,"./edwards":323,"./mont":325,"./short":326,"dup":130}],325:[function(require,module,exports){
    arguments[4][131][0].apply(exports,arguments)
    },{"../utils":335,"./base":322,"bn.js":336,"dup":131,"inherits":370}],326:[function(require,module,exports){
    arguments[4][132][0].apply(exports,arguments)
    },{"../utils":335,"./base":322,"bn.js":336,"dup":132,"inherits":370}],327:[function(require,module,exports){
    arguments[4][133][0].apply(exports,arguments)
    },{"./curve":324,"./precomputed/secp256k1":334,"./utils":335,"dup":133,"hash.js":356}],328:[function(require,module,exports){
    arguments[4][134][0].apply(exports,arguments)
    },{"../curves":327,"../utils":335,"./key":329,"./signature":330,"bn.js":336,"brorand":256,"dup":134,"hmac-drbg":368}],329:[function(require,module,exports){
    arguments[4][135][0].apply(exports,arguments)
    },{"../utils":335,"bn.js":336,"dup":135}],330:[function(require,module,exports){
    arguments[4][136][0].apply(exports,arguments)
    },{"../utils":335,"bn.js":336,"dup":136}],331:[function(require,module,exports){
    arguments[4][137][0].apply(exports,arguments)
    },{"../curves":327,"../utils":335,"./key":332,"./signature":333,"dup":137,"hash.js":356}],332:[function(require,module,exports){
    arguments[4][138][0].apply(exports,arguments)
    },{"../utils":335,"dup":138}],333:[function(require,module,exports){
    arguments[4][139][0].apply(exports,arguments)
    },{"../utils":335,"bn.js":336,"dup":139}],334:[function(require,module,exports){
    arguments[4][140][0].apply(exports,arguments)
    },{"dup":140}],335:[function(require,module,exports){
    arguments[4][141][0].apply(exports,arguments)
    },{"bn.js":336,"dup":141,"minimalistic-assert":374,"minimalistic-crypto-utils":375}],336:[function(require,module,exports){
    arguments[4][123][0].apply(exports,arguments)
    },{"buffer":257,"dup":123}],337:[function(require,module,exports){
    arguments[4][142][0].apply(exports,arguments)
    },{"dup":142}],338:[function(require,module,exports){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    'use strict';
    
    var R = typeof Reflect === 'object' ? Reflect : null
    var ReflectApply = R && typeof R.apply === 'function'
      ? R.apply
      : function ReflectApply(target, receiver, args) {
        return Function.prototype.apply.call(target, receiver, args);
      }
    
    var ReflectOwnKeys
    if (R && typeof R.ownKeys === 'function') {
      ReflectOwnKeys = R.ownKeys
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target)
          .concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    
    function ProcessEmitWarning(warning) {
      if (console && console.warn) console.warn(warning);
    }
    
    var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
      return value !== value;
    }
    
    function EventEmitter() {
      EventEmitter.init.call(this);
    }
    module.exports = EventEmitter;
    module.exports.once = once;
    
    // Backwards-compat with node 0.10.x
    EventEmitter.EventEmitter = EventEmitter;
    
    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = undefined;
    
    // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.
    var defaultMaxListeners = 10;
    
    function checkListener(listener) {
      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    
    Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        }
        defaultMaxListeners = arg;
      }
    });
    
    EventEmitter.init = function() {
    
      if (this._events === undefined ||
          this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
      }
    
      this._maxListeners = this._maxListeners || undefined;
    };
    
    // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
      }
      this._maxListeners = n;
      return this;
    };
    
    function _getMaxListeners(that) {
      if (that._maxListeners === undefined)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }
    
    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    
    EventEmitter.prototype.emit = function emit(type) {
      var args = [];
      for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
      var doError = (type === 'error');
    
      var events = this._events;
      if (events !== undefined)
        doError = (doError && events.error === undefined);
      else if (!doError)
        return false;
    
      // If there is no 'error' event listener then throw.
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          // Note: The comments on the `throw` lines are intentional, they show
          // up in Node's output if this results in an unhandled exception.
          throw er; // Unhandled 'error' event
        }
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
      }
    
      var handler = events[type];
    
      if (handler === undefined)
        return false;
    
      if (typeof handler === 'function') {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          ReflectApply(listeners[i], this, args);
      }
    
      return true;
    };
    
    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;
    
      checkListener(listener);
    
      events = target._events;
      if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
      } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
          target.emit('newListener', type,
                      listener.listener ? listener.listener : listener);
    
          // Re-assign `events` because a newListener handler could have caused the
          // this._events to be assigned to a new object
          events = target._events;
        }
        existing = events[type];
      }
    
      if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === 'function') {
          // Adding the second element, need to change to array.
          existing = events[type] =
            prepend ? [listener, existing] : [existing, listener];
          // If we've already got an array, just append.
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
    
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true;
          // No error code for this since it is a Warning
          // eslint-disable-next-line no-restricted-syntax
          var w = new Error('Possible EventEmitter memory leak detected. ' +
                              existing.length + ' ' + String(type) + ' listeners ' +
                              'added. Use emitter.setMaxListeners() to ' +
                              'increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }
    
      return target;
    }
    
    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    
    EventEmitter.prototype.prependListener =
        function prependListener(type, listener) {
          return _addListener(this, type, listener, true);
        };
    
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    
    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }
    
    EventEmitter.prototype.once = function once(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    
    EventEmitter.prototype.prependOnceListener =
        function prependOnceListener(type, listener) {
          checkListener(listener);
          this.prependListener(type, _onceWrap(this, type, listener));
          return this;
        };
    
    // Emits a 'removeListener' event if and only if the listener was removed.
    EventEmitter.prototype.removeListener =
        function removeListener(type, listener) {
          var list, events, position, i, originalListener;
    
          checkListener(listener);
    
          events = this._events;
          if (events === undefined)
            return this;
    
          list = events[type];
          if (list === undefined)
            return this;
    
          if (list === listener || list.listener === listener) {
            if (--this._eventsCount === 0)
              this._events = Object.create(null);
            else {
              delete events[type];
              if (events.removeListener)
                this.emit('removeListener', type, list.listener || listener);
            }
          } else if (typeof list !== 'function') {
            position = -1;
    
            for (i = list.length - 1; i >= 0; i--) {
              if (list[i] === listener || list[i].listener === listener) {
                originalListener = list[i].listener;
                position = i;
                break;
              }
            }
    
            if (position < 0)
              return this;
    
            if (position === 0)
              list.shift();
            else {
              spliceOne(list, position);
            }
    
            if (list.length === 1)
              events[type] = list[0];
    
            if (events.removeListener !== undefined)
              this.emit('removeListener', type, originalListener || listener);
          }
    
          return this;
        };
    
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    
    EventEmitter.prototype.removeAllListeners =
        function removeAllListeners(type) {
          var listeners, events, i;
    
          events = this._events;
          if (events === undefined)
            return this;
    
          // not listening for removeListener, no need to emit
          if (events.removeListener === undefined) {
            if (arguments.length === 0) {
              this._events = Object.create(null);
              this._eventsCount = 0;
            } else if (events[type] !== undefined) {
              if (--this._eventsCount === 0)
                this._events = Object.create(null);
              else
                delete events[type];
            }
            return this;
          }
    
          // emit removeListener for all listeners on all events
          if (arguments.length === 0) {
            var keys = Object.keys(events);
            var key;
            for (i = 0; i < keys.length; ++i) {
              key = keys[i];
              if (key === 'removeListener') continue;
              this.removeAllListeners(key);
            }
            this.removeAllListeners('removeListener');
            this._events = Object.create(null);
            this._eventsCount = 0;
            return this;
          }
    
          listeners = events[type];
    
          if (typeof listeners === 'function') {
            this.removeListener(type, listeners);
          } else if (listeners !== undefined) {
            // LIFO order
            for (i = listeners.length - 1; i >= 0; i--) {
              this.removeListener(type, listeners[i]);
            }
          }
    
          return this;
        };
    
    function _listeners(target, type, unwrap) {
      var events = target._events;
    
      if (events === undefined)
        return [];
    
      var evlistener = events[type];
      if (evlistener === undefined)
        return [];
    
      if (typeof evlistener === 'function')
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
    
      return unwrap ?
        unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    
    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    
    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    
    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    
    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;
    
      if (events !== undefined) {
        var evlistener = events[type];
    
        if (typeof evlistener === 'function') {
          return 1;
        } else if (evlistener !== undefined) {
          return evlistener.length;
        }
      }
    
      return 0;
    }
    
    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    
    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }
    
    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }
    
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }
    
    function once(emitter, name) {
      return new Promise(function (resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name, resolver);
          reject(err);
        }
    
        function resolver() {
          if (typeof emitter.removeListener === 'function') {
            emitter.removeListener('error', errorListener);
          }
          resolve([].slice.call(arguments));
        };
    
        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
        if (name !== 'error') {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === 'function') {
        eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
      }
    }
    
    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
      if (typeof emitter.on === 'function') {
        if (flags.once) {
          emitter.once(name, listener);
        } else {
          emitter.on(name, listener);
        }
      } else if (typeof emitter.addEventListener === 'function') {
        // EventTarget does not have `error` event semantics like Node
        // EventEmitters, we do not listen for `error` events here.
        emitter.addEventListener(name, function wrapListener(arg) {
          // IE does not have builtin `{ once: true }` support so we
          // have to do it manually.
          if (flags.once) {
            emitter.removeEventListener(name, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
    
    },{}],339:[function(require,module,exports){
    var Buffer = require('safe-buffer').Buffer
    var MD5 = require('md5.js')
    
    /* eslint-disable camelcase */
    function EVP_BytesToKey (password, salt, keyBits, ivLen) {
      if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
      if (salt) {
        if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
        if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
      }
    
      var keyLen = keyBits / 8
      var key = Buffer.alloc(keyLen)
      var iv = Buffer.alloc(ivLen || 0)
      var tmp = Buffer.alloc(0)
    
      while (keyLen > 0 || ivLen > 0) {
        var hash = new MD5()
        hash.update(tmp)
        hash.update(password)
        if (salt) hash.update(salt)
        tmp = hash.digest()
    
        var used = 0
    
        if (keyLen > 0) {
          var keyStart = key.length - keyLen
          used = Math.min(keyLen, tmp.length)
          tmp.copy(key, keyStart, 0, used)
          keyLen -= used
        }
    
        if (used < tmp.length && ivLen > 0) {
          var ivStart = iv.length - ivLen
          var length = Math.min(ivLen, tmp.length - used)
          tmp.copy(iv, ivStart, used, used + length)
          ivLen -= length
        }
      }
    
      tmp.fill(0)
      return { key: key, iv: iv }
    }
    
    module.exports = EVP_BytesToKey
    
    },{"md5.js":371,"safe-buffer":399}],340:[function(require,module,exports){
    arguments[4][170][0].apply(exports,arguments)
    },{"dup":170,"inherits":370,"readable-stream":355,"safe-buffer":399}],341:[function(require,module,exports){
    arguments[4][198][0].apply(exports,arguments)
    },{"dup":198}],342:[function(require,module,exports){
    arguments[4][199][0].apply(exports,arguments)
    },{"./_stream_readable":344,"./_stream_writable":346,"_process":388,"dup":199,"inherits":370}],343:[function(require,module,exports){
    arguments[4][200][0].apply(exports,arguments)
    },{"./_stream_transform":345,"dup":200,"inherits":370}],344:[function(require,module,exports){
    arguments[4][201][0].apply(exports,arguments)
    },{"../errors":341,"./_stream_duplex":342,"./internal/streams/async_iterator":347,"./internal/streams/buffer_list":348,"./internal/streams/destroy":349,"./internal/streams/from":351,"./internal/streams/state":353,"./internal/streams/stream":354,"_process":388,"buffer":301,"dup":201,"events":338,"inherits":370,"string_decoder/":424,"util":257}],345:[function(require,module,exports){
    arguments[4][202][0].apply(exports,arguments)
    },{"../errors":341,"./_stream_duplex":342,"dup":202,"inherits":370}],346:[function(require,module,exports){
    arguments[4][203][0].apply(exports,arguments)
    },{"../errors":341,"./_stream_duplex":342,"./internal/streams/destroy":349,"./internal/streams/state":353,"./internal/streams/stream":354,"_process":388,"buffer":301,"dup":203,"inherits":370,"util-deprecate":426}],347:[function(require,module,exports){
    arguments[4][204][0].apply(exports,arguments)
    },{"./end-of-stream":350,"_process":388,"dup":204}],348:[function(require,module,exports){
    arguments[4][205][0].apply(exports,arguments)
    },{"buffer":301,"dup":205,"util":257}],349:[function(require,module,exports){
    arguments[4][206][0].apply(exports,arguments)
    },{"_process":388,"dup":206}],350:[function(require,module,exports){
    arguments[4][207][0].apply(exports,arguments)
    },{"../../../errors":341,"dup":207}],351:[function(require,module,exports){
    arguments[4][208][0].apply(exports,arguments)
    },{"dup":208}],352:[function(require,module,exports){
    arguments[4][209][0].apply(exports,arguments)
    },{"../../../errors":341,"./end-of-stream":350,"dup":209}],353:[function(require,module,exports){
    arguments[4][210][0].apply(exports,arguments)
    },{"../../../errors":341,"dup":210}],354:[function(require,module,exports){
    arguments[4][211][0].apply(exports,arguments)
    },{"dup":211,"events":338}],355:[function(require,module,exports){
    arguments[4][212][0].apply(exports,arguments)
    },{"./lib/_stream_duplex.js":342,"./lib/_stream_passthrough.js":343,"./lib/_stream_readable.js":344,"./lib/_stream_transform.js":345,"./lib/_stream_writable.js":346,"./lib/internal/streams/end-of-stream.js":350,"./lib/internal/streams/pipeline.js":352,"dup":212}],356:[function(require,module,exports){
    arguments[4][171][0].apply(exports,arguments)
    },{"./hash/common":357,"./hash/hmac":358,"./hash/ripemd":359,"./hash/sha":360,"./hash/utils":367,"dup":171}],357:[function(require,module,exports){
    arguments[4][172][0].apply(exports,arguments)
    },{"./utils":367,"dup":172,"minimalistic-assert":374}],358:[function(require,module,exports){
    arguments[4][173][0].apply(exports,arguments)
    },{"./utils":367,"dup":173,"minimalistic-assert":374}],359:[function(require,module,exports){
    arguments[4][174][0].apply(exports,arguments)
    },{"./common":357,"./utils":367,"dup":174}],360:[function(require,module,exports){
    arguments[4][175][0].apply(exports,arguments)
    },{"./sha/1":361,"./sha/224":362,"./sha/256":363,"./sha/384":364,"./sha/512":365,"dup":175}],361:[function(require,module,exports){
    arguments[4][176][0].apply(exports,arguments)
    },{"../common":357,"../utils":367,"./common":366,"dup":176}],362:[function(require,module,exports){
    arguments[4][177][0].apply(exports,arguments)
    },{"../utils":367,"./256":363,"dup":177}],363:[function(require,module,exports){
    arguments[4][178][0].apply(exports,arguments)
    },{"../common":357,"../utils":367,"./common":366,"dup":178,"minimalistic-assert":374}],364:[function(require,module,exports){
    arguments[4][179][0].apply(exports,arguments)
    },{"../utils":367,"./512":365,"dup":179}],365:[function(require,module,exports){
    arguments[4][180][0].apply(exports,arguments)
    },{"../common":357,"../utils":367,"dup":180,"minimalistic-assert":374}],366:[function(require,module,exports){
    arguments[4][181][0].apply(exports,arguments)
    },{"../utils":367,"dup":181}],367:[function(require,module,exports){
    arguments[4][182][0].apply(exports,arguments)
    },{"dup":182,"inherits":370,"minimalistic-assert":374}],368:[function(require,module,exports){
    arguments[4][183][0].apply(exports,arguments)
    },{"dup":183,"hash.js":356,"minimalistic-assert":374,"minimalistic-crypto-utils":375}],369:[function(require,module,exports){
    /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
    exports.read = function (buffer, offset, isLE, mLen, nBytes) {
      var e, m
      var eLen = (nBytes * 8) - mLen - 1
      var eMax = (1 << eLen) - 1
      var eBias = eMax >> 1
      var nBits = -7
      var i = isLE ? (nBytes - 1) : 0
      var d = isLE ? -1 : 1
      var s = buffer[offset + i]
    
      i += d
    
      e = s & ((1 << (-nBits)) - 1)
      s >>= (-nBits)
      nBits += eLen
      for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}
    
      m = e & ((1 << (-nBits)) - 1)
      e >>= (-nBits)
      nBits += mLen
      for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}
    
      if (e === 0) {
        e = 1 - eBias
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen)
        e = e - eBias
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }
    
    exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c
      var eLen = (nBytes * 8) - mLen - 1
      var eMax = (1 << eLen) - 1
      var eBias = eMax >> 1
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
      var i = isLE ? 0 : (nBytes - 1)
      var d = isLE ? 1 : -1
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
    
      value = Math.abs(value)
    
      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0
        e = eMax
      } else {
        e = Math.floor(Math.log(value) / Math.LN2)
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--
          c *= 2
        }
        if (e + eBias >= 1) {
          value += rt / c
        } else {
          value += rt * Math.pow(2, 1 - eBias)
        }
        if (value * c >= 2) {
          e++
          c /= 2
        }
    
        if (e + eBias >= eMax) {
          m = 0
          e = eMax
        } else if (e + eBias >= 1) {
          m = ((value * c) - 1) * Math.pow(2, mLen)
          e = e + eBias
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
          e = 0
        }
      }
    
      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
    
      e = (e << mLen) | m
      eLen += mLen
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
    
      buffer[offset + i - d] |= s * 128
    }
    
    },{}],370:[function(require,module,exports){
    arguments[4][184][0].apply(exports,arguments)
    },{"dup":184}],371:[function(require,module,exports){
    arguments[4][194][0].apply(exports,arguments)
    },{"dup":194,"hash-base":340,"inherits":370,"safe-buffer":399}],372:[function(require,module,exports){
    var bn = require('bn.js');
    var brorand = require('brorand');
    
    function MillerRabin(rand) {
      this.rand = rand || new brorand.Rand();
    }
    module.exports = MillerRabin;
    
    MillerRabin.create = function create(rand) {
      return new MillerRabin(rand);
    };
    
    MillerRabin.prototype._randbelow = function _randbelow(n) {
      var len = n.bitLength();
      var min_bytes = Math.ceil(len / 8);
    
      // Generage random bytes until a number less than n is found.
      // This ensures that 0..n-1 have an equal probability of being selected.
      do
        var a = new bn(this.rand.generate(min_bytes));
      while (a.cmp(n) >= 0);
    
      return a;
    };
    
    MillerRabin.prototype._randrange = function _randrange(start, stop) {
      // Generate a random number greater than or equal to start and less than stop.
      var size = stop.sub(start);
      return start.add(this._randbelow(size));
    };
    
    MillerRabin.prototype.test = function test(n, k, cb) {
      var len = n.bitLength();
      var red = bn.mont(n);
      var rone = new bn(1).toRed(red);
    
      if (!k)
        k = Math.max(1, (len / 48) | 0);
    
      // Find d and s, (n - 1) = (2 ^ s) * d;
      var n1 = n.subn(1);
      for (var s = 0; !n1.testn(s); s++) {}
      var d = n.shrn(s);
    
      var rn1 = n1.toRed(red);
    
      var prime = true;
      for (; k > 0; k--) {
        var a = this._randrange(new bn(2), n1);
        if (cb)
          cb(a);
    
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
          continue;
    
        for (var i = 1; i < s; i++) {
          x = x.redSqr();
    
          if (x.cmp(rone) === 0)
            return false;
          if (x.cmp(rn1) === 0)
            break;
        }
    
        if (i === s)
          return false;
      }
    
      return prime;
    };
    
    MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
      var len = n.bitLength();
      var red = bn.mont(n);
      var rone = new bn(1).toRed(red);
    
      if (!k)
        k = Math.max(1, (len / 48) | 0);
    
      // Find d and s, (n - 1) = (2 ^ s) * d;
      var n1 = n.subn(1);
      for (var s = 0; !n1.testn(s); s++) {}
      var d = n.shrn(s);
    
      var rn1 = n1.toRed(red);
    
      for (; k > 0; k--) {
        var a = this._randrange(new bn(2), n1);
    
        var g = n.gcd(a);
        if (g.cmpn(1) !== 0)
          return g;
    
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
          continue;
    
        for (var i = 1; i < s; i++) {
          x = x.redSqr();
    
          if (x.cmp(rone) === 0)
            return x.fromRed().subn(1).gcd(n);
          if (x.cmp(rn1) === 0)
            break;
        }
    
        if (i === s) {
          x = x.redSqr();
          return x.fromRed().subn(1).gcd(n);
        }
      }
    
      return false;
    };
    
    },{"bn.js":373,"brorand":256}],373:[function(require,module,exports){
    arguments[4][123][0].apply(exports,arguments)
    },{"buffer":257,"dup":123}],374:[function(require,module,exports){
    arguments[4][195][0].apply(exports,arguments)
    },{"dup":195}],375:[function(require,module,exports){
    arguments[4][196][0].apply(exports,arguments)
    },{"dup":196}],376:[function(require,module,exports){
    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    
    'use strict';
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    
    function toObject(val) {
        if (val === null || val === undefined) {
            throw new TypeError('Object.assign cannot be called with null or undefined');
        }
    
        return Object(val);
    }
    
    function shouldUseNative() {
        try {
            if (!Object.assign) {
                return false;
            }
    
            // Detect buggy property enumeration order in older V8 versions.
    
            // https://bugs.chromium.org/p/v8/issues/detail?id=4118
            var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
            test1[5] = 'de';
            if (Object.getOwnPropertyNames(test1)[0] === '5') {
                return false;
            }
    
            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test2 = {};
            for (var i = 0; i < 10; i++) {
                test2['_' + String.fromCharCode(i)] = i;
            }
            var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
                return test2[n];
            });
            if (order2.join('') !== '0123456789') {
                return false;
            }
    
            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test3 = {};
            'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
                test3[letter] = letter;
            });
            if (Object.keys(Object.assign({}, test3)).join('') !==
                    'abcdefghijklmnopqrst') {
                return false;
            }
    
            return true;
        } catch (err) {
            // We don't expect any of the above to throw, but better to be safe.
            return false;
        }
    }
    
    module.exports = shouldUseNative() ? Object.assign : function (target, source) {
        var from;
        var to = toObject(target);
        var symbols;
    
        for (var s = 1; s < arguments.length; s++) {
            from = Object(arguments[s]);
    
            for (var key in from) {
                if (hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                }
            }
    
            if (getOwnPropertySymbols) {
                symbols = getOwnPropertySymbols(from);
                for (var i = 0; i < symbols.length; i++) {
                    if (propIsEnumerable.call(from, symbols[i])) {
                        to[symbols[i]] = from[symbols[i]];
                    }
                }
            }
        }
    
        return to;
    };
    
    },{}],377:[function(require,module,exports){
    module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
    "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
    "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
    "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
    "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
    "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
    "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
    "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
    "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
    "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
    "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
    "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
    }
    },{}],378:[function(require,module,exports){
    // from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
    // Fedor, you are amazing.
    'use strict'
    
    var asn1 = require('asn1.js')
    
    exports.certificate = require('./certificate')
    
    var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
      this.seq().obj(
        this.key('version').int(),
        this.key('modulus').int(),
        this.key('publicExponent').int(),
        this.key('privateExponent').int(),
        this.key('prime1').int(),
        this.key('prime2').int(),
        this.key('exponent1').int(),
        this.key('exponent2').int(),
        this.key('coefficient').int()
      )
    })
    exports.RSAPrivateKey = RSAPrivateKey
    
    var RSAPublicKey = asn1.define('RSAPublicKey', function () {
      this.seq().obj(
        this.key('modulus').int(),
        this.key('publicExponent').int()
      )
    })
    exports.RSAPublicKey = RSAPublicKey
    
    var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
      this.seq().obj(
        this.key('algorithm').use(AlgorithmIdentifier),
        this.key('subjectPublicKey').bitstr()
      )
    })
    exports.PublicKey = PublicKey
    
    var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
      this.seq().obj(
        this.key('algorithm').objid(),
        this.key('none').null_().optional(),
        this.key('curve').objid().optional(),
        this.key('params').seq().obj(
          this.key('p').int(),
          this.key('q').int(),
          this.key('g').int()
        ).optional()
      )
    })
    
    var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
      this.seq().obj(
        this.key('version').int(),
        this.key('algorithm').use(AlgorithmIdentifier),
        this.key('subjectPrivateKey').octstr()
      )
    })
    exports.PrivateKey = PrivateKeyInfo
    var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
      this.seq().obj(
        this.key('algorithm').seq().obj(
          this.key('id').objid(),
          this.key('decrypt').seq().obj(
            this.key('kde').seq().obj(
              this.key('id').objid(),
              this.key('kdeparams').seq().obj(
                this.key('salt').octstr(),
                this.key('iters').int()
              )
            ),
            this.key('cipher').seq().obj(
              this.key('algo').objid(),
              this.key('iv').octstr()
            )
          )
        ),
        this.key('subjectPrivateKey').octstr()
      )
    })
    
    exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo
    
    var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
      this.seq().obj(
        this.key('version').int(),
        this.key('p').int(),
        this.key('q').int(),
        this.key('g').int(),
        this.key('pub_key').int(),
        this.key('priv_key').int()
      )
    })
    exports.DSAPrivateKey = DSAPrivateKey
    
    exports.DSAparam = asn1.define('DSAparam', function () {
      this.int()
    })
    
    var ECPrivateKey = asn1.define('ECPrivateKey', function () {
      this.seq().obj(
        this.key('version').int(),
        this.key('privateKey').octstr(),
        this.key('parameters').optional().explicit(0).use(ECParameters),
        this.key('publicKey').optional().explicit(1).bitstr()
      )
    })
    exports.ECPrivateKey = ECPrivateKey
    
    var ECParameters = asn1.define('ECParameters', function () {
      this.choice({
        namedCurve: this.objid()
      })
    })
    
    exports.signature = asn1.define('signature', function () {
      this.seq().obj(
        this.key('r').int(),
        this.key('s').int()
      )
    })
    
    },{"./certificate":379,"asn1.js":235}],379:[function(require,module,exports){
    // from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
    // thanks to @Rantanen
    
    'use strict'
    
    var asn = require('asn1.js')
    
    var Time = asn.define('Time', function () {
      this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
      })
    })
    
    var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
      this.seq().obj(
        this.key('type').objid(),
        this.key('value').any()
      )
    })
    
    var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
      this.seq().obj(
        this.key('algorithm').objid(),
        this.key('parameters').optional(),
        this.key('curve').objid().optional()
      )
    })
    
    var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
      this.seq().obj(
        this.key('algorithm').use(AlgorithmIdentifier),
        this.key('subjectPublicKey').bitstr()
      )
    })
    
    var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
      this.setof(AttributeTypeValue)
    })
    
    var RDNSequence = asn.define('RDNSequence', function () {
      this.seqof(RelativeDistinguishedName)
    })
    
    var Name = asn.define('Name', function () {
      this.choice({
        rdnSequence: this.use(RDNSequence)
      })
    })
    
    var Validity = asn.define('Validity', function () {
      this.seq().obj(
        this.key('notBefore').use(Time),
        this.key('notAfter').use(Time)
      )
    })
    
    var Extension = asn.define('Extension', function () {
      this.seq().obj(
        this.key('extnID').objid(),
        this.key('critical').bool().def(false),
        this.key('extnValue').octstr()
      )
    })
    
    var TBSCertificate = asn.define('TBSCertificate', function () {
      this.seq().obj(
        this.key('version').explicit(0).int().optional(),
        this.key('serialNumber').int(),
        this.key('signature').use(AlgorithmIdentifier),
        this.key('issuer').use(Name),
        this.key('validity').use(Validity),
        this.key('subject').use(Name),
        this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
        this.key('issuerUniqueID').implicit(1).bitstr().optional(),
        this.key('subjectUniqueID').implicit(2).bitstr().optional(),
        this.key('extensions').explicit(3).seqof(Extension).optional()
      )
    })
    
    var X509Certificate = asn.define('X509Certificate', function () {
      this.seq().obj(
        this.key('tbsCertificate').use(TBSCertificate),
        this.key('signatureAlgorithm').use(AlgorithmIdentifier),
        this.key('signatureValue').bitstr()
      )
    })
    
    module.exports = X509Certificate
    
    },{"asn1.js":235}],380:[function(require,module,exports){
    // adapted from https://github.com/apatil/pemstrip
    var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m
    var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
    var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m
    var evp = require('evp_bytestokey')
    var ciphers = require('browserify-aes')
    var Buffer = require('safe-buffer').Buffer
    module.exports = function (okey, password) {
      var key = okey.toString()
      var match = key.match(findProc)
      var decrypted
      if (!match) {
        var match2 = key.match(fullRegex)
        decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64')
      } else {
        var suite = 'aes' + match[1]
        var iv = Buffer.from(match[2], 'hex')
        var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
        var out = []
        var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
        out.push(cipher.update(cipherText))
        out.push(cipher.final())
        decrypted = Buffer.concat(out)
      }
      var tag = key.match(startRegex)[1]
      return {
        tag: tag,
        data: decrypted
      }
    }
    
    },{"browserify-aes":260,"evp_bytestokey":339,"safe-buffer":399}],381:[function(require,module,exports){
    var asn1 = require('./asn1')
    var aesid = require('./aesid.json')
    var fixProc = require('./fixProc')
    var ciphers = require('browserify-aes')
    var compat = require('pbkdf2')
    var Buffer = require('safe-buffer').Buffer
    module.exports = parseKeys
    
    function parseKeys (buffer) {
      var password
      if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
        password = buffer.passphrase
        buffer = buffer.key
      }
      if (typeof buffer === 'string') {
        buffer = Buffer.from(buffer)
      }
    
      var stripped = fixProc(buffer, password)
    
      var type = stripped.tag
      var data = stripped.data
      var subtype, ndata
      switch (type) {
        case 'CERTIFICATE':
          ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
          // falls through
        case 'PUBLIC KEY':
          if (!ndata) {
            ndata = asn1.PublicKey.decode(data, 'der')
          }
          subtype = ndata.algorithm.algorithm.join('.')
          switch (subtype) {
            case '1.2.840.113549.1.1.1':
              return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
            case '1.2.840.10045.2.1':
              ndata.subjectPrivateKey = ndata.subjectPublicKey
              return {
                type: 'ec',
                data: ndata
              }
            case '1.2.840.10040.4.1':
              ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
              return {
                type: 'dsa',
                data: ndata.algorithm.params
              }
            default: throw new Error('unknown key id ' + subtype)
          }
          // throw new Error('unknown key type ' + type)
        case 'ENCRYPTED PRIVATE KEY':
          data = asn1.EncryptedPrivateKey.decode(data, 'der')
          data = decrypt(data, password)
          // falls through
        case 'PRIVATE KEY':
          ndata = asn1.PrivateKey.decode(data, 'der')
          subtype = ndata.algorithm.algorithm.join('.')
          switch (subtype) {
            case '1.2.840.113549.1.1.1':
              return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
            case '1.2.840.10045.2.1':
              return {
                curve: ndata.algorithm.curve,
                privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
              }
            case '1.2.840.10040.4.1':
              ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
              return {
                type: 'dsa',
                params: ndata.algorithm.params
              }
            default: throw new Error('unknown key id ' + subtype)
          }
          // throw new Error('unknown key type ' + type)
        case 'RSA PUBLIC KEY':
          return asn1.RSAPublicKey.decode(data, 'der')
        case 'RSA PRIVATE KEY':
          return asn1.RSAPrivateKey.decode(data, 'der')
        case 'DSA PRIVATE KEY':
          return {
            type: 'dsa',
            params: asn1.DSAPrivateKey.decode(data, 'der')
          }
        case 'EC PRIVATE KEY':
          data = asn1.ECPrivateKey.decode(data, 'der')
          return {
            curve: data.parameters.value,
            privateKey: data.privateKey
          }
        default: throw new Error('unknown key type ' + type)
      }
    }
    parseKeys.signature = asn1.signature
    function decrypt (data, password) {
      var salt = data.algorithm.decrypt.kde.kdeparams.salt
      var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
      var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
      var iv = data.algorithm.decrypt.cipher.iv
      var cipherText = data.subjectPrivateKey
      var keylen = parseInt(algo.split('-')[1], 10) / 8
      var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
      var cipher = ciphers.createDecipheriv(algo, key, iv)
      var out = []
      out.push(cipher.update(cipherText))
      out.push(cipher.final())
      return Buffer.concat(out)
    }
    
    },{"./aesid.json":377,"./asn1":378,"./fixProc":380,"browserify-aes":260,"pbkdf2":382,"safe-buffer":399}],382:[function(require,module,exports){
    exports.pbkdf2 = require('./lib/async')
    exports.pbkdf2Sync = require('./lib/sync')
    
    },{"./lib/async":383,"./lib/sync":386}],383:[function(require,module,exports){
    (function (global){(function (){
    var Buffer = require('safe-buffer').Buffer
    
    var checkParameters = require('./precondition')
    var defaultEncoding = require('./default-encoding')
    var sync = require('./sync')
    var toBuffer = require('./to-buffer')
    
    var ZERO_BUF
    var subtle = global.crypto && global.crypto.subtle
    var toBrowser = {
      sha: 'SHA-1',
      'sha-1': 'SHA-1',
      sha1: 'SHA-1',
      sha256: 'SHA-256',
      'sha-256': 'SHA-256',
      sha384: 'SHA-384',
      'sha-384': 'SHA-384',
      'sha-512': 'SHA-512',
      sha512: 'SHA-512'
    }
    var checks = []
    function checkNative (algo) {
      if (global.process && !global.process.browser) {
        return Promise.resolve(false)
      }
      if (!subtle || !subtle.importKey || !subtle.deriveBits) {
        return Promise.resolve(false)
      }
      if (checks[algo] !== undefined) {
        return checks[algo]
      }
      ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
      var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
        .then(function () {
          return true
        }).catch(function () {
          return false
        })
      checks[algo] = prom
      return prom
    }
    var nextTick
    function getNextTick () {
      if (nextTick) {
        return nextTick
      }
      if (global.process && global.process.nextTick) {
        nextTick = global.process.nextTick
      } else if (global.queueMicrotask) {
        nextTick = global.queueMicrotask
      } else if (global.setImmediate) {
        nextTick = global.setImmediate
      } else {
        nextTick = global.setTimeout
      }
      return nextTick
    }
    function browserPbkdf2 (password, salt, iterations, length, algo) {
      return subtle.importKey(
        'raw', password, { name: 'PBKDF2' }, false, ['deriveBits']
      ).then(function (key) {
        return subtle.deriveBits({
          name: 'PBKDF2',
          salt: salt,
          iterations: iterations,
          hash: {
            name: algo
          }
        }, key, length << 3)
      }).then(function (res) {
        return Buffer.from(res)
      })
    }
    
    function resolvePromise (promise, callback) {
      promise.then(function (out) {
        getNextTick()(function () {
          callback(null, out)
        })
      }, function (e) {
        getNextTick()(function () {
          callback(e)
        })
      })
    }
    module.exports = function (password, salt, iterations, keylen, digest, callback) {
      if (typeof digest === 'function') {
        callback = digest
        digest = undefined
      }
    
      digest = digest || 'sha1'
      var algo = toBrowser[digest.toLowerCase()]
    
      if (!algo || typeof global.Promise !== 'function') {
        getNextTick()(function () {
          var out
          try {
            out = sync(password, salt, iterations, keylen, digest)
          } catch (e) {
            return callback(e)
          }
          callback(null, out)
        })
        return
      }
    
      checkParameters(iterations, keylen)
      password = toBuffer(password, defaultEncoding, 'Password')
      salt = toBuffer(salt, defaultEncoding, 'Salt')
      if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
    
      resolvePromise(checkNative(algo).then(function (resp) {
        if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)
    
        return sync(password, salt, iterations, keylen, digest)
      }), callback)
    }
    
    }).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"./default-encoding":384,"./precondition":385,"./sync":386,"./to-buffer":387,"safe-buffer":399}],384:[function(require,module,exports){
    (function (process,global){(function (){
    var defaultEncoding
    /* istanbul ignore next */
    if (global.process && global.process.browser) {
      defaultEncoding = 'utf-8'
    } else if (global.process && global.process.version) {
      var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)
    
      defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
    } else {
      defaultEncoding = 'utf-8'
    }
    module.exports = defaultEncoding
    
    }).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"_process":388}],385:[function(require,module,exports){
    var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
    
    module.exports = function (iterations, keylen) {
      if (typeof iterations !== 'number') {
        throw new TypeError('Iterations not a number')
      }
    
      if (iterations < 0) {
        throw new TypeError('Bad iterations')
      }
    
      if (typeof keylen !== 'number') {
        throw new TypeError('Key length not a number')
      }
    
      if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
        throw new TypeError('Bad key length')
      }
    }
    
    },{}],386:[function(require,module,exports){
    var md5 = require('create-hash/md5')
    var RIPEMD160 = require('ripemd160')
    var sha = require('sha.js')
    var Buffer = require('safe-buffer').Buffer
    
    var checkParameters = require('./precondition')
    var defaultEncoding = require('./default-encoding')
    var toBuffer = require('./to-buffer')
    
    var ZEROS = Buffer.alloc(128)
    var sizes = {
      md5: 16,
      sha1: 20,
      sha224: 28,
      sha256: 32,
      sha384: 48,
      sha512: 64,
      rmd160: 20,
      ripemd160: 20
    }
    
    function Hmac (alg, key, saltLen) {
      var hash = getDigest(alg)
      var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64
    
      if (key.length > blocksize) {
        key = hash(key)
      } else if (key.length < blocksize) {
        key = Buffer.concat([key, ZEROS], blocksize)
      }
    
      var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
      var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36
        opad[i] = key[i] ^ 0x5C
      }
    
      var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
      ipad.copy(ipad1, 0, 0, blocksize)
      this.ipad1 = ipad1
      this.ipad2 = ipad
      this.opad = opad
      this.alg = alg
      this.blocksize = blocksize
      this.hash = hash
      this.size = sizes[alg]
    }
    
    Hmac.prototype.run = function (data, ipad) {
      data.copy(ipad, this.blocksize)
      var h = this.hash(ipad)
      h.copy(this.opad, this.blocksize)
      return this.hash(this.opad)
    }
    
    function getDigest (alg) {
      function shaFunc (data) {
        return sha(alg).update(data).digest()
      }
      function rmd160Func (data) {
        return new RIPEMD160().update(data).digest()
      }
    
      if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
      if (alg === 'md5') return md5
      return shaFunc
    }
    
    function pbkdf2 (password, salt, iterations, keylen, digest) {
      checkParameters(iterations, keylen)
      password = toBuffer(password, defaultEncoding, 'Password')
      salt = toBuffer(salt, defaultEncoding, 'Salt')
    
      digest = digest || 'sha1'
    
      var hmac = new Hmac(digest, password, salt.length)
    
      var DK = Buffer.allocUnsafe(keylen)
      var block1 = Buffer.allocUnsafe(salt.length + 4)
      salt.copy(block1, 0, 0, salt.length)
    
      var destPos = 0
      var hLen = sizes[digest]
      var l = Math.ceil(keylen / hLen)
    
      for (var i = 1; i <= l; i++) {
        block1.writeUInt32BE(i, salt.length)
    
        var T = hmac.run(block1, hmac.ipad1)
        var U = T
    
        for (var j = 1; j < iterations; j++) {
          U = hmac.run(U, hmac.ipad2)
          for (var k = 0; k < hLen; k++) T[k] ^= U[k]
        }
    
        T.copy(DK, destPos)
        destPos += hLen
      }
    
      return DK
    }
    
    module.exports = pbkdf2
    
    },{"./default-encoding":384,"./precondition":385,"./to-buffer":387,"create-hash/md5":306,"ripemd160":398,"safe-buffer":399,"sha.js":402}],387:[function(require,module,exports){
    var Buffer = require('safe-buffer').Buffer
    
    module.exports = function (thing, encoding, name) {
      if (Buffer.isBuffer(thing)) {
        return thing
      } else if (typeof thing === 'string') {
        return Buffer.from(thing, encoding)
      } else if (ArrayBuffer.isView(thing)) {
        return Buffer.from(thing.buffer)
      } else {
        throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView')
      }
    }
    
    },{"safe-buffer":399}],388:[function(require,module,exports){
    // shim for using process in browser
    var process = module.exports = {};
    
    // cached from whatever global is present so that test runners that stub it
    // don't break things.  But we need to wrap it in a try catch in case it is
    // wrapped in strict mode code which doesn't define any globals.  It's inside a
    // function because try/catches deoptimize in certain engines.
    
    var cachedSetTimeout;
    var cachedClearTimeout;
    
    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    (function () {
        try {
            if (typeof setTimeout === 'function') {
                cachedSetTimeout = setTimeout;
            } else {
                cachedSetTimeout = defaultSetTimout;
            }
        } catch (e) {
            cachedSetTimeout = defaultSetTimout;
        }
        try {
            if (typeof clearTimeout === 'function') {
                cachedClearTimeout = clearTimeout;
            } else {
                cachedClearTimeout = defaultClearTimeout;
            }
        } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
        }
    } ())
    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }
    
    
    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }
    
    
    
    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;
    
    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }
    
    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
    
        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }
    
    process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    };
    
    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues
    process.versions = {};
    
    function noop() {}
    
    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;
    
    process.listeners = function (name) { return [] }
    
    process.binding = function (name) {
        throw new Error('process.binding is not supported');
    };
    
    process.cwd = function () { return '/' };
    process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
    };
    process.umask = function() { return 0; };
    
    },{}],389:[function(require,module,exports){
    exports.publicEncrypt = require('./publicEncrypt')
    exports.privateDecrypt = require('./privateDecrypt')
    
    exports.privateEncrypt = function privateEncrypt (key, buf) {
      return exports.publicEncrypt(key, buf, true)
    }
    
    exports.publicDecrypt = function publicDecrypt (key, buf) {
      return exports.privateDecrypt(key, buf, true)
    }
    
    },{"./privateDecrypt":392,"./publicEncrypt":393}],390:[function(require,module,exports){
    var createHash = require('create-hash')
    var Buffer = require('safe-buffer').Buffer
    
    module.exports = function (seed, len) {
      var t = Buffer.alloc(0)
      var i = 0
      var c
      while (t.length < len) {
        c = i2ops(i++)
        t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
      }
      return t.slice(0, len)
    }
    
    function i2ops (c) {
      var out = Buffer.allocUnsafe(4)
      out.writeUInt32BE(c, 0)
      return out
    }
    
    },{"create-hash":305,"safe-buffer":399}],391:[function(require,module,exports){
    arguments[4][123][0].apply(exports,arguments)
    },{"buffer":257,"dup":123}],392:[function(require,module,exports){
    var parseKeys = require('parse-asn1')
    var mgf = require('./mgf')
    var xor = require('./xor')
    var BN = require('bn.js')
    var crt = require('browserify-rsa')
    var createHash = require('create-hash')
    var withPublic = require('./withPublic')
    var Buffer = require('safe-buffer').Buffer
    
    module.exports = function privateDecrypt (privateKey, enc, reverse) {
      var padding
      if (privateKey.padding) {
        padding = privateKey.padding
      } else if (reverse) {
        padding = 1
      } else {
        padding = 4
      }
    
      var key = parseKeys(privateKey)
      var k = key.modulus.byteLength()
      if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
        throw new Error('decryption error')
      }
      var msg
      if (reverse) {
        msg = withPublic(new BN(enc), key)
      } else {
        msg = crt(enc, key)
      }
      var zBuffer = Buffer.alloc(k - msg.length)
      msg = Buffer.concat([zBuffer, msg], k)
      if (padding === 4) {
        return oaep(key, msg)
      } else if (padding === 1) {
        return pkcs1(key, msg, reverse)
      } else if (padding === 3) {
        return msg
      } else {
        throw new Error('unknown padding')
      }
    }
    
    function oaep (key, msg) {
      var k = key.modulus.byteLength()
      var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
      var hLen = iHash.length
      if (msg[0] !== 0) {
        throw new Error('decryption error')
      }
      var maskedSeed = msg.slice(1, hLen + 1)
      var maskedDb = msg.slice(hLen + 1)
      var seed = xor(maskedSeed, mgf(maskedDb, hLen))
      var db = xor(maskedDb, mgf(seed, k - hLen - 1))
      if (compare(iHash, db.slice(0, hLen))) {
        throw new Error('decryption error')
      }
      var i = hLen
      while (db[i] === 0) {
        i++
      }
      if (db[i++] !== 1) {
        throw new Error('decryption error')
      }
      return db.slice(i)
    }
    
    function pkcs1 (key, msg, reverse) {
      var p1 = msg.slice(0, 2)
      var i = 2
      var status = 0
      while (msg[i++] !== 0) {
        if (i >= msg.length) {
          status++
          break
        }
      }
      var ps = msg.slice(2, i - 1)
    
      if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
        status++
      }
      if (ps.length < 8) {
        status++
      }
      if (status) {
        throw new Error('decryption error')
      }
      return msg.slice(i)
    }
    function compare (a, b) {
      a = Buffer.from(a)
      b = Buffer.from(b)
      var dif = 0
      var len = a.length
      if (a.length !== b.length) {
        dif++
        len = Math.min(a.length, b.length)
      }
      var i = -1
      while (++i < len) {
        dif += (a[i] ^ b[i])
      }
      return dif
    }
    
    },{"./mgf":390,"./withPublic":394,"./xor":395,"bn.js":391,"browserify-rsa":278,"create-hash":305,"parse-asn1":381,"safe-buffer":399}],393:[function(require,module,exports){
    var parseKeys = require('parse-asn1')
    var randomBytes = require('randombytes')
    var createHash = require('create-hash')
    var mgf = require('./mgf')
    var xor = require('./xor')
    var BN = require('bn.js')
    var withPublic = require('./withPublic')
    var crt = require('browserify-rsa')
    var Buffer = require('safe-buffer').Buffer
    
    module.exports = function publicEncrypt (publicKey, msg, reverse) {
      var padding
      if (publicKey.padding) {
        padding = publicKey.padding
      } else if (reverse) {
        padding = 1
      } else {
        padding = 4
      }
      var key = parseKeys(publicKey)
      var paddedMsg
      if (padding === 4) {
        paddedMsg = oaep(key, msg)
      } else if (padding === 1) {
        paddedMsg = pkcs1(key, msg, reverse)
      } else if (padding === 3) {
        paddedMsg = new BN(msg)
        if (paddedMsg.cmp(key.modulus) >= 0) {
          throw new Error('data too long for modulus')
        }
      } else {
        throw new Error('unknown padding')
      }
      if (reverse) {
        return crt(paddedMsg, key)
      } else {
        return withPublic(paddedMsg, key)
      }
    }
    
    function oaep (key, msg) {
      var k = key.modulus.byteLength()
      var mLen = msg.length
      var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
      var hLen = iHash.length
      var hLen2 = 2 * hLen
      if (mLen > k - hLen2 - 2) {
        throw new Error('message too long')
      }
      var ps = Buffer.alloc(k - mLen - hLen2 - 2)
      var dblen = k - hLen - 1
      var seed = randomBytes(hLen)
      var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
      var maskedSeed = xor(seed, mgf(maskedDb, hLen))
      return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
    }
    function pkcs1 (key, msg, reverse) {
      var mLen = msg.length
      var k = key.modulus.byteLength()
      if (mLen > k - 11) {
        throw new Error('message too long')
      }
      var ps
      if (reverse) {
        ps = Buffer.alloc(k - mLen - 3, 0xff)
      } else {
        ps = nonZero(k - mLen - 3)
      }
      return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
    }
    function nonZero (len) {
      var out = Buffer.allocUnsafe(len)
      var i = 0
      var cache = randomBytes(len * 2)
      var cur = 0
      var num
      while (i < len) {
        if (cur === cache.length) {
          cache = randomBytes(len * 2)
          cur = 0
        }
        num = cache[cur++]
        if (num) {
          out[i++] = num
        }
      }
      return out
    }
    
    },{"./mgf":390,"./withPublic":394,"./xor":395,"bn.js":391,"browserify-rsa":278,"create-hash":305,"parse-asn1":381,"randombytes":396,"safe-buffer":399}],394:[function(require,module,exports){
    var BN = require('bn.js')
    var Buffer = require('safe-buffer').Buffer
    
    function withPublic (paddedMsg, key) {
      return Buffer.from(paddedMsg
        .toRed(BN.mont(key.modulus))
        .redPow(new BN(key.publicExponent))
        .fromRed()
        .toArray())
    }
    
    module.exports = withPublic
    
    },{"bn.js":391,"safe-buffer":399}],395:[function(require,module,exports){
    module.exports = function xor (a, b) {
      var len = a.length
      var i = -1
      while (++i < len) {
        a[i] ^= b[i]
      }
      return a
    }
    
    },{}],396:[function(require,module,exports){
    arguments[4][197][0].apply(exports,arguments)
    },{"_process":388,"dup":197,"safe-buffer":399}],397:[function(require,module,exports){
    (function (process,global){(function (){
    'use strict'
    
    function oldBrowser () {
      throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
    }
    var safeBuffer = require('safe-buffer')
    var randombytes = require('randombytes')
    var Buffer = safeBuffer.Buffer
    var kBufferMaxLength = safeBuffer.kMaxLength
    var crypto = global.crypto || global.msCrypto
    var kMaxUint32 = Math.pow(2, 32) - 1
    function assertOffset (offset, length) {
      if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
        throw new TypeError('offset must be a number')
      }
    
      if (offset > kMaxUint32 || offset < 0) {
        throw new TypeError('offset must be a uint32')
      }
    
      if (offset > kBufferMaxLength || offset > length) {
        throw new RangeError('offset out of range')
      }
    }
    
    function assertSize (size, offset, length) {
      if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
        throw new TypeError('size must be a number')
      }
    
      if (size > kMaxUint32 || size < 0) {
        throw new TypeError('size must be a uint32')
      }
    
      if (size + offset > length || size > kBufferMaxLength) {
        throw new RangeError('buffer too small')
      }
    }
    if ((crypto && crypto.getRandomValues) || !process.browser) {
      exports.randomFill = randomFill
      exports.randomFillSync = randomFillSync
    } else {
      exports.randomFill = oldBrowser
      exports.randomFillSync = oldBrowser
    }
    function randomFill (buf, offset, size, cb) {
      if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
      }
    
      if (typeof offset === 'function') {
        cb = offset
        offset = 0
        size = buf.length
      } else if (typeof size === 'function') {
        cb = size
        size = buf.length - offset
      } else if (typeof cb !== 'function') {
        throw new TypeError('"cb" argument must be a function')
      }
      assertOffset(offset, buf.length)
      assertSize(size, offset, buf.length)
      return actualFill(buf, offset, size, cb)
    }
    
    function actualFill (buf, offset, size, cb) {
      if (process.browser) {
        var ourBuf = buf.buffer
        var uint = new Uint8Array(ourBuf, offset, size)
        crypto.getRandomValues(uint)
        if (cb) {
          process.nextTick(function () {
            cb(null, buf)
          })
          return
        }
        return buf
      }
      if (cb) {
        randombytes(size, function (err, bytes) {
          if (err) {
            return cb(err)
          }
          bytes.copy(buf, offset)
          cb(null, buf)
        })
        return
      }
      var bytes = randombytes(size)
      bytes.copy(buf, offset)
      return buf
    }
    function randomFillSync (buf, offset, size) {
      if (typeof offset === 'undefined') {
        offset = 0
      }
      if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
      }
    
      assertOffset(offset, buf.length)
    
      if (size === undefined) size = buf.length - offset
    
      assertSize(size, offset, buf.length)
    
      return actualFill(buf, offset, size)
    }
    
    }).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"_process":388,"randombytes":396,"safe-buffer":399}],398:[function(require,module,exports){
    arguments[4][213][0].apply(exports,arguments)
    },{"buffer":301,"dup":213,"hash-base":340,"inherits":370}],399:[function(require,module,exports){
    arguments[4][216][0].apply(exports,arguments)
    },{"buffer":301,"dup":216}],400:[function(require,module,exports){
    (function (process){(function (){
    /* eslint-disable node/no-deprecated-api */
    
    'use strict'
    
    var buffer = require('buffer')
    var Buffer = buffer.Buffer
    
    var safer = {}
    
    var key
    
    for (key in buffer) {
      if (!buffer.hasOwnProperty(key)) continue
      if (key === 'SlowBuffer' || key === 'Buffer') continue
      safer[key] = buffer[key]
    }
    
    var Safer = safer.Buffer = {}
    for (key in Buffer) {
      if (!Buffer.hasOwnProperty(key)) continue
      if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue
      Safer[key] = Buffer[key]
    }
    
    safer.Buffer.prototype = Buffer.prototype
    
    if (!Safer.from || Safer.from === Uint8Array.from) {
      Safer.from = function (value, encodingOrOffset, length) {
        if (typeof value === 'number') {
          throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
        }
        if (value && typeof value.length === 'undefined') {
          throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
        }
        return Buffer(value, encodingOrOffset, length)
      }
    }
    
    if (!Safer.alloc) {
      Safer.alloc = function (size, fill, encoding) {
        if (typeof size !== 'number') {
          throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
        }
        if (size < 0 || size >= 2 * (1 << 30)) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"')
        }
        var buf = Buffer(size)
        if (!fill || fill.length === 0) {
          buf.fill(0)
        } else if (typeof encoding === 'string') {
          buf.fill(fill, encoding)
        } else {
          buf.fill(fill)
        }
        return buf
      }
    }
    
    if (!safer.kStringMaxLength) {
      try {
        safer.kStringMaxLength = process.binding('buffer').kStringMaxLength
      } catch (e) {
        // we can't determine kStringMaxLength in environments where process.binding
        // is unsupported, so let's not set it
      }
    }
    
    if (!safer.constants) {
      safer.constants = {
        MAX_LENGTH: safer.kMaxLength
      }
      if (safer.kStringMaxLength) {
        safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength
      }
    }
    
    module.exports = safer
    
    }).call(this)}).call(this,require('_process'))
    },{"_process":388,"buffer":301}],401:[function(require,module,exports){
    arguments[4][221][0].apply(exports,arguments)
    },{"dup":221,"safe-buffer":399}],402:[function(require,module,exports){
    arguments[4][222][0].apply(exports,arguments)
    },{"./sha":403,"./sha1":404,"./sha224":405,"./sha256":406,"./sha384":407,"./sha512":408,"dup":222}],403:[function(require,module,exports){
    arguments[4][223][0].apply(exports,arguments)
    },{"./hash":401,"dup":223,"inherits":370,"safe-buffer":399}],404:[function(require,module,exports){
    arguments[4][224][0].apply(exports,arguments)
    },{"./hash":401,"dup":224,"inherits":370,"safe-buffer":399}],405:[function(require,module,exports){
    arguments[4][225][0].apply(exports,arguments)
    },{"./hash":401,"./sha256":406,"dup":225,"inherits":370,"safe-buffer":399}],406:[function(require,module,exports){
    arguments[4][226][0].apply(exports,arguments)
    },{"./hash":401,"dup":226,"inherits":370,"safe-buffer":399}],407:[function(require,module,exports){
    arguments[4][227][0].apply(exports,arguments)
    },{"./hash":401,"./sha512":408,"dup":227,"inherits":370,"safe-buffer":399}],408:[function(require,module,exports){
    arguments[4][228][0].apply(exports,arguments)
    },{"./hash":401,"dup":228,"inherits":370,"safe-buffer":399}],409:[function(require,module,exports){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    module.exports = Stream;
    
    var EE = require('events').EventEmitter;
    var inherits = require('inherits');
    
    inherits(Stream, EE);
    Stream.Readable = require('readable-stream/lib/_stream_readable.js');
    Stream.Writable = require('readable-stream/lib/_stream_writable.js');
    Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
    Stream.Transform = require('readable-stream/lib/_stream_transform.js');
    Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
    Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')
    Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')
    
    // Backwards-compat with node 0.4.x
    Stream.Stream = Stream;
    
    
    
    // old-style streams.  Note that the pipe method (the only relevant
    // part of this class) is overridden in the Readable class.
    
    function Stream() {
      EE.call(this);
    }
    
    Stream.prototype.pipe = function(dest, options) {
      var source = this;
    
      function ondata(chunk) {
        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause();
          }
        }
      }
    
      source.on('data', ondata);
    
      function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }
    
      dest.on('drain', ondrain);
    
      // If the 'end' option is not supplied, dest.end() will be called when
      // source gets the 'end' or 'close' events.  Only dest.end() once.
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
      }
    
      var didOnEnd = false;
      function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
    
        dest.end();
      }
    
    
      function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
    
        if (typeof dest.destroy === 'function') dest.destroy();
      }
    
      // don't leave dangling pipes when there are errors.
      function onerror(er) {
        cleanup();
        if (EE.listenerCount(this, 'error') === 0) {
          throw er; // Unhandled stream error in pipe.
        }
      }
    
      source.on('error', onerror);
      dest.on('error', onerror);
    
      // remove all the event listeners that were added.
      function cleanup() {
        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);
    
        source.removeListener('end', onend);
        source.removeListener('close', onclose);
    
        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);
    
        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);
    
        dest.removeListener('close', cleanup);
      }
    
      source.on('end', cleanup);
      source.on('close', cleanup);
    
      dest.on('close', cleanup);
    
      dest.emit('pipe', source);
    
      // Allow for unix-like usage: A.pipe(B).pipe(C)
      return dest;
    };
    
    },{"events":338,"inherits":370,"readable-stream/lib/_stream_duplex.js":411,"readable-stream/lib/_stream_passthrough.js":412,"readable-stream/lib/_stream_readable.js":413,"readable-stream/lib/_stream_transform.js":414,"readable-stream/lib/_stream_writable.js":415,"readable-stream/lib/internal/streams/end-of-stream.js":419,"readable-stream/lib/internal/streams/pipeline.js":421}],410:[function(require,module,exports){
    arguments[4][198][0].apply(exports,arguments)
    },{"dup":198}],411:[function(require,module,exports){
    arguments[4][199][0].apply(exports,arguments)
    },{"./_stream_readable":413,"./_stream_writable":415,"_process":388,"dup":199,"inherits":370}],412:[function(require,module,exports){
    arguments[4][200][0].apply(exports,arguments)
    },{"./_stream_transform":414,"dup":200,"inherits":370}],413:[function(require,module,exports){
    arguments[4][201][0].apply(exports,arguments)
    },{"../errors":410,"./_stream_duplex":411,"./internal/streams/async_iterator":416,"./internal/streams/buffer_list":417,"./internal/streams/destroy":418,"./internal/streams/from":420,"./internal/streams/state":422,"./internal/streams/stream":423,"_process":388,"buffer":301,"dup":201,"events":338,"inherits":370,"string_decoder/":424,"util":257}],414:[function(require,module,exports){
    arguments[4][202][0].apply(exports,arguments)
    },{"../errors":410,"./_stream_duplex":411,"dup":202,"inherits":370}],415:[function(require,module,exports){
    arguments[4][203][0].apply(exports,arguments)
    },{"../errors":410,"./_stream_duplex":411,"./internal/streams/destroy":418,"./internal/streams/state":422,"./internal/streams/stream":423,"_process":388,"buffer":301,"dup":203,"inherits":370,"util-deprecate":426}],416:[function(require,module,exports){
    arguments[4][204][0].apply(exports,arguments)
    },{"./end-of-stream":419,"_process":388,"dup":204}],417:[function(require,module,exports){
    arguments[4][205][0].apply(exports,arguments)
    },{"buffer":301,"dup":205,"util":257}],418:[function(require,module,exports){
    arguments[4][206][0].apply(exports,arguments)
    },{"_process":388,"dup":206}],419:[function(require,module,exports){
    arguments[4][207][0].apply(exports,arguments)
    },{"../../../errors":410,"dup":207}],420:[function(require,module,exports){
    arguments[4][208][0].apply(exports,arguments)
    },{"dup":208}],421:[function(require,module,exports){
    arguments[4][209][0].apply(exports,arguments)
    },{"../../../errors":410,"./end-of-stream":419,"dup":209}],422:[function(require,module,exports){
    arguments[4][210][0].apply(exports,arguments)
    },{"../../../errors":410,"dup":210}],423:[function(require,module,exports){
    arguments[4][211][0].apply(exports,arguments)
    },{"dup":211,"events":338}],424:[function(require,module,exports){
    arguments[4][229][0].apply(exports,arguments)
    },{"dup":229,"safe-buffer":399}],425:[function(require,module,exports){
    (function (setImmediate,clearImmediate){(function (){
    var nextTick = require('process/browser.js').nextTick;
    var apply = Function.prototype.apply;
    var slice = Array.prototype.slice;
    var immediateIds = {};
    var nextImmediateId = 0;
    
    // DOM APIs, for completeness
    
    exports.setTimeout = function() {
      return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
    };
    exports.setInterval = function() {
      return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
    };
    exports.clearTimeout =
    exports.clearInterval = function(timeout) { timeout.close(); };
    
    function Timeout(id, clearFn) {
      this._id = id;
      this._clearFn = clearFn;
    }
    Timeout.prototype.unref = Timeout.prototype.ref = function() {};
    Timeout.prototype.close = function() {
      this._clearFn.call(window, this._id);
    };
    
    // Does not start the time, just sets up the members needed.
    exports.enroll = function(item, msecs) {
      clearTimeout(item._idleTimeoutId);
      item._idleTimeout = msecs;
    };
    
    exports.unenroll = function(item) {
      clearTimeout(item._idleTimeoutId);
      item._idleTimeout = -1;
    };
    
    exports._unrefActive = exports.active = function(item) {
      clearTimeout(item._idleTimeoutId);
    
      var msecs = item._idleTimeout;
      if (msecs >= 0) {
        item._idleTimeoutId = setTimeout(function onTimeout() {
          if (item._onTimeout)
            item._onTimeout();
        }, msecs);
      }
    };
    
    // That's not how node.js implements it but the exposed api is the same.
    exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
      var id = nextImmediateId++;
      var args = arguments.length < 2 ? false : slice.call(arguments, 1);
    
      immediateIds[id] = true;
    
      nextTick(function onNextTick() {
        if (immediateIds[id]) {
          // fn.call() is faster so we optimize for the common use-case
          // @see http://jsperf.com/call-apply-segu
          if (args) {
            fn.apply(null, args);
          } else {
            fn.call(null);
          }
          // Prevent ids from leaking
          exports.clearImmediate(id);
        }
      });
    
      return id;
    };
    
    exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
      delete immediateIds[id];
    };
    }).call(this)}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
    },{"process/browser.js":388,"timers":425}],426:[function(require,module,exports){
    arguments[4][233][0].apply(exports,arguments)
    },{"dup":233}]},{},[234]);